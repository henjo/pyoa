
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject* self = (PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum* p=new pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum* p=new pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_tp_dealloc(PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum value;
    int convert_status=PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[76];
    sprintf(buffer,"<oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum v1;
    PyParamoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum*) ((PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_FromoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject* self = (PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPostCreate(oaTrackPattern* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaTrackPattern_FromoaTrackPattern(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPostModify(oaTrackPattern* p1,oaTrackPatternModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaTrackPattern_FromoaTrackPattern(p1));
    PyTuple_SetItem(args,1,PyoaTrackPatternModTypeEnum_FromoaTrackPatternModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPreDestroy(oaTrackPattern* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaTrackPattern_FromoaTrackPattern(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPreModify(oaTrackPattern* p1,oaTrackPatternModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaTrackPattern_FromoaTrackPattern(p1));
    PyTuple_SetItem(args,1,PyoaTrackPatternModTypeEnum_FromoaTrackPatternModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaTrackPattern)\n"
"    Calls: virtual void onPostCreate(oaTrackPattern* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaTrackPattern,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum data;
    int convert_status=PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject* self=(PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject*)ob;

    PyParamoaTrackPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTrackPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaTrackPattern,oaTrackPatternModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaTrackPattern* object,oaTrackPatternModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaTrackPattern,simple-oaTrackPatternModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum data;
    int convert_status=PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject* self=(PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject*)ob;

    PyParamoaTrackPattern p1;
    PyParamoaTrackPatternModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTrackPattern_Convert,&p1,
          &PyoaTrackPatternModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaTrackPattern)\n"
"    Calls: virtual void onPreDestroy(oaTrackPattern* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaTrackPattern,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum data;
    int convert_status=PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject* self=(PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject*)ob;

    PyParamoaTrackPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTrackPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaTrackPattern,oaTrackPatternModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaTrackPattern* object,oaTrackPatternModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaTrackPattern,simple-oaTrackPatternModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum data;
    int convert_status=PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject* self=(PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject*)ob;

    PyParamoaTrackPattern p1;
    PyParamoaTrackPatternModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTrackPattern_Convert,&p1,
          &PyoaTrackPatternModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum data;
  int convert_status=PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum",
    sizeof(PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaTrackPattern)\n"
"    Calls: void notifyPostCreateObservers(oaTrackPattern* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaTrackPattern,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTrackPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaTrackPattern,oaTrackPatternModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaTrackPattern* object,oaTrackPatternModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaTrackPattern,simple-oaTrackPatternModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern p1;
    PyParamoaTrackPatternModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTrackPattern_Convert,&p1,
          &PyoaTrackPatternModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaTrackPattern)\n"
"    Calls: void notifyPreDestroyObservers(oaTrackPattern* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaTrackPattern,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTrackPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaTrackPattern,oaTrackPatternModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaTrackPattern* object,oaTrackPatternModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaTrackPattern,simple-oaTrackPatternModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern p1;
    PyParamoaTrackPatternModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTrackPattern_Convert,&p1,
          &PyoaTrackPatternModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_FromoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPostCreate(oaUInt8RangeValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaUInt8RangeValue_FromoaUInt8RangeValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPostModify(oaUInt8RangeValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaUInt8RangeValue_FromoaUInt8RangeValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPreDestroy(oaUInt8RangeValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaUInt8RangeValue_FromoaUInt8RangeValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPreModify(oaUInt8RangeValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaUInt8RangeValue_FromoaUInt8RangeValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaUInt8RangeValue)\n"
"    Calls: virtual void onPostCreate(oaUInt8RangeValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaUInt8RangeValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject*)ob;

    PyParamoaUInt8RangeValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8RangeValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaUInt8RangeValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaUInt8RangeValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaUInt8RangeValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject*)ob;

    PyParamoaUInt8RangeValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt8RangeValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaUInt8RangeValue)\n"
"    Calls: virtual void onPreDestroy(oaUInt8RangeValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaUInt8RangeValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject*)ob;

    PyParamoaUInt8RangeValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8RangeValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaUInt8RangeValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaUInt8RangeValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaUInt8RangeValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject*)ob;

    PyParamoaUInt8RangeValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt8RangeValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaUInt8RangeValue)\n"
"    Calls: void notifyPostCreateObservers(oaUInt8RangeValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaUInt8RangeValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8RangeValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8RangeValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaUInt8RangeValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaUInt8RangeValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaUInt8RangeValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8RangeValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt8RangeValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaUInt8RangeValue)\n"
"    Calls: void notifyPreDestroyObservers(oaUInt8RangeValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaUInt8RangeValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8RangeValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8RangeValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaUInt8RangeValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaUInt8RangeValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaUInt8RangeValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8RangeValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt8RangeValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaUInt8Value_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaUInt8Value_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaUInt8Value_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaUInt8Value_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[67];
    sprintf(buffer,"<oaStdObserver_oaUInt8Value_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaUInt8Value_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaUInt8Value_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaUInt8Value_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaUInt8Value_oaValueModTypeEnum*) ((PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_FromoaStdObserver_oaUInt8Value_oaValueModTypeEnum(oaStdObserver_oaUInt8Value_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum::pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaUInt8Value_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum::pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaUInt8Value_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPostCreate(oaUInt8Value* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaUInt8Value_FromoaUInt8Value(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPostModify(oaUInt8Value* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaUInt8Value_FromoaUInt8Value(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPreDestroy(oaUInt8Value* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaUInt8Value_FromoaUInt8Value(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPreModify(oaUInt8Value* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaUInt8Value_FromoaUInt8Value(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaUInt8Value)\n"
"    Calls: virtual void onPostCreate(oaUInt8Value* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaUInt8Value,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaUInt8Value_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject*)ob;

    PyParamoaUInt8Value p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8Value_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaUInt8Value,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaUInt8Value* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaUInt8Value,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaUInt8Value_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject*)ob;

    PyParamoaUInt8Value p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt8Value_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaUInt8Value)\n"
"    Calls: virtual void onPreDestroy(oaUInt8Value* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaUInt8Value,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaUInt8Value_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject*)ob;

    PyParamoaUInt8Value p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8Value_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaUInt8Value,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaUInt8Value* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaUInt8Value,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaUInt8Value_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject*)ob;

    PyParamoaUInt8Value p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt8Value_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaUInt8Value_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaUInt8Value_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaUInt8Value_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaUInt8Value_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaUInt8Value_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaUInt8Value_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaUInt8Value_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaUInt8Value_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaUInt8Value_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaUInt8Value_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaUInt8Value_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaUInt8Value_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaUInt8Value_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaUInt8Value_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaUInt8Value_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaUInt8Value_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaUInt8Value)\n"
"    Calls: void notifyPostCreateObservers(oaUInt8Value* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaUInt8Value,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8Value p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8Value_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaUInt8Value_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaUInt8Value,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaUInt8Value* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaUInt8Value,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8Value p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt8Value_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaUInt8Value_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaUInt8Value)\n"
"    Calls: void notifyPreDestroyObservers(oaUInt8Value* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaUInt8Value,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8Value p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8Value_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaUInt8Value_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaUInt8Value_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaUInt8Value,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaUInt8Value* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaUInt8Value,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8Value p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt8Value_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaUInt8Value_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaUInt8Value_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaUInt8Value_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaUInt8Value_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaUInt8Value_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaUInt8Value_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaUInt8Value_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaValueArrayValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaValueArrayValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaValueArrayValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaValueArrayValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaValueArrayValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaValueArrayValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaValueArrayValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaValueArrayValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_FromoaStdObserver_oaValueArrayValue_oaValueModTypeEnum(oaStdObserver_oaValueArrayValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaValueArrayValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaValueArrayValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPostCreate(oaValueArrayValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaValueArrayValue_FromoaValueArrayValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPostModify(oaValueArrayValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaValueArrayValue_FromoaValueArrayValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPreDestroy(oaValueArrayValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaValueArrayValue_FromoaValueArrayValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPreModify(oaValueArrayValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaValueArrayValue_FromoaValueArrayValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaValueArrayValue)\n"
"    Calls: virtual void onPostCreate(oaValueArrayValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaValueArrayValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaValueArrayValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject*)ob;

    PyParamoaValueArrayValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValueArrayValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaValueArrayValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaValueArrayValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaValueArrayValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaValueArrayValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject*)ob;

    PyParamoaValueArrayValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValueArrayValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaValueArrayValue)\n"
"    Calls: virtual void onPreDestroy(oaValueArrayValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaValueArrayValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaValueArrayValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject*)ob;

    PyParamoaValueArrayValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValueArrayValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaValueArrayValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaValueArrayValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaValueArrayValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaValueArrayValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject*)ob;

    PyParamoaValueArrayValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValueArrayValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaValueArrayValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaValueArrayValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaValueArrayValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaValueArrayValue)\n"
"    Calls: void notifyPostCreateObservers(oaValueArrayValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaValueArrayValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValueArrayValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValueArrayValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaValueArrayValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaValueArrayValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaValueArrayValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValueArrayValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValueArrayValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaValueArrayValue)\n"
"    Calls: void notifyPreDestroyObservers(oaValueArrayValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaValueArrayValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValueArrayValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValueArrayValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaValueArrayValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaValueArrayValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaValueArrayValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValueArrayValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValueArrayValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaValueArrayValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaValueArrayValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaValueArrayValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaValueArrayValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[62];
    sprintf(buffer,"<oaStdObserver_oaValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaValue_oaValueModTypeEnum_FromoaStdObserver_oaValue_oaValueModTypeEnum(oaStdObserver_oaValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaValue_oaValueModTypeEnum::pyv_oaStdObserver_oaValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaValue_oaValueModTypeEnum::pyv_oaStdObserver_oaValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaValue_oaValueModTypeEnum::onPostCreate(oaValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaValue_FromoaValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaValue_oaValueModTypeEnum::onPostModify(oaValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaValue_FromoaValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaValue_oaValueModTypeEnum::onPreDestroy(oaValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaValue_FromoaValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaValue_oaValueModTypeEnum::onPreModify(oaValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaValue_FromoaValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaValue)\n"
"    Calls: virtual void onPostCreate(oaValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaValue_oaValueModTypeEnumObject*)ob;

    PyParamoaValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaValue_oaValueModTypeEnumObject*)ob;

    PyParamoaValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaValue)\n"
"    Calls: virtual void onPreDestroy(oaValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaValue_oaValueModTypeEnumObject*)ob;

    PyParamoaValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaValue_oaValueModTypeEnumObject*)ob;

    PyParamoaValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaValue)\n"
"    Calls: void notifyPostCreateObservers(oaValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaValue)\n"
"    Calls: void notifyPreDestroyObservers(oaValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaVectorInstBit_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaVectorInstBit_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaVectorInstBit_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaVectorInstBit_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaVectorInstBit_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaVectorInstBit_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaVectorInstBit_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaVectorInstBit_oaInstModTypeEnum*) ((PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_FromoaStdObserver_oaVectorInstBit_oaInstModTypeEnum(oaStdObserver_oaVectorInstBit_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaVectorInstBit_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaVectorInstBit_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPostCreate(oaVectorInstBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaVectorInstBit_FromoaVectorInstBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPostModify(oaVectorInstBit* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaVectorInstBit_FromoaVectorInstBit(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPreDestroy(oaVectorInstBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaVectorInstBit_FromoaVectorInstBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPreModify(oaVectorInstBit* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaVectorInstBit_FromoaVectorInstBit(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaVectorInstBit)\n"
"    Calls: virtual void onPostCreate(oaVectorInstBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaVectorInstBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaVectorInstBit,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaVectorInstBit)\n"
"    Calls: virtual void onPreDestroy(oaVectorInstBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaVectorInstBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaVectorInstBit,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaVectorInstBit_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaVectorInstBit_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaVectorInstBit_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaVectorInstBit)\n"
"    Calls: void notifyPostCreateObservers(oaVectorInstBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaVectorInstBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaVectorInstBit,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaVectorInstBit)\n"
"    Calls: void notifyPreDestroyObservers(oaVectorInstBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaVectorInstBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaVectorInstBit,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInstBit_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaVectorInstBit_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaVectorInstBit_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaVectorInstBit_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject* self = (PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum* p=new pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum* p=new pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[78];
    sprintf(buffer,"<oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum v1;
    PyParamoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum*) ((PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_FromoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject* self = (PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate(oaVectorInstDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaVectorInstDef_FromoaVectorInstDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify(oaVectorInstDef* p1,oaVectorInstDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaVectorInstDef_FromoaVectorInstDef(p1));
    PyTuple_SetItem(args,1,PyoaVectorInstDefModTypeEnum_FromoaVectorInstDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy(oaVectorInstDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaVectorInstDef_FromoaVectorInstDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify(oaVectorInstDef* p1,oaVectorInstDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaVectorInstDef_FromoaVectorInstDef(p1));
    PyTuple_SetItem(args,1,PyoaVectorInstDefModTypeEnum_FromoaVectorInstDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaVectorInstDef)\n"
"    Calls: virtual void onPostCreate(oaVectorInstDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaVectorInstDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaVectorInstDef)\n"
"    Calls: virtual void onPreDestroy(oaVectorInstDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaVectorInstDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum",
    sizeof(PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaVectorInstDef)\n"
"    Calls: void notifyPostCreateObservers(oaVectorInstDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaVectorInstDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaVectorInstDef)\n"
"    Calls: void notifyPreDestroyObservers(oaVectorInstDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaVectorInstDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaVectorInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaVectorInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaVectorInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaVectorInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaVectorInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaVectorInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaVectorInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaVectorInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaVectorInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaVectorInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaVectorInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaVectorInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_FromoaStdObserver_oaVectorInst_oaInstModTypeEnum(oaStdObserver_oaVectorInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum::pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaVectorInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum::pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaVectorInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPostCreate(oaVectorInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaVectorInst_FromoaVectorInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPostModify(oaVectorInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaVectorInst_FromoaVectorInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPreDestroy(oaVectorInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaVectorInst_FromoaVectorInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPreModify(oaVectorInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaVectorInst_FromoaVectorInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaVectorInst)\n"
"    Calls: virtual void onPostCreate(oaVectorInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaVectorInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaVectorInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaVectorInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaVectorInst)\n"
"    Calls: virtual void onPreDestroy(oaVectorInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaVectorInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaVectorInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaVectorInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVectorInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaVectorInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaVectorInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaVectorInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaVectorInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaVectorInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaVectorInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaVectorInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaVectorInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaVectorInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaVectorInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaVectorInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaVectorInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaVectorInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaVectorInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaVectorInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaVectorInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaVectorInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaVectorInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaVectorInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaVectorInst)\n"
"    Calls: void notifyPostCreateObservers(oaVectorInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaVectorInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaVectorInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaVectorInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaVectorInst)\n"
"    Calls: void notifyPreDestroyObservers(oaVectorInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaVectorInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaVectorInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaVectorInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaVectorInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVectorInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaVectorInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaVectorInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaVectorInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaVectorInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaVectorInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject* self = (PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaViaDef_oaViaDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum* p=new pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaViaDef_oaViaDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum* p=new pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaViaDef_oaViaDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaViaDef_oaViaDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaViaDef_oaViaDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaViaDef_oaViaDefModTypeEnum v1;
    PyParamoaStdObserver_oaViaDef_oaViaDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaViaDef_oaViaDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaViaDef_oaViaDefModTypeEnum*) ((PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_FromoaStdObserver_oaViaDef_oaViaDefModTypeEnum(oaStdObserver_oaViaDef_oaViaDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject* self = (PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum::pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaViaDef_oaViaDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum::pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaViaDef_oaViaDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPostCreate(oaViaDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaViaDef_FromoaViaDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPostModify(oaViaDef* p1,oaViaDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaViaDef_FromoaViaDef(p1));
    PyTuple_SetItem(args,1,PyoaViaDefModTypeEnum_FromoaViaDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPreDestroy(oaViaDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaViaDef_FromoaViaDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPreModify(oaViaDef* p1,oaViaDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaViaDef_FromoaViaDef(p1));
    PyTuple_SetItem(args,1,PyoaViaDefModTypeEnum_FromoaViaDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaViaDef)\n"
"    Calls: virtual void onPostCreate(oaViaDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaViaDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaDef_oaViaDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject* self=(PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject*)ob;

    PyParamoaViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaViaDef,oaViaDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaViaDef* object,oaViaDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaViaDef,simple-oaViaDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaDef_oaViaDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject* self=(PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject*)ob;

    PyParamoaViaDef p1;
    PyParamoaViaDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaDef_Convert,&p1,
          &PyoaViaDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaViaDef)\n"
"    Calls: virtual void onPreDestroy(oaViaDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaViaDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaDef_oaViaDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject* self=(PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject*)ob;

    PyParamoaViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaViaDef,oaViaDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaViaDef* object,oaViaDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaViaDef,simple-oaViaDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaDef_oaViaDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject* self=(PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject*)ob;

    PyParamoaViaDef p1;
    PyParamoaViaDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaDef_Convert,&p1,
          &PyoaViaDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaDef_oaViaDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaViaDef_oaViaDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaViaDef_oaViaDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaViaDef_oaViaDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaViaDef_oaViaDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaViaDef_oaViaDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaViaDef_oaViaDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaViaDef_oaViaDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaViaDef_oaViaDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaViaDef_oaViaDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaViaDef_oaViaDefModTypeEnum",
    sizeof(PyoaStdObserver_oaViaDef_oaViaDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaViaDef_oaViaDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaViaDef_oaViaDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaViaDef_oaViaDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaViaDef_oaViaDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaViaDef)\n"
"    Calls: void notifyPostCreateObservers(oaViaDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaViaDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaDef_oaViaDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaViaDef,oaViaDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaViaDef* object,oaViaDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaViaDef,simple-oaViaDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaDef p1;
    PyParamoaViaDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaDef_Convert,&p1,
          &PyoaViaDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaDef_oaViaDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaViaDef)\n"
"    Calls: void notifyPreDestroyObservers(oaViaDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaViaDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaDef_oaViaDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaViaDef_oaViaDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaViaDef,oaViaDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaViaDef* object,oaViaDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaViaDef,simple-oaViaDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaDef p1;
    PyParamoaViaDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaDef_Convert,&p1,
          &PyoaViaDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaDef_oaViaDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaViaDef_oaViaDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaViaDef_oaViaDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaViaDef_oaViaDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaViaDef_oaViaDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaViaDef_oaViaDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaViaDef_oaViaDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject* self = (PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum* p=new pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum* p=new pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_tp_dealloc(PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum value;
    int convert_status=PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum v1;
    PyParamoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum*) ((PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_FromoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject* self = (PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPostCreate(oaViaHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaViaHeader_FromoaViaHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPostModify(oaViaHeader* p1,oaViaHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaViaHeader_FromoaViaHeader(p1));
    PyTuple_SetItem(args,1,PyoaViaHeaderModTypeEnum_FromoaViaHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPreDestroy(oaViaHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaViaHeader_FromoaViaHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPreModify(oaViaHeader* p1,oaViaHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaViaHeader_FromoaViaHeader(p1));
    PyTuple_SetItem(args,1,PyoaViaHeaderModTypeEnum_FromoaViaHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaViaHeader)\n"
"    Calls: virtual void onPostCreate(oaViaHeader* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaViaHeader,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject* self=(PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject*)ob;

    PyParamoaViaHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaViaHeader,oaViaHeaderModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaViaHeader* object,oaViaHeaderModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaViaHeader,simple-oaViaHeaderModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject* self=(PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject*)ob;

    PyParamoaViaHeader p1;
    PyParamoaViaHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaHeader_Convert,&p1,
          &PyoaViaHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaViaHeader)\n"
"    Calls: virtual void onPreDestroy(oaViaHeader* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaViaHeader,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject* self=(PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject*)ob;

    PyParamoaViaHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaViaHeader,oaViaHeaderModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaViaHeader* object,oaViaHeaderModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaViaHeader,simple-oaViaHeaderModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject* self=(PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject*)ob;

    PyParamoaViaHeader p1;
    PyParamoaViaHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaHeader_Convert,&p1,
          &PyoaViaHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum data;
  int convert_status=PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum",
    sizeof(PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaViaHeader)\n"
"    Calls: void notifyPostCreateObservers(oaViaHeader* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaViaHeader,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaViaHeader,oaViaHeaderModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaViaHeader* object,oaViaHeaderModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaViaHeader,simple-oaViaHeaderModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaHeader p1;
    PyParamoaViaHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaHeader_Convert,&p1,
          &PyoaViaHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaViaHeader)\n"
"    Calls: void notifyPreDestroyObservers(oaViaHeader* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaViaHeader,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaViaHeader,oaViaHeaderModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaViaHeader* object,oaViaHeaderModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaViaHeader,simple-oaViaHeaderModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaHeader p1;
    PyParamoaViaHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaHeader_Convert,&p1,
          &PyoaViaHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject* self = (PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum* p=new pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum* p=new pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_tp_dealloc(PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum value;
    int convert_status=PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum v1;
    PyParamoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum*) ((PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_FromoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject* self = (PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPostCreate(oaViaSpec* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaViaSpec_FromoaViaSpec(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPostModify(oaViaSpec* p1,oaViaSpecModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaViaSpec_FromoaViaSpec(p1));
    PyTuple_SetItem(args,1,PyoaViaSpecModTypeEnum_FromoaViaSpecModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPreDestroy(oaViaSpec* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaViaSpec_FromoaViaSpec(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPreModify(oaViaSpec* p1,oaViaSpecModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaViaSpec_FromoaViaSpec(p1));
    PyTuple_SetItem(args,1,PyoaViaSpecModTypeEnum_FromoaViaSpecModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaViaSpec)\n"
"    Calls: virtual void onPostCreate(oaViaSpec* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaViaSpec,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject* self=(PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject*)ob;

    PyParamoaViaSpec p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaSpec_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaViaSpec,oaViaSpecModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaViaSpec* object,oaViaSpecModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaViaSpec,simple-oaViaSpecModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject* self=(PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject*)ob;

    PyParamoaViaSpec p1;
    PyParamoaViaSpecModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaSpec_Convert,&p1,
          &PyoaViaSpecModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaViaSpec)\n"
"    Calls: virtual void onPreDestroy(oaViaSpec* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaViaSpec,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject* self=(PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject*)ob;

    PyParamoaViaSpec p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaSpec_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaViaSpec,oaViaSpecModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaViaSpec* object,oaViaSpecModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaViaSpec,simple-oaViaSpecModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum data;
    int convert_status=PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject* self=(PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject*)ob;

    PyParamoaViaSpec p1;
    PyParamoaViaSpecModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaSpec_Convert,&p1,
          &PyoaViaSpecModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum data;
  int convert_status=PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum",
    sizeof(PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaViaSpec)\n"
"    Calls: void notifyPostCreateObservers(oaViaSpec* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaViaSpec,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaSpec p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaSpec_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaViaSpec,oaViaSpecModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaViaSpec* object,oaViaSpecModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaViaSpec,simple-oaViaSpecModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaSpec p1;
    PyParamoaViaSpecModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaSpec_Convert,&p1,
          &PyoaViaSpecModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaViaSpec)\n"
"    Calls: void notifyPreDestroyObservers(oaViaSpec* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaViaSpec,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaSpec p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaSpec_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaViaSpec,oaViaSpecModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaViaSpec* object,oaViaSpecModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaViaSpec,simple-oaViaSpecModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaViaSpec p1;
    PyParamoaViaSpecModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaSpec_Convert,&p1,
          &PyoaViaSpecModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaVia_oaViaModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaVia_oaViaModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaVia_oaViaModTypeEnumObject* self = (PyoaStdObserver_oaVia_oaViaModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaVia_oaViaModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaVia_oaViaModTypeEnum* p=new pyv_oaStdObserver_oaVia_oaViaModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaVia_oaViaModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaVia_oaViaModTypeEnum* p=new pyv_oaStdObserver_oaVia_oaViaModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaVia_oaViaModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaVia_oaViaModTypeEnum_tp_dealloc(PyoaStdObserver_oaVia_oaViaModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaVia_oaViaModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaVia_oaViaModTypeEnum value;
    int convert_status=PyoaStdObserver_oaVia_oaViaModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[58];
    sprintf(buffer,"<oaStdObserver_oaVia_oaViaModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaVia_oaViaModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaVia_oaViaModTypeEnum v1;
    PyParamoaStdObserver_oaVia_oaViaModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaVia_oaViaModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaVia_oaViaModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaVia_oaViaModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaVia_oaViaModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaVia_oaViaModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaVia_oaViaModTypeEnum*) ((PyoaStdObserver_oaVia_oaViaModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaVia_oaViaModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaVia_oaViaModTypeEnum_FromoaStdObserver_oaVia_oaViaModTypeEnum(oaStdObserver_oaVia_oaViaModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaVia_oaViaModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaVia_oaViaModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaVia_oaViaModTypeEnumObject* self = (PyoaStdObserver_oaVia_oaViaModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaVia_oaViaModTypeEnum::pyv_oaStdObserver_oaVia_oaViaModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaVia_oaViaModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaVia_oaViaModTypeEnum::pyv_oaStdObserver_oaVia_oaViaModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaVia_oaViaModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVia_oaViaModTypeEnum::onPostCreate(oaVia* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVia_oaViaModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaVia_FromoaVia(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVia_oaViaModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVia_oaViaModTypeEnum::onPostModify(oaVia* p1,oaViaModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVia_oaViaModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaVia_FromoaVia(p1));
    PyTuple_SetItem(args,1,PyoaViaModTypeEnum_FromoaViaModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVia_oaViaModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVia_oaViaModTypeEnum::onPreDestroy(oaVia* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVia_oaViaModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaVia_FromoaVia(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVia_oaViaModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaVia_oaViaModTypeEnum::onPreModify(oaVia* p1,oaViaModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVia_oaViaModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaVia_FromoaVia(p1));
    PyTuple_SetItem(args,1,PyoaViaModTypeEnum_FromoaViaModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaVia_oaViaModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVia_oaViaModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaVia)\n"
"    Calls: virtual void onPostCreate(oaVia* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaVia,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVia_oaViaModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVia_oaViaModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVia_oaViaModTypeEnumObject* self=(PyoaStdObserver_oaVia_oaViaModTypeEnumObject*)ob;

    PyParamoaVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVia_oaViaModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVia_oaViaModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaVia,oaViaModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaVia* object,oaViaModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaVia,simple-oaViaModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVia_oaViaModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVia_oaViaModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVia_oaViaModTypeEnumObject* self=(PyoaStdObserver_oaVia_oaViaModTypeEnumObject*)ob;

    PyParamoaVia p1;
    PyParamoaViaModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVia_Convert,&p1,
          &PyoaViaModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVia_oaViaModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVia_oaViaModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaVia)\n"
"    Calls: virtual void onPreDestroy(oaVia* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaVia,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVia_oaViaModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVia_oaViaModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVia_oaViaModTypeEnumObject* self=(PyoaStdObserver_oaVia_oaViaModTypeEnumObject*)ob;

    PyParamoaVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVia_oaViaModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVia_oaViaModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaVia,oaViaModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaVia* object,oaViaModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaVia,simple-oaViaModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaVia_oaViaModTypeEnum data;
    int convert_status=PyoaStdObserver_oaVia_oaViaModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaVia_oaViaModTypeEnumObject* self=(PyoaStdObserver_oaVia_oaViaModTypeEnumObject*)ob;

    PyParamoaVia p1;
    PyParamoaViaModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVia_Convert,&p1,
          &PyoaViaModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaVia_oaViaModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaVia_oaViaModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaVia_oaViaModTypeEnum data;
  int convert_status=PyoaStdObserver_oaVia_oaViaModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaVia_oaViaModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaVia_oaViaModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaVia_oaViaModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaVia_oaViaModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaVia_oaViaModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaVia_oaViaModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaVia_oaViaModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaVia_oaViaModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaVia_oaViaModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaVia_oaViaModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaVia_oaViaModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaVia_oaViaModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaVia_oaViaModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVia_oaViaModTypeEnum_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaVia_oaViaModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaVia_oaViaModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaVia_oaViaModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaVia_oaViaModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaVia_oaViaModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaVia_oaViaModTypeEnum",
    sizeof(PyoaStdObserver_oaVia_oaViaModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaVia_oaViaModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaVia_oaViaModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaVia_oaViaModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaVia_oaViaModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaVia_oaViaModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaVia_oaViaModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaVia_oaViaModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaVia_oaViaModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaVia)\n"
"    Calls: void notifyPostCreateObservers(oaVia* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaVia,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVia_oaViaModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaVia,oaViaModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaVia* object,oaViaModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaVia,simple-oaViaModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVia p1;
    PyParamoaViaModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVia_Convert,&p1,
          &PyoaViaModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVia_oaViaModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaVia)\n"
"    Calls: void notifyPreDestroyObservers(oaVia* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaVia,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVia_oaViaModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaVia_oaViaModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaVia,oaViaModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaVia* object,oaViaModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaVia,simple-oaViaModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVia p1;
    PyParamoaViaModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVia_Convert,&p1,
          &PyoaViaModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaVia_oaViaModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaVia_oaViaModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaVia_oaViaModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaVia_oaViaModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaVia_oaViaModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaVia_oaViaModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaVia_oaViaModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaVia_oaViaModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaVia_oaViaModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaVia_oaViaModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaVia_oaViaModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaVia_oaViaModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaVia_oaViaModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaView_oaViewModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaView_oaViewModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaView_oaViewModTypeEnumObject* self = (PyoaStdObserver_oaView_oaViewModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaView_oaViewModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaView_oaViewModTypeEnum* p=new pyv_oaStdObserver_oaView_oaViewModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaView_oaViewModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaView_oaViewModTypeEnum* p=new pyv_oaStdObserver_oaView_oaViewModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaView_oaViewModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaView_oaViewModTypeEnum_tp_dealloc(PyoaStdObserver_oaView_oaViewModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaView_oaViewModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaView_oaViewModTypeEnum value;
    int convert_status=PyoaStdObserver_oaView_oaViewModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaStdObserver_oaView_oaViewModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaView_oaViewModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaView_oaViewModTypeEnum v1;
    PyParamoaStdObserver_oaView_oaViewModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaView_oaViewModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaView_oaViewModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaView_oaViewModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaView_oaViewModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaView_oaViewModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaView_oaViewModTypeEnum*) ((PyoaStdObserver_oaView_oaViewModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaView_oaViewModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaView_oaViewModTypeEnum_FromoaStdObserver_oaView_oaViewModTypeEnum(oaStdObserver_oaView_oaViewModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaView_oaViewModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaView_oaViewModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaView_oaViewModTypeEnumObject* self = (PyoaStdObserver_oaView_oaViewModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaView_oaViewModTypeEnum::pyv_oaStdObserver_oaView_oaViewModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaView_oaViewModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaView_oaViewModTypeEnum::pyv_oaStdObserver_oaView_oaViewModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaView_oaViewModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaView_oaViewModTypeEnum::onPostCreate(oaView* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaView_oaViewModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaView_FromoaView(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaView_oaViewModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaView_oaViewModTypeEnum::onPostModify(oaView* p1,oaViewModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaView_oaViewModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaView_FromoaView(p1));
    PyTuple_SetItem(args,1,PyoaViewModTypeEnum_FromoaViewModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaView_oaViewModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaView_oaViewModTypeEnum::onPreDestroy(oaView* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaView_oaViewModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaView_FromoaView(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaView_oaViewModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaView_oaViewModTypeEnum::onPreModify(oaView* p1,oaViewModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaView_oaViewModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaView_FromoaView(p1));
    PyTuple_SetItem(args,1,PyoaViewModTypeEnum_FromoaViewModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaView_oaViewModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaView_oaViewModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaView)\n"
"    Calls: virtual void onPostCreate(oaView* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaView,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaView_oaViewModTypeEnum data;
    int convert_status=PyoaStdObserver_oaView_oaViewModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaView_oaViewModTypeEnumObject* self=(PyoaStdObserver_oaView_oaViewModTypeEnumObject*)ob;

    PyParamoaView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaView_oaViewModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaView_oaViewModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaView,oaViewModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaView* object,oaViewModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaView,simple-oaViewModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaView_oaViewModTypeEnum data;
    int convert_status=PyoaStdObserver_oaView_oaViewModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaView_oaViewModTypeEnumObject* self=(PyoaStdObserver_oaView_oaViewModTypeEnumObject*)ob;

    PyParamoaView p1;
    PyParamoaViewModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaView_Convert,&p1,
          &PyoaViewModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaView_oaViewModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaView_oaViewModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaView)\n"
"    Calls: virtual void onPreDestroy(oaView* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaView,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaView_oaViewModTypeEnum data;
    int convert_status=PyoaStdObserver_oaView_oaViewModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaView_oaViewModTypeEnumObject* self=(PyoaStdObserver_oaView_oaViewModTypeEnumObject*)ob;

    PyParamoaView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaView_oaViewModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaView_oaViewModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaView,oaViewModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaView* object,oaViewModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaView,simple-oaViewModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaView_oaViewModTypeEnum data;
    int convert_status=PyoaStdObserver_oaView_oaViewModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaView_oaViewModTypeEnumObject* self=(PyoaStdObserver_oaView_oaViewModTypeEnumObject*)ob;

    PyParamoaView p1;
    PyParamoaViewModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaView_Convert,&p1,
          &PyoaViewModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaView_oaViewModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaView_oaViewModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaView_oaViewModTypeEnum data;
  int convert_status=PyoaStdObserver_oaView_oaViewModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaView_oaViewModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaView_oaViewModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaView_oaViewModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaView_oaViewModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaView_oaViewModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaView_oaViewModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaView_oaViewModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaView_oaViewModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaView_oaViewModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaView_oaViewModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaView_oaViewModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaView_oaViewModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaView_oaViewModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaView_oaViewModTypeEnum_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaView_oaViewModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaView_oaViewModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaView_oaViewModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaView_oaViewModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaView_oaViewModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaView_oaViewModTypeEnum",
    sizeof(PyoaStdObserver_oaView_oaViewModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaView_oaViewModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaView_oaViewModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaView_oaViewModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaView_oaViewModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaView_oaViewModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaView_oaViewModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaView_oaViewModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaView_oaViewModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaView)\n"
"    Calls: void notifyPostCreateObservers(oaView* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaView,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaView_oaViewModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaView,oaViewModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaView* object,oaViewModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaView,simple-oaViewModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaView p1;
    PyParamoaViewModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaView_Convert,&p1,
          &PyoaViewModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaView_oaViewModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaView)\n"
"    Calls: void notifyPreDestroyObservers(oaView* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaView,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaView_oaViewModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaView_oaViewModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaView,oaViewModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaView* object,oaViewModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaView,simple-oaViewModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaView p1;
    PyParamoaViewModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaView_Convert,&p1,
          &PyoaViewModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaView_oaViewModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaView_oaViewModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaView_oaViewModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaView_oaViewModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaView_oaViewModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaView_oaViewModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaView_oaViewModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaView_oaViewModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaView_oaViewModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaView_oaViewModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaView_oaViewModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaView_oaViewModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaView_oaViewModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject* self = (PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum* p=new pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum* p=new pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_tp_dealloc(PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum value;
    int convert_status=PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum v1;
    PyParamoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum*) ((PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_FromoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject* self = (PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPostCreate(oaWaferDesc* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaWaferDesc_FromoaWaferDesc(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPostModify(oaWaferDesc* p1,oaWaferDescModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaWaferDesc_FromoaWaferDesc(p1));
    PyTuple_SetItem(args,1,PyoaWaferDescModTypeEnum_FromoaWaferDescModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPreDestroy(oaWaferDesc* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaWaferDesc_FromoaWaferDesc(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPreModify(oaWaferDesc* p1,oaWaferDescModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaWaferDesc_FromoaWaferDesc(p1));
    PyTuple_SetItem(args,1,PyoaWaferDescModTypeEnum_FromoaWaferDescModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaWaferDesc)\n"
"    Calls: virtual void onPostCreate(oaWaferDesc* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaWaferDesc,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum data;
    int convert_status=PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject* self=(PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject*)ob;

    PyParamoaWaferDesc p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferDesc_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaWaferDesc,oaWaferDescModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaWaferDesc* object,oaWaferDescModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaWaferDesc,simple-oaWaferDescModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum data;
    int convert_status=PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject* self=(PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject*)ob;

    PyParamoaWaferDesc p1;
    PyParamoaWaferDescModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferDesc_Convert,&p1,
          &PyoaWaferDescModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaWaferDesc)\n"
"    Calls: virtual void onPreDestroy(oaWaferDesc* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaWaferDesc,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum data;
    int convert_status=PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject* self=(PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject*)ob;

    PyParamoaWaferDesc p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferDesc_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaWaferDesc,oaWaferDescModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaWaferDesc* object,oaWaferDescModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaWaferDesc,simple-oaWaferDescModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum data;
    int convert_status=PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject* self=(PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject*)ob;

    PyParamoaWaferDesc p1;
    PyParamoaWaferDescModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferDesc_Convert,&p1,
          &PyoaWaferDescModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum data;
  int convert_status=PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum",
    sizeof(PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaWaferDesc)\n"
"    Calls: void notifyPostCreateObservers(oaWaferDesc* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaWaferDesc,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaWaferDesc p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferDesc_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaWaferDesc,oaWaferDescModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaWaferDesc* object,oaWaferDescModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaWaferDesc,simple-oaWaferDescModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaWaferDesc p1;
    PyParamoaWaferDescModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferDesc_Convert,&p1,
          &PyoaWaferDescModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaWaferDesc)\n"
"    Calls: void notifyPreDestroyObservers(oaWaferDesc* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaWaferDesc,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaWaferDesc p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferDesc_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaWaferDesc,oaWaferDescModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaWaferDesc* object,oaWaferDescModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaWaferDesc,simple-oaWaferDescModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaWaferDesc p1;
    PyParamoaWaferDescModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferDesc_Convert,&p1,
          &PyoaWaferDescModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject* self = (PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum* p=new pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum* p=new pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_tp_dealloc(PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum value;
    int convert_status=PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[76];
    sprintf(buffer,"<oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum v1;
    PyParamoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum*) ((PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_FromoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject* self = (PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPostCreate(oaWaferFeature* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaWaferFeature_FromoaWaferFeature(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPostModify(oaWaferFeature* p1,oaWaferFeatureModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaWaferFeature_FromoaWaferFeature(p1));
    PyTuple_SetItem(args,1,PyoaWaferFeatureModTypeEnum_FromoaWaferFeatureModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPreDestroy(oaWaferFeature* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaWaferFeature_FromoaWaferFeature(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPreModify(oaWaferFeature* p1,oaWaferFeatureModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaWaferFeature_FromoaWaferFeature(p1));
    PyTuple_SetItem(args,1,PyoaWaferFeatureModTypeEnum_FromoaWaferFeatureModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaWaferFeature)\n"
"    Calls: virtual void onPostCreate(oaWaferFeature* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaWaferFeature,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum data;
    int convert_status=PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject* self=(PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject*)ob;

    PyParamoaWaferFeature p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferFeature_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaWaferFeature,oaWaferFeatureModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaWaferFeature* object,oaWaferFeatureModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaWaferFeature,simple-oaWaferFeatureModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum data;
    int convert_status=PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject* self=(PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject*)ob;

    PyParamoaWaferFeature p1;
    PyParamoaWaferFeatureModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferFeature_Convert,&p1,
          &PyoaWaferFeatureModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaWaferFeature)\n"
"    Calls: virtual void onPreDestroy(oaWaferFeature* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaWaferFeature,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum data;
    int convert_status=PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject* self=(PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject*)ob;

    PyParamoaWaferFeature p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferFeature_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaWaferFeature,oaWaferFeatureModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaWaferFeature* object,oaWaferFeatureModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaWaferFeature,simple-oaWaferFeatureModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum data;
    int convert_status=PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject* self=(PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject*)ob;

    PyParamoaWaferFeature p1;
    PyParamoaWaferFeatureModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferFeature_Convert,&p1,
          &PyoaWaferFeatureModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum data;
  int convert_status=PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum",
    sizeof(PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaWaferFeature)\n"
"    Calls: void notifyPostCreateObservers(oaWaferFeature* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaWaferFeature,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaWaferFeature p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferFeature_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaWaferFeature,oaWaferFeatureModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaWaferFeature* object,oaWaferFeatureModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaWaferFeature,simple-oaWaferFeatureModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaWaferFeature p1;
    PyParamoaWaferFeatureModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferFeature_Convert,&p1,
          &PyoaWaferFeatureModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaWaferFeature)\n"
"    Calls: void notifyPreDestroyObservers(oaWaferFeature* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaWaferFeature,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaWaferFeature p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferFeature_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaWaferFeature,oaWaferFeatureModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaWaferFeature* object,oaWaferFeatureModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaWaferFeature,simple-oaWaferFeatureModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaWaferFeature p1;
    PyParamoaWaferFeatureModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferFeature_Convert,&p1,
          &PyoaWaferFeatureModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdVia
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdVia_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdVia_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdViaObject* self = (PyoaStdViaObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStdVia)
    {
        PyParamoaStdVia p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStdVia_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdVia, Choices are:\n"
        "    (oaStdVia)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdVia_tp_dealloc(PyoaStdViaObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdVia_tp_repr(PyObject *ob)
{
    PyParamoaStdVia value;
    int convert_status=PyoaStdVia_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[30];
    sprintf(buffer,"<oaStdVia::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdVia_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdVia v1;
    PyParamoaStdVia v2;
    int convert_status1=PyoaStdVia_Convert(ob1,&v1);
    int convert_status2=PyoaStdVia_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdVia_Convert(PyObject* ob,PyParamoaStdVia* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdVia_Check(ob)) {
        result->SetData( (oaStdVia**) ((PyoaStdViaObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdVia Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdVia_FromoaStdVia(oaStdVia** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStdVia* data=*value;
        PyObject* bself = PyoaStdVia_Type.tp_alloc(&PyoaStdVia_Type,0);
        if (bself == NULL) return bself;
        PyoaStdViaObject* self = (PyoaStdViaObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStdVia_FromoaStdVia(oaStdVia* data)
{
    if (data) {
       PyObject* bself = PyoaStdVia_Type.tp_alloc(&PyoaStdVia_Type,0);
       if (bself == NULL) return bself;
       PyoaStdViaObject* self = (PyoaStdViaObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdVia_getHeader_doc[] = 
"Class: oaStdVia, Function: getHeader\n"
"  Paramegers: ()\n"
"    Calls: oaStdViaHeader* getHeader() const\n"
"    Signature: getHeader|ptr-oaStdViaHeader|\n"
"    BrowseData: 1\n"
"    This function returns the standard via header associated with this standard via.\n"
;

static PyObject*
oaStdVia_getHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdVia data;
    int convert_status=PyoaStdVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaObject* self=(PyoaStdViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaStdViaHeaderp result= (data.DataCall()->getHeader());
        return PyoaStdViaHeader_FromoaStdViaHeader(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdVia_getViaParams_doc[] = 
"Class: oaStdVia, Function: getViaParams\n"
"  Paramegers: (oaViaParam)\n"
"    Calls: void getViaParams(oaViaParam& params) const\n"
"    Signature: getViaParams|void-void|ref-oaViaParam,\n"
"    BrowseData: 0,oaViaParam\n"
"    This function returns the standard via parameters associated with this standard via in the given params argument.\n"
;

static PyObject*
oaStdVia_getViaParams(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdVia data;
    int convert_status=PyoaStdVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaObject* self=(PyoaStdViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaParam_Convert,&p1)) {
        data.DataCall()->getViaParams(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdVia_setViaParams_doc[] = 
"Class: oaStdVia, Function: setViaParams\n"
"  Paramegers: (oaViaParam)\n"
"    Calls: void setViaParams(const oaViaParam& params)\n"
"    Signature: setViaParams|void-void|cref-oaViaParam,\n"
"    This function changes the values of the standard via parameters associated with this standard via.\n"
;

static PyObject*
oaStdVia_setViaParams(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdVia data;
    int convert_status=PyoaStdVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaObject* self=(PyoaStdViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaParam_Convert,&p1)) {
        data.DataCall()->setViaParams(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdVia_isNull_doc[] =
"Class: oaStdVia, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStdVia_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStdVia data;
    int convert_status=PyoaStdVia_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStdVia_assign_doc[] = 
"Class: oaStdVia, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdVia_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdVia data;
  int convert_status=PyoaStdVia_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdVia p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdVia_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdVia_methodlist[] = {
    {"getHeader",(PyCFunction)oaStdVia_getHeader,METH_VARARGS,oaStdVia_getHeader_doc},
    {"getViaParams",(PyCFunction)oaStdVia_getViaParams,METH_VARARGS,oaStdVia_getViaParams_doc},
    {"setViaParams",(PyCFunction)oaStdVia_setViaParams,METH_VARARGS,oaStdVia_setViaParams_doc},
    {"isNull",(PyCFunction)oaStdVia_tp_isNull,METH_VARARGS,oaStdVia_isNull_doc},
    {"assign",(PyCFunction)oaStdVia_tp_assign,METH_VARARGS,oaStdVia_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdVia_doc[] = 
"Class: oaStdVia\n"
"  The oaStdVia class implements an object that represents a standard via. A standard via is an instance of a standard via definition which is implemented by the oaStdViaDef object. There are a fixed number of parameters whose values can be customized. These parameters are specified through an oaViaParam object.\n"
"  A standard via may be used as object associated with an oaRoute .\n"
"Constructors:\n"
"  Paramegers: (oaStdVia)\n"
"    Calls: (const oaStdVia&)\n"
"    Signature: oaStdVia||cref-oaStdVia,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdVia_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdVia",
    sizeof(PyoaStdViaObject),
    0,
    (destructor)oaStdVia_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdVia_tp_compare,	/* tp_compare */
    (reprfunc)oaStdVia_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdVia_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdVia_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaVia_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdVia_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdVia_static_create_doc[] = 
"Class: oaStdVia, Function: create\n"
"  Paramegers: (oaBlock,oaStdViaDef,oaTransform)\n"
"    Calls: oaStdVia* create(oaBlock* block,const oaStdViaDef* viaDef,const oaTransform& xform)\n"
"    Signature: create|ptr-oaStdVia|ptr-oaBlock,cptr-oaStdViaDef,cref-oaTransform,cptr-oaViaParam,\n"
"    This function creates a standard via with the specified attributes.\n"
"    An exception is thrown if the via to be created uses a viaDef from a technology database that is not included in the referenced graph of technology databases for the technology database bound to the design containing the via.\n"
"    block\n"
"    The block to create the standard via in\n"
"    viaDef\n"
"    The viaDef to reference; it specifies the default values for the related standard via parameters\n"
"    xform\n"
"    The transform to apply to the standard via\n"
"    params\n"
"    A pointer to the standard via parameters; a NULL value specifies that the default values are to be used\n"
"    oacViaDefNotInTechAssociatedWithDesign\n"
"  Paramegers: (oaBlock,oaStdViaDef,oaTransform,oaViaParam)\n"
"    Calls: oaStdVia* create(oaBlock* block,const oaStdViaDef* viaDef,const oaTransform& xform,const oaViaParam* params)\n"
"    Signature: create|ptr-oaStdVia|ptr-oaBlock,cptr-oaStdViaDef,cref-oaTransform,cptr-oaViaParam,\n"
"    This function creates a standard via with the specified attributes.\n"
"    An exception is thrown if the via to be created uses a viaDef from a technology database that is not included in the referenced graph of technology databases for the technology database bound to the design containing the via.\n"
"    block\n"
"    The block to create the standard via in\n"
"    viaDef\n"
"    The viaDef to reference; it specifies the default values for the related standard via parameters\n"
"    xform\n"
"    The transform to apply to the standard via\n"
"    params\n"
"    A pointer to the standard via parameters; a NULL value specifies that the default values are to be used\n"
"    oacViaDefNotInTechAssociatedWithDesign\n"
;

static PyObject*
oaStdVia_static_create(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaBlock,oaStdViaDef,oaTransform)
    {
        PyParamoaBlock p1;
        PyParamoaStdViaDef p2;
        PyParamoaTransform p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaStdViaDef_Convert,&p2,
              &PyoaTransform_Convert,&p3)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStdViap result= (oaStdVia::create(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStdVia_FromoaStdVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBlock,oaStdViaDef,oaTransform,oaViaParam)
    {
        PyParamoaBlock p1;
        PyParamoaStdViaDef p2;
        PyParamoaTransform p3;
        PyParamoaViaParam p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaStdViaDef_Convert,&p2,
              &PyoaTransform_Convert,&p3,
              &PyoaViaParam_ConvertAof,&p4)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStdViap result= (oaStdVia::create(p1.Data(),p2.Data(),p3.Data(),p4.DataAof()));
            return PyoaStdVia_FromoaStdVia(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStdVia, function: create, Choices are:\n"
        "    (oaBlock,oaStdViaDef,oaTransform)\n"
        "    (oaBlock,oaStdViaDef,oaTransform,oaViaParam)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdVia_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaStdVia_static_create,METH_VARARGS,oaStdVia_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdVia_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdVia_Type)<0) {
      printf("** PyType_Ready failed for: oaStdVia\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdVia",
           (PyObject*)(&PyoaStdVia_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdVia\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdVia_Type.tp_dict;
    for(method=oaStdVia_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdViaDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdViaDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdViaDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdViaDefObject* self = (PyoaStdViaDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStdViaDef)
    {
        PyParamoaStdViaDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStdViaDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdViaDef, Choices are:\n"
        "    (oaStdViaDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdViaDef_tp_dealloc(PyoaStdViaDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdViaDef_tp_repr(PyObject *ob)
{
    PyParamoaStdViaDef value;
    int convert_status=PyoaStdViaDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    if (!value.Data()) {
        oaString buffer("<oaStdViaDef::NULL>");
        result=PyString_FromString((char*)(const char*)buffer);
    }
    else {
        oaString sresult;
        value.DataCall()->getName(sresult);
    
        char addr[33];
        sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
        oaString buffer;
        buffer+=oaString("<oaStdViaDef::");
        buffer+=oaString(addr);
        buffer+=oaString("::");
        buffer+=oaString(sresult);
        buffer+=oaString(">");
        result=PyString_FromString((char*)(const char*)buffer);
    
    }
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdViaDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdViaDef v1;
    PyParamoaStdViaDef v2;
    int convert_status1=PyoaStdViaDef_Convert(ob1,&v1);
    int convert_status2=PyoaStdViaDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdViaDef_Convert(PyObject* ob,PyParamoaStdViaDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdViaDef_Check(ob)) {
        result->SetData( (oaStdViaDef**) ((PyoaStdViaDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdViaDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdViaDef_FromoaStdViaDef(oaStdViaDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStdViaDef* data=*value;
        PyObject* bself = PyoaStdViaDef_Type.tp_alloc(&PyoaStdViaDef_Type,0);
        if (bself == NULL) return bself;
        PyoaStdViaDefObject* self = (PyoaStdViaDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStdViaDef_FromoaStdViaDef(oaStdViaDef* data)
{
    if (data) {
       PyObject* bself = PyoaStdViaDef_Type.tp_alloc(&PyoaStdViaDef_Type,0);
       if (bself == NULL) return bself;
       PyoaStdViaDefObject* self = (PyoaStdViaDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdViaDef_getImplant1_doc[] = 
"Class: oaStdViaDef, Function: getImplant1\n"
"  Paramegers: ()\n"
"    Calls: oaPhysicalLayer* getImplant1() const\n"
"    Signature: getImplant1|ptr-oaPhysicalLayer|\n"
"    BrowseData: 1\n"
"    This function returns the implant1 layer associated with this oaStdViaDef object. If this oaStdViaDef object is not associated with an implant1 layer, NULL is returned.\n"
;

static PyObject*
oaStdViaDef_getImplant1(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdViaDef data;
    int convert_status=PyoaStdViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaDefObject* self=(PyoaStdViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaPhysicalLayerp result= (data.DataCall()->getImplant1());
        return PyoaPhysicalLayer_FromoaPhysicalLayer(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdViaDef_getImplant1Num_doc[] = 
"Class: oaStdViaDef, Function: getImplant1Num\n"
"  Paramegers: ()\n"
"    Calls: oaLayerNum getImplant1Num() const\n"
"    Signature: getImplant1Num|simple-oaLayerNum|\n"
"    BrowseData: 1\n"
"    This function returns the implant1 layer number associated with this stdViaDef. An exception is thrown if this stdViaDef is not associated with an implant1 layer, so it is recommended that you call hasImplant1() before calling this function.\n"
;

static PyObject*
oaStdViaDef_getImplant1Num(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdViaDef data;
    int convert_status=PyoaStdViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaDefObject* self=(PyoaStdViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaLayerNum result= (data.DataCall()->getImplant1Num());
        return PyoaLayerNum_FromoaLayerNum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdViaDef_getImplant2_doc[] = 
"Class: oaStdViaDef, Function: getImplant2\n"
"  Paramegers: ()\n"
"    Calls: oaPhysicalLayer* getImplant2() const\n"
"    Signature: getImplant2|ptr-oaPhysicalLayer|\n"
"    BrowseData: 1\n"
"    This function returns the implant2 layer associated with this oaStdViaDef object. If this oaStdViaDef object is not associated with an implant2 layer, NULL is returned.\n"
;

static PyObject*
oaStdViaDef_getImplant2(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdViaDef data;
    int convert_status=PyoaStdViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaDefObject* self=(PyoaStdViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaPhysicalLayerp result= (data.DataCall()->getImplant2());
        return PyoaPhysicalLayer_FromoaPhysicalLayer(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdViaDef_getImplant2Num_doc[] = 
"Class: oaStdViaDef, Function: getImplant2Num\n"
"  Paramegers: ()\n"
"    Calls: oaLayerNum getImplant2Num() const\n"
"    Signature: getImplant2Num|simple-oaLayerNum|\n"
"    BrowseData: 1\n"
"    This function returns the implant2 layer number associated with this stdViaDef. An exception is thrown if this stdViaDef is not associated with an implant2 layer, so it is recommended that you call hasImplant2() before calling this function.\n"
;

static PyObject*
oaStdViaDef_getImplant2Num(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdViaDef data;
    int convert_status=PyoaStdViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaDefObject* self=(PyoaStdViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaLayerNum result= (data.DataCall()->getImplant2Num());
        return PyoaLayerNum_FromoaLayerNum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdViaDef_getParams_doc[] = 
"Class: oaStdViaDef, Function: getParams\n"
"  Paramegers: (oaViaParam)\n"
"    Calls: void getParams(oaViaParam& params) const\n"
"    Signature: getParams|void-void|ref-oaViaParam,\n"
"    BrowseData: 0,oaViaParam\n"
"    This function returns the standard via parameters associated with this oaStdViaDef object in the given params .\n"
;

static PyObject*
oaStdViaDef_getParams(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdViaDef data;
    int convert_status=PyoaStdViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaDefObject* self=(PyoaStdViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaParam_Convert,&p1)) {
        data.DataCall()->getParams(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdViaDef_hasImplant1_doc[] = 
"Class: oaStdViaDef, Function: hasImplant1\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasImplant1() const\n"
"    Signature: hasImplant1|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean to indicate if this stdViaDef is associated with an implant1 layer. The implant layer may be bound or unbound.\n"
;

static PyObject*
oaStdViaDef_hasImplant1(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdViaDef data;
    int convert_status=PyoaStdViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaDefObject* self=(PyoaStdViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->hasImplant1());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdViaDef_hasImplant2_doc[] = 
"Class: oaStdViaDef, Function: hasImplant2\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasImplant2() const\n"
"    Signature: hasImplant2|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean to indicate if this stdViaDef is associated with an implant2 layer. The implant layer may be bound or unbound.\n"
"    Todo\n"
"    Place this function block in the oaStdViaDef class block.\n"
;

static PyObject*
oaStdViaDef_hasImplant2(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdViaDef data;
    int convert_status=PyoaStdViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaDefObject* self=(PyoaStdViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->hasImplant2());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdViaDef_setParams_doc[] = 
"Class: oaStdViaDef, Function: setParams\n"
"  Paramegers: (oaViaParam)\n"
"    Calls: void setParams(const oaViaParam& params)\n"
"    Signature: setParams|void-void|cref-oaViaParam,\n"
"    This function sets the standard via parameters associated with this oaStdViaDef object in the given params .\n"
;

static PyObject*
oaStdViaDef_setParams(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdViaDef data;
    int convert_status=PyoaStdViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaDefObject* self=(PyoaStdViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaParam_Convert,&p1)) {
        data.DataCall()->setParams(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdViaDef_isNull_doc[] =
"Class: oaStdViaDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStdViaDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStdViaDef data;
    int convert_status=PyoaStdViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStdViaDef_assign_doc[] = 
"Class: oaStdViaDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdViaDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdViaDef data;
  int convert_status=PyoaStdViaDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdViaDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdViaDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdViaDef_methodlist[] = {
    {"getImplant1",(PyCFunction)oaStdViaDef_getImplant1,METH_VARARGS,oaStdViaDef_getImplant1_doc},
    {"getImplant1Num",(PyCFunction)oaStdViaDef_getImplant1Num,METH_VARARGS,oaStdViaDef_getImplant1Num_doc},
    {"getImplant2",(PyCFunction)oaStdViaDef_getImplant2,METH_VARARGS,oaStdViaDef_getImplant2_doc},
    {"getImplant2Num",(PyCFunction)oaStdViaDef_getImplant2Num,METH_VARARGS,oaStdViaDef_getImplant2Num_doc},
    {"getParams",(PyCFunction)oaStdViaDef_getParams,METH_VARARGS,oaStdViaDef_getParams_doc},
    {"hasImplant1",(PyCFunction)oaStdViaDef_hasImplant1,METH_VARARGS,oaStdViaDef_hasImplant1_doc},
    {"hasImplant2",(PyCFunction)oaStdViaDef_hasImplant2,METH_VARARGS,oaStdViaDef_hasImplant2_doc},
    {"setParams",(PyCFunction)oaStdViaDef_setParams,METH_VARARGS,oaStdViaDef_setParams_doc},
    {"isNull",(PyCFunction)oaStdViaDef_tp_isNull,METH_VARARGS,oaStdViaDef_isNull_doc},
    {"assign",(PyCFunction)oaStdViaDef_tp_assign,METH_VARARGS,oaStdViaDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdViaDef_doc[] = 
"Class: oaStdViaDef\n"
"  The oaStdViaDef class implements an oaStdViaDef object in a technology database. An oaStdViaDef object has an unique name and is associated with two layers and a list of via parameters with default values. A standard via in a route must point to an oaStdViaDef object in the technology database associated with the design where the route resides.\n"
"Constructors:\n"
"  Paramegers: (oaStdViaDef)\n"
"    Calls: (const oaStdViaDef&)\n"
"    Signature: oaStdViaDef||cref-oaStdViaDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdViaDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdViaDef",
    sizeof(PyoaStdViaDefObject),
    0,
    (destructor)oaStdViaDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdViaDef_tp_compare,	/* tp_compare */
    (reprfunc)oaStdViaDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdViaDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdViaDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaViaDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdViaDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdViaDef_static_create_doc[] = 
"Class: oaStdViaDef, Function: create\n"
"  Paramegers: (oaTech,oaString,oaPhysicalLayer,oaPhysicalLayer,oaViaParam)\n"
"    Calls: oaStdViaDef* create(oaTech* tech,const oaString& name,oaPhysicalLayer* layer1,oaPhysicalLayer* layer2,const oaViaParam& params)\n"
"    Signature: create|ptr-oaStdViaDef|ptr-oaTech,cref-oaString,ptr-oaPhysicalLayer,ptr-oaPhysicalLayer,cref-oaViaParam,ptr-oaPhysicalLayer,ptr-oaPhysicalLayer,\n"
"    This function creates an oaStdViaDef object with the specified attributes.\n"
"    This function throws an exception if a viaDef with the specified name already exists. An exception is also thrown if layer1 and layer2 are not included in the graph of technology databases rooted at the specified tech .\n"
"    Note: The intended use is for layer1 to be the bottom layer, which should be the layer with the lower manufacturing layer number. Layer2 should be the top layer. The database does not enforce this because some tech databases do not have valid manufacturing layer numbers. Some applications require this layer ordering.\n"
"    tech\n"
"    The technology database in which to create the oaStdViaDef object\n"
"    name\n"
"    The name of the oaStdViaDef object to created\n"
"    layer1\n"
"    The first layer of the oaStdViaDef object\n"
"    layer2\n"
"    The second layer of the oaStdViaDef object\n"
"    params\n"
"    The via parameter of the oaStdViaDef object\n"
"    implant1\n"
"    The optional implant1 layer of the oaStdViaDef object\n"
"    implant2\n"
"    The optional implant2 layer of the oaStdViaDef object\n"
"    oacLayerNotInReferencedTech\n"
"    oacConflictingLayerNamesInTech\n"
"    oacConflictingLayerNumbersInTech\n"
"    oacViaDefExists\n"
"  Paramegers: (oaTech,oaString,oaPhysicalLayer,oaPhysicalLayer,oaViaParam,oaPhysicalLayer)\n"
"    Calls: oaStdViaDef* create(oaTech* tech,const oaString& name,oaPhysicalLayer* layer1,oaPhysicalLayer* layer2,const oaViaParam& params,oaPhysicalLayer* implant1)\n"
"    Signature: create|ptr-oaStdViaDef|ptr-oaTech,cref-oaString,ptr-oaPhysicalLayer,ptr-oaPhysicalLayer,cref-oaViaParam,ptr-oaPhysicalLayer,ptr-oaPhysicalLayer,\n"
"    This function creates an oaStdViaDef object with the specified attributes.\n"
"    This function throws an exception if a viaDef with the specified name already exists. An exception is also thrown if layer1 and layer2 are not included in the graph of technology databases rooted at the specified tech .\n"
"    Note: The intended use is for layer1 to be the bottom layer, which should be the layer with the lower manufacturing layer number. Layer2 should be the top layer. The database does not enforce this because some tech databases do not have valid manufacturing layer numbers. Some applications require this layer ordering.\n"
"    tech\n"
"    The technology database in which to create the oaStdViaDef object\n"
"    name\n"
"    The name of the oaStdViaDef object to created\n"
"    layer1\n"
"    The first layer of the oaStdViaDef object\n"
"    layer2\n"
"    The second layer of the oaStdViaDef object\n"
"    params\n"
"    The via parameter of the oaStdViaDef object\n"
"    implant1\n"
"    The optional implant1 layer of the oaStdViaDef object\n"
"    implant2\n"
"    The optional implant2 layer of the oaStdViaDef object\n"
"    oacLayerNotInReferencedTech\n"
"    oacConflictingLayerNamesInTech\n"
"    oacConflictingLayerNumbersInTech\n"
"    oacViaDefExists\n"
"  Paramegers: (oaTech,oaString,oaPhysicalLayer,oaPhysicalLayer,oaViaParam,oaPhysicalLayer,oaPhysicalLayer)\n"
"    Calls: oaStdViaDef* create(oaTech* tech,const oaString& name,oaPhysicalLayer* layer1,oaPhysicalLayer* layer2,const oaViaParam& params,oaPhysicalLayer* implant1,oaPhysicalLayer* implant2)\n"
"    Signature: create|ptr-oaStdViaDef|ptr-oaTech,cref-oaString,ptr-oaPhysicalLayer,ptr-oaPhysicalLayer,cref-oaViaParam,ptr-oaPhysicalLayer,ptr-oaPhysicalLayer,\n"
"    This function creates an oaStdViaDef object with the specified attributes.\n"
"    This function throws an exception if a viaDef with the specified name already exists. An exception is also thrown if layer1 and layer2 are not included in the graph of technology databases rooted at the specified tech .\n"
"    Note: The intended use is for layer1 to be the bottom layer, which should be the layer with the lower manufacturing layer number. Layer2 should be the top layer. The database does not enforce this because some tech databases do not have valid manufacturing layer numbers. Some applications require this layer ordering.\n"
"    tech\n"
"    The technology database in which to create the oaStdViaDef object\n"
"    name\n"
"    The name of the oaStdViaDef object to created\n"
"    layer1\n"
"    The first layer of the oaStdViaDef object\n"
"    layer2\n"
"    The second layer of the oaStdViaDef object\n"
"    params\n"
"    The via parameter of the oaStdViaDef object\n"
"    implant1\n"
"    The optional implant1 layer of the oaStdViaDef object\n"
"    implant2\n"
"    The optional implant2 layer of the oaStdViaDef object\n"
"    oacLayerNotInReferencedTech\n"
"    oacConflictingLayerNamesInTech\n"
"    oacConflictingLayerNumbersInTech\n"
"    oacViaDefExists\n"
;

static PyObject*
oaStdViaDef_static_create(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaTech,oaString,oaPhysicalLayer,oaPhysicalLayer,oaViaParam)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        PyParamoaPhysicalLayer p3;
        PyParamoaPhysicalLayer p4;
        PyParamoaViaParam p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaPhysicalLayer_Convert,&p3,
              &PyoaPhysicalLayer_Convert,&p4,
              &PyoaViaParam_Convert,&p5)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!PyValidateDbObject(p3.Data(),3)) return NULL;
            if (!PyValidateDbObject(p4.Data(),4)) return NULL;
            oaStdViaDefp result= (oaStdViaDef::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data()));
            return PyoaStdViaDef_FromoaStdViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaTech,oaString,oaPhysicalLayer,oaPhysicalLayer,oaViaParam,oaPhysicalLayer)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        PyParamoaPhysicalLayer p3;
        PyParamoaPhysicalLayer p4;
        PyParamoaViaParam p5;
        PyParamoaPhysicalLayer p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaPhysicalLayer_Convert,&p3,
              &PyoaPhysicalLayer_Convert,&p4,
              &PyoaViaParam_Convert,&p5,
              &PyoaPhysicalLayer_Convert,&p6)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!PyValidateDbObject(p3.Data(),3)) return NULL;
            if (!PyValidateDbObject(p4.Data(),4)) return NULL;
            if (!PyValidateDbObject(p6.Data(),6)) return NULL;
            oaStdViaDefp result= (oaStdViaDef::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data()));
            return PyoaStdViaDef_FromoaStdViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaTech,oaString,oaPhysicalLayer,oaPhysicalLayer,oaViaParam,oaPhysicalLayer,oaPhysicalLayer)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        PyParamoaPhysicalLayer p3;
        PyParamoaPhysicalLayer p4;
        PyParamoaViaParam p5;
        PyParamoaPhysicalLayer p6;
        PyParamoaPhysicalLayer p7;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaPhysicalLayer_Convert,&p3,
              &PyoaPhysicalLayer_Convert,&p4,
              &PyoaViaParam_Convert,&p5,
              &PyoaPhysicalLayer_Convert,&p6,
              &PyoaPhysicalLayer_Convert,&p7)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!PyValidateDbObject(p3.Data(),3)) return NULL;
            if (!PyValidateDbObject(p4.Data(),4)) return NULL;
            if (!PyValidateDbObject(p6.Data(),6)) return NULL;
            if (!PyValidateDbObject(p7.Data(),7)) return NULL;
            oaStdViaDefp result= (oaStdViaDef::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data()));
            return PyoaStdViaDef_FromoaStdViaDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStdViaDef, function: create, Choices are:\n"
        "    (oaTech,oaString,oaPhysicalLayer,oaPhysicalLayer,oaViaParam)\n"
        "    (oaTech,oaString,oaPhysicalLayer,oaPhysicalLayer,oaViaParam,oaPhysicalLayer)\n"
        "    (oaTech,oaString,oaPhysicalLayer,oaPhysicalLayer,oaViaParam,oaPhysicalLayer,oaPhysicalLayer)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdViaDef_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaStdViaDef_static_create,METH_VARARGS,oaStdViaDef_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdViaDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdViaDef_Type)<0) {
      printf("** PyType_Ready failed for: oaStdViaDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdViaDef",
           (PyObject*)(&PyoaStdViaDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdViaDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdViaDef_Type.tp_dict;
    for(method=oaStdViaDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdViaHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdViaHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdViaHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdViaHeaderObject* self = (PyoaStdViaHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStdViaHeader)
    {
        PyParamoaStdViaHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStdViaHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdViaHeader, Choices are:\n"
        "    (oaStdViaHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdViaHeader_tp_dealloc(PyoaStdViaHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdViaHeader_tp_repr(PyObject *ob)
{
    PyParamoaStdViaHeader value;
    int convert_status=PyoaStdViaHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    if (!value.Data()) {
        oaString buffer("<oaStdViaHeader::NULL>");
        result=PyString_FromString((char*)(const char*)buffer);
    }
    else {
        oaString sresult;
        value.DataCall()->getViaDefName(sresult);
    
        char addr[36];
        sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
        oaString buffer;
        buffer+=oaString("<oaStdViaHeader::");
        buffer+=oaString(addr);
        buffer+=oaString("::");
        buffer+=oaString(sresult);
        buffer+=oaString(">");
        result=PyString_FromString((char*)(const char*)buffer);
    
    }
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdViaHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdViaHeader v1;
    PyParamoaStdViaHeader v2;
    int convert_status1=PyoaStdViaHeader_Convert(ob1,&v1);
    int convert_status2=PyoaStdViaHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdViaHeader_Convert(PyObject* ob,PyParamoaStdViaHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdViaHeader_Check(ob)) {
        result->SetData( (oaStdViaHeader**) ((PyoaStdViaHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdViaHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdViaHeader_FromoaStdViaHeader(oaStdViaHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStdViaHeader* data=*value;
        PyObject* bself = PyoaStdViaHeader_Type.tp_alloc(&PyoaStdViaHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaStdViaHeaderObject* self = (PyoaStdViaHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStdViaHeader_FromoaStdViaHeader(oaStdViaHeader* data)
{
    if (data) {
       PyObject* bself = PyoaStdViaHeader_Type.tp_alloc(&PyoaStdViaHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaStdViaHeaderObject* self = (PyoaStdViaHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdViaHeader_getParams_doc[] = 
"Class: oaStdViaHeader, Function: getParams\n"
"  Paramegers: (oaViaParam)\n"
"    Calls: void getParams(oaViaParam& params) const\n"
"    Signature: getParams|void-void|ref-oaViaParam,\n"
"    BrowseData: 0,oaViaParam\n"
"    This function fills params with the standard via parameters associated with this viaHeader.\n"
;

static PyObject*
oaStdViaHeader_getParams(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdViaHeader data;
    int convert_status=PyoaStdViaHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdViaHeaderObject* self=(PyoaStdViaHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaParam_Convert,&p1)) {
        data.DataCall()->getParams(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdViaHeader_isNull_doc[] =
"Class: oaStdViaHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStdViaHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStdViaHeader data;
    int convert_status=PyoaStdViaHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStdViaHeader_assign_doc[] = 
"Class: oaStdViaHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdViaHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdViaHeader data;
  int convert_status=PyoaStdViaHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdViaHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdViaHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdViaHeader_methodlist[] = {
    {"getParams",(PyCFunction)oaStdViaHeader_getParams,METH_VARARGS,oaStdViaHeader_getParams_doc},
    {"isNull",(PyCFunction)oaStdViaHeader_tp_isNull,METH_VARARGS,oaStdViaHeader_isNull_doc},
    {"assign",(PyCFunction)oaStdViaHeader_tp_assign,METH_VARARGS,oaStdViaHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdViaHeader_doc[] = 
"Class: oaStdViaHeader\n"
"  The oaStdViaHeader class implements an oaViaHeader object that contains information about a standard viaDef and all of the standard vias in a design that use it. An oaStdVia has a fixed number of parameters that can be set using an oaViaParam object.\n"
"Constructors:\n"
"  Paramegers: (oaStdViaHeader)\n"
"    Calls: (const oaStdViaHeader&)\n"
"    Signature: oaStdViaHeader||cref-oaStdViaHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdViaHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdViaHeader",
    sizeof(PyoaStdViaHeaderObject),
    0,
    (destructor)oaStdViaHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdViaHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaStdViaHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdViaHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdViaHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaViaHeader_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdViaHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdViaHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdViaHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaStdViaHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdViaHeader",
           (PyObject*)(&PyoaStdViaHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdViaHeader\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSteiner
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSteiner_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSteiner_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSteinerObject* self = (PyoaSteinerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaSteiner)
    {
        PyParamoaSteiner p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSteiner_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSteiner, Choices are:\n"
        "    (oaSteiner)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSteiner_tp_dealloc(PyoaSteinerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSteiner_tp_repr(PyObject *ob)
{
    PyParamoaSteiner value;
    int convert_status=PyoaSteiner_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[31];
    sprintf(buffer,"<oaSteiner::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSteiner_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSteiner v1;
    PyParamoaSteiner v2;
    int convert_status1=PyoaSteiner_Convert(ob1,&v1);
    int convert_status2=PyoaSteiner_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSteiner_Convert(PyObject* ob,PyParamoaSteiner* result)
{
    if (ob == NULL) return 1;
    if (PyoaSteiner_Check(ob)) {
        result->SetData( (oaSteiner**) ((PyoaSteinerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSteiner Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSteiner_FromoaSteiner(oaSteiner** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaSteiner* data=*value;
        PyObject* bself = PyoaSteiner_Type.tp_alloc(&PyoaSteiner_Type,0);
        if (bself == NULL) return bself;
        PyoaSteinerObject* self = (PyoaSteinerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaSteiner_FromoaSteiner(oaSteiner* data)
{
    if (data) {
       PyObject* bself = PyoaSteiner_Type.tp_alloc(&PyoaSteiner_Type,0);
       if (bself == NULL) return bself;
       PyoaSteinerObject* self = (PyoaSteinerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSteiner_getConnRoutes_doc[] = 
"Class: oaSteiner, Function: getConnRoutes\n"
"  Paramegers: ()\n"
"    Calls: oaCollection_oaRoute_oaSteiner getConnRoutes() const\n"
"    Signature: getConnRoutes|simple-oaCollection_oaRoute_oaSteiner|\n"
"    BrowseData: 1\n"
"    This function returns a collection of routes connected to this steiner. Each route in the collection has this steiner as its connection object, either at its begin or its end.\n"
;

static PyObject*
oaSteiner_getConnRoutes(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSteiner data;
    int convert_status=PyoaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSteinerObject* self=(PyoaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaCollection_oaRoute_oaSteiner* result= new oaCollection_oaRoute_oaSteiner(data.DataCall()->getConnRoutes());
        return PyoaCollection_oaRoute_oaSteiner_FromoaCollection_oaRoute_oaSteiner(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSteiner_getConnRoutesIter_doc[] = 
"Class: oaSteiner, Function: getConnRoutesIter\n"
"  Paramegers: ()\n"
"    Calls: oaIter_oaRoute getConnRoutesIter() const\n"
"    Signature: getConnRoutesIter|simple-oaIter_oaRoute|\n"
"    BrowseData: 1\n"
"    This function returns an Iterator over the following collection: This function returns a collection of routes connected to this steiner. Each route in the collection has this steiner as its connection object, either at its begin or its end.\n"
;

static PyObject*
oaSteiner_getConnRoutesIter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSteiner data;
    int convert_status=PyoaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSteinerObject* self=(PyoaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaIter_oaRoute* result= new oaIter_oaRoute(data.DataCall()->getConnRoutes());
        return PyoaIter_oaRoute_FromoaIter_oaRoute(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSteiner_getLayerHeader_doc[] = 
"Class: oaSteiner, Function: getLayerHeader\n"
"  Paramegers: ()\n"
"    Calls: oaLayerHeader* getLayerHeader() const\n"
"    Signature: getLayerHeader|ptr-oaLayerHeader|\n"
"    BrowseData: 1\n"
"    This function returns a pointer to the oaLayerHeader object that represents the layer associated with the steiner object. A NULL value is returned if the steiner is not associated with any layer.\n"
;

static PyObject*
oaSteiner_getLayerHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSteiner data;
    int convert_status=PyoaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSteinerObject* self=(PyoaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaLayerHeaderp result= (data.DataCall()->getLayerHeader());
        return PyoaLayerHeader_FromoaLayerHeader(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSteiner_getLayerNum_doc[] = 
"Class: oaSteiner, Function: getLayerNum\n"
"  Paramegers: ()\n"
"    Calls: oaLayerNum getLayerNum() const\n"
"    Signature: getLayerNum|simple-oaLayerNum|\n"
"    BrowseData: 1\n"
"    This function returns the layer number of the layer that may be associated with this steiner. An oacAnyLayerNum value is returned if the steiner is not associated with any layer.\n"
;

static PyObject*
oaSteiner_getLayerNum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSteiner data;
    int convert_status=PyoaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSteinerObject* self=(PyoaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaLayerNum result= (data.DataCall()->getLayerNum());
        return PyoaLayerNum_FromoaLayerNum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSteiner_setBBox_doc[] = 
"Class: oaSteiner, Function: setBBox\n"
"  Paramegers: (oaBox)\n"
"    Calls: void setBBox(const oaBox& bBox)\n"
"    Signature: setBBox|void-void|cref-oaBox,\n"
"    This function updates the bBox of the steiner object to be the specified 'bBox'.\n"
"    bBox\n"
"    The new bBox for the steiner\n"
;

static PyObject*
oaSteiner_setBBox(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSteiner data;
    int convert_status=PyoaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSteinerObject* self=(PyoaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBox p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBox_Convert,&p1)) {
        data.DataCall()->setBBox(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSteiner_setLayerNum_doc[] = 
"Class: oaSteiner, Function: setLayerNum\n"
"  Paramegers: (oaLayerNum)\n"
"    Calls: void setLayerNum(oaLayerNum layer)\n"
"    Signature: setLayerNum|void-void|simple-oaLayerNum,\n"
"    This function updates the layer of the steiner object to be the specified 'layer'. The steiner object will also get associated to the corresponding oaLayerHeader object if the specified 'layer' value is not oacAnyLayerNum. The steiner also gets disassociated from any earlier oaLayerHeader object it may have been related to, if any, before the new layer assignment is made.\n"
"    layer\n"
"    The layer number for the layer to be associated with the steiner\n"
;

static PyObject*
oaSteiner_setLayerNum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSteiner data;
    int convert_status=PyoaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSteinerObject* self=(PyoaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLayerNum p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerNum_Convert,&p1)) {
        data.DataCall()->setLayerNum(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSteiner_isNull_doc[] =
"Class: oaSteiner, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaSteiner_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaSteiner data;
    int convert_status=PyoaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaSteiner_assign_doc[] = 
"Class: oaSteiner, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSteiner_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSteiner data;
  int convert_status=PyoaSteiner_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSteiner p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSteiner_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSteiner_methodlist[] = {
    {"getConnRoutes",(PyCFunction)oaSteiner_getConnRoutes,METH_VARARGS,oaSteiner_getConnRoutes_doc},
    {"getConnRoutesIter",(PyCFunction)oaSteiner_getConnRoutesIter,METH_VARARGS,oaSteiner_getConnRoutesIter_doc},
    {"getLayerHeader",(PyCFunction)oaSteiner_getLayerHeader,METH_VARARGS,oaSteiner_getLayerHeader_doc},
    {"getLayerNum",(PyCFunction)oaSteiner_getLayerNum,METH_VARARGS,oaSteiner_getLayerNum_doc},
    {"setBBox",(PyCFunction)oaSteiner_setBBox,METH_VARARGS,oaSteiner_setBBox_doc},
    {"setLayerNum",(PyCFunction)oaSteiner_setLayerNum,METH_VARARGS,oaSteiner_setLayerNum_doc},
    {"isNull",(PyCFunction)oaSteiner_tp_isNull,METH_VARARGS,oaSteiner_isNull_doc},
    {"assign",(PyCFunction)oaSteiner_tp_assign,METH_VARARGS,oaSteiner_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSteiner_doc[] = 
"Class: oaSteiner\n"
"  The oaSteiner class is used to represent a logical object that facilitates the branching of a wire. oaSteiner objects are figures which can be associated with a layer and can have net connectivity. oaSteiner objects also qualify as objects that can connect to an oaRoute object either at its begin or end and allow clients to access the collection of routes fanning out or fanning in from/to it.\n"
"  The oaSteiner class can be observed by deriving from\n"
"Constructors:\n"
"  Paramegers: (oaSteiner)\n"
"    Calls: (const oaSteiner&)\n"
"    Signature: oaSteiner||cref-oaSteiner,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSteiner_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSteiner",
    sizeof(PyoaSteinerObject),
    0,
    (destructor)oaSteiner_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSteiner_tp_compare,	/* tp_compare */
    (reprfunc)oaSteiner_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSteiner_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSteiner_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaConnFig_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSteiner_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSteiner_static_create_doc[] = 
"Class: oaSteiner, Function: create\n"
"  Paramegers: (oaBlock,oaBox)\n"
"    Calls: oaSteiner* create(oaBlock* block,const oaBox& bBox)\n"
"    Signature: create|ptr-oaSteiner|ptr-oaBlock,cref-oaBox,simple-oaLayerNum,\n"
"    This function creates an oaSteiner object in the specified 'block' with the specified 'bBox' and having the specified 'layer'. The layer specification is optional and a steiner may not have any associated layer.\n"
"    block\n"
"    The block in which this oaSteiner object is created\n"
"    bBox\n"
"    The bBox to be used for this steiner object\n"
"    layer\n"
"    The layer this steiner needs to be associated with, if any\n"
"    A pointer to the oaSteiner object created\n"
"  Paramegers: (oaBlock,oaBox,oaLayerNum)\n"
"    Calls: oaSteiner* create(oaBlock* block,const oaBox& bBox,oaLayerNum layer)\n"
"    Signature: create|ptr-oaSteiner|ptr-oaBlock,cref-oaBox,simple-oaLayerNum,\n"
"    This function creates an oaSteiner object in the specified 'block' with the specified 'bBox' and having the specified 'layer'. The layer specification is optional and a steiner may not have any associated layer.\n"
"    block\n"
"    The block in which this oaSteiner object is created\n"
"    bBox\n"
"    The bBox to be used for this steiner object\n"
"    layer\n"
"    The layer this steiner needs to be associated with, if any\n"
"    A pointer to the oaSteiner object created\n"
;

static PyObject*
oaSteiner_static_create(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaBlock,oaBox)
    {
        PyParamoaBlock p1;
        PyParamoaBox p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaBox_Convert,&p2)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaSteinerp result= (oaSteiner::create(p1.Data(),p2.Data()));
            return PyoaSteiner_FromoaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBlock,oaBox,oaLayerNum)
    {
        PyParamoaBlock p1;
        PyParamoaBox p2;
        PyParamoaLayerNum p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaBox_Convert,&p2,
              &PyoaLayerNum_Convert,&p3)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaSteinerp result= (oaSteiner::create(p1.Data(),p2.Data(),p3.Data()));
            return PyoaSteiner_FromoaSteiner(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSteiner, function: create, Choices are:\n"
        "    (oaBlock,oaBox)\n"
        "    (oaBlock,oaBox,oaLayerNum)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaSteiner_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaSteiner_static_create,METH_VARARGS,oaSteiner_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSteiner_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSteiner_Type)<0) {
      printf("** PyType_Ready failed for: oaSteiner\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSteiner",
           (PyObject*)(&PyoaSteiner_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSteiner\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaSteiner_Type.tp_dict;
    for(method=oaSteiner_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSteinerModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaSteinerModTypeEnum_Convert(PyObject* ob,PyParamoaSteinerModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacAddToNetSteinerModType")==0) { result->SetData(oacAddToNetSteinerModType); return 1;}
        if (strcasecmp(str,"oacRemoveFromNetSteinerModType")==0) { result->SetData(oacRemoveFromNetSteinerModType); return 1;}
        if (strcasecmp(str,"oacSetBBoxSteinerModType")==0) { result->SetData(oacSetBBoxSteinerModType); return 1;}
        if (strcasecmp(str,"oacSetLayerSteinerModType")==0) { result->SetData(oacSetLayerSteinerModType); return 1;}
        if (strcasecmp(str,"oacAddToFigGroupSteinerModType")==0) { result->SetData(oacAddToFigGroupSteinerModType); return 1;}
        if (strcasecmp(str,"oacRemoveFromFigGroupSteinerModType")==0) { result->SetData(oacRemoveFromFigGroupSteinerModType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaSteinerModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSteinerModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaSteinerModTypeEnum_FromoaSteinerModTypeEnum(oaSteinerModTypeEnum ob)
{
    if (ob==oacAddToNetSteinerModType) return PyString_FromString("oacAddToNetSteinerModType");
    if (ob==oacRemoveFromNetSteinerModType) return PyString_FromString("oacRemoveFromNetSteinerModType");
    if (ob==oacSetBBoxSteinerModType) return PyString_FromString("oacSetBBoxSteinerModType");
    if (ob==oacSetLayerSteinerModType) return PyString_FromString("oacSetLayerSteinerModType");
    if (ob==oacAddToFigGroupSteinerModType) return PyString_FromString("oacAddToFigGroupSteinerModType");
    if (ob==oacRemoveFromFigGroupSteinerModType) return PyString_FromString("oacRemoveFromFigGroupSteinerModType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaSteinerModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaSteinerModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaSteinerModTypeEnum_FromoaSteinerModTypeEnum(oaSteinerModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaSteinerModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaSteinerModTypeEnum_doc[] =
"Type convert function for enum: oaSteinerModTypeEnum";
                               
static PyMethodDef PyoaSteinerModTypeEnum_method =
  {"oaSteinerModTypeEnum",(PyCFunction)PyoaSteinerModTypeEnum_TypeFunction,METH_VARARGS,oaSteinerModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaSteinerModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacAddToNetSteinerModType");
    PyDict_SetItemString(mod_dict,"oacAddToNetSteinerModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacRemoveFromNetSteinerModType");
    PyDict_SetItemString(mod_dict,"oacRemoveFromNetSteinerModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetBBoxSteinerModType");
    PyDict_SetItemString(mod_dict,"oacSetBBoxSteinerModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetLayerSteinerModType");
    PyDict_SetItemString(mod_dict,"oacSetLayerSteinerModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAddToFigGroupSteinerModType");
    PyDict_SetItemString(mod_dict,"oacAddToFigGroupSteinerModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacRemoveFromFigGroupSteinerModType");
    PyDict_SetItemString(mod_dict,"oacRemoveFromFigGroupSteinerModType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaSteinerModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaSteinerModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaSteinerModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSteinerQuery
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSteinerQuery_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSteinerQuery_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSteinerQueryObject* self = (PyoaSteinerQueryObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    if (is_raw) {
        PyErr_SetString(PyExc_TypeError,
            "No Constructor for pure-virtual class: oaSteinerQuery");
    }
    else {
        pyv_oaSteinerQuery* p = new pyv_oaSteinerQuery();
        p->pyob=self;
        self->value= (oaRegionQuery*)  p;
        return bself;
    }
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSteinerQuery_tp_dealloc(PyoaSteinerQueryObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSteinerQuery_tp_repr(PyObject *ob)
{
    PyParamoaSteinerQuery value;
    int convert_status=PyoaSteinerQuery_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[36];
    sprintf(buffer,"<oaSteinerQuery::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSteinerQuery_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSteinerQuery v1;
    PyParamoaSteinerQuery v2;
    int convert_status1=PyoaSteinerQuery_Convert(ob1,&v1);
    int convert_status2=PyoaSteinerQuery_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSteinerQuery_Convert(PyObject* ob,PyParamoaSteinerQuery* result)
{
    if (ob == NULL) return 1;
    if (PyoaSteinerQuery_Check(ob)) {
        result->SetData( (oaSteinerQuery*) ((PyoaSteinerQueryObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSteinerQuery Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSteinerQuery_FromoaSteinerQuery(oaSteinerQuery* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaSteinerQuery_Type.tp_alloc(&PyoaSteinerQuery_Type,0);
        if (bself == NULL) return bself;
        PyoaSteinerQueryObject* self = (PyoaSteinerQueryObject*)bself;
        self->value = (oaRegionQuery*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaSteinerQuery::pyv_oaSteinerQuery()
 : pyob(NULL),
   oaSteinerQuery()
{
}

// ------------------------------------------------------------------
pyv_oaSteinerQuery::pyv_oaSteinerQuery(const oaSteinerQuery& p)
 : pyob(NULL),
   oaSteinerQuery(p)
{
}

// ------------------------------------------------------------------
void pyv_oaSteinerQuery::querySteiner(oaSteiner* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"querySteiner");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaSteinerQuery::querySteiner was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaSteiner_FromoaSteiner(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaSteinerQuery::querySteiner had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaSteinerQuery::endRef(oaRef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"endRef");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaSteinerQuery::endRef was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaRef_FromoaRef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaSteinerQuery::endRef had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaSteinerQuery::endRef(oaRef* p1,oaUInt4 p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"endRef");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaSteinerQuery::endRef was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaRef_FromoaRef(p1));
    PyTuple_SetItem(args,1,PyoaUInt4_FromoaUInt4(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaSteinerQuery::endRef had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaSteinerQuery::endRef(oaRef* p1,oaUInt4 p2,oaUInt4 p3)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"endRef");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaSteinerQuery::endRef was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(3);
    PyTuple_SetItem(args,0,PyoaRef_FromoaRef(p1));
    PyTuple_SetItem(args,1,PyoaUInt4_FromoaUInt4(p2));
    PyTuple_SetItem(args,2,PyoaUInt4_FromoaUInt4(p3));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaSteinerQuery::endRef had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
oaBoolean pyv_oaSteinerQuery::startRef(oaRef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"startRef");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaSteinerQuery::startRef was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaRef_FromoaRef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaSteinerQuery::startRef had an error.");
    }
    PyParamoaBoolean rv;
    if (PyoaBoolean_Convert(result,&rv)==0) {
        throw oaPythonException("Python Virtual Function oaBoolean::startRef has incorrect return type.");
    }
    Py_DECREF(result);
    return rv.Data();
}

// ------------------------------------------------------------------
oaBoolean pyv_oaSteinerQuery::startRef(oaRef* p1,oaUInt4 p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"startRef");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaSteinerQuery::startRef was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaRef_FromoaRef(p1));
    PyTuple_SetItem(args,1,PyoaUInt4_FromoaUInt4(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaSteinerQuery::startRef had an error.");
    }
    PyParamoaBoolean rv;
    if (PyoaBoolean_Convert(result,&rv)==0) {
        throw oaPythonException("Python Virtual Function oaBoolean::startRef has incorrect return type.");
    }
    Py_DECREF(result);
    return rv.Data();
}

// ------------------------------------------------------------------
oaBoolean pyv_oaSteinerQuery::startRef(oaRef* p1,oaUInt4 p2,oaUInt4 p3)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"startRef");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaSteinerQuery::startRef was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(3);
    PyTuple_SetItem(args,0,PyoaRef_FromoaRef(p1));
    PyTuple_SetItem(args,1,PyoaUInt4_FromoaUInt4(p2));
    PyTuple_SetItem(args,2,PyoaUInt4_FromoaUInt4(p3));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaSteinerQuery::startRef had an error.");
    }
    PyParamoaBoolean rv;
    if (PyoaBoolean_Convert(result,&rv)==0) {
        throw oaPythonException("Python Virtual Function oaBoolean::startRef has incorrect return type.");
    }
    Py_DECREF(result);
    return rv.Data();
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSteinerQuery_getLayerNum_doc[] = 
"Class: oaSteinerQuery, Function: getLayerNum\n"
"  Paramegers: ()\n"
"    Calls: oaLayerNum getLayerNum() const\n"
"    Signature: getLayerNum|simple-oaLayerNum|\n"
"    BrowseData: 1\n"
"    This function returns the layer number associated with this steiner query.\n"
;

static PyObject*
oaSteinerQuery_getLayerNum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSteinerQuery data;
    int convert_status=PyoaSteinerQuery_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSteinerQueryObject* self=(PyoaSteinerQueryObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaLayerNum result= (data.DataCall()->getLayerNum());
        return PyoaLayerNum_FromoaLayerNum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSteinerQuery_query_doc[] = 
"Class: oaSteinerQuery, Function: query\n"
"  Paramegers: (oaDesign,oaLayerNum,oaBox)\n"
"    Calls: void query(oaDesign* topDesign,oaLayerNum layerNum,const oaBox& region)\n"
"    Signature: query|void-void|ptr-oaDesign,simple-oaLayerNum,cref-oaBox,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners on the specified layer in the specified region of the specified design hierarchy.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    layerNum\n"
"    Only query objects that have this layer number\n"
"    region\n"
"    The region of interest\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaLayerNum,oaBox,oaDist)\n"
"    Calls: void query(oaDesign* topDesign,oaLayerNum layerNum,const oaBox& region,oaDist filterSize)\n"
"    Signature: query|void-void|ptr-oaDesign,simple-oaLayerNum,cref-oaBox,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners on the specified layer in the specified region of the specified design hierarchy.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    layerNum\n"
"    Only query objects that have this layer number\n"
"    region\n"
"    The region of interest\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaLayerNum,oaBox,oaDist,oaUInt4)\n"
"    Calls: void query(oaDesign* topDesign,oaLayerNum layerNum,const oaBox& region,oaDist filterSize,oaUInt4 startLevel)\n"
"    Signature: query|void-void|ptr-oaDesign,simple-oaLayerNum,cref-oaBox,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners on the specified layer in the specified region of the specified design hierarchy.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    layerNum\n"
"    Only query objects that have this layer number\n"
"    region\n"
"    The region of interest\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaLayerNum,oaBox,oaDist,oaUInt4,oaUInt4)\n"
"    Calls: void query(oaDesign* topDesign,oaLayerNum layerNum,const oaBox& region,oaDist filterSize,oaUInt4 startLevel,oaUInt4 stopLevel)\n"
"    Signature: query|void-void|ptr-oaDesign,simple-oaLayerNum,cref-oaBox,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners on the specified layer in the specified region of the specified design hierarchy.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    layerNum\n"
"    Only query objects that have this layer number\n"
"    region\n"
"    The region of interest\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaBox)\n"
"    Calls: void query(oaDesign* topDesign,const oaBox& region)\n"
"    Signature: query|void-void|ptr-oaDesign,cref-oaBox,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners in the specified region of the specified design hierarchy. This function only generates steiners that are not attached to any layers.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    region\n"
"    The region of interest\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaBox,oaDist)\n"
"    Calls: void query(oaDesign* topDesign,const oaBox& region,oaDist filterSize)\n"
"    Signature: query|void-void|ptr-oaDesign,cref-oaBox,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners in the specified region of the specified design hierarchy. This function only generates steiners that are not attached to any layers.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    region\n"
"    The region of interest\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaBox,oaDist,oaUInt4)\n"
"    Calls: void query(oaDesign* topDesign,const oaBox& region,oaDist filterSize,oaUInt4 startLevel)\n"
"    Signature: query|void-void|ptr-oaDesign,cref-oaBox,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners in the specified region of the specified design hierarchy. This function only generates steiners that are not attached to any layers.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    region\n"
"    The region of interest\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaBox,oaDist,oaUInt4,oaUInt4)\n"
"    Calls: void query(oaDesign* topDesign,const oaBox& region,oaDist filterSize,oaUInt4 startLevel,oaUInt4 stopLevel)\n"
"    Signature: query|void-void|ptr-oaDesign,cref-oaBox,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners in the specified region of the specified design hierarchy. This function only generates steiners that are not attached to any layers.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    region\n"
"    The region of interest\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaLayerNum,oaBox,oaTransform)\n"
"    Calls: void query(oaDesign* topDesign,oaLayerNum layerNum,const oaBox& region,const oaTransform& xform)\n"
"    Signature: query|void-void|ptr-oaDesign,simple-oaLayerNum,cref-oaBox,cref-oaTransform,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners on the specified layer, in the specified region of the specified design hierarchy.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    layerNum\n"
"    Only query objects that have this layer number\n"
"    region\n"
"    The region of interest\n"
"    xform\n"
"    The current transform that is applied to the design\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaLayerNum,oaBox,oaTransform,oaDist)\n"
"    Calls: void query(oaDesign* topDesign,oaLayerNum layerNum,const oaBox& region,const oaTransform& xform,oaDist filterSize)\n"
"    Signature: query|void-void|ptr-oaDesign,simple-oaLayerNum,cref-oaBox,cref-oaTransform,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners on the specified layer, in the specified region of the specified design hierarchy.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    layerNum\n"
"    Only query objects that have this layer number\n"
"    region\n"
"    The region of interest\n"
"    xform\n"
"    The current transform that is applied to the design\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaLayerNum,oaBox,oaTransform,oaDist,oaUInt4)\n"
"    Calls: void query(oaDesign* topDesign,oaLayerNum layerNum,const oaBox& region,const oaTransform& xform,oaDist filterSize,oaUInt4 startLevel)\n"
"    Signature: query|void-void|ptr-oaDesign,simple-oaLayerNum,cref-oaBox,cref-oaTransform,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners on the specified layer, in the specified region of the specified design hierarchy.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    layerNum\n"
"    Only query objects that have this layer number\n"
"    region\n"
"    The region of interest\n"
"    xform\n"
"    The current transform that is applied to the design\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaLayerNum,oaBox,oaTransform,oaDist,oaUInt4,oaUInt4)\n"
"    Calls: void query(oaDesign* topDesign,oaLayerNum layerNum,const oaBox& region,const oaTransform& xform,oaDist filterSize,oaUInt4 startLevel,oaUInt4 stopLevel)\n"
"    Signature: query|void-void|ptr-oaDesign,simple-oaLayerNum,cref-oaBox,cref-oaTransform,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners on the specified layer, in the specified region of the specified design hierarchy.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    layerNum\n"
"    Only query objects that have this layer number\n"
"    region\n"
"    The region of interest\n"
"    xform\n"
"    The current transform that is applied to the design\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaBox,oaTransform)\n"
"    Calls: void query(oaDesign* topDesign,const oaBox& region,const oaTransform& xform)\n"
"    Signature: query|void-void|ptr-oaDesign,cref-oaBox,cref-oaTransform,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners in the specified region of the specified design hierarchy. This function only generates steiners that are not attached to any layers.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    region\n"
"    The region of interest\n"
"    xform\n"
"    The current transform that is applied to the design\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaBox,oaTransform,oaDist)\n"
"    Calls: void query(oaDesign* topDesign,const oaBox& region,const oaTransform& xform,oaDist filterSize)\n"
"    Signature: query|void-void|ptr-oaDesign,cref-oaBox,cref-oaTransform,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners in the specified region of the specified design hierarchy. This function only generates steiners that are not attached to any layers.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    region\n"
"    The region of interest\n"
"    xform\n"
"    The current transform that is applied to the design\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaBox,oaTransform,oaDist,oaUInt4)\n"
"    Calls: void query(oaDesign* topDesign,const oaBox& region,const oaTransform& xform,oaDist filterSize,oaUInt4 startLevel)\n"
"    Signature: query|void-void|ptr-oaDesign,cref-oaBox,cref-oaTransform,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners in the specified region of the specified design hierarchy. This function only generates steiners that are not attached to any layers.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    region\n"
"    The region of interest\n"
"    xform\n"
"    The current transform that is applied to the design\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
"  Paramegers: (oaDesign,oaBox,oaTransform,oaDist,oaUInt4,oaUInt4)\n"
"    Calls: void query(oaDesign* topDesign,const oaBox& region,const oaTransform& xform,oaDist filterSize,oaUInt4 startLevel,oaUInt4 stopLevel)\n"
"    Signature: query|void-void|ptr-oaDesign,cref-oaBox,cref-oaTransform,simple-oaDist,simple-oaUInt4,simple-oaUInt4,\n"
"    This function begins the query process to start generating steiners in the specified region of the specified design hierarchy. This function only generates steiners that are not attached to any layers.\n"
"    topDesign\n"
"    Pointer to the top design\n"
"    region\n"
"    The region of interest\n"
"    xform\n"
"    The current transform that is applied to the design\n"
"    filterSize\n"
"    Only query objects whose size is equal to or larger than filterSize\n"
"    startLevel\n"
"    The level of block hierarchy to start the querying\n"
"    stopLevel\n"
"    The level of block hierarchy to stop the querying\n"
;

static PyObject*
oaSteinerQuery_query(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSteinerQuery data;
    int convert_status=PyoaSteinerQuery_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSteinerQueryObject* self=(PyoaSteinerQueryObject*)ob;

    // Case: (oaDesign,oaLayerNum,oaBox)
    {
        PyParamoaDesign p1;
        PyParamoaLayerNum p2;
        PyParamoaBox p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaBox_Convert,&p3)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaLayerNum,oaBox,oaDist)
    {
        PyParamoaDesign p1;
        PyParamoaLayerNum p2;
        PyParamoaBox p3;
        PyParamoaDist p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaBox_Convert,&p3,
              &PyoaDist_Convert,&p4)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaLayerNum,oaBox,oaDist,oaUInt4)
    {
        PyParamoaDesign p1;
        PyParamoaLayerNum p2;
        PyParamoaBox p3;
        PyParamoaDist p4;
        PyParamoaUInt4 p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaBox_Convert,&p3,
              &PyoaDist_Convert,&p4,
              &PyoaUInt4_Convert,&p5)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaLayerNum,oaBox,oaDist,oaUInt4,oaUInt4)
    {
        PyParamoaDesign p1;
        PyParamoaLayerNum p2;
        PyParamoaBox p3;
        PyParamoaDist p4;
        PyParamoaUInt4 p5;
        PyParamoaUInt4 p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaBox_Convert,&p3,
              &PyoaDist_Convert,&p4,
              &PyoaUInt4_Convert,&p5,
              &PyoaUInt4_Convert,&p6)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaBox)
    {
        PyParamoaDesign p1;
        PyParamoaBox p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaBox_Convert,&p2)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaBox,oaDist)
    {
        PyParamoaDesign p1;
        PyParamoaBox p2;
        PyParamoaDist p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaBox_Convert,&p2,
              &PyoaDist_Convert,&p3)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaBox,oaDist,oaUInt4)
    {
        PyParamoaDesign p1;
        PyParamoaBox p2;
        PyParamoaDist p3;
        PyParamoaUInt4 p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaBox_Convert,&p2,
              &PyoaDist_Convert,&p3,
              &PyoaUInt4_Convert,&p4)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaBox,oaDist,oaUInt4,oaUInt4)
    {
        PyParamoaDesign p1;
        PyParamoaBox p2;
        PyParamoaDist p3;
        PyParamoaUInt4 p4;
        PyParamoaUInt4 p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaBox_Convert,&p2,
              &PyoaDist_Convert,&p3,
              &PyoaUInt4_Convert,&p4,
              &PyoaUInt4_Convert,&p5)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaLayerNum,oaBox,oaTransform)
    {
        PyParamoaDesign p1;
        PyParamoaLayerNum p2;
        PyParamoaBox p3;
        PyParamoaTransform p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaBox_Convert,&p3,
              &PyoaTransform_Convert,&p4)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaLayerNum,oaBox,oaTransform,oaDist)
    {
        PyParamoaDesign p1;
        PyParamoaLayerNum p2;
        PyParamoaBox p3;
        PyParamoaTransform p4;
        PyParamoaDist p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaBox_Convert,&p3,
              &PyoaTransform_Convert,&p4,
              &PyoaDist_Convert,&p5)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaLayerNum,oaBox,oaTransform,oaDist,oaUInt4)
    {
        PyParamoaDesign p1;
        PyParamoaLayerNum p2;
        PyParamoaBox p3;
        PyParamoaTransform p4;
        PyParamoaDist p5;
        PyParamoaUInt4 p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaBox_Convert,&p3,
              &PyoaTransform_Convert,&p4,
              &PyoaDist_Convert,&p5,
              &PyoaUInt4_Convert,&p6)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaLayerNum,oaBox,oaTransform,oaDist,oaUInt4,oaUInt4)
    {
        PyParamoaDesign p1;
        PyParamoaLayerNum p2;
        PyParamoaBox p3;
        PyParamoaTransform p4;
        PyParamoaDist p5;
        PyParamoaUInt4 p6;
        PyParamoaUInt4 p7;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaBox_Convert,&p3,
              &PyoaTransform_Convert,&p4,
              &PyoaDist_Convert,&p5,
              &PyoaUInt4_Convert,&p6,
              &PyoaUInt4_Convert,&p7)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaBox,oaTransform)
    {
        PyParamoaDesign p1;
        PyParamoaBox p2;
        PyParamoaTransform p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaBox_Convert,&p2,
              &PyoaTransform_Convert,&p3)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaBox,oaTransform,oaDist)
    {
        PyParamoaDesign p1;
        PyParamoaBox p2;
        PyParamoaTransform p3;
        PyParamoaDist p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaBox_Convert,&p2,
              &PyoaTransform_Convert,&p3,
              &PyoaDist_Convert,&p4)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaBox,oaTransform,oaDist,oaUInt4)
    {
        PyParamoaDesign p1;
        PyParamoaBox p2;
        PyParamoaTransform p3;
        PyParamoaDist p4;
        PyParamoaUInt4 p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaBox_Convert,&p2,
              &PyoaTransform_Convert,&p3,
              &PyoaDist_Convert,&p4,
              &PyoaUInt4_Convert,&p5)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaDesign,oaBox,oaTransform,oaDist,oaUInt4,oaUInt4)
    {
        PyParamoaDesign p1;
        PyParamoaBox p2;
        PyParamoaTransform p3;
        PyParamoaDist p4;
        PyParamoaUInt4 p5;
        PyParamoaUInt4 p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaDesign_Convert,&p1,
              &PyoaBox_Convert,&p2,
              &PyoaTransform_Convert,&p3,
              &PyoaDist_Convert,&p4,
              &PyoaUInt4_Convert,&p5,
              &PyoaUInt4_Convert,&p6)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            data.DataCall()->query(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSteinerQuery, function: query, Choices are:\n"
        "    (oaDesign,oaLayerNum,oaBox)\n"
        "    (oaDesign,oaLayerNum,oaBox,oaDist)\n"
        "    (oaDesign,oaLayerNum,oaBox,oaDist,oaUInt4)\n"
        "    (oaDesign,oaLayerNum,oaBox,oaDist,oaUInt4,oaUInt4)\n"
        "    (oaDesign,oaBox)\n"
        "    (oaDesign,oaBox,oaDist)\n"
        "    (oaDesign,oaBox,oaDist,oaUInt4)\n"
        "    (oaDesign,oaBox,oaDist,oaUInt4,oaUInt4)\n"
        "    (oaDesign,oaLayerNum,oaBox,oaTransform)\n"
        "    (oaDesign,oaLayerNum,oaBox,oaTransform,oaDist)\n"
        "    (oaDesign,oaLayerNum,oaBox,oaTransform,oaDist,oaUInt4)\n"
        "    (oaDesign,oaLayerNum,oaBox,oaTransform,oaDist,oaUInt4,oaUInt4)\n"
        "    (oaDesign,oaBox,oaTransform)\n"
        "    (oaDesign,oaBox,oaTransform,oaDist)\n"
        "    (oaDesign,oaBox,oaTransform,oaDist,oaUInt4)\n"
        "    (oaDesign,oaBox,oaTransform,oaDist,oaUInt4,oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSteinerQuery_querySteiner_doc[] = 
"Class: oaSteinerQuery, Function: querySteiner\n"
"  Paramegers: (oaSteiner)\n"
"    Calls: virtual void querySteiner(oaSteiner* steiner)\n"
"    Signature: querySteiner|void-void|ptr-oaSteiner,\n"
"    The function processes each result of the steiner query.\n"
"    steiner\n"
"    Pointer to the oaSteiner object that is being queried.\n"
;

static PyObject*
oaSteinerQuery_querySteiner(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSteinerQuery data;
    int convert_status=PyoaSteinerQuery_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSteinerQueryObject* self=(PyoaSteinerQueryObject*)ob;

    PyParamoaSteiner p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaSteiner_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        PyErr_SetString(PyExc_TypeError,
            "Call to Pure-Virtual Function class: oaSteinerQuery, function: querySteiner");
            return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaSteinerQuery_assign_doc[] = 
"Class: oaSteinerQuery, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSteinerQuery_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSteinerQuery data;
  int convert_status=PyoaSteinerQuery_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSteinerQuery p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSteinerQuery_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSteinerQuery_methodlist[] = {
    {"getLayerNum",(PyCFunction)oaSteinerQuery_getLayerNum,METH_VARARGS,oaSteinerQuery_getLayerNum_doc},
    {"query",(PyCFunction)oaSteinerQuery_query,METH_VARARGS,oaSteinerQuery_query_doc},
    {"querySteiner",(PyCFunction)oaSteinerQuery_querySteiner,METH_VARARGS,oaSteinerQuery_querySteiner_doc},
    {"assign",(PyCFunction)oaSteinerQuery_tp_assign,METH_VARARGS,oaSteinerQuery_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSteinerQuery_doc[] = 
"Class: oaSteinerQuery\n"
"  The oaSteinerQuery class implements functionality to query a specified region in a design hierarchy and quickly return all Steiners that overlap the region.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaSteinerQuery()\n"
"    Signature: oaSteinerQuery||\n"
"    The constructor for the oaSteinerQuery.\n"
"  Paramegers: (oaSteinerQuery)\n"
"    Calls: (const oaSteinerQuery&)\n"
"    Signature: oaSteinerQuery||cref-oaSteinerQuery,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSteinerQuery_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSteinerQuery",
    sizeof(PyoaSteinerQueryObject),
    0,
    (destructor)oaSteinerQuery_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSteinerQuery_tp_compare,	/* tp_compare */
    (reprfunc)oaSteinerQuery_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSteinerQuery_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSteinerQuery_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaRegionQuery_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSteinerQuery_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSteinerQuery_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSteinerQuery_Type)<0) {
      printf("** PyType_Ready failed for: oaSteinerQuery\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSteinerQuery",
           (PyObject*)(&PyoaSteinerQuery_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSteinerQuery\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStepperMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStepperMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStepperMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStepperMapObject* self = (PyoaStepperMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStepperMap)
    {
        PyParamoaStepperMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStepperMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStepperMap, Choices are:\n"
        "    (oaStepperMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStepperMap_tp_dealloc(PyoaStepperMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStepperMap_tp_repr(PyObject *ob)
{
    PyParamoaStepperMap value;
    int convert_status=PyoaStepperMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[34];
    sprintf(buffer,"<oaStepperMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStepperMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStepperMap v1;
    PyParamoaStepperMap v2;
    int convert_status1=PyoaStepperMap_Convert(ob1,&v1);
    int convert_status2=PyoaStepperMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStepperMap_Convert(PyObject* ob,PyParamoaStepperMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaStepperMap_Check(ob)) {
        result->SetData( (oaStepperMap**) ((PyoaStepperMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStepperMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStepperMap_FromoaStepperMap(oaStepperMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStepperMap* data=*value;
        PyObject* bself = PyoaStepperMap_Type.tp_alloc(&PyoaStepperMap_Type,0);
        if (bself == NULL) return bself;
        PyoaStepperMapObject* self = (PyoaStepperMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStepperMap_FromoaStepperMap(oaStepperMap* data)
{
    if (data) {
       PyObject* bself = PyoaStepperMap_Type.tp_alloc(&PyoaStepperMap_Type,0);
       if (bself == NULL) return bself;
       PyoaStepperMapObject* self = (PyoaStepperMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStepperMap_addPoint_doc[] = 
"Class: oaStepperMap, Function: addPoint\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void addPoint(const oaPoint& point)\n"
"    Signature: addPoint|void-void|cref-oaPoint,\n"
"    This function adds a step point to this stepperMap. A step point specifies where the associate image should be applied.\n"
"    point\n"
"    Specifies a step point to associate with this stepperMap.\n"
;

static PyObject*
oaStepperMap_addPoint(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        data.DataCall()->addPoint(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_destroy_doc[] = 
"Class: oaStepperMap, Function: destroy\n"
"  Paramegers: ()\n"
"    Calls: void destroy()\n"
"    Signature: destroy|void-void|\n"
"    BrowseData: 0\n"
"    This function destroys this stepper map, removing it from the database.\n"
;

static PyObject*
oaStepperMap_destroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->destroy();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_getImage_doc[] = 
"Class: oaStepperMap, Function: getImage\n"
"  Paramegers: ()\n"
"    Calls: oaImage* getImage() const\n"
"    Signature: getImage|ptr-oaImage|\n"
"    BrowseData: 1\n"
"    This function returns the image associated with this stepperMap. NULL is returned if no image is associated with the stepperMap yet.\n"
;

static PyObject*
oaStepperMap_getImage(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaImagep result= (data.DataCall()->getImage());
        return PyoaImage_FromoaImage(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_getPoints_doc[] = 
"Class: oaStepperMap, Function: getPoints\n"
"  Paramegers: (oaPointArray)\n"
"    Calls: void getPoints(oaPointArray& stepPoints) const\n"
"    Signature: getPoints|void-void|ref-oaPointArray,\n"
"    BrowseData: 0,oaPointArray\n"
"    This returns the collection of step points associated with this stepperMap. The points are placed in the given point array stepPoints .\n"
"    stepPoints\n"
"    The array of step points returned by this function\n"
;

static PyObject*
oaStepperMap_getPoints(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPointArray p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPointArray_Convert,&p1)) {
        data.DataCall()->getPoints(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_getStepperName_doc[] = 
"Class: oaStepperMap, Function: getStepperName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getStepperName(oaString& stepperName) const\n"
"    Signature: getStepperName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the stepper name associated with this stepper map in the provided string.\n"
"    stepperName\n"
"    The string the stepperMap name is returned in\n"
;

static PyObject*
oaStepperMap_getStepperName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getStepperName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_hasImage_doc[] = 
"Class: oaStepperMap, Function: hasImage\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasImage() const\n"
"    Signature: hasImage|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean indicating whether an image has been associated with this stepperMap.\n"
;

static PyObject*
oaStepperMap_hasImage(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->hasImage());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_hasPoint_doc[] = 
"Class: oaStepperMap, Function: hasPoint\n"
"  Paramegers: (oaPoint)\n"
"    Calls: oaBoolean hasPoint(const oaPoint& point) const\n"
"    Signature: hasPoint|simple-oaBoolean|cref-oaPoint,\n"
"    This function returns a boolean indicating whether the specified point is a step point associated with this stepperMap.\n"
"    point\n"
"    The step point to search for\n"
;

static PyObject*
oaStepperMap_hasPoint(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        oaBoolean result= (data.DataCall()->hasPoint(p1.Data()));
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_hasPoints_doc[] = 
"Class: oaStepperMap, Function: hasPoints\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasPoints() const\n"
"    Signature: hasPoints|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean indicating whether step points have been assigned to this stepperMap.\n"
;

static PyObject*
oaStepperMap_hasPoints(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->hasPoints());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_removePoint_doc[] = 
"Class: oaStepperMap, Function: removePoint\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void removePoint(const oaPoint& point)\n"
"    Signature: removePoint|void-void|cref-oaPoint,\n"
"    This function removes the specified step point from this stepperMap.\n"
"    point\n"
"    The step point to remove from this stepperMap.\n"
;

static PyObject*
oaStepperMap_removePoint(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        data.DataCall()->removePoint(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_setImage_doc[] = 
"Class: oaStepperMap, Function: setImage\n"
"  Paramegers: (oaImage)\n"
"    Calls: void setImage(oaImage* image)\n"
"    Signature: setImage|void-void|ptr-oaImage,\n"
"    This function sets the image to use with this stepperMap.\n"
"    image\n"
"    A pointer to an oaImage to use with this stepperMap\n"
;

static PyObject*
oaStepperMap_setImage(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaImage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaImage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->setImage(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_setStepperName_doc[] = 
"Class: oaStepperMap, Function: setStepperName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setStepperName(const oaString& value)\n"
"    Signature: setStepperName|void-void|cref-oaString,\n"
"    This function changes the stepper name of this stepper map. The new name is in the provided string.\n"
"    stepperName\n"
"    The new stepper name\n"
;

static PyObject*
oaStepperMap_setStepperName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStepperMapObject* self=(PyoaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setStepperName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_isNull_doc[] =
"Class: oaStepperMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStepperMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStepperMap data;
    int convert_status=PyoaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStepperMap_assign_doc[] = 
"Class: oaStepperMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStepperMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStepperMap data;
  int convert_status=PyoaStepperMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStepperMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStepperMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStepperMap_methodlist[] = {
    {"addPoint",(PyCFunction)oaStepperMap_addPoint,METH_VARARGS,oaStepperMap_addPoint_doc},
    {"destroy",(PyCFunction)oaStepperMap_destroy,METH_VARARGS,oaStepperMap_destroy_doc},
    {"getImage",(PyCFunction)oaStepperMap_getImage,METH_VARARGS,oaStepperMap_getImage_doc},
    {"getPoints",(PyCFunction)oaStepperMap_getPoints,METH_VARARGS,oaStepperMap_getPoints_doc},
    {"getStepperName",(PyCFunction)oaStepperMap_getStepperName,METH_VARARGS,oaStepperMap_getStepperName_doc},
    {"hasImage",(PyCFunction)oaStepperMap_hasImage,METH_VARARGS,oaStepperMap_hasImage_doc},
    {"hasPoint",(PyCFunction)oaStepperMap_hasPoint,METH_VARARGS,oaStepperMap_hasPoint_doc},
    {"hasPoints",(PyCFunction)oaStepperMap_hasPoints,METH_VARARGS,oaStepperMap_hasPoints_doc},
    {"removePoint",(PyCFunction)oaStepperMap_removePoint,METH_VARARGS,oaStepperMap_removePoint_doc},
    {"setImage",(PyCFunction)oaStepperMap_setImage,METH_VARARGS,oaStepperMap_setImage_doc},
    {"setStepperName",(PyCFunction)oaStepperMap_setStepperName,METH_VARARGS,oaStepperMap_setStepperName_doc},
    {"isNull",(PyCFunction)oaStepperMap_tp_isNull,METH_VARARGS,oaStepperMap_isNull_doc},
    {"assign",(PyCFunction)oaStepperMap_tp_assign,METH_VARARGS,oaStepperMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStepperMap_doc[] = 
"Class: oaStepperMap\n"
"  The oaStepperMap class implements an object that specifies where to step reticle images across a silicon wafer.\n"
"  The oaStepperMap class can be observed by deriving from\n"
"Constructors:\n"
"  Paramegers: (oaStepperMap)\n"
"    Calls: (const oaStepperMap&)\n"
"    Signature: oaStepperMap||cref-oaStepperMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStepperMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStepperMap",
    sizeof(PyoaStepperMapObject),
    0,
    (destructor)oaStepperMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStepperMap_tp_compare,	/* tp_compare */
    (reprfunc)oaStepperMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStepperMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStepperMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaWaferObject_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStepperMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStepperMap_static_create_doc[] = 
"Class: oaStepperMap, Function: create\n"
"  Paramegers: (oaWaferDesc,oaString)\n"
"    Calls: oaStepperMap* create(oaWaferDesc* waferDesc,const oaString& stepperName)\n"
"    Signature: create|ptr-oaStepperMap|ptr-oaWaferDesc,cref-oaString,\n"
"    This function creates a stepper map with the specified name.\n"
"    waferDesc\n"
"    The wafer description to associate the stepperMap with\n"
"    stepperName\n"
"    The name of the wafer stepping machine\n"
;

static PyObject*
oaStepperMap_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaWaferDesc p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferDesc_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStepperMapp result= (oaStepperMap::create(p1.Data(),p2.Data()));
        return PyoaStepperMap_FromoaStepperMap(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStepperMap_static_find_doc[] = 
"Class: oaStepperMap, Function: find\n"
"  Paramegers: (oaWaferDesc,oaString)\n"
"    Calls: oaStepperMap* find(const oaWaferDesc* waferDesc,const oaString& name)\n"
"    Signature: find|ptr-oaStepperMap|cptr-oaWaferDesc,cref-oaString,\n"
"    This function searches the wafer description for a stepper map with the given name. A pointer to the stepper map is returned if found. Otherwise, NULL is returned.\n"
"    waferDesc\n"
"    The wafer description to search\n"
"    name\n"
"    The stepper name to locate\n"
;

static PyObject*
oaStepperMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaWaferDesc p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferDesc_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStepperMapp result= (oaStepperMap::find(p1.Data(),p2.Data()));
        return PyoaStepperMap_FromoaStepperMap(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStepperMap_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaStepperMap_static_create,METH_VARARGS,oaStepperMap_static_create_doc},
    {"static_find",(PyCFunction)oaStepperMap_static_find,METH_VARARGS,oaStepperMap_static_find_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStepperMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStepperMap_Type)<0) {
      printf("** PyType_Ready failed for: oaStepperMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStepperMap",
           (PyObject*)(&PyoaStepperMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStepperMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStepperMap_Type.tp_dict;
    for(method=oaStepperMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStepperMapModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaStepperMapModTypeEnum_Convert(PyObject* ob,PyParamoaStepperMapModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacSetStepperNameStepperMapModType")==0) { result->SetData(oacSetStepperNameStepperMapModType); return 1;}
        if (strcasecmp(str,"oacSetImageStepperMapModType")==0) { result->SetData(oacSetImageStepperMapModType); return 1;}
        if (strcasecmp(str,"oacAddPointStepperMapModType")==0) { result->SetData(oacAddPointStepperMapModType); return 1;}
        if (strcasecmp(str,"oacRemovePointStepperMapModType")==0) { result->SetData(oacRemovePointStepperMapModType); return 1;}
        if (strcasecmp(str,"oacSetPointsStepperMapModType")==0) { result->SetData(oacSetPointsStepperMapModType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaStepperMapModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStepperMapModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaStepperMapModTypeEnum_FromoaStepperMapModTypeEnum(oaStepperMapModTypeEnum ob)
{
    if (ob==oacSetStepperNameStepperMapModType) return PyString_FromString("oacSetStepperNameStepperMapModType");
    if (ob==oacSetImageStepperMapModType) return PyString_FromString("oacSetImageStepperMapModType");
    if (ob==oacAddPointStepperMapModType) return PyString_FromString("oacAddPointStepperMapModType");
    if (ob==oacRemovePointStepperMapModType) return PyString_FromString("oacRemovePointStepperMapModType");
    if (ob==oacSetPointsStepperMapModType) return PyString_FromString("oacSetPointsStepperMapModType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaStepperMapModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaStepperMapModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaStepperMapModTypeEnum_FromoaStepperMapModTypeEnum(oaStepperMapModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaStepperMapModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaStepperMapModTypeEnum_doc[] =
"Type convert function for enum: oaStepperMapModTypeEnum";
                               
static PyMethodDef PyoaStepperMapModTypeEnum_method =
  {"oaStepperMapModTypeEnum",(PyCFunction)PyoaStepperMapModTypeEnum_TypeFunction,METH_VARARGS,oaStepperMapModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaStepperMapModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacSetStepperNameStepperMapModType");
    PyDict_SetItemString(mod_dict,"oacSetStepperNameStepperMapModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetImageStepperMapModType");
    PyDict_SetItemString(mod_dict,"oacSetImageStepperMapModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAddPointStepperMapModType");
    PyDict_SetItemString(mod_dict,"oacAddPointStepperMapModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacRemovePointStepperMapModType");
    PyDict_SetItemString(mod_dict,"oacRemovePointStepperMapModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetPointsStepperMapModType");
    PyDict_SetItemString(mod_dict,"oacSetPointsStepperMapModType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaStepperMapModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaStepperMapModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaStepperMapModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaAnalysisOpPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaAnalysisOpPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaAnalysisOpPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaAnalysisOpPointObject* self = (PyoaStringAppDef_oaAnalysisOpPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaAnalysisOpPoint)
    {
        PyParamoaStringAppDef_oaAnalysisOpPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaAnalysisOpPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaAnalysisOpPoint, Choices are:\n"
        "    (oaStringAppDef_oaAnalysisOpPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaAnalysisOpPoint_tp_dealloc(PyoaStringAppDef_oaAnalysisOpPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaAnalysisOpPoint_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaAnalysisOpPoint value;
    int convert_status=PyoaStringAppDef_oaAnalysisOpPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaStringAppDef_oaAnalysisOpPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaAnalysisOpPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaAnalysisOpPoint v1;
    PyParamoaStringAppDef_oaAnalysisOpPoint v2;
    int convert_status1=PyoaStringAppDef_oaAnalysisOpPoint_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaAnalysisOpPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaAnalysisOpPoint_Convert(PyObject* ob,PyParamoaStringAppDef_oaAnalysisOpPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaAnalysisOpPoint_Check(ob)) {
        result->SetData( (oaStringAppDef_oaAnalysisOpPoint**) ((PyoaStringAppDef_oaAnalysisOpPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaAnalysisOpPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaAnalysisOpPoint_FromoaStringAppDef_oaAnalysisOpPoint(oaStringAppDef_oaAnalysisOpPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaAnalysisOpPoint* data=*value;
        PyObject* bself = PyoaStringAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaStringAppDef_oaAnalysisOpPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaAnalysisOpPointObject* self = (PyoaStringAppDef_oaAnalysisOpPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaAnalysisOpPoint_FromoaStringAppDef_oaAnalysisOpPoint(oaStringAppDef_oaAnalysisOpPoint* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaStringAppDef_oaAnalysisOpPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaAnalysisOpPointObject* self = (PyoaStringAppDef_oaAnalysisOpPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisOpPoint_get_doc[] = 
"Class: oaStringAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaAnalysisOpPoint,oaString)\n"
"    Calls: void get(const oaAnalysisOpPoint* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaAnalysisOpPoint,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaAnalysisOpPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaStringAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAnalysisOpPointObject* self=(PyoaStringAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisOpPoint_getDefault_doc[] = 
"Class: oaStringAppDef_oaAnalysisOpPoint, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaAnalysisOpPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaStringAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAnalysisOpPointObject* self=(PyoaStringAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisOpPoint_set_doc[] = 
"Class: oaStringAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaAnalysisOpPoint,oaString)\n"
"    Calls: void set(oaAnalysisOpPoint* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaAnalysisOpPoint,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaAnalysisOpPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaStringAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAnalysisOpPointObject* self=(PyoaStringAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisOpPoint_isNull_doc[] =
"Class: oaStringAppDef_oaAnalysisOpPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaAnalysisOpPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaStringAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaAnalysisOpPoint_assign_doc[] = 
"Class: oaStringAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaAnalysisOpPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaAnalysisOpPoint data;
  int convert_status=PyoaStringAppDef_oaAnalysisOpPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaAnalysisOpPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaAnalysisOpPoint_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaAnalysisOpPoint_get,METH_VARARGS,oaStringAppDef_oaAnalysisOpPoint_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaAnalysisOpPoint_getDefault,METH_VARARGS,oaStringAppDef_oaAnalysisOpPoint_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaAnalysisOpPoint_set,METH_VARARGS,oaStringAppDef_oaAnalysisOpPoint_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaAnalysisOpPoint_tp_isNull,METH_VARARGS,oaStringAppDef_oaAnalysisOpPoint_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaAnalysisOpPoint_tp_assign,METH_VARARGS,oaStringAppDef_oaAnalysisOpPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisOpPoint_doc[] = 
"Class: oaStringAppDef_oaAnalysisOpPoint\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaAnalysisOpPoint)\n"
"    Calls: (const oaStringAppDef_oaAnalysisOpPoint&)\n"
"    Signature: oaStringAppDef_oaAnalysisOpPoint||cref-oaStringAppDef_oaAnalysisOpPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaAnalysisOpPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaAnalysisOpPoint",
    sizeof(PyoaStringAppDef_oaAnalysisOpPointObject),
    0,
    (destructor)oaStringAppDef_oaAnalysisOpPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaAnalysisOpPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaAnalysisOpPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaAnalysisOpPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaAnalysisOpPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaAnalysisOpPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisOpPoint_static_find_doc[] = 
"Class: oaStringAppDef_oaAnalysisOpPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaAnalysisOpPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaAnalysisOpPoint|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaAnalysisOpPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaAnalysisOpPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaAnalysisOpPointp result= (oaStringAppDef_oaAnalysisOpPoint::find(p1.Data()));
            return PyoaStringAppDef_oaAnalysisOpPoint_FromoaStringAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAnalysisOpPointp result= (oaStringAppDef_oaAnalysisOpPoint::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaAnalysisOpPoint_FromoaStringAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaAnalysisOpPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisOpPoint_static_get_doc[] = 
"Class: oaStringAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaAnalysisOpPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisOpPoint|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisOpPoint|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisOpPoint|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaAnalysisOpPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaAnalysisOpPointp result= (oaStringAppDef_oaAnalysisOpPoint::get(p1.Data()));
            return PyoaStringAppDef_oaAnalysisOpPoint_FromoaStringAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaAnalysisOpPointp result= (oaStringAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaAnalysisOpPoint_FromoaStringAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaAnalysisOpPointp result= (oaStringAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaAnalysisOpPoint_FromoaStringAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAnalysisOpPointp result= (oaStringAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaAnalysisOpPoint_FromoaStringAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAnalysisOpPointp result= (oaStringAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaAnalysisOpPoint_FromoaStringAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAnalysisOpPointp result= (oaStringAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaAnalysisOpPoint_FromoaStringAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaAnalysisOpPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaAnalysisOpPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaAnalysisOpPoint_static_find,METH_VARARGS,oaStringAppDef_oaAnalysisOpPoint_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaAnalysisOpPoint_static_get,METH_VARARGS,oaStringAppDef_oaAnalysisOpPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaAnalysisOpPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaAnalysisOpPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaAnalysisOpPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaAnalysisOpPoint",
           (PyObject*)(&PyoaStringAppDef_oaAnalysisOpPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaAnalysisOpPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaAnalysisOpPoint_Type.tp_dict;
    for(method=oaStringAppDef_oaAnalysisOpPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaAnalysisPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaAnalysisPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaAnalysisPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaAnalysisPointObject* self = (PyoaStringAppDef_oaAnalysisPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaAnalysisPoint)
    {
        PyParamoaStringAppDef_oaAnalysisPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaAnalysisPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaAnalysisPoint, Choices are:\n"
        "    (oaStringAppDef_oaAnalysisPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaAnalysisPoint_tp_dealloc(PyoaStringAppDef_oaAnalysisPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaAnalysisPoint_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaAnalysisPoint value;
    int convert_status=PyoaStringAppDef_oaAnalysisPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaStringAppDef_oaAnalysisPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaAnalysisPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaAnalysisPoint v1;
    PyParamoaStringAppDef_oaAnalysisPoint v2;
    int convert_status1=PyoaStringAppDef_oaAnalysisPoint_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaAnalysisPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaAnalysisPoint_Convert(PyObject* ob,PyParamoaStringAppDef_oaAnalysisPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaAnalysisPoint_Check(ob)) {
        result->SetData( (oaStringAppDef_oaAnalysisPoint**) ((PyoaStringAppDef_oaAnalysisPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaAnalysisPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaAnalysisPoint_FromoaStringAppDef_oaAnalysisPoint(oaStringAppDef_oaAnalysisPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaAnalysisPoint* data=*value;
        PyObject* bself = PyoaStringAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaStringAppDef_oaAnalysisPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaAnalysisPointObject* self = (PyoaStringAppDef_oaAnalysisPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaAnalysisPoint_FromoaStringAppDef_oaAnalysisPoint(oaStringAppDef_oaAnalysisPoint* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaStringAppDef_oaAnalysisPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaAnalysisPointObject* self = (PyoaStringAppDef_oaAnalysisPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisPoint_get_doc[] = 
"Class: oaStringAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaAnalysisPoint,oaString)\n"
"    Calls: void get(const oaAnalysisPoint* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaAnalysisPoint,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaAnalysisPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAnalysisPoint data;
    int convert_status=PyoaStringAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAnalysisPointObject* self=(PyoaStringAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisPoint_getDefault_doc[] = 
"Class: oaStringAppDef_oaAnalysisPoint, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaAnalysisPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAnalysisPoint data;
    int convert_status=PyoaStringAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAnalysisPointObject* self=(PyoaStringAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisPoint_set_doc[] = 
"Class: oaStringAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaAnalysisPoint,oaString)\n"
"    Calls: void set(oaAnalysisPoint* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaAnalysisPoint,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaAnalysisPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAnalysisPoint data;
    int convert_status=PyoaStringAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAnalysisPointObject* self=(PyoaStringAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisPoint_isNull_doc[] =
"Class: oaStringAppDef_oaAnalysisPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaAnalysisPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaAnalysisPoint data;
    int convert_status=PyoaStringAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaAnalysisPoint_assign_doc[] = 
"Class: oaStringAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaAnalysisPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaAnalysisPoint data;
  int convert_status=PyoaStringAppDef_oaAnalysisPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaAnalysisPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaAnalysisPoint_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaAnalysisPoint_get,METH_VARARGS,oaStringAppDef_oaAnalysisPoint_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaAnalysisPoint_getDefault,METH_VARARGS,oaStringAppDef_oaAnalysisPoint_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaAnalysisPoint_set,METH_VARARGS,oaStringAppDef_oaAnalysisPoint_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaAnalysisPoint_tp_isNull,METH_VARARGS,oaStringAppDef_oaAnalysisPoint_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaAnalysisPoint_tp_assign,METH_VARARGS,oaStringAppDef_oaAnalysisPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisPoint_doc[] = 
"Class: oaStringAppDef_oaAnalysisPoint\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaAnalysisPoint)\n"
"    Calls: (const oaStringAppDef_oaAnalysisPoint&)\n"
"    Signature: oaStringAppDef_oaAnalysisPoint||cref-oaStringAppDef_oaAnalysisPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaAnalysisPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaAnalysisPoint",
    sizeof(PyoaStringAppDef_oaAnalysisPointObject),
    0,
    (destructor)oaStringAppDef_oaAnalysisPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaAnalysisPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaAnalysisPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaAnalysisPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaAnalysisPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaAnalysisPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisPoint_static_find_doc[] = 
"Class: oaStringAppDef_oaAnalysisPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaAnalysisPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaAnalysisPoint|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaAnalysisPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaAnalysisPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaAnalysisPointp result= (oaStringAppDef_oaAnalysisPoint::find(p1.Data()));
            return PyoaStringAppDef_oaAnalysisPoint_FromoaStringAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAnalysisPointp result= (oaStringAppDef_oaAnalysisPoint::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaAnalysisPoint_FromoaStringAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaAnalysisPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAnalysisPoint_static_get_doc[] = 
"Class: oaStringAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaAnalysisPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisPoint|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaAnalysisPoint* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisPoint|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaAnalysisPoint* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisPoint|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaAnalysisPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaAnalysisPointp result= (oaStringAppDef_oaAnalysisPoint::get(p1.Data()));
            return PyoaStringAppDef_oaAnalysisPoint_FromoaStringAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaAnalysisPointp result= (oaStringAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaAnalysisPoint_FromoaStringAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaAnalysisPointp result= (oaStringAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaAnalysisPoint_FromoaStringAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAnalysisPointp result= (oaStringAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaAnalysisPoint_FromoaStringAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAnalysisPointp result= (oaStringAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaAnalysisPoint_FromoaStringAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAnalysisPointp result= (oaStringAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaAnalysisPoint_FromoaStringAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaAnalysisPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaAnalysisPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaAnalysisPoint_static_find,METH_VARARGS,oaStringAppDef_oaAnalysisPoint_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaAnalysisPoint_static_get,METH_VARARGS,oaStringAppDef_oaAnalysisPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaAnalysisPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaAnalysisPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaAnalysisPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaAnalysisPoint",
           (PyObject*)(&PyoaStringAppDef_oaAnalysisPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaAnalysisPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaAnalysisPoint_Type.tp_dict;
    for(method=oaStringAppDef_oaAnalysisPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaAppObject
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaAppObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaAppObject_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaAppObjectObject* self = (PyoaStringAppDef_oaAppObjectObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaAppObject)
    {
        PyParamoaStringAppDef_oaAppObject p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaAppObject_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaAppObject, Choices are:\n"
        "    (oaStringAppDef_oaAppObject)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaAppObject_tp_dealloc(PyoaStringAppDef_oaAppObjectObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaAppObject_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaAppObject value;
    int convert_status=PyoaStringAppDef_oaAppObject_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaStringAppDef_oaAppObject::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaAppObject_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaAppObject v1;
    PyParamoaStringAppDef_oaAppObject v2;
    int convert_status1=PyoaStringAppDef_oaAppObject_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaAppObject_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaAppObject_Convert(PyObject* ob,PyParamoaStringAppDef_oaAppObject* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaAppObject_Check(ob)) {
        result->SetData( (oaStringAppDef_oaAppObject**) ((PyoaStringAppDef_oaAppObjectObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaAppObject Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaAppObject_FromoaStringAppDef_oaAppObject(oaStringAppDef_oaAppObject** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaAppObject* data=*value;
        PyObject* bself = PyoaStringAppDef_oaAppObject_Type.tp_alloc(&PyoaStringAppDef_oaAppObject_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaAppObjectObject* self = (PyoaStringAppDef_oaAppObjectObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaAppObject_FromoaStringAppDef_oaAppObject(oaStringAppDef_oaAppObject* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaAppObject_Type.tp_alloc(&PyoaStringAppDef_oaAppObject_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaAppObjectObject* self = (PyoaStringAppDef_oaAppObjectObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAppObject_get_doc[] = 
"Class: oaStringAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaAppObject,oaString)\n"
"    Calls: void get(const oaAppObject* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaAppObject,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaAppObject_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAppObject data;
    int convert_status=PyoaStringAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAppObjectObject* self=(PyoaStringAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAppObject_getDefault_doc[] = 
"Class: oaStringAppDef_oaAppObject, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaAppObject_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAppObject data;
    int convert_status=PyoaStringAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAppObjectObject* self=(PyoaStringAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAppObject_set_doc[] = 
"Class: oaStringAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaAppObject,oaString)\n"
"    Calls: void set(oaAppObject* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaAppObject,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaAppObject_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAppObject data;
    int convert_status=PyoaStringAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAppObjectObject* self=(PyoaStringAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAppObject_isNull_doc[] =
"Class: oaStringAppDef_oaAppObject, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaAppObject_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaAppObject data;
    int convert_status=PyoaStringAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaAppObject_assign_doc[] = 
"Class: oaStringAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaAppObject_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaAppObject data;
  int convert_status=PyoaStringAppDef_oaAppObject_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaAppObject p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaAppObject_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaAppObject_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaAppObject_get,METH_VARARGS,oaStringAppDef_oaAppObject_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaAppObject_getDefault,METH_VARARGS,oaStringAppDef_oaAppObject_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaAppObject_set,METH_VARARGS,oaStringAppDef_oaAppObject_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaAppObject_tp_isNull,METH_VARARGS,oaStringAppDef_oaAppObject_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaAppObject_tp_assign,METH_VARARGS,oaStringAppDef_oaAppObject_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAppObject_doc[] = 
"Class: oaStringAppDef_oaAppObject\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaAppObject)\n"
"    Calls: (const oaStringAppDef_oaAppObject&)\n"
"    Signature: oaStringAppDef_oaAppObject||cref-oaStringAppDef_oaAppObject,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaAppObject_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaAppObject",
    sizeof(PyoaStringAppDef_oaAppObjectObject),
    0,
    (destructor)oaStringAppDef_oaAppObject_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaAppObject_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaAppObject_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaAppObject_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaAppObject_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaAppObject_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAppObject_static_find_doc[] = 
"Class: oaStringAppDef_oaAppObject, Function: find\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaAppObject* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaAppObject_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString p1;
    PyParamoaAppObjectDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaString_Convert,&p1,
          &PyoaAppObjectDef_Convert,&p2)) {
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        oaStringAppDef_oaAppObjectp result= (oaStringAppDef_oaAppObject::find(p1.Data(),p2.Data()));
        return PyoaStringAppDef_oaAppObject_FromoaStringAppDef_oaAppObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAppObject_static_get_doc[] = 
"Class: oaStringAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaAppObject_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAppObjectp result= (oaStringAppDef_oaAppObject::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaAppObject_FromoaStringAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAppObjectp result= (oaStringAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaAppObject_FromoaStringAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAppObjectp result= (oaStringAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaAppObject_FromoaStringAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaAppObject, function: get, Choices are:\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaAppObject_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaAppObject_static_find,METH_VARARGS,oaStringAppDef_oaAppObject_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaAppObject_static_get,METH_VARARGS,oaStringAppDef_oaAppObject_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaAppObject_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaAppObject_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaAppObject\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaAppObject",
           (PyObject*)(&PyoaStringAppDef_oaAppObject_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaAppObject\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaAppObject_Type.tp_dict;
    for(method=oaStringAppDef_oaAppObject_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaAssignmentObject* self = (PyoaStringAppDef_oaAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaAssignment)
    {
        PyParamoaStringAppDef_oaAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaAssignment_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaAssignment, Choices are:\n"
        "    (oaStringAppDef_oaAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaAssignment_tp_dealloc(PyoaStringAppDef_oaAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaAssignment_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaAssignment value;
    int convert_status=PyoaStringAppDef_oaAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaStringAppDef_oaAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaAssignment v1;
    PyParamoaStringAppDef_oaAssignment v2;
    int convert_status1=PyoaStringAppDef_oaAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaAssignment_Convert(PyObject* ob,PyParamoaStringAppDef_oaAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaAssignment_Check(ob)) {
        result->SetData( (oaStringAppDef_oaAssignment**) ((PyoaStringAppDef_oaAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaAssignment_FromoaStringAppDef_oaAssignment(oaStringAppDef_oaAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaAssignment* data=*value;
        PyObject* bself = PyoaStringAppDef_oaAssignment_Type.tp_alloc(&PyoaStringAppDef_oaAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaAssignmentObject* self = (PyoaStringAppDef_oaAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaAssignment_FromoaStringAppDef_oaAssignment(oaStringAppDef_oaAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaAssignment_Type.tp_alloc(&PyoaStringAppDef_oaAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaAssignmentObject* self = (PyoaStringAppDef_oaAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAssignment_get_doc[] = 
"Class: oaStringAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaAssignment,oaString)\n"
"    Calls: void get(const oaAssignment* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaAssignment,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAssignment data;
    int convert_status=PyoaStringAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAssignmentObject* self=(PyoaStringAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAssignment_getDefault_doc[] = 
"Class: oaStringAppDef_oaAssignment, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAssignment data;
    int convert_status=PyoaStringAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAssignmentObject* self=(PyoaStringAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAssignment_set_doc[] = 
"Class: oaStringAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaAssignment,oaString)\n"
"    Calls: void set(oaAssignment* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaAssignment,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaAssignment data;
    int convert_status=PyoaStringAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaAssignmentObject* self=(PyoaStringAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAssignment_isNull_doc[] =
"Class: oaStringAppDef_oaAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaAssignment data;
    int convert_status=PyoaStringAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaAssignment_assign_doc[] = 
"Class: oaStringAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaAssignment data;
  int convert_status=PyoaStringAppDef_oaAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaAssignment_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaAssignment_get,METH_VARARGS,oaStringAppDef_oaAssignment_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaAssignment_getDefault,METH_VARARGS,oaStringAppDef_oaAssignment_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaAssignment_set,METH_VARARGS,oaStringAppDef_oaAssignment_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaAssignment_tp_isNull,METH_VARARGS,oaStringAppDef_oaAssignment_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaAssignment_tp_assign,METH_VARARGS,oaStringAppDef_oaAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAssignment_doc[] = 
"Class: oaStringAppDef_oaAssignment\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaAssignment)\n"
"    Calls: (const oaStringAppDef_oaAssignment&)\n"
"    Signature: oaStringAppDef_oaAssignment||cref-oaStringAppDef_oaAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaAssignment",
    sizeof(PyoaStringAppDef_oaAssignmentObject),
    0,
    (destructor)oaStringAppDef_oaAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaAssignment_static_find_doc[] = 
"Class: oaStringAppDef_oaAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaAssignment|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaAssignmentp result= (oaStringAppDef_oaAssignment::find(p1.Data()));
            return PyoaStringAppDef_oaAssignment_FromoaStringAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAssignmentp result= (oaStringAppDef_oaAssignment::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaAssignment_FromoaStringAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaAssignment_static_get_doc[] = 
"Class: oaStringAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaAssignment* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaAssignment|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaAssignment* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaAssignment|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaAssignment* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaAssignment|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaAssignmentp result= (oaStringAppDef_oaAssignment::get(p1.Data()));
            return PyoaStringAppDef_oaAssignment_FromoaStringAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaAssignmentp result= (oaStringAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaAssignment_FromoaStringAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaAssignmentp result= (oaStringAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaAssignment_FromoaStringAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAssignmentp result= (oaStringAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaAssignment_FromoaStringAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAssignmentp result= (oaStringAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaAssignment_FromoaStringAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaAssignmentp result= (oaStringAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaAssignment_FromoaStringAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaAssignment, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaAssignment_static_find,METH_VARARGS,oaStringAppDef_oaAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaAssignment_static_get,METH_VARARGS,oaStringAppDef_oaAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaAssignment",
           (PyObject*)(&PyoaStringAppDef_oaAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaAssignment_Type.tp_dict;
    for(method=oaStringAppDef_oaAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaBlock
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaBlock_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaBlock_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaBlockObject* self = (PyoaStringAppDef_oaBlockObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaBlock)
    {
        PyParamoaStringAppDef_oaBlock p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaBlock_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaBlock, Choices are:\n"
        "    (oaStringAppDef_oaBlock)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaBlock_tp_dealloc(PyoaStringAppDef_oaBlockObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaBlock_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaBlock value;
    int convert_status=PyoaStringAppDef_oaBlock_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaStringAppDef_oaBlock::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaBlock_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaBlock v1;
    PyParamoaStringAppDef_oaBlock v2;
    int convert_status1=PyoaStringAppDef_oaBlock_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaBlock_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaBlock_Convert(PyObject* ob,PyParamoaStringAppDef_oaBlock* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaBlock_Check(ob)) {
        result->SetData( (oaStringAppDef_oaBlock**) ((PyoaStringAppDef_oaBlockObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaBlock Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaBlock_FromoaStringAppDef_oaBlock(oaStringAppDef_oaBlock** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaBlock* data=*value;
        PyObject* bself = PyoaStringAppDef_oaBlock_Type.tp_alloc(&PyoaStringAppDef_oaBlock_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaBlockObject* self = (PyoaStringAppDef_oaBlockObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaBlock_FromoaStringAppDef_oaBlock(oaStringAppDef_oaBlock* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaBlock_Type.tp_alloc(&PyoaStringAppDef_oaBlock_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaBlockObject* self = (PyoaStringAppDef_oaBlockObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlock_get_doc[] = 
"Class: oaStringAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaBlock,oaString)\n"
"    Calls: void get(const oaBlock* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaBlock,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaBlock_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBlock data;
    int convert_status=PyoaStringAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBlockObject* self=(PyoaStringAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlock_getDefault_doc[] = 
"Class: oaStringAppDef_oaBlock, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaBlock_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBlock data;
    int convert_status=PyoaStringAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBlockObject* self=(PyoaStringAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlock_set_doc[] = 
"Class: oaStringAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaBlock,oaString)\n"
"    Calls: void set(oaBlock* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaBlock,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaBlock_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBlock data;
    int convert_status=PyoaStringAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBlockObject* self=(PyoaStringAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlock_isNull_doc[] =
"Class: oaStringAppDef_oaBlock, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaBlock_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaBlock data;
    int convert_status=PyoaStringAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaBlock_assign_doc[] = 
"Class: oaStringAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaBlock_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaBlock data;
  int convert_status=PyoaStringAppDef_oaBlock_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaBlock p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaBlock_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaBlock_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaBlock_get,METH_VARARGS,oaStringAppDef_oaBlock_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaBlock_getDefault,METH_VARARGS,oaStringAppDef_oaBlock_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaBlock_set,METH_VARARGS,oaStringAppDef_oaBlock_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaBlock_tp_isNull,METH_VARARGS,oaStringAppDef_oaBlock_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaBlock_tp_assign,METH_VARARGS,oaStringAppDef_oaBlock_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlock_doc[] = 
"Class: oaStringAppDef_oaBlock\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaBlock)\n"
"    Calls: (const oaStringAppDef_oaBlock&)\n"
"    Signature: oaStringAppDef_oaBlock||cref-oaStringAppDef_oaBlock,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaBlock_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaBlock",
    sizeof(PyoaStringAppDef_oaBlockObject),
    0,
    (destructor)oaStringAppDef_oaBlock_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaBlock_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaBlock_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaBlock_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaBlock_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaBlock_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlock_static_find_doc[] = 
"Class: oaStringAppDef_oaBlock, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaBlock* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaBlock|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaBlock* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaBlock_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaBlockp result= (oaStringAppDef_oaBlock::find(p1.Data()));
            return PyoaStringAppDef_oaBlock_FromoaStringAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBlockp result= (oaStringAppDef_oaBlock::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBlock_FromoaStringAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaBlock, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlock_static_get_doc[] = 
"Class: oaStringAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaBlock* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlock|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaBlock* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlock|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaBlock* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlock|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaBlock_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaBlockp result= (oaStringAppDef_oaBlock::get(p1.Data()));
            return PyoaStringAppDef_oaBlock_FromoaStringAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaBlockp result= (oaStringAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBlock_FromoaStringAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaBlockp result= (oaStringAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaBlock_FromoaStringAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBlockp result= (oaStringAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBlock_FromoaStringAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBlockp result= (oaStringAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaBlock_FromoaStringAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBlockp result= (oaStringAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaBlock_FromoaStringAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaBlock, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaBlock_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaBlock_static_find,METH_VARARGS,oaStringAppDef_oaBlock_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaBlock_static_get,METH_VARARGS,oaStringAppDef_oaBlock_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaBlock_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaBlock_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaBlock\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaBlock",
           (PyObject*)(&PyoaStringAppDef_oaBlock_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaBlock\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaBlock_Type.tp_dict;
    for(method=oaStringAppDef_oaBlock_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaBlockage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaBlockage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaBlockage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaBlockageObject* self = (PyoaStringAppDef_oaBlockageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaBlockage)
    {
        PyParamoaStringAppDef_oaBlockage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaBlockage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaBlockage, Choices are:\n"
        "    (oaStringAppDef_oaBlockage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaBlockage_tp_dealloc(PyoaStringAppDef_oaBlockageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaBlockage_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaBlockage value;
    int convert_status=PyoaStringAppDef_oaBlockage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaStringAppDef_oaBlockage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaBlockage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaBlockage v1;
    PyParamoaStringAppDef_oaBlockage v2;
    int convert_status1=PyoaStringAppDef_oaBlockage_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaBlockage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaBlockage_Convert(PyObject* ob,PyParamoaStringAppDef_oaBlockage* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaBlockage_Check(ob)) {
        result->SetData( (oaStringAppDef_oaBlockage**) ((PyoaStringAppDef_oaBlockageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaBlockage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaBlockage_FromoaStringAppDef_oaBlockage(oaStringAppDef_oaBlockage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaBlockage* data=*value;
        PyObject* bself = PyoaStringAppDef_oaBlockage_Type.tp_alloc(&PyoaStringAppDef_oaBlockage_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaBlockageObject* self = (PyoaStringAppDef_oaBlockageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaBlockage_FromoaStringAppDef_oaBlockage(oaStringAppDef_oaBlockage* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaBlockage_Type.tp_alloc(&PyoaStringAppDef_oaBlockage_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaBlockageObject* self = (PyoaStringAppDef_oaBlockageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlockage_get_doc[] = 
"Class: oaStringAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaBlockage,oaString)\n"
"    Calls: void get(const oaBlockage* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaBlockage,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaBlockage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBlockage data;
    int convert_status=PyoaStringAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBlockageObject* self=(PyoaStringAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlockage_getDefault_doc[] = 
"Class: oaStringAppDef_oaBlockage, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaBlockage_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBlockage data;
    int convert_status=PyoaStringAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBlockageObject* self=(PyoaStringAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlockage_set_doc[] = 
"Class: oaStringAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaBlockage,oaString)\n"
"    Calls: void set(oaBlockage* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaBlockage,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaBlockage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBlockage data;
    int convert_status=PyoaStringAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBlockageObject* self=(PyoaStringAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlockage_isNull_doc[] =
"Class: oaStringAppDef_oaBlockage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaBlockage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaBlockage data;
    int convert_status=PyoaStringAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaBlockage_assign_doc[] = 
"Class: oaStringAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaBlockage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaBlockage data;
  int convert_status=PyoaStringAppDef_oaBlockage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaBlockage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaBlockage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaBlockage_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaBlockage_get,METH_VARARGS,oaStringAppDef_oaBlockage_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaBlockage_getDefault,METH_VARARGS,oaStringAppDef_oaBlockage_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaBlockage_set,METH_VARARGS,oaStringAppDef_oaBlockage_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaBlockage_tp_isNull,METH_VARARGS,oaStringAppDef_oaBlockage_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaBlockage_tp_assign,METH_VARARGS,oaStringAppDef_oaBlockage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlockage_doc[] = 
"Class: oaStringAppDef_oaBlockage\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaBlockage)\n"
"    Calls: (const oaStringAppDef_oaBlockage&)\n"
"    Signature: oaStringAppDef_oaBlockage||cref-oaStringAppDef_oaBlockage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaBlockage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaBlockage",
    sizeof(PyoaStringAppDef_oaBlockageObject),
    0,
    (destructor)oaStringAppDef_oaBlockage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaBlockage_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaBlockage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaBlockage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaBlockage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaBlockage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlockage_static_find_doc[] = 
"Class: oaStringAppDef_oaBlockage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaBlockage* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaBlockage|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaBlockage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaBlockage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaBlockagep result= (oaStringAppDef_oaBlockage::find(p1.Data()));
            return PyoaStringAppDef_oaBlockage_FromoaStringAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBlockagep result= (oaStringAppDef_oaBlockage::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBlockage_FromoaStringAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaBlockage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBlockage_static_get_doc[] = 
"Class: oaStringAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaBlockage* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlockage|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaBlockage* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlockage|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaBlockage* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlockage|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaBlockage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaBlockagep result= (oaStringAppDef_oaBlockage::get(p1.Data()));
            return PyoaStringAppDef_oaBlockage_FromoaStringAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaBlockagep result= (oaStringAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBlockage_FromoaStringAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaBlockagep result= (oaStringAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaBlockage_FromoaStringAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBlockagep result= (oaStringAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBlockage_FromoaStringAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBlockagep result= (oaStringAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaBlockage_FromoaStringAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBlockagep result= (oaStringAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaBlockage_FromoaStringAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaBlockage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaBlockage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaBlockage_static_find,METH_VARARGS,oaStringAppDef_oaBlockage_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaBlockage_static_get,METH_VARARGS,oaStringAppDef_oaBlockage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaBlockage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaBlockage_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaBlockage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaBlockage",
           (PyObject*)(&PyoaStringAppDef_oaBlockage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaBlockage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaBlockage_Type.tp_dict;
    for(method=oaStringAppDef_oaBlockage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaBoundary
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaBoundary_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaBoundary_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaBoundaryObject* self = (PyoaStringAppDef_oaBoundaryObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaBoundary)
    {
        PyParamoaStringAppDef_oaBoundary p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaBoundary_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaBoundary, Choices are:\n"
        "    (oaStringAppDef_oaBoundary)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaBoundary_tp_dealloc(PyoaStringAppDef_oaBoundaryObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaBoundary_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaBoundary value;
    int convert_status=PyoaStringAppDef_oaBoundary_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaStringAppDef_oaBoundary::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaBoundary_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaBoundary v1;
    PyParamoaStringAppDef_oaBoundary v2;
    int convert_status1=PyoaStringAppDef_oaBoundary_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaBoundary_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaBoundary_Convert(PyObject* ob,PyParamoaStringAppDef_oaBoundary* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaBoundary_Check(ob)) {
        result->SetData( (oaStringAppDef_oaBoundary**) ((PyoaStringAppDef_oaBoundaryObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaBoundary Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaBoundary_FromoaStringAppDef_oaBoundary(oaStringAppDef_oaBoundary** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaBoundary* data=*value;
        PyObject* bself = PyoaStringAppDef_oaBoundary_Type.tp_alloc(&PyoaStringAppDef_oaBoundary_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaBoundaryObject* self = (PyoaStringAppDef_oaBoundaryObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaBoundary_FromoaStringAppDef_oaBoundary(oaStringAppDef_oaBoundary* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaBoundary_Type.tp_alloc(&PyoaStringAppDef_oaBoundary_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaBoundaryObject* self = (PyoaStringAppDef_oaBoundaryObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBoundary_get_doc[] = 
"Class: oaStringAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaBoundary,oaString)\n"
"    Calls: void get(const oaBoundary* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaBoundary,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaBoundary_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBoundary data;
    int convert_status=PyoaStringAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBoundaryObject* self=(PyoaStringAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBoundary_getDefault_doc[] = 
"Class: oaStringAppDef_oaBoundary, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaBoundary_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBoundary data;
    int convert_status=PyoaStringAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBoundaryObject* self=(PyoaStringAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBoundary_set_doc[] = 
"Class: oaStringAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaBoundary,oaString)\n"
"    Calls: void set(oaBoundary* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaBoundary,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaBoundary_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBoundary data;
    int convert_status=PyoaStringAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBoundaryObject* self=(PyoaStringAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBoundary_isNull_doc[] =
"Class: oaStringAppDef_oaBoundary, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaBoundary_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaBoundary data;
    int convert_status=PyoaStringAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaBoundary_assign_doc[] = 
"Class: oaStringAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaBoundary_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaBoundary data;
  int convert_status=PyoaStringAppDef_oaBoundary_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaBoundary p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaBoundary_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaBoundary_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaBoundary_get,METH_VARARGS,oaStringAppDef_oaBoundary_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaBoundary_getDefault,METH_VARARGS,oaStringAppDef_oaBoundary_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaBoundary_set,METH_VARARGS,oaStringAppDef_oaBoundary_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaBoundary_tp_isNull,METH_VARARGS,oaStringAppDef_oaBoundary_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaBoundary_tp_assign,METH_VARARGS,oaStringAppDef_oaBoundary_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBoundary_doc[] = 
"Class: oaStringAppDef_oaBoundary\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaBoundary)\n"
"    Calls: (const oaStringAppDef_oaBoundary&)\n"
"    Signature: oaStringAppDef_oaBoundary||cref-oaStringAppDef_oaBoundary,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaBoundary_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaBoundary",
    sizeof(PyoaStringAppDef_oaBoundaryObject),
    0,
    (destructor)oaStringAppDef_oaBoundary_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaBoundary_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaBoundary_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaBoundary_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaBoundary_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaBoundary_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBoundary_static_find_doc[] = 
"Class: oaStringAppDef_oaBoundary, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaBoundary* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaBoundary|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaBoundary* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaBoundary_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaBoundaryp result= (oaStringAppDef_oaBoundary::find(p1.Data()));
            return PyoaStringAppDef_oaBoundary_FromoaStringAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBoundaryp result= (oaStringAppDef_oaBoundary::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBoundary_FromoaStringAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaBoundary, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBoundary_static_get_doc[] = 
"Class: oaStringAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaBoundary* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaBoundary|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaBoundary* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaBoundary|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaBoundary* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaBoundary|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaBoundary_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaBoundaryp result= (oaStringAppDef_oaBoundary::get(p1.Data()));
            return PyoaStringAppDef_oaBoundary_FromoaStringAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaBoundaryp result= (oaStringAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBoundary_FromoaStringAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaBoundaryp result= (oaStringAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaBoundary_FromoaStringAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBoundaryp result= (oaStringAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBoundary_FromoaStringAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBoundaryp result= (oaStringAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaBoundary_FromoaStringAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBoundaryp result= (oaStringAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaBoundary_FromoaStringAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaBoundary, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaBoundary_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaBoundary_static_find,METH_VARARGS,oaStringAppDef_oaBoundary_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaBoundary_static_get,METH_VARARGS,oaStringAppDef_oaBoundary_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaBoundary_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaBoundary_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaBoundary\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaBoundary",
           (PyObject*)(&PyoaStringAppDef_oaBoundary_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaBoundary\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaBoundary_Type.tp_dict;
    for(method=oaStringAppDef_oaBoundary_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaBusNetDefObject* self = (PyoaStringAppDef_oaBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaBusNetDef)
    {
        PyParamoaStringAppDef_oaBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaBusNetDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaBusNetDef, Choices are:\n"
        "    (oaStringAppDef_oaBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaBusNetDef_tp_dealloc(PyoaStringAppDef_oaBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaBusNetDef value;
    int convert_status=PyoaStringAppDef_oaBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaStringAppDef_oaBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaBusNetDef v1;
    PyParamoaStringAppDef_oaBusNetDef v2;
    int convert_status1=PyoaStringAppDef_oaBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaBusNetDef_Convert(PyObject* ob,PyParamoaStringAppDef_oaBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaBusNetDef_Check(ob)) {
        result->SetData( (oaStringAppDef_oaBusNetDef**) ((PyoaStringAppDef_oaBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaBusNetDef_FromoaStringAppDef_oaBusNetDef(oaStringAppDef_oaBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaBusNetDef* data=*value;
        PyObject* bself = PyoaStringAppDef_oaBusNetDef_Type.tp_alloc(&PyoaStringAppDef_oaBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaBusNetDefObject* self = (PyoaStringAppDef_oaBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaBusNetDef_FromoaStringAppDef_oaBusNetDef(oaStringAppDef_oaBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaBusNetDef_Type.tp_alloc(&PyoaStringAppDef_oaBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaBusNetDefObject* self = (PyoaStringAppDef_oaBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusNetDef_get_doc[] = 
"Class: oaStringAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaBusNetDef,oaString)\n"
"    Calls: void get(const oaBusNetDef* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaBusNetDef,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBusNetDef data;
    int convert_status=PyoaStringAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBusNetDefObject* self=(PyoaStringAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusNetDef_getDefault_doc[] = 
"Class: oaStringAppDef_oaBusNetDef, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaBusNetDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBusNetDef data;
    int convert_status=PyoaStringAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBusNetDefObject* self=(PyoaStringAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusNetDef_set_doc[] = 
"Class: oaStringAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaBusNetDef,oaString)\n"
"    Calls: void set(oaBusNetDef* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaBusNetDef,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBusNetDef data;
    int convert_status=PyoaStringAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBusNetDefObject* self=(PyoaStringAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusNetDef_isNull_doc[] =
"Class: oaStringAppDef_oaBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaBusNetDef data;
    int convert_status=PyoaStringAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaBusNetDef_assign_doc[] = 
"Class: oaStringAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaBusNetDef data;
  int convert_status=PyoaStringAppDef_oaBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaBusNetDef_get,METH_VARARGS,oaStringAppDef_oaBusNetDef_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaBusNetDef_getDefault,METH_VARARGS,oaStringAppDef_oaBusNetDef_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaBusNetDef_set,METH_VARARGS,oaStringAppDef_oaBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaBusNetDef_tp_isNull,METH_VARARGS,oaStringAppDef_oaBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaBusNetDef_tp_assign,METH_VARARGS,oaStringAppDef_oaBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusNetDef_doc[] = 
"Class: oaStringAppDef_oaBusNetDef\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaBusNetDef)\n"
"    Calls: (const oaStringAppDef_oaBusNetDef&)\n"
"    Signature: oaStringAppDef_oaBusNetDef||cref-oaStringAppDef_oaBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaBusNetDef",
    sizeof(PyoaStringAppDef_oaBusNetDefObject),
    0,
    (destructor)oaStringAppDef_oaBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusNetDef_static_find_doc[] = 
"Class: oaStringAppDef_oaBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaBusNetDef|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaBusNetDefp result= (oaStringAppDef_oaBusNetDef::find(p1.Data()));
            return PyoaStringAppDef_oaBusNetDef_FromoaStringAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBusNetDefp result= (oaStringAppDef_oaBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBusNetDef_FromoaStringAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusNetDef_static_get_doc[] = 
"Class: oaStringAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaBusNetDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusNetDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaBusNetDef* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusNetDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaBusNetDef* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusNetDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaBusNetDefp result= (oaStringAppDef_oaBusNetDef::get(p1.Data()));
            return PyoaStringAppDef_oaBusNetDef_FromoaStringAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaBusNetDefp result= (oaStringAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBusNetDef_FromoaStringAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaBusNetDefp result= (oaStringAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaBusNetDef_FromoaStringAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBusNetDefp result= (oaStringAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBusNetDef_FromoaStringAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBusNetDefp result= (oaStringAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaBusNetDef_FromoaStringAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBusNetDefp result= (oaStringAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaBusNetDef_FromoaStringAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaBusNetDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaBusNetDef_static_find,METH_VARARGS,oaStringAppDef_oaBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaBusNetDef_static_get,METH_VARARGS,oaStringAppDef_oaBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaBusNetDef",
           (PyObject*)(&PyoaStringAppDef_oaBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaBusNetDef_Type.tp_dict;
    for(method=oaStringAppDef_oaBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaBusTermDefObject* self = (PyoaStringAppDef_oaBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaBusTermDef)
    {
        PyParamoaStringAppDef_oaBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaBusTermDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaBusTermDef, Choices are:\n"
        "    (oaStringAppDef_oaBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaBusTermDef_tp_dealloc(PyoaStringAppDef_oaBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaBusTermDef value;
    int convert_status=PyoaStringAppDef_oaBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaStringAppDef_oaBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaBusTermDef v1;
    PyParamoaStringAppDef_oaBusTermDef v2;
    int convert_status1=PyoaStringAppDef_oaBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaBusTermDef_Convert(PyObject* ob,PyParamoaStringAppDef_oaBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaBusTermDef_Check(ob)) {
        result->SetData( (oaStringAppDef_oaBusTermDef**) ((PyoaStringAppDef_oaBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaBusTermDef_FromoaStringAppDef_oaBusTermDef(oaStringAppDef_oaBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaBusTermDef* data=*value;
        PyObject* bself = PyoaStringAppDef_oaBusTermDef_Type.tp_alloc(&PyoaStringAppDef_oaBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaBusTermDefObject* self = (PyoaStringAppDef_oaBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaBusTermDef_FromoaStringAppDef_oaBusTermDef(oaStringAppDef_oaBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaBusTermDef_Type.tp_alloc(&PyoaStringAppDef_oaBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaBusTermDefObject* self = (PyoaStringAppDef_oaBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusTermDef_get_doc[] = 
"Class: oaStringAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaBusTermDef,oaString)\n"
"    Calls: void get(const oaBusTermDef* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaBusTermDef,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBusTermDef data;
    int convert_status=PyoaStringAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBusTermDefObject* self=(PyoaStringAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusTermDef_getDefault_doc[] = 
"Class: oaStringAppDef_oaBusTermDef, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaBusTermDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBusTermDef data;
    int convert_status=PyoaStringAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBusTermDefObject* self=(PyoaStringAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusTermDef_set_doc[] = 
"Class: oaStringAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaBusTermDef,oaString)\n"
"    Calls: void set(oaBusTermDef* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaBusTermDef,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaBusTermDef data;
    int convert_status=PyoaStringAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaBusTermDefObject* self=(PyoaStringAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusTermDef_isNull_doc[] =
"Class: oaStringAppDef_oaBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaBusTermDef data;
    int convert_status=PyoaStringAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaBusTermDef_assign_doc[] = 
"Class: oaStringAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaBusTermDef data;
  int convert_status=PyoaStringAppDef_oaBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaBusTermDef_get,METH_VARARGS,oaStringAppDef_oaBusTermDef_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaBusTermDef_getDefault,METH_VARARGS,oaStringAppDef_oaBusTermDef_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaBusTermDef_set,METH_VARARGS,oaStringAppDef_oaBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaBusTermDef_tp_isNull,METH_VARARGS,oaStringAppDef_oaBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaBusTermDef_tp_assign,METH_VARARGS,oaStringAppDef_oaBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusTermDef_doc[] = 
"Class: oaStringAppDef_oaBusTermDef\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaBusTermDef)\n"
"    Calls: (const oaStringAppDef_oaBusTermDef&)\n"
"    Signature: oaStringAppDef_oaBusTermDef||cref-oaStringAppDef_oaBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaBusTermDef",
    sizeof(PyoaStringAppDef_oaBusTermDefObject),
    0,
    (destructor)oaStringAppDef_oaBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusTermDef_static_find_doc[] = 
"Class: oaStringAppDef_oaBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaBusTermDef|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaBusTermDefp result= (oaStringAppDef_oaBusTermDef::find(p1.Data()));
            return PyoaStringAppDef_oaBusTermDef_FromoaStringAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBusTermDefp result= (oaStringAppDef_oaBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBusTermDef_FromoaStringAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaBusTermDef_static_get_doc[] = 
"Class: oaStringAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaBusTermDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusTermDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaBusTermDef* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusTermDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaBusTermDef* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusTermDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaBusTermDefp result= (oaStringAppDef_oaBusTermDef::get(p1.Data()));
            return PyoaStringAppDef_oaBusTermDef_FromoaStringAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaBusTermDefp result= (oaStringAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBusTermDef_FromoaStringAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaBusTermDefp result= (oaStringAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaBusTermDef_FromoaStringAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBusTermDefp result= (oaStringAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaBusTermDef_FromoaStringAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBusTermDefp result= (oaStringAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaBusTermDef_FromoaStringAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaBusTermDefp result= (oaStringAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaBusTermDef_FromoaStringAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaBusTermDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaBusTermDef_static_find,METH_VARARGS,oaStringAppDef_oaBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaBusTermDef_static_get,METH_VARARGS,oaStringAppDef_oaBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaBusTermDef",
           (PyObject*)(&PyoaStringAppDef_oaBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaBusTermDef_Type.tp_dict;
    for(method=oaStringAppDef_oaBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaCMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaCMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaCMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaCMapObject* self = (PyoaStringAppDef_oaCMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaCMap)
    {
        PyParamoaStringAppDef_oaCMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaCMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaCMap, Choices are:\n"
        "    (oaStringAppDef_oaCMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaCMap_tp_dealloc(PyoaStringAppDef_oaCMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaCMap_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaCMap value;
    int convert_status=PyoaStringAppDef_oaCMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaStringAppDef_oaCMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaCMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaCMap v1;
    PyParamoaStringAppDef_oaCMap v2;
    int convert_status1=PyoaStringAppDef_oaCMap_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaCMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaCMap_Convert(PyObject* ob,PyParamoaStringAppDef_oaCMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaCMap_Check(ob)) {
        result->SetData( (oaStringAppDef_oaCMap**) ((PyoaStringAppDef_oaCMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaCMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaCMap_FromoaStringAppDef_oaCMap(oaStringAppDef_oaCMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaCMap* data=*value;
        PyObject* bself = PyoaStringAppDef_oaCMap_Type.tp_alloc(&PyoaStringAppDef_oaCMap_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaCMapObject* self = (PyoaStringAppDef_oaCMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaCMap_FromoaStringAppDef_oaCMap(oaStringAppDef_oaCMap* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaCMap_Type.tp_alloc(&PyoaStringAppDef_oaCMap_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaCMapObject* self = (PyoaStringAppDef_oaCMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCMap_get_doc[] = 
"Class: oaStringAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaCMap,oaString)\n"
"    Calls: void get(const oaCMap* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaCMap,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaCMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCMap data;
    int convert_status=PyoaStringAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaCMapObject* self=(PyoaStringAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCMap_getDefault_doc[] = 
"Class: oaStringAppDef_oaCMap, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaCMap_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCMap data;
    int convert_status=PyoaStringAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaCMapObject* self=(PyoaStringAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCMap_set_doc[] = 
"Class: oaStringAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaCMap,oaString)\n"
"    Calls: void set(oaCMap* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaCMap,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaCMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCMap data;
    int convert_status=PyoaStringAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaCMapObject* self=(PyoaStringAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCMap_isNull_doc[] =
"Class: oaStringAppDef_oaCMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaCMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaCMap data;
    int convert_status=PyoaStringAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaCMap_assign_doc[] = 
"Class: oaStringAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaCMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaCMap data;
  int convert_status=PyoaStringAppDef_oaCMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaCMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaCMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaCMap_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaCMap_get,METH_VARARGS,oaStringAppDef_oaCMap_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaCMap_getDefault,METH_VARARGS,oaStringAppDef_oaCMap_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaCMap_set,METH_VARARGS,oaStringAppDef_oaCMap_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaCMap_tp_isNull,METH_VARARGS,oaStringAppDef_oaCMap_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaCMap_tp_assign,METH_VARARGS,oaStringAppDef_oaCMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCMap_doc[] = 
"Class: oaStringAppDef_oaCMap\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaCMap)\n"
"    Calls: (const oaStringAppDef_oaCMap&)\n"
"    Signature: oaStringAppDef_oaCMap||cref-oaStringAppDef_oaCMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaCMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaCMap",
    sizeof(PyoaStringAppDef_oaCMapObject),
    0,
    (destructor)oaStringAppDef_oaCMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaCMap_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaCMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaCMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaCMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaCMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCMap_static_find_doc[] = 
"Class: oaStringAppDef_oaCMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaCMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaCMap|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaCMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaCMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaCMapp result= (oaStringAppDef_oaCMap::find(p1.Data()));
            return PyoaStringAppDef_oaCMap_FromoaStringAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCMapp result= (oaStringAppDef_oaCMap::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCMap_FromoaStringAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaCMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCMap_static_get_doc[] = 
"Class: oaStringAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaCMap* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaCMap|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaCMap* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaCMap|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaCMap* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaCMap|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaCMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaCMapp result= (oaStringAppDef_oaCMap::get(p1.Data()));
            return PyoaStringAppDef_oaCMap_FromoaStringAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaCMapp result= (oaStringAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCMap_FromoaStringAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaCMapp result= (oaStringAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaCMap_FromoaStringAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCMapp result= (oaStringAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCMap_FromoaStringAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCMapp result= (oaStringAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaCMap_FromoaStringAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCMapp result= (oaStringAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaCMap_FromoaStringAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaCMap, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaCMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaCMap_static_find,METH_VARARGS,oaStringAppDef_oaCMap_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaCMap_static_get,METH_VARARGS,oaStringAppDef_oaCMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaCMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaCMap_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaCMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaCMap",
           (PyObject*)(&PyoaStringAppDef_oaCMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaCMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaCMap_Type.tp_dict;
    for(method=oaStringAppDef_oaCMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaCell
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaCell_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaCell_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaCellObject* self = (PyoaStringAppDef_oaCellObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaCell)
    {
        PyParamoaStringAppDef_oaCell p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaCell_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaCell, Choices are:\n"
        "    (oaStringAppDef_oaCell)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaCell_tp_dealloc(PyoaStringAppDef_oaCellObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaCell_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaCell value;
    int convert_status=PyoaStringAppDef_oaCell_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaStringAppDef_oaCell::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaCell_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaCell v1;
    PyParamoaStringAppDef_oaCell v2;
    int convert_status1=PyoaStringAppDef_oaCell_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaCell_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaCell_Convert(PyObject* ob,PyParamoaStringAppDef_oaCell* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaCell_Check(ob)) {
        result->SetData( (oaStringAppDef_oaCell**) ((PyoaStringAppDef_oaCellObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaCell Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaCell_FromoaStringAppDef_oaCell(oaStringAppDef_oaCell** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaCell* data=*value;
        PyObject* bself = PyoaStringAppDef_oaCell_Type.tp_alloc(&PyoaStringAppDef_oaCell_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaCellObject* self = (PyoaStringAppDef_oaCellObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaCell_FromoaStringAppDef_oaCell(oaStringAppDef_oaCell* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaCell_Type.tp_alloc(&PyoaStringAppDef_oaCell_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaCellObject* self = (PyoaStringAppDef_oaCellObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCell_get_doc[] = 
"Class: oaStringAppDef_oaCell, Function: get\n"
"  Paramegers: (oaCell,oaString)\n"
"    Calls: void get(const oaCell* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaCell,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaCell_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCell data;
    int convert_status=PyoaStringAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaCellObject* self=(PyoaStringAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCell_getDefault_doc[] = 
"Class: oaStringAppDef_oaCell, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaCell_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCell data;
    int convert_status=PyoaStringAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaCellObject* self=(PyoaStringAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCell_set_doc[] = 
"Class: oaStringAppDef_oaCell, Function: set\n"
"  Paramegers: (oaCell,oaString)\n"
"    Calls: void set(oaCell* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaCell,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaCell_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCell data;
    int convert_status=PyoaStringAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaCellObject* self=(PyoaStringAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCell_isNull_doc[] =
"Class: oaStringAppDef_oaCell, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaCell_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaCell data;
    int convert_status=PyoaStringAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaCell_assign_doc[] = 
"Class: oaStringAppDef_oaCell, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaCell_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaCell data;
  int convert_status=PyoaStringAppDef_oaCell_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaCell p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaCell_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaCell_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaCell_get,METH_VARARGS,oaStringAppDef_oaCell_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaCell_getDefault,METH_VARARGS,oaStringAppDef_oaCell_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaCell_set,METH_VARARGS,oaStringAppDef_oaCell_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaCell_tp_isNull,METH_VARARGS,oaStringAppDef_oaCell_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaCell_tp_assign,METH_VARARGS,oaStringAppDef_oaCell_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCell_doc[] = 
"Class: oaStringAppDef_oaCell\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaCell)\n"
"    Calls: (const oaStringAppDef_oaCell&)\n"
"    Signature: oaStringAppDef_oaCell||cref-oaStringAppDef_oaCell,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaCell_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaCell",
    sizeof(PyoaStringAppDef_oaCellObject),
    0,
    (destructor)oaStringAppDef_oaCell_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaCell_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaCell_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaCell_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaCell_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaCell_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCell_static_find_doc[] = 
"Class: oaStringAppDef_oaCell, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaCell* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaCell|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaCell* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaCell_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaCellp result= (oaStringAppDef_oaCell::find(p1.Data()));
            return PyoaStringAppDef_oaCell_FromoaStringAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCellp result= (oaStringAppDef_oaCell::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCell_FromoaStringAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaCell, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCell_static_get_doc[] = 
"Class: oaStringAppDef_oaCell, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaCell* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaCell|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaCell* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaCell|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaCell* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaCell|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaCell_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaCellp result= (oaStringAppDef_oaCell::get(p1.Data()));
            return PyoaStringAppDef_oaCell_FromoaStringAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaCellp result= (oaStringAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCell_FromoaStringAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaCellp result= (oaStringAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaCell_FromoaStringAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCellp result= (oaStringAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCell_FromoaStringAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCellp result= (oaStringAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaCell_FromoaStringAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCellp result= (oaStringAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaCell_FromoaStringAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaCell, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaCell_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaCell_static_find,METH_VARARGS,oaStringAppDef_oaCell_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaCell_static_get,METH_VARARGS,oaStringAppDef_oaCell_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaCell_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaCell_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaCell\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaCell",
           (PyObject*)(&PyoaStringAppDef_oaCell_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaCell\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaCell_Type.tp_dict;
    for(method=oaStringAppDef_oaCell_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaCellView
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaCellView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaCellView_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaCellViewObject* self = (PyoaStringAppDef_oaCellViewObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaCellView)
    {
        PyParamoaStringAppDef_oaCellView p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaCellView_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaCellView, Choices are:\n"
        "    (oaStringAppDef_oaCellView)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaCellView_tp_dealloc(PyoaStringAppDef_oaCellViewObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaCellView_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaCellView value;
    int convert_status=PyoaStringAppDef_oaCellView_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaStringAppDef_oaCellView::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaCellView_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaCellView v1;
    PyParamoaStringAppDef_oaCellView v2;
    int convert_status1=PyoaStringAppDef_oaCellView_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaCellView_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaCellView_Convert(PyObject* ob,PyParamoaStringAppDef_oaCellView* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaCellView_Check(ob)) {
        result->SetData( (oaStringAppDef_oaCellView**) ((PyoaStringAppDef_oaCellViewObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaCellView Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaCellView_FromoaStringAppDef_oaCellView(oaStringAppDef_oaCellView** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaCellView* data=*value;
        PyObject* bself = PyoaStringAppDef_oaCellView_Type.tp_alloc(&PyoaStringAppDef_oaCellView_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaCellViewObject* self = (PyoaStringAppDef_oaCellViewObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaCellView_FromoaStringAppDef_oaCellView(oaStringAppDef_oaCellView* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaCellView_Type.tp_alloc(&PyoaStringAppDef_oaCellView_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaCellViewObject* self = (PyoaStringAppDef_oaCellViewObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCellView_get_doc[] = 
"Class: oaStringAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaCellView,oaString)\n"
"    Calls: void get(const oaCellView* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaCellView,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaCellView_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCellView data;
    int convert_status=PyoaStringAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaCellViewObject* self=(PyoaStringAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCellView_getDefault_doc[] = 
"Class: oaStringAppDef_oaCellView, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaCellView_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCellView data;
    int convert_status=PyoaStringAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaCellViewObject* self=(PyoaStringAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCellView_set_doc[] = 
"Class: oaStringAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaCellView,oaString)\n"
"    Calls: void set(oaCellView* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaCellView,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaCellView_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCellView data;
    int convert_status=PyoaStringAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaCellViewObject* self=(PyoaStringAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCellView_isNull_doc[] =
"Class: oaStringAppDef_oaCellView, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaCellView_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaCellView data;
    int convert_status=PyoaStringAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaCellView_assign_doc[] = 
"Class: oaStringAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaCellView_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaCellView data;
  int convert_status=PyoaStringAppDef_oaCellView_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaCellView p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaCellView_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaCellView_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaCellView_get,METH_VARARGS,oaStringAppDef_oaCellView_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaCellView_getDefault,METH_VARARGS,oaStringAppDef_oaCellView_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaCellView_set,METH_VARARGS,oaStringAppDef_oaCellView_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaCellView_tp_isNull,METH_VARARGS,oaStringAppDef_oaCellView_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaCellView_tp_assign,METH_VARARGS,oaStringAppDef_oaCellView_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCellView_doc[] = 
"Class: oaStringAppDef_oaCellView\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaCellView)\n"
"    Calls: (const oaStringAppDef_oaCellView&)\n"
"    Signature: oaStringAppDef_oaCellView||cref-oaStringAppDef_oaCellView,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaCellView_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaCellView",
    sizeof(PyoaStringAppDef_oaCellViewObject),
    0,
    (destructor)oaStringAppDef_oaCellView_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaCellView_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaCellView_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaCellView_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaCellView_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaCellView_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCellView_static_find_doc[] = 
"Class: oaStringAppDef_oaCellView, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaCellView* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaCellView|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaCellView* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaCellView_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaCellViewp result= (oaStringAppDef_oaCellView::find(p1.Data()));
            return PyoaStringAppDef_oaCellView_FromoaStringAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCellViewp result= (oaStringAppDef_oaCellView::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCellView_FromoaStringAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaCellView, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCellView_static_get_doc[] = 
"Class: oaStringAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaCellView* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaCellView|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaCellView* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaCellView|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaCellView* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaCellView|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaCellView_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaCellViewp result= (oaStringAppDef_oaCellView::get(p1.Data()));
            return PyoaStringAppDef_oaCellView_FromoaStringAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaCellViewp result= (oaStringAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCellView_FromoaStringAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaCellViewp result= (oaStringAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaCellView_FromoaStringAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCellViewp result= (oaStringAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCellView_FromoaStringAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCellViewp result= (oaStringAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaCellView_FromoaStringAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaCellViewp result= (oaStringAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaCellView_FromoaStringAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaCellView, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaCellView_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaCellView_static_find,METH_VARARGS,oaStringAppDef_oaCellView_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaCellView_static_get,METH_VARARGS,oaStringAppDef_oaCellView_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaCellView_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaCellView_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaCellView\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaCellView",
           (PyObject*)(&PyoaStringAppDef_oaCellView_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaCellView\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaCellView_Type.tp_dict;
    for(method=oaStringAppDef_oaCellView_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaCluster
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaCluster_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaCluster_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaClusterObject* self = (PyoaStringAppDef_oaClusterObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaCluster)
    {
        PyParamoaStringAppDef_oaCluster p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaCluster_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaCluster, Choices are:\n"
        "    (oaStringAppDef_oaCluster)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaCluster_tp_dealloc(PyoaStringAppDef_oaClusterObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaCluster_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaCluster value;
    int convert_status=PyoaStringAppDef_oaCluster_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaStringAppDef_oaCluster::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaCluster_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaCluster v1;
    PyParamoaStringAppDef_oaCluster v2;
    int convert_status1=PyoaStringAppDef_oaCluster_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaCluster_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaCluster_Convert(PyObject* ob,PyParamoaStringAppDef_oaCluster* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaCluster_Check(ob)) {
        result->SetData( (oaStringAppDef_oaCluster**) ((PyoaStringAppDef_oaClusterObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaCluster Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaCluster_FromoaStringAppDef_oaCluster(oaStringAppDef_oaCluster** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaCluster* data=*value;
        PyObject* bself = PyoaStringAppDef_oaCluster_Type.tp_alloc(&PyoaStringAppDef_oaCluster_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaClusterObject* self = (PyoaStringAppDef_oaClusterObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaCluster_FromoaStringAppDef_oaCluster(oaStringAppDef_oaCluster* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaCluster_Type.tp_alloc(&PyoaStringAppDef_oaCluster_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaClusterObject* self = (PyoaStringAppDef_oaClusterObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCluster_get_doc[] = 
"Class: oaStringAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaCluster,oaString)\n"
"    Calls: void get(const oaCluster* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaCluster,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaCluster_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCluster data;
    int convert_status=PyoaStringAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaClusterObject* self=(PyoaStringAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCluster_getDefault_doc[] = 
"Class: oaStringAppDef_oaCluster, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaCluster_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCluster data;
    int convert_status=PyoaStringAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaClusterObject* self=(PyoaStringAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCluster_set_doc[] = 
"Class: oaStringAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaCluster,oaString)\n"
"    Calls: void set(oaCluster* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaCluster,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaCluster_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaCluster data;
    int convert_status=PyoaStringAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaClusterObject* self=(PyoaStringAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCluster_isNull_doc[] =
"Class: oaStringAppDef_oaCluster, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaCluster_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaCluster data;
    int convert_status=PyoaStringAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaCluster_assign_doc[] = 
"Class: oaStringAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaCluster_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaCluster data;
  int convert_status=PyoaStringAppDef_oaCluster_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaCluster p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaCluster_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaCluster_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaCluster_get,METH_VARARGS,oaStringAppDef_oaCluster_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaCluster_getDefault,METH_VARARGS,oaStringAppDef_oaCluster_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaCluster_set,METH_VARARGS,oaStringAppDef_oaCluster_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaCluster_tp_isNull,METH_VARARGS,oaStringAppDef_oaCluster_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaCluster_tp_assign,METH_VARARGS,oaStringAppDef_oaCluster_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCluster_doc[] = 
"Class: oaStringAppDef_oaCluster\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaCluster)\n"
"    Calls: (const oaStringAppDef_oaCluster&)\n"
"    Signature: oaStringAppDef_oaCluster||cref-oaStringAppDef_oaCluster,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaCluster_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaCluster",
    sizeof(PyoaStringAppDef_oaClusterObject),
    0,
    (destructor)oaStringAppDef_oaCluster_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaCluster_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaCluster_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaCluster_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaCluster_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaCluster_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaCluster_static_find_doc[] = 
"Class: oaStringAppDef_oaCluster, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaCluster* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaCluster|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaCluster* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaCluster_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaClusterp result= (oaStringAppDef_oaCluster::find(p1.Data()));
            return PyoaStringAppDef_oaCluster_FromoaStringAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaClusterp result= (oaStringAppDef_oaCluster::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCluster_FromoaStringAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaCluster, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaCluster_static_get_doc[] = 
"Class: oaStringAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaCluster* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaCluster|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaCluster* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaCluster|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaCluster* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaCluster|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaCluster_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaClusterp result= (oaStringAppDef_oaCluster::get(p1.Data()));
            return PyoaStringAppDef_oaCluster_FromoaStringAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaClusterp result= (oaStringAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCluster_FromoaStringAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaClusterp result= (oaStringAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaCluster_FromoaStringAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaClusterp result= (oaStringAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaCluster_FromoaStringAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaClusterp result= (oaStringAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaCluster_FromoaStringAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaClusterp result= (oaStringAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaCluster_FromoaStringAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaCluster, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaCluster_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaCluster_static_find,METH_VARARGS,oaStringAppDef_oaCluster_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaCluster_static_get,METH_VARARGS,oaStringAppDef_oaCluster_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaCluster_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaCluster_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaCluster\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaCluster",
           (PyObject*)(&PyoaStringAppDef_oaCluster_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaCluster\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaCluster_Type.tp_dict;
    for(method=oaStringAppDef_oaCluster_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaConnectDefObject* self = (PyoaStringAppDef_oaConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaConnectDef)
    {
        PyParamoaStringAppDef_oaConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaConnectDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaConnectDef, Choices are:\n"
        "    (oaStringAppDef_oaConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaConnectDef_tp_dealloc(PyoaStringAppDef_oaConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaConnectDef value;
    int convert_status=PyoaStringAppDef_oaConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaStringAppDef_oaConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaConnectDef v1;
    PyParamoaStringAppDef_oaConnectDef v2;
    int convert_status1=PyoaStringAppDef_oaConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaConnectDef_Convert(PyObject* ob,PyParamoaStringAppDef_oaConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaConnectDef_Check(ob)) {
        result->SetData( (oaStringAppDef_oaConnectDef**) ((PyoaStringAppDef_oaConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConnectDef_FromoaStringAppDef_oaConnectDef(oaStringAppDef_oaConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaConnectDef* data=*value;
        PyObject* bself = PyoaStringAppDef_oaConnectDef_Type.tp_alloc(&PyoaStringAppDef_oaConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaConnectDefObject* self = (PyoaStringAppDef_oaConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConnectDef_FromoaStringAppDef_oaConnectDef(oaStringAppDef_oaConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaConnectDef_Type.tp_alloc(&PyoaStringAppDef_oaConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaConnectDefObject* self = (PyoaStringAppDef_oaConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConnectDef_get_doc[] = 
"Class: oaStringAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaConnectDef,oaString)\n"
"    Calls: void get(const oaConnectDef* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaConnectDef,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConnectDef data;
    int convert_status=PyoaStringAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConnectDefObject* self=(PyoaStringAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConnectDef_getDefault_doc[] = 
"Class: oaStringAppDef_oaConnectDef, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaConnectDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConnectDef data;
    int convert_status=PyoaStringAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConnectDefObject* self=(PyoaStringAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConnectDef_set_doc[] = 
"Class: oaStringAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaConnectDef,oaString)\n"
"    Calls: void set(oaConnectDef* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaConnectDef,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConnectDef data;
    int convert_status=PyoaStringAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConnectDefObject* self=(PyoaStringAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConnectDef_isNull_doc[] =
"Class: oaStringAppDef_oaConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaConnectDef data;
    int convert_status=PyoaStringAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaConnectDef_assign_doc[] = 
"Class: oaStringAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaConnectDef data;
  int convert_status=PyoaStringAppDef_oaConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaConnectDef_get,METH_VARARGS,oaStringAppDef_oaConnectDef_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaConnectDef_getDefault,METH_VARARGS,oaStringAppDef_oaConnectDef_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaConnectDef_set,METH_VARARGS,oaStringAppDef_oaConnectDef_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaConnectDef_tp_isNull,METH_VARARGS,oaStringAppDef_oaConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaConnectDef_tp_assign,METH_VARARGS,oaStringAppDef_oaConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConnectDef_doc[] = 
"Class: oaStringAppDef_oaConnectDef\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaConnectDef)\n"
"    Calls: (const oaStringAppDef_oaConnectDef&)\n"
"    Signature: oaStringAppDef_oaConnectDef||cref-oaStringAppDef_oaConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaConnectDef",
    sizeof(PyoaStringAppDef_oaConnectDefObject),
    0,
    (destructor)oaStringAppDef_oaConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConnectDef_static_find_doc[] = 
"Class: oaStringAppDef_oaConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaConnectDef|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConnectDefp result= (oaStringAppDef_oaConnectDef::find(p1.Data()));
            return PyoaStringAppDef_oaConnectDef_FromoaStringAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConnectDefp result= (oaStringAppDef_oaConnectDef::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConnectDef_FromoaStringAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConnectDef_static_get_doc[] = 
"Class: oaStringAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConnectDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaConnectDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaConnectDef* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConnectDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConnectDef* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConnectDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConnectDefp result= (oaStringAppDef_oaConnectDef::get(p1.Data()));
            return PyoaStringAppDef_oaConnectDef_FromoaStringAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaConnectDefp result= (oaStringAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConnectDef_FromoaStringAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaConnectDefp result= (oaStringAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConnectDef_FromoaStringAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConnectDefp result= (oaStringAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConnectDef_FromoaStringAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConnectDefp result= (oaStringAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConnectDef_FromoaStringAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConnectDefp result= (oaStringAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaConnectDef_FromoaStringAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConnectDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaConnectDef_static_find,METH_VARARGS,oaStringAppDef_oaConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaConnectDef_static_get,METH_VARARGS,oaStringAppDef_oaConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaConnectDef",
           (PyObject*)(&PyoaStringAppDef_oaConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaConnectDef_Type.tp_dict;
    for(method=oaStringAppDef_oaConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaConstraint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaConstraint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaConstraintObject* self = (PyoaStringAppDef_oaConstraintObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaConstraint)
    {
        PyParamoaStringAppDef_oaConstraint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaConstraint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaConstraint, Choices are:\n"
        "    (oaStringAppDef_oaConstraint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaConstraint_tp_dealloc(PyoaStringAppDef_oaConstraintObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraint_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaConstraint value;
    int convert_status=PyoaStringAppDef_oaConstraint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaStringAppDef_oaConstraint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaConstraint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaConstraint v1;
    PyParamoaStringAppDef_oaConstraint v2;
    int convert_status1=PyoaStringAppDef_oaConstraint_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaConstraint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaConstraint_Convert(PyObject* ob,PyParamoaStringAppDef_oaConstraint* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaConstraint_Check(ob)) {
        result->SetData( (oaStringAppDef_oaConstraint**) ((PyoaStringAppDef_oaConstraintObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaConstraint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraint_FromoaStringAppDef_oaConstraint(oaStringAppDef_oaConstraint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaConstraint* data=*value;
        PyObject* bself = PyoaStringAppDef_oaConstraint_Type.tp_alloc(&PyoaStringAppDef_oaConstraint_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaConstraintObject* self = (PyoaStringAppDef_oaConstraintObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraint_FromoaStringAppDef_oaConstraint(oaStringAppDef_oaConstraint* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaConstraint_Type.tp_alloc(&PyoaStringAppDef_oaConstraint_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaConstraintObject* self = (PyoaStringAppDef_oaConstraintObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraint_get_doc[] = 
"Class: oaStringAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaConstraint,oaString)\n"
"    Calls: void get(const oaConstraint* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaConstraint,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraint data;
    int convert_status=PyoaStringAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintObject* self=(PyoaStringAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraint_getDefault_doc[] = 
"Class: oaStringAppDef_oaConstraint, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaConstraint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraint data;
    int convert_status=PyoaStringAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintObject* self=(PyoaStringAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraint_set_doc[] = 
"Class: oaStringAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaConstraint,oaString)\n"
"    Calls: void set(oaConstraint* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaConstraint,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraint data;
    int convert_status=PyoaStringAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintObject* self=(PyoaStringAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraint_isNull_doc[] =
"Class: oaStringAppDef_oaConstraint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaConstraint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaConstraint data;
    int convert_status=PyoaStringAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaConstraint_assign_doc[] = 
"Class: oaStringAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaConstraint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaConstraint data;
  int convert_status=PyoaStringAppDef_oaConstraint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaConstraint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaConstraint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaConstraint_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaConstraint_get,METH_VARARGS,oaStringAppDef_oaConstraint_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaConstraint_getDefault,METH_VARARGS,oaStringAppDef_oaConstraint_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaConstraint_set,METH_VARARGS,oaStringAppDef_oaConstraint_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaConstraint_tp_isNull,METH_VARARGS,oaStringAppDef_oaConstraint_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaConstraint_tp_assign,METH_VARARGS,oaStringAppDef_oaConstraint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraint_doc[] = 
"Class: oaStringAppDef_oaConstraint\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaConstraint)\n"
"    Calls: (const oaStringAppDef_oaConstraint&)\n"
"    Signature: oaStringAppDef_oaConstraint||cref-oaStringAppDef_oaConstraint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaConstraint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaConstraint",
    sizeof(PyoaStringAppDef_oaConstraintObject),
    0,
    (destructor)oaStringAppDef_oaConstraint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaConstraint_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaConstraint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaConstraint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaConstraint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaConstraint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraint_static_find_doc[] = 
"Class: oaStringAppDef_oaConstraint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraint* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraint|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaConstraint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintp result= (oaStringAppDef_oaConstraint::find(p1.Data()));
            return PyoaStringAppDef_oaConstraint_FromoaStringAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintp result= (oaStringAppDef_oaConstraint::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraint_FromoaStringAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraint_static_get_doc[] = 
"Class: oaStringAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraint* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraint|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaConstraint* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraint|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraint* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraint|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaConstraint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintp result= (oaStringAppDef_oaConstraint::get(p1.Data()));
            return PyoaStringAppDef_oaConstraint_FromoaStringAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaConstraintp result= (oaStringAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraint_FromoaStringAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaConstraintp result= (oaStringAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraint_FromoaStringAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintp result= (oaStringAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraint_FromoaStringAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintp result= (oaStringAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraint_FromoaStringAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintp result= (oaStringAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaConstraint_FromoaStringAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaConstraint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaConstraint_static_find,METH_VARARGS,oaStringAppDef_oaConstraint_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaConstraint_static_get,METH_VARARGS,oaStringAppDef_oaConstraint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaConstraint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaConstraint_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaConstraint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaConstraint",
           (PyObject*)(&PyoaStringAppDef_oaConstraint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaConstraint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaConstraint_Type.tp_dict;
    for(method=oaStringAppDef_oaConstraint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaConstraintDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaConstraintDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaConstraintDefObject* self = (PyoaStringAppDef_oaConstraintDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaConstraintDef)
    {
        PyParamoaStringAppDef_oaConstraintDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaConstraintDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaConstraintDef, Choices are:\n"
        "    (oaStringAppDef_oaConstraintDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaConstraintDef_tp_dealloc(PyoaStringAppDef_oaConstraintDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintDef_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaConstraintDef value;
    int convert_status=PyoaStringAppDef_oaConstraintDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaStringAppDef_oaConstraintDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaConstraintDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaConstraintDef v1;
    PyParamoaStringAppDef_oaConstraintDef v2;
    int convert_status1=PyoaStringAppDef_oaConstraintDef_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaConstraintDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaConstraintDef_Convert(PyObject* ob,PyParamoaStringAppDef_oaConstraintDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaConstraintDef_Check(ob)) {
        result->SetData( (oaStringAppDef_oaConstraintDef**) ((PyoaStringAppDef_oaConstraintDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaConstraintDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintDef_FromoaStringAppDef_oaConstraintDef(oaStringAppDef_oaConstraintDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaConstraintDef* data=*value;
        PyObject* bself = PyoaStringAppDef_oaConstraintDef_Type.tp_alloc(&PyoaStringAppDef_oaConstraintDef_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaConstraintDefObject* self = (PyoaStringAppDef_oaConstraintDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintDef_FromoaStringAppDef_oaConstraintDef(oaStringAppDef_oaConstraintDef* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaConstraintDef_Type.tp_alloc(&PyoaStringAppDef_oaConstraintDef_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaConstraintDefObject* self = (PyoaStringAppDef_oaConstraintDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintDef_get_doc[] = 
"Class: oaStringAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaConstraintDef,oaString)\n"
"    Calls: void get(const oaConstraintDef* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaConstraintDef,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintDef data;
    int convert_status=PyoaStringAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintDefObject* self=(PyoaStringAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintDef_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintDef_getDefault_doc[] = 
"Class: oaStringAppDef_oaConstraintDef, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaConstraintDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintDef data;
    int convert_status=PyoaStringAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintDefObject* self=(PyoaStringAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintDef_set_doc[] = 
"Class: oaStringAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaConstraintDef,oaString)\n"
"    Calls: void set(oaConstraintDef* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaConstraintDef,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintDef data;
    int convert_status=PyoaStringAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintDefObject* self=(PyoaStringAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintDef_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintDef_isNull_doc[] =
"Class: oaStringAppDef_oaConstraintDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaConstraintDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaConstraintDef data;
    int convert_status=PyoaStringAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaConstraintDef_assign_doc[] = 
"Class: oaStringAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaConstraintDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaConstraintDef data;
  int convert_status=PyoaStringAppDef_oaConstraintDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaConstraintDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaConstraintDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaConstraintDef_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaConstraintDef_get,METH_VARARGS,oaStringAppDef_oaConstraintDef_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaConstraintDef_getDefault,METH_VARARGS,oaStringAppDef_oaConstraintDef_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaConstraintDef_set,METH_VARARGS,oaStringAppDef_oaConstraintDef_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaConstraintDef_tp_isNull,METH_VARARGS,oaStringAppDef_oaConstraintDef_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaConstraintDef_tp_assign,METH_VARARGS,oaStringAppDef_oaConstraintDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintDef_doc[] = 
"Class: oaStringAppDef_oaConstraintDef\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaConstraintDef)\n"
"    Calls: (const oaStringAppDef_oaConstraintDef&)\n"
"    Signature: oaStringAppDef_oaConstraintDef||cref-oaStringAppDef_oaConstraintDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaConstraintDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaConstraintDef",
    sizeof(PyoaStringAppDef_oaConstraintDefObject),
    0,
    (destructor)oaStringAppDef_oaConstraintDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaConstraintDef_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaConstraintDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaConstraintDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaConstraintDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaConstraintDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintDef_static_find_doc[] = 
"Class: oaStringAppDef_oaConstraintDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintDef|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaConstraintDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintDefp result= (oaStringAppDef_oaConstraintDef::find(p1.Data()));
            return PyoaStringAppDef_oaConstraintDef_FromoaStringAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintDefp result= (oaStringAppDef_oaConstraintDef::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintDef_FromoaStringAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintDef_static_get_doc[] = 
"Class: oaStringAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintDef* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintDef* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaConstraintDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintDefp result= (oaStringAppDef_oaConstraintDef::get(p1.Data()));
            return PyoaStringAppDef_oaConstraintDef_FromoaStringAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaConstraintDefp result= (oaStringAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintDef_FromoaStringAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaConstraintDefp result= (oaStringAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintDef_FromoaStringAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintDefp result= (oaStringAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintDef_FromoaStringAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintDefp result= (oaStringAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintDef_FromoaStringAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintDefp result= (oaStringAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaConstraintDef_FromoaStringAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaConstraintDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaConstraintDef_static_find,METH_VARARGS,oaStringAppDef_oaConstraintDef_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaConstraintDef_static_get,METH_VARARGS,oaStringAppDef_oaConstraintDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaConstraintDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaConstraintDef_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaConstraintDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaConstraintDef",
           (PyObject*)(&PyoaStringAppDef_oaConstraintDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaConstraintDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaConstraintDef_Type.tp_dict;
    for(method=oaStringAppDef_oaConstraintDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaConstraintGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaConstraintGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaConstraintGroupObject* self = (PyoaStringAppDef_oaConstraintGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaConstraintGroup)
    {
        PyParamoaStringAppDef_oaConstraintGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaConstraintGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaConstraintGroup, Choices are:\n"
        "    (oaStringAppDef_oaConstraintGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaConstraintGroup_tp_dealloc(PyoaStringAppDef_oaConstraintGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintGroup_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaConstraintGroup value;
    int convert_status=PyoaStringAppDef_oaConstraintGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaStringAppDef_oaConstraintGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaConstraintGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaConstraintGroup v1;
    PyParamoaStringAppDef_oaConstraintGroup v2;
    int convert_status1=PyoaStringAppDef_oaConstraintGroup_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaConstraintGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaConstraintGroup_Convert(PyObject* ob,PyParamoaStringAppDef_oaConstraintGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaConstraintGroup_Check(ob)) {
        result->SetData( (oaStringAppDef_oaConstraintGroup**) ((PyoaStringAppDef_oaConstraintGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaConstraintGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintGroup_FromoaStringAppDef_oaConstraintGroup(oaStringAppDef_oaConstraintGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaConstraintGroup* data=*value;
        PyObject* bself = PyoaStringAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaStringAppDef_oaConstraintGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaConstraintGroupObject* self = (PyoaStringAppDef_oaConstraintGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintGroup_FromoaStringAppDef_oaConstraintGroup(oaStringAppDef_oaConstraintGroup* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaStringAppDef_oaConstraintGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaConstraintGroupObject* self = (PyoaStringAppDef_oaConstraintGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroup_get_doc[] = 
"Class: oaStringAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaConstraintGroup,oaString)\n"
"    Calls: void get(const oaConstraintGroup* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaConstraintGroup,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintGroup data;
    int convert_status=PyoaStringAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintGroupObject* self=(PyoaStringAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroup_getDefault_doc[] = 
"Class: oaStringAppDef_oaConstraintGroup, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintGroup data;
    int convert_status=PyoaStringAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintGroupObject* self=(PyoaStringAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroup_set_doc[] = 
"Class: oaStringAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaConstraintGroup,oaString)\n"
"    Calls: void set(oaConstraintGroup* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroup,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintGroup data;
    int convert_status=PyoaStringAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintGroupObject* self=(PyoaStringAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroup_isNull_doc[] =
"Class: oaStringAppDef_oaConstraintGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaConstraintGroup data;
    int convert_status=PyoaStringAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaConstraintGroup_assign_doc[] = 
"Class: oaStringAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaConstraintGroup data;
  int convert_status=PyoaStringAppDef_oaConstraintGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaConstraintGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaConstraintGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaConstraintGroup_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaConstraintGroup_get,METH_VARARGS,oaStringAppDef_oaConstraintGroup_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaConstraintGroup_getDefault,METH_VARARGS,oaStringAppDef_oaConstraintGroup_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaConstraintGroup_set,METH_VARARGS,oaStringAppDef_oaConstraintGroup_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaConstraintGroup_tp_isNull,METH_VARARGS,oaStringAppDef_oaConstraintGroup_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaConstraintGroup_tp_assign,METH_VARARGS,oaStringAppDef_oaConstraintGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroup_doc[] = 
"Class: oaStringAppDef_oaConstraintGroup\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaConstraintGroup)\n"
"    Calls: (const oaStringAppDef_oaConstraintGroup&)\n"
"    Signature: oaStringAppDef_oaConstraintGroup||cref-oaStringAppDef_oaConstraintGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaConstraintGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaConstraintGroup",
    sizeof(PyoaStringAppDef_oaConstraintGroupObject),
    0,
    (destructor)oaStringAppDef_oaConstraintGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaConstraintGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaConstraintGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaConstraintGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaConstraintGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaConstraintGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroup_static_find_doc[] = 
"Class: oaStringAppDef_oaConstraintGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintGroup|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintGroupp result= (oaStringAppDef_oaConstraintGroup::find(p1.Data()));
            return PyoaStringAppDef_oaConstraintGroup_FromoaStringAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupp result= (oaStringAppDef_oaConstraintGroup::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintGroup_FromoaStringAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroup_static_get_doc[] = 
"Class: oaStringAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroup|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroup* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroup|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintGroup* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroup|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintGroupp result= (oaStringAppDef_oaConstraintGroup::get(p1.Data()));
            return PyoaStringAppDef_oaConstraintGroup_FromoaStringAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaConstraintGroupp result= (oaStringAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintGroup_FromoaStringAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaConstraintGroupp result= (oaStringAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintGroup_FromoaStringAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupp result= (oaStringAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintGroup_FromoaStringAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupp result= (oaStringAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintGroup_FromoaStringAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupp result= (oaStringAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaConstraintGroup_FromoaStringAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaConstraintGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaConstraintGroup_static_find,METH_VARARGS,oaStringAppDef_oaConstraintGroup_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaConstraintGroup_static_get,METH_VARARGS,oaStringAppDef_oaConstraintGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaConstraintGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaConstraintGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaConstraintGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaConstraintGroup",
           (PyObject*)(&PyoaStringAppDef_oaConstraintGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaConstraintGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaConstraintGroup_Type.tp_dict;
    for(method=oaStringAppDef_oaConstraintGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaConstraintGroupHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintGroupHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaConstraintGroupHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaConstraintGroupHeaderObject* self = (PyoaStringAppDef_oaConstraintGroupHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaConstraintGroupHeader)
    {
        PyParamoaStringAppDef_oaConstraintGroupHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaConstraintGroupHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaConstraintGroupHeader, Choices are:\n"
        "    (oaStringAppDef_oaConstraintGroupHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaConstraintGroupHeader_tp_dealloc(PyoaStringAppDef_oaConstraintGroupHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintGroupHeader_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaConstraintGroupHeader value;
    int convert_status=PyoaStringAppDef_oaConstraintGroupHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaStringAppDef_oaConstraintGroupHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaConstraintGroupHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaConstraintGroupHeader v1;
    PyParamoaStringAppDef_oaConstraintGroupHeader v2;
    int convert_status1=PyoaStringAppDef_oaConstraintGroupHeader_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaConstraintGroupHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaConstraintGroupHeader_Convert(PyObject* ob,PyParamoaStringAppDef_oaConstraintGroupHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaConstraintGroupHeader_Check(ob)) {
        result->SetData( (oaStringAppDef_oaConstraintGroupHeader**) ((PyoaStringAppDef_oaConstraintGroupHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaConstraintGroupHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintGroupHeader_FromoaStringAppDef_oaConstraintGroupHeader(oaStringAppDef_oaConstraintGroupHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaConstraintGroupHeader* data=*value;
        PyObject* bself = PyoaStringAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaStringAppDef_oaConstraintGroupHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaConstraintGroupHeaderObject* self = (PyoaStringAppDef_oaConstraintGroupHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintGroupHeader_FromoaStringAppDef_oaConstraintGroupHeader(oaStringAppDef_oaConstraintGroupHeader* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaStringAppDef_oaConstraintGroupHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaConstraintGroupHeaderObject* self = (PyoaStringAppDef_oaConstraintGroupHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupHeader_get_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaConstraintGroupHeader,oaString)\n"
"    Calls: void get(const oaConstraintGroupHeader* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaConstraintGroupHeader,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaStringAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintGroupHeaderObject* self=(PyoaStringAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupHeader_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupHeader_getDefault_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupHeader, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaStringAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintGroupHeaderObject* self=(PyoaStringAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupHeader_set_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaConstraintGroupHeader,oaString)\n"
"    Calls: void set(oaConstraintGroupHeader* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupHeader,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaStringAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintGroupHeaderObject* self=(PyoaStringAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupHeader_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupHeader_isNull_doc[] =
"Class: oaStringAppDef_oaConstraintGroupHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaStringAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaConstraintGroupHeader_assign_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaConstraintGroupHeader data;
  int convert_status=PyoaStringAppDef_oaConstraintGroupHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaConstraintGroupHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaConstraintGroupHeader_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaConstraintGroupHeader_get,METH_VARARGS,oaStringAppDef_oaConstraintGroupHeader_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaConstraintGroupHeader_getDefault,METH_VARARGS,oaStringAppDef_oaConstraintGroupHeader_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaConstraintGroupHeader_set,METH_VARARGS,oaStringAppDef_oaConstraintGroupHeader_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaConstraintGroupHeader_tp_isNull,METH_VARARGS,oaStringAppDef_oaConstraintGroupHeader_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaConstraintGroupHeader_tp_assign,METH_VARARGS,oaStringAppDef_oaConstraintGroupHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupHeader_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupHeader\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaConstraintGroupHeader)\n"
"    Calls: (const oaStringAppDef_oaConstraintGroupHeader&)\n"
"    Signature: oaStringAppDef_oaConstraintGroupHeader||cref-oaStringAppDef_oaConstraintGroupHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaConstraintGroupHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaConstraintGroupHeader",
    sizeof(PyoaStringAppDef_oaConstraintGroupHeaderObject),
    0,
    (destructor)oaStringAppDef_oaConstraintGroupHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaConstraintGroupHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaConstraintGroupHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaConstraintGroupHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaConstraintGroupHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaConstraintGroupHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupHeader_static_find_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroupHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintGroupHeader|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintGroupHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintGroupHeaderp result= (oaStringAppDef_oaConstraintGroupHeader::find(p1.Data()));
            return PyoaStringAppDef_oaConstraintGroupHeader_FromoaStringAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupHeaderp result= (oaStringAppDef_oaConstraintGroupHeader::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintGroupHeader_FromoaStringAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintGroupHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupHeader_static_get_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroupHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupHeader|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupHeader|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupHeader|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintGroupHeaderp result= (oaStringAppDef_oaConstraintGroupHeader::get(p1.Data()));
            return PyoaStringAppDef_oaConstraintGroupHeader_FromoaStringAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaConstraintGroupHeaderp result= (oaStringAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintGroupHeader_FromoaStringAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaConstraintGroupHeaderp result= (oaStringAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintGroupHeader_FromoaStringAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupHeaderp result= (oaStringAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintGroupHeader_FromoaStringAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupHeaderp result= (oaStringAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintGroupHeader_FromoaStringAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupHeaderp result= (oaStringAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaConstraintGroupHeader_FromoaStringAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintGroupHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaConstraintGroupHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaConstraintGroupHeader_static_find,METH_VARARGS,oaStringAppDef_oaConstraintGroupHeader_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaConstraintGroupHeader_static_get,METH_VARARGS,oaStringAppDef_oaConstraintGroupHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaConstraintGroupHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaConstraintGroupHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaConstraintGroupHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaConstraintGroupHeader",
           (PyObject*)(&PyoaStringAppDef_oaConstraintGroupHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaConstraintGroupHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaConstraintGroupHeader_Type.tp_dict;
    for(method=oaStringAppDef_oaConstraintGroupHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaConstraintGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaConstraintGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaConstraintGroupMemObject* self = (PyoaStringAppDef_oaConstraintGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaConstraintGroupMem)
    {
        PyParamoaStringAppDef_oaConstraintGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaConstraintGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaConstraintGroupMem, Choices are:\n"
        "    (oaStringAppDef_oaConstraintGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaConstraintGroupMem_tp_dealloc(PyoaStringAppDef_oaConstraintGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaConstraintGroupMem value;
    int convert_status=PyoaStringAppDef_oaConstraintGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaStringAppDef_oaConstraintGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaConstraintGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaConstraintGroupMem v1;
    PyParamoaStringAppDef_oaConstraintGroupMem v2;
    int convert_status1=PyoaStringAppDef_oaConstraintGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaConstraintGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaConstraintGroupMem_Convert(PyObject* ob,PyParamoaStringAppDef_oaConstraintGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaConstraintGroupMem_Check(ob)) {
        result->SetData( (oaStringAppDef_oaConstraintGroupMem**) ((PyoaStringAppDef_oaConstraintGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaConstraintGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintGroupMem_FromoaStringAppDef_oaConstraintGroupMem(oaStringAppDef_oaConstraintGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaConstraintGroupMem* data=*value;
        PyObject* bself = PyoaStringAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaStringAppDef_oaConstraintGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaConstraintGroupMemObject* self = (PyoaStringAppDef_oaConstraintGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintGroupMem_FromoaStringAppDef_oaConstraintGroupMem(oaStringAppDef_oaConstraintGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaStringAppDef_oaConstraintGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaConstraintGroupMemObject* self = (PyoaStringAppDef_oaConstraintGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupMem_get_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaConstraintGroupMem,oaString)\n"
"    Calls: void get(const oaConstraintGroupMem* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaConstraintGroupMem,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaStringAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintGroupMemObject* self=(PyoaStringAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupMem_getDefault_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupMem, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupMem_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaStringAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintGroupMemObject* self=(PyoaStringAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupMem_set_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaConstraintGroupMem,oaString)\n"
"    Calls: void set(oaConstraintGroupMem* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupMem,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaStringAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintGroupMemObject* self=(PyoaStringAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupMem_isNull_doc[] =
"Class: oaStringAppDef_oaConstraintGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaStringAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaConstraintGroupMem_assign_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaConstraintGroupMem data;
  int convert_status=PyoaStringAppDef_oaConstraintGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaConstraintGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaConstraintGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaConstraintGroupMem_get,METH_VARARGS,oaStringAppDef_oaConstraintGroupMem_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaConstraintGroupMem_getDefault,METH_VARARGS,oaStringAppDef_oaConstraintGroupMem_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaConstraintGroupMem_set,METH_VARARGS,oaStringAppDef_oaConstraintGroupMem_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaConstraintGroupMem_tp_isNull,METH_VARARGS,oaStringAppDef_oaConstraintGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaConstraintGroupMem_tp_assign,METH_VARARGS,oaStringAppDef_oaConstraintGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupMem_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupMem\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaConstraintGroupMem)\n"
"    Calls: (const oaStringAppDef_oaConstraintGroupMem&)\n"
"    Signature: oaStringAppDef_oaConstraintGroupMem||cref-oaStringAppDef_oaConstraintGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaConstraintGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaConstraintGroupMem",
    sizeof(PyoaStringAppDef_oaConstraintGroupMemObject),
    0,
    (destructor)oaStringAppDef_oaConstraintGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaConstraintGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaConstraintGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaConstraintGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaConstraintGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaConstraintGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupMem_static_find_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintGroupMem|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintGroupMemp result= (oaStringAppDef_oaConstraintGroupMem::find(p1.Data()));
            return PyoaStringAppDef_oaConstraintGroupMem_FromoaStringAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupMemp result= (oaStringAppDef_oaConstraintGroupMem::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintGroupMem_FromoaStringAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintGroupMem_static_get_doc[] = 
"Class: oaStringAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupMem|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroupMem* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupMem|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintGroupMem* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupMem|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaConstraintGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintGroupMemp result= (oaStringAppDef_oaConstraintGroupMem::get(p1.Data()));
            return PyoaStringAppDef_oaConstraintGroupMem_FromoaStringAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaConstraintGroupMemp result= (oaStringAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintGroupMem_FromoaStringAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaConstraintGroupMemp result= (oaStringAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintGroupMem_FromoaStringAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupMemp result= (oaStringAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintGroupMem_FromoaStringAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupMemp result= (oaStringAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintGroupMem_FromoaStringAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintGroupMemp result= (oaStringAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaConstraintGroupMem_FromoaStringAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaConstraintGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaConstraintGroupMem_static_find,METH_VARARGS,oaStringAppDef_oaConstraintGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaConstraintGroupMem_static_get,METH_VARARGS,oaStringAppDef_oaConstraintGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaConstraintGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaConstraintGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaConstraintGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaConstraintGroupMem",
           (PyObject*)(&PyoaStringAppDef_oaConstraintGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaConstraintGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaConstraintGroupMem_Type.tp_dict;
    for(method=oaStringAppDef_oaConstraintGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaConstraintParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaConstraintParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaConstraintParamObject* self = (PyoaStringAppDef_oaConstraintParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaConstraintParam)
    {
        PyParamoaStringAppDef_oaConstraintParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaConstraintParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaConstraintParam, Choices are:\n"
        "    (oaStringAppDef_oaConstraintParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaConstraintParam_tp_dealloc(PyoaStringAppDef_oaConstraintParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintParam_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaConstraintParam value;
    int convert_status=PyoaStringAppDef_oaConstraintParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaStringAppDef_oaConstraintParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaConstraintParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaConstraintParam v1;
    PyParamoaStringAppDef_oaConstraintParam v2;
    int convert_status1=PyoaStringAppDef_oaConstraintParam_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaConstraintParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaConstraintParam_Convert(PyObject* ob,PyParamoaStringAppDef_oaConstraintParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaConstraintParam_Check(ob)) {
        result->SetData( (oaStringAppDef_oaConstraintParam**) ((PyoaStringAppDef_oaConstraintParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaConstraintParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintParam_FromoaStringAppDef_oaConstraintParam(oaStringAppDef_oaConstraintParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaConstraintParam* data=*value;
        PyObject* bself = PyoaStringAppDef_oaConstraintParam_Type.tp_alloc(&PyoaStringAppDef_oaConstraintParam_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaConstraintParamObject* self = (PyoaStringAppDef_oaConstraintParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintParam_FromoaStringAppDef_oaConstraintParam(oaStringAppDef_oaConstraintParam* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaConstraintParam_Type.tp_alloc(&PyoaStringAppDef_oaConstraintParam_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaConstraintParamObject* self = (PyoaStringAppDef_oaConstraintParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParam_get_doc[] = 
"Class: oaStringAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaConstraintParam,oaString)\n"
"    Calls: void get(const oaConstraintParam* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaConstraintParam,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintParam data;
    int convert_status=PyoaStringAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintParamObject* self=(PyoaStringAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParam_getDefault_doc[] = 
"Class: oaStringAppDef_oaConstraintParam, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaConstraintParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintParam data;
    int convert_status=PyoaStringAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintParamObject* self=(PyoaStringAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParam_set_doc[] = 
"Class: oaStringAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaConstraintParam,oaString)\n"
"    Calls: void set(oaConstraintParam* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaConstraintParam,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintParam data;
    int convert_status=PyoaStringAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintParamObject* self=(PyoaStringAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParam_isNull_doc[] =
"Class: oaStringAppDef_oaConstraintParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaConstraintParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaConstraintParam data;
    int convert_status=PyoaStringAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaConstraintParam_assign_doc[] = 
"Class: oaStringAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaConstraintParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaConstraintParam data;
  int convert_status=PyoaStringAppDef_oaConstraintParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaConstraintParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaConstraintParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaConstraintParam_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaConstraintParam_get,METH_VARARGS,oaStringAppDef_oaConstraintParam_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaConstraintParam_getDefault,METH_VARARGS,oaStringAppDef_oaConstraintParam_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaConstraintParam_set,METH_VARARGS,oaStringAppDef_oaConstraintParam_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaConstraintParam_tp_isNull,METH_VARARGS,oaStringAppDef_oaConstraintParam_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaConstraintParam_tp_assign,METH_VARARGS,oaStringAppDef_oaConstraintParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParam_doc[] = 
"Class: oaStringAppDef_oaConstraintParam\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaConstraintParam)\n"
"    Calls: (const oaStringAppDef_oaConstraintParam&)\n"
"    Signature: oaStringAppDef_oaConstraintParam||cref-oaStringAppDef_oaConstraintParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaConstraintParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaConstraintParam",
    sizeof(PyoaStringAppDef_oaConstraintParamObject),
    0,
    (destructor)oaStringAppDef_oaConstraintParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaConstraintParam_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaConstraintParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaConstraintParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaConstraintParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaConstraintParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParam_static_find_doc[] = 
"Class: oaStringAppDef_oaConstraintParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintParam|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaConstraintParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintParamp result= (oaStringAppDef_oaConstraintParam::find(p1.Data()));
            return PyoaStringAppDef_oaConstraintParam_FromoaStringAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintParamp result= (oaStringAppDef_oaConstraintParam::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintParam_FromoaStringAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParam_static_get_doc[] = 
"Class: oaStringAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParam|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintParam* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParam|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintParam* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParam|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaConstraintParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintParamp result= (oaStringAppDef_oaConstraintParam::get(p1.Data()));
            return PyoaStringAppDef_oaConstraintParam_FromoaStringAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaConstraintParamp result= (oaStringAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintParam_FromoaStringAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaConstraintParamp result= (oaStringAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintParam_FromoaStringAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintParamp result= (oaStringAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintParam_FromoaStringAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintParamp result= (oaStringAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintParam_FromoaStringAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintParamp result= (oaStringAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaConstraintParam_FromoaStringAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaConstraintParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaConstraintParam_static_find,METH_VARARGS,oaStringAppDef_oaConstraintParam_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaConstraintParam_static_get,METH_VARARGS,oaStringAppDef_oaConstraintParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaConstraintParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaConstraintParam_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaConstraintParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaConstraintParam",
           (PyObject*)(&PyoaStringAppDef_oaConstraintParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaConstraintParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaConstraintParam_Type.tp_dict;
    for(method=oaStringAppDef_oaConstraintParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaConstraintParamDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintParamDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaConstraintParamDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaConstraintParamDefObject* self = (PyoaStringAppDef_oaConstraintParamDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaConstraintParamDef)
    {
        PyParamoaStringAppDef_oaConstraintParamDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaConstraintParamDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaConstraintParamDef, Choices are:\n"
        "    (oaStringAppDef_oaConstraintParamDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaConstraintParamDef_tp_dealloc(PyoaStringAppDef_oaConstraintParamDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaConstraintParamDef_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaConstraintParamDef value;
    int convert_status=PyoaStringAppDef_oaConstraintParamDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaStringAppDef_oaConstraintParamDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaConstraintParamDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaConstraintParamDef v1;
    PyParamoaStringAppDef_oaConstraintParamDef v2;
    int convert_status1=PyoaStringAppDef_oaConstraintParamDef_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaConstraintParamDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaConstraintParamDef_Convert(PyObject* ob,PyParamoaStringAppDef_oaConstraintParamDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaConstraintParamDef_Check(ob)) {
        result->SetData( (oaStringAppDef_oaConstraintParamDef**) ((PyoaStringAppDef_oaConstraintParamDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaConstraintParamDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintParamDef_FromoaStringAppDef_oaConstraintParamDef(oaStringAppDef_oaConstraintParamDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaConstraintParamDef* data=*value;
        PyObject* bself = PyoaStringAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaStringAppDef_oaConstraintParamDef_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaConstraintParamDefObject* self = (PyoaStringAppDef_oaConstraintParamDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaConstraintParamDef_FromoaStringAppDef_oaConstraintParamDef(oaStringAppDef_oaConstraintParamDef* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaStringAppDef_oaConstraintParamDef_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaConstraintParamDefObject* self = (PyoaStringAppDef_oaConstraintParamDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParamDef_get_doc[] = 
"Class: oaStringAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaConstraintParamDef,oaString)\n"
"    Calls: void get(const oaConstraintParamDef* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaConstraintParamDef,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintParamDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintParamDef data;
    int convert_status=PyoaStringAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintParamDefObject* self=(PyoaStringAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParamDef_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParamDef_getDefault_doc[] = 
"Class: oaStringAppDef_oaConstraintParamDef, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaConstraintParamDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintParamDef data;
    int convert_status=PyoaStringAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintParamDefObject* self=(PyoaStringAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParamDef_set_doc[] = 
"Class: oaStringAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaConstraintParamDef,oaString)\n"
"    Calls: void set(oaConstraintParamDef* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaConstraintParamDef,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaConstraintParamDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaConstraintParamDef data;
    int convert_status=PyoaStringAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaConstraintParamDefObject* self=(PyoaStringAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParamDef_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParamDef_isNull_doc[] =
"Class: oaStringAppDef_oaConstraintParamDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaConstraintParamDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaConstraintParamDef data;
    int convert_status=PyoaStringAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaConstraintParamDef_assign_doc[] = 
"Class: oaStringAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaConstraintParamDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaConstraintParamDef data;
  int convert_status=PyoaStringAppDef_oaConstraintParamDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaConstraintParamDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaConstraintParamDef_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaConstraintParamDef_get,METH_VARARGS,oaStringAppDef_oaConstraintParamDef_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaConstraintParamDef_getDefault,METH_VARARGS,oaStringAppDef_oaConstraintParamDef_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaConstraintParamDef_set,METH_VARARGS,oaStringAppDef_oaConstraintParamDef_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaConstraintParamDef_tp_isNull,METH_VARARGS,oaStringAppDef_oaConstraintParamDef_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaConstraintParamDef_tp_assign,METH_VARARGS,oaStringAppDef_oaConstraintParamDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParamDef_doc[] = 
"Class: oaStringAppDef_oaConstraintParamDef\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaConstraintParamDef)\n"
"    Calls: (const oaStringAppDef_oaConstraintParamDef&)\n"
"    Signature: oaStringAppDef_oaConstraintParamDef||cref-oaStringAppDef_oaConstraintParamDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaConstraintParamDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaConstraintParamDef",
    sizeof(PyoaStringAppDef_oaConstraintParamDefObject),
    0,
    (destructor)oaStringAppDef_oaConstraintParamDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaConstraintParamDef_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaConstraintParamDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaConstraintParamDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaConstraintParamDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaConstraintParamDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParamDef_static_find_doc[] = 
"Class: oaStringAppDef_oaConstraintParamDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintParamDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintParamDef|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintParamDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaConstraintParamDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintParamDefp result= (oaStringAppDef_oaConstraintParamDef::find(p1.Data()));
            return PyoaStringAppDef_oaConstraintParamDef_FromoaStringAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintParamDefp result= (oaStringAppDef_oaConstraintParamDef::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintParamDef_FromoaStringAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintParamDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaConstraintParamDef_static_get_doc[] = 
"Class: oaStringAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaConstraintParamDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParamDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintParamDef* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParamDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintParamDef* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParamDef|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaConstraintParamDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaConstraintParamDefp result= (oaStringAppDef_oaConstraintParamDef::get(p1.Data()));
            return PyoaStringAppDef_oaConstraintParamDef_FromoaStringAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaConstraintParamDefp result= (oaStringAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintParamDef_FromoaStringAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaConstraintParamDefp result= (oaStringAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintParamDef_FromoaStringAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintParamDefp result= (oaStringAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaConstraintParamDef_FromoaStringAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintParamDefp result= (oaStringAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaConstraintParamDef_FromoaStringAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaConstraintParamDefp result= (oaStringAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaConstraintParamDef_FromoaStringAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaConstraintParamDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaConstraintParamDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaConstraintParamDef_static_find,METH_VARARGS,oaStringAppDef_oaConstraintParamDef_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaConstraintParamDef_static_get,METH_VARARGS,oaStringAppDef_oaConstraintParamDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaConstraintParamDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaConstraintParamDef_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaConstraintParamDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaConstraintParamDef",
           (PyObject*)(&PyoaStringAppDef_oaConstraintParamDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaConstraintParamDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaConstraintParamDef_Type.tp_dict;
    for(method=oaStringAppDef_oaConstraintParamDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaDMData
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDMData_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaDMData_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaDMDataObject* self = (PyoaStringAppDef_oaDMDataObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaDMData)
    {
        PyParamoaStringAppDef_oaDMData p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaDMData_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaDMData, Choices are:\n"
        "    (oaStringAppDef_oaDMData)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaDMData_tp_dealloc(PyoaStringAppDef_oaDMDataObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDMData_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaDMData value;
    int convert_status=PyoaStringAppDef_oaDMData_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaStringAppDef_oaDMData::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaDMData_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaDMData v1;
    PyParamoaStringAppDef_oaDMData v2;
    int convert_status1=PyoaStringAppDef_oaDMData_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaDMData_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaDMData_Convert(PyObject* ob,PyParamoaStringAppDef_oaDMData* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaDMData_Check(ob)) {
        result->SetData( (oaStringAppDef_oaDMData**) ((PyoaStringAppDef_oaDMDataObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaDMData Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDMData_FromoaStringAppDef_oaDMData(oaStringAppDef_oaDMData** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaDMData* data=*value;
        PyObject* bself = PyoaStringAppDef_oaDMData_Type.tp_alloc(&PyoaStringAppDef_oaDMData_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaDMDataObject* self = (PyoaStringAppDef_oaDMDataObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDMData_FromoaStringAppDef_oaDMData(oaStringAppDef_oaDMData* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaDMData_Type.tp_alloc(&PyoaStringAppDef_oaDMData_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaDMDataObject* self = (PyoaStringAppDef_oaDMDataObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMData_get_doc[] = 
"Class: oaStringAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaDMData,oaString)\n"
"    Calls: void get(const oaDMData* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaDMData,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDMData_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDMData data;
    int convert_status=PyoaStringAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDMDataObject* self=(PyoaStringAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMData_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMData_getDefault_doc[] = 
"Class: oaStringAppDef_oaDMData, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaDMData_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDMData data;
    int convert_status=PyoaStringAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDMDataObject* self=(PyoaStringAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMData_set_doc[] = 
"Class: oaStringAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDMData,oaString)\n"
"    Calls: void set(oaDMData* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaDMData,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDMData_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDMData data;
    int convert_status=PyoaStringAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDMDataObject* self=(PyoaStringAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMData_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMData_isNull_doc[] =
"Class: oaStringAppDef_oaDMData, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaDMData_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaDMData data;
    int convert_status=PyoaStringAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaDMData_assign_doc[] = 
"Class: oaStringAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaDMData_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaDMData data;
  int convert_status=PyoaStringAppDef_oaDMData_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaDMData p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaDMData_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaDMData_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaDMData_get,METH_VARARGS,oaStringAppDef_oaDMData_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaDMData_getDefault,METH_VARARGS,oaStringAppDef_oaDMData_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaDMData_set,METH_VARARGS,oaStringAppDef_oaDMData_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaDMData_tp_isNull,METH_VARARGS,oaStringAppDef_oaDMData_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaDMData_tp_assign,METH_VARARGS,oaStringAppDef_oaDMData_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMData_doc[] = 
"Class: oaStringAppDef_oaDMData\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaDMData)\n"
"    Calls: (const oaStringAppDef_oaDMData&)\n"
"    Signature: oaStringAppDef_oaDMData||cref-oaStringAppDef_oaDMData,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaDMData_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaDMData",
    sizeof(PyoaStringAppDef_oaDMDataObject),
    0,
    (destructor)oaStringAppDef_oaDMData_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaDMData_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaDMData_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaDMData_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaDMData_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaDMData_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMData_static_find_doc[] = 
"Class: oaStringAppDef_oaDMData, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDMData* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaDMData|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDMData* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaDMData_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDMDatap result= (oaStringAppDef_oaDMData::find(p1.Data()));
            return PyoaStringAppDef_oaDMData_FromoaStringAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDMDatap result= (oaStringAppDef_oaDMData::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDMData_FromoaStringAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDMData, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMData_static_get_doc[] = 
"Class: oaStringAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDMData* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMData|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaDMData* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMData|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDMData* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMData|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaDMData_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDMDatap result= (oaStringAppDef_oaDMData::get(p1.Data()));
            return PyoaStringAppDef_oaDMData_FromoaStringAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaDMDatap result= (oaStringAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDMData_FromoaStringAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaDMDatap result= (oaStringAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDMData_FromoaStringAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDMDatap result= (oaStringAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDMData_FromoaStringAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDMDatap result= (oaStringAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDMData_FromoaStringAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDMDatap result= (oaStringAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaDMData_FromoaStringAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDMData, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaDMData_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaDMData_static_find,METH_VARARGS,oaStringAppDef_oaDMData_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaDMData_static_get,METH_VARARGS,oaStringAppDef_oaDMData_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaDMData_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaDMData_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaDMData\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaDMData",
           (PyObject*)(&PyoaStringAppDef_oaDMData_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaDMData\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaDMData_Type.tp_dict;
    for(method=oaStringAppDef_oaDMData_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaDMFile
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDMFile_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaDMFile_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaDMFileObject* self = (PyoaStringAppDef_oaDMFileObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaDMFile)
    {
        PyParamoaStringAppDef_oaDMFile p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaDMFile_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaDMFile, Choices are:\n"
        "    (oaStringAppDef_oaDMFile)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaDMFile_tp_dealloc(PyoaStringAppDef_oaDMFileObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDMFile_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaDMFile value;
    int convert_status=PyoaStringAppDef_oaDMFile_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaStringAppDef_oaDMFile::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaDMFile_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaDMFile v1;
    PyParamoaStringAppDef_oaDMFile v2;
    int convert_status1=PyoaStringAppDef_oaDMFile_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaDMFile_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaDMFile_Convert(PyObject* ob,PyParamoaStringAppDef_oaDMFile* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaDMFile_Check(ob)) {
        result->SetData( (oaStringAppDef_oaDMFile**) ((PyoaStringAppDef_oaDMFileObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaDMFile Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDMFile_FromoaStringAppDef_oaDMFile(oaStringAppDef_oaDMFile** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaDMFile* data=*value;
        PyObject* bself = PyoaStringAppDef_oaDMFile_Type.tp_alloc(&PyoaStringAppDef_oaDMFile_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaDMFileObject* self = (PyoaStringAppDef_oaDMFileObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDMFile_FromoaStringAppDef_oaDMFile(oaStringAppDef_oaDMFile* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaDMFile_Type.tp_alloc(&PyoaStringAppDef_oaDMFile_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaDMFileObject* self = (PyoaStringAppDef_oaDMFileObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMFile_get_doc[] = 
"Class: oaStringAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaDMFile,oaString)\n"
"    Calls: void get(const oaDMFile* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaDMFile,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDMFile_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDMFile data;
    int convert_status=PyoaStringAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDMFileObject* self=(PyoaStringAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMFile_getDefault_doc[] = 
"Class: oaStringAppDef_oaDMFile, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaDMFile_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDMFile data;
    int convert_status=PyoaStringAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDMFileObject* self=(PyoaStringAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMFile_set_doc[] = 
"Class: oaStringAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDMFile,oaString)\n"
"    Calls: void set(oaDMFile* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaDMFile,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDMFile_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDMFile data;
    int convert_status=PyoaStringAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDMFileObject* self=(PyoaStringAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMFile_isNull_doc[] =
"Class: oaStringAppDef_oaDMFile, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaDMFile_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaDMFile data;
    int convert_status=PyoaStringAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaDMFile_assign_doc[] = 
"Class: oaStringAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaDMFile_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaDMFile data;
  int convert_status=PyoaStringAppDef_oaDMFile_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaDMFile p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaDMFile_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaDMFile_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaDMFile_get,METH_VARARGS,oaStringAppDef_oaDMFile_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaDMFile_getDefault,METH_VARARGS,oaStringAppDef_oaDMFile_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaDMFile_set,METH_VARARGS,oaStringAppDef_oaDMFile_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaDMFile_tp_isNull,METH_VARARGS,oaStringAppDef_oaDMFile_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaDMFile_tp_assign,METH_VARARGS,oaStringAppDef_oaDMFile_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMFile_doc[] = 
"Class: oaStringAppDef_oaDMFile\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaDMFile)\n"
"    Calls: (const oaStringAppDef_oaDMFile&)\n"
"    Signature: oaStringAppDef_oaDMFile||cref-oaStringAppDef_oaDMFile,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaDMFile_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaDMFile",
    sizeof(PyoaStringAppDef_oaDMFileObject),
    0,
    (destructor)oaStringAppDef_oaDMFile_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaDMFile_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaDMFile_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaDMFile_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaDMFile_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaDMFile_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMFile_static_find_doc[] = 
"Class: oaStringAppDef_oaDMFile, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDMFile* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaDMFile|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDMFile* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaDMFile_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDMFilep result= (oaStringAppDef_oaDMFile::find(p1.Data()));
            return PyoaStringAppDef_oaDMFile_FromoaStringAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDMFilep result= (oaStringAppDef_oaDMFile::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDMFile_FromoaStringAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDMFile, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDMFile_static_get_doc[] = 
"Class: oaStringAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDMFile* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMFile|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaDMFile* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMFile|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDMFile* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMFile|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaDMFile_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDMFilep result= (oaStringAppDef_oaDMFile::get(p1.Data()));
            return PyoaStringAppDef_oaDMFile_FromoaStringAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaDMFilep result= (oaStringAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDMFile_FromoaStringAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaDMFilep result= (oaStringAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDMFile_FromoaStringAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDMFilep result= (oaStringAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDMFile_FromoaStringAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDMFilep result= (oaStringAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDMFile_FromoaStringAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDMFilep result= (oaStringAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaDMFile_FromoaStringAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDMFile, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaDMFile_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaDMFile_static_find,METH_VARARGS,oaStringAppDef_oaDMFile_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaDMFile_static_get,METH_VARARGS,oaStringAppDef_oaDMFile_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaDMFile_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaDMFile_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaDMFile\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaDMFile",
           (PyObject*)(&PyoaStringAppDef_oaDMFile_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaDMFile\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaDMFile_Type.tp_dict;
    for(method=oaStringAppDef_oaDMFile_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaDerivedLayerParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDerivedLayerParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaDerivedLayerParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaDerivedLayerParamObject* self = (PyoaStringAppDef_oaDerivedLayerParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaDerivedLayerParam)
    {
        PyParamoaStringAppDef_oaDerivedLayerParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaDerivedLayerParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaDerivedLayerParam, Choices are:\n"
        "    (oaStringAppDef_oaDerivedLayerParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaDerivedLayerParam_tp_dealloc(PyoaStringAppDef_oaDerivedLayerParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDerivedLayerParam_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaDerivedLayerParam value;
    int convert_status=PyoaStringAppDef_oaDerivedLayerParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[56];
    sprintf(buffer,"<oaStringAppDef_oaDerivedLayerParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaDerivedLayerParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaDerivedLayerParam v1;
    PyParamoaStringAppDef_oaDerivedLayerParam v2;
    int convert_status1=PyoaStringAppDef_oaDerivedLayerParam_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaDerivedLayerParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaDerivedLayerParam_Convert(PyObject* ob,PyParamoaStringAppDef_oaDerivedLayerParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaDerivedLayerParam_Check(ob)) {
        result->SetData( (oaStringAppDef_oaDerivedLayerParam**) ((PyoaStringAppDef_oaDerivedLayerParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaDerivedLayerParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDerivedLayerParam_FromoaStringAppDef_oaDerivedLayerParam(oaStringAppDef_oaDerivedLayerParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaDerivedLayerParam* data=*value;
        PyObject* bself = PyoaStringAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaStringAppDef_oaDerivedLayerParam_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaDerivedLayerParamObject* self = (PyoaStringAppDef_oaDerivedLayerParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDerivedLayerParam_FromoaStringAppDef_oaDerivedLayerParam(oaStringAppDef_oaDerivedLayerParam* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaStringAppDef_oaDerivedLayerParam_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaDerivedLayerParamObject* self = (PyoaStringAppDef_oaDerivedLayerParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDerivedLayerParam_get_doc[] = 
"Class: oaStringAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaDerivedLayerParam,oaString)\n"
"    Calls: void get(const oaDerivedLayerParam* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaDerivedLayerParam,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDerivedLayerParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaStringAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDerivedLayerParamObject* self=(PyoaStringAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDerivedLayerParam_getDefault_doc[] = 
"Class: oaStringAppDef_oaDerivedLayerParam, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaDerivedLayerParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaStringAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDerivedLayerParamObject* self=(PyoaStringAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDerivedLayerParam_set_doc[] = 
"Class: oaStringAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDerivedLayerParam,oaString)\n"
"    Calls: void set(oaDerivedLayerParam* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaDerivedLayerParam,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDerivedLayerParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaStringAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDerivedLayerParamObject* self=(PyoaStringAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDerivedLayerParam_isNull_doc[] =
"Class: oaStringAppDef_oaDerivedLayerParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaDerivedLayerParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaStringAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaDerivedLayerParam_assign_doc[] = 
"Class: oaStringAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaDerivedLayerParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaDerivedLayerParam data;
  int convert_status=PyoaStringAppDef_oaDerivedLayerParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaDerivedLayerParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaDerivedLayerParam_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaDerivedLayerParam_get,METH_VARARGS,oaStringAppDef_oaDerivedLayerParam_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaDerivedLayerParam_getDefault,METH_VARARGS,oaStringAppDef_oaDerivedLayerParam_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaDerivedLayerParam_set,METH_VARARGS,oaStringAppDef_oaDerivedLayerParam_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaDerivedLayerParam_tp_isNull,METH_VARARGS,oaStringAppDef_oaDerivedLayerParam_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaDerivedLayerParam_tp_assign,METH_VARARGS,oaStringAppDef_oaDerivedLayerParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDerivedLayerParam_doc[] = 
"Class: oaStringAppDef_oaDerivedLayerParam\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaDerivedLayerParam)\n"
"    Calls: (const oaStringAppDef_oaDerivedLayerParam&)\n"
"    Signature: oaStringAppDef_oaDerivedLayerParam||cref-oaStringAppDef_oaDerivedLayerParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaDerivedLayerParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaDerivedLayerParam",
    sizeof(PyoaStringAppDef_oaDerivedLayerParamObject),
    0,
    (destructor)oaStringAppDef_oaDerivedLayerParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaDerivedLayerParam_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaDerivedLayerParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaDerivedLayerParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaDerivedLayerParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaDerivedLayerParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDerivedLayerParam_static_find_doc[] = 
"Class: oaStringAppDef_oaDerivedLayerParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDerivedLayerParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaDerivedLayerParam|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDerivedLayerParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaDerivedLayerParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDerivedLayerParamp result= (oaStringAppDef_oaDerivedLayerParam::find(p1.Data()));
            return PyoaStringAppDef_oaDerivedLayerParam_FromoaStringAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDerivedLayerParamp result= (oaStringAppDef_oaDerivedLayerParam::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDerivedLayerParam_FromoaStringAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDerivedLayerParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDerivedLayerParam_static_get_doc[] = 
"Class: oaStringAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDerivedLayerParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaDerivedLayerParam|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaDerivedLayerParam* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDerivedLayerParam|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDerivedLayerParam* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDerivedLayerParam|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaDerivedLayerParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDerivedLayerParamp result= (oaStringAppDef_oaDerivedLayerParam::get(p1.Data()));
            return PyoaStringAppDef_oaDerivedLayerParam_FromoaStringAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaDerivedLayerParamp result= (oaStringAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDerivedLayerParam_FromoaStringAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaDerivedLayerParamp result= (oaStringAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDerivedLayerParam_FromoaStringAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDerivedLayerParamp result= (oaStringAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDerivedLayerParam_FromoaStringAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDerivedLayerParamp result= (oaStringAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDerivedLayerParam_FromoaStringAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDerivedLayerParamp result= (oaStringAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaDerivedLayerParam_FromoaStringAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDerivedLayerParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaDerivedLayerParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaDerivedLayerParam_static_find,METH_VARARGS,oaStringAppDef_oaDerivedLayerParam_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaDerivedLayerParam_static_get,METH_VARARGS,oaStringAppDef_oaDerivedLayerParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaDerivedLayerParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaDerivedLayerParam_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaDerivedLayerParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaDerivedLayerParam",
           (PyObject*)(&PyoaStringAppDef_oaDerivedLayerParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaDerivedLayerParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaDerivedLayerParam_Type.tp_dict;
    for(method=oaStringAppDef_oaDerivedLayerParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaDesign
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDesign_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaDesign_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaDesignObject* self = (PyoaStringAppDef_oaDesignObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaDesign)
    {
        PyParamoaStringAppDef_oaDesign p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaDesign_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaDesign, Choices are:\n"
        "    (oaStringAppDef_oaDesign)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaDesign_tp_dealloc(PyoaStringAppDef_oaDesignObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDesign_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaDesign value;
    int convert_status=PyoaStringAppDef_oaDesign_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaStringAppDef_oaDesign::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaDesign_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaDesign v1;
    PyParamoaStringAppDef_oaDesign v2;
    int convert_status1=PyoaStringAppDef_oaDesign_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaDesign_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaDesign_Convert(PyObject* ob,PyParamoaStringAppDef_oaDesign* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaDesign_Check(ob)) {
        result->SetData( (oaStringAppDef_oaDesign**) ((PyoaStringAppDef_oaDesignObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaDesign Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDesign_FromoaStringAppDef_oaDesign(oaStringAppDef_oaDesign** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaDesign* data=*value;
        PyObject* bself = PyoaStringAppDef_oaDesign_Type.tp_alloc(&PyoaStringAppDef_oaDesign_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaDesignObject* self = (PyoaStringAppDef_oaDesignObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDesign_FromoaStringAppDef_oaDesign(oaStringAppDef_oaDesign* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaDesign_Type.tp_alloc(&PyoaStringAppDef_oaDesign_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaDesignObject* self = (PyoaStringAppDef_oaDesignObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesign_get_doc[] = 
"Class: oaStringAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaDesign,oaString)\n"
"    Calls: void get(const oaDesign* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaDesign,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDesign_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDesign data;
    int convert_status=PyoaStringAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDesignObject* self=(PyoaStringAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesign_getDefault_doc[] = 
"Class: oaStringAppDef_oaDesign, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaDesign_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDesign data;
    int convert_status=PyoaStringAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDesignObject* self=(PyoaStringAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesign_set_doc[] = 
"Class: oaStringAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDesign,oaString)\n"
"    Calls: void set(oaDesign* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaDesign,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDesign_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDesign data;
    int convert_status=PyoaStringAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDesignObject* self=(PyoaStringAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesign_isNull_doc[] =
"Class: oaStringAppDef_oaDesign, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaDesign_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaDesign data;
    int convert_status=PyoaStringAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaDesign_assign_doc[] = 
"Class: oaStringAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaDesign_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaDesign data;
  int convert_status=PyoaStringAppDef_oaDesign_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaDesign p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaDesign_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaDesign_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaDesign_get,METH_VARARGS,oaStringAppDef_oaDesign_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaDesign_getDefault,METH_VARARGS,oaStringAppDef_oaDesign_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaDesign_set,METH_VARARGS,oaStringAppDef_oaDesign_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaDesign_tp_isNull,METH_VARARGS,oaStringAppDef_oaDesign_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaDesign_tp_assign,METH_VARARGS,oaStringAppDef_oaDesign_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesign_doc[] = 
"Class: oaStringAppDef_oaDesign\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaDesign)\n"
"    Calls: (const oaStringAppDef_oaDesign&)\n"
"    Signature: oaStringAppDef_oaDesign||cref-oaStringAppDef_oaDesign,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaDesign_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaDesign",
    sizeof(PyoaStringAppDef_oaDesignObject),
    0,
    (destructor)oaStringAppDef_oaDesign_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaDesign_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaDesign_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaDesign_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaDesign_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaDesign_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesign_static_find_doc[] = 
"Class: oaStringAppDef_oaDesign, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDesign* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaDesign|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDesign* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaDesign_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDesignp result= (oaStringAppDef_oaDesign::find(p1.Data()));
            return PyoaStringAppDef_oaDesign_FromoaStringAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDesignp result= (oaStringAppDef_oaDesign::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDesign_FromoaStringAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDesign, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesign_static_get_doc[] = 
"Class: oaStringAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDesign* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesign|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaDesign* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesign|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDesign* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesign|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaDesign_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDesignp result= (oaStringAppDef_oaDesign::get(p1.Data()));
            return PyoaStringAppDef_oaDesign_FromoaStringAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaDesignp result= (oaStringAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDesign_FromoaStringAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaDesignp result= (oaStringAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDesign_FromoaStringAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDesignp result= (oaStringAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDesign_FromoaStringAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDesignp result= (oaStringAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDesign_FromoaStringAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDesignp result= (oaStringAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaDesign_FromoaStringAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDesign, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaDesign_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaDesign_static_find,METH_VARARGS,oaStringAppDef_oaDesign_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaDesign_static_get,METH_VARARGS,oaStringAppDef_oaDesign_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaDesign_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaDesign_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaDesign\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaDesign",
           (PyObject*)(&PyoaStringAppDef_oaDesign_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaDesign\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaDesign_Type.tp_dict;
    for(method=oaStringAppDef_oaDesign_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaDesignInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDesignInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaDesignInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaDesignInstObject* self = (PyoaStringAppDef_oaDesignInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaDesignInst)
    {
        PyParamoaStringAppDef_oaDesignInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaDesignInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaDesignInst, Choices are:\n"
        "    (oaStringAppDef_oaDesignInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaDesignInst_tp_dealloc(PyoaStringAppDef_oaDesignInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDesignInst_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaDesignInst value;
    int convert_status=PyoaStringAppDef_oaDesignInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaStringAppDef_oaDesignInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaDesignInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaDesignInst v1;
    PyParamoaStringAppDef_oaDesignInst v2;
    int convert_status1=PyoaStringAppDef_oaDesignInst_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaDesignInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaDesignInst_Convert(PyObject* ob,PyParamoaStringAppDef_oaDesignInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaDesignInst_Check(ob)) {
        result->SetData( (oaStringAppDef_oaDesignInst**) ((PyoaStringAppDef_oaDesignInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaDesignInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDesignInst_FromoaStringAppDef_oaDesignInst(oaStringAppDef_oaDesignInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaDesignInst* data=*value;
        PyObject* bself = PyoaStringAppDef_oaDesignInst_Type.tp_alloc(&PyoaStringAppDef_oaDesignInst_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaDesignInstObject* self = (PyoaStringAppDef_oaDesignInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDesignInst_FromoaStringAppDef_oaDesignInst(oaStringAppDef_oaDesignInst* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaDesignInst_Type.tp_alloc(&PyoaStringAppDef_oaDesignInst_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaDesignInstObject* self = (PyoaStringAppDef_oaDesignInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesignInst_get_doc[] = 
"Class: oaStringAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaDesignInst,oaString)\n"
"    Calls: void get(const oaDesignInst* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaDesignInst,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDesignInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDesignInst data;
    int convert_status=PyoaStringAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDesignInstObject* self=(PyoaStringAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesignInst_getDefault_doc[] = 
"Class: oaStringAppDef_oaDesignInst, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaDesignInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDesignInst data;
    int convert_status=PyoaStringAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDesignInstObject* self=(PyoaStringAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesignInst_set_doc[] = 
"Class: oaStringAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDesignInst,oaString)\n"
"    Calls: void set(oaDesignInst* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaDesignInst,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDesignInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDesignInst data;
    int convert_status=PyoaStringAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDesignInstObject* self=(PyoaStringAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesignInst_isNull_doc[] =
"Class: oaStringAppDef_oaDesignInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaDesignInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaDesignInst data;
    int convert_status=PyoaStringAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaDesignInst_assign_doc[] = 
"Class: oaStringAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaDesignInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaDesignInst data;
  int convert_status=PyoaStringAppDef_oaDesignInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaDesignInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaDesignInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaDesignInst_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaDesignInst_get,METH_VARARGS,oaStringAppDef_oaDesignInst_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaDesignInst_getDefault,METH_VARARGS,oaStringAppDef_oaDesignInst_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaDesignInst_set,METH_VARARGS,oaStringAppDef_oaDesignInst_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaDesignInst_tp_isNull,METH_VARARGS,oaStringAppDef_oaDesignInst_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaDesignInst_tp_assign,METH_VARARGS,oaStringAppDef_oaDesignInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesignInst_doc[] = 
"Class: oaStringAppDef_oaDesignInst\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaDesignInst)\n"
"    Calls: (const oaStringAppDef_oaDesignInst&)\n"
"    Signature: oaStringAppDef_oaDesignInst||cref-oaStringAppDef_oaDesignInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaDesignInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaDesignInst",
    sizeof(PyoaStringAppDef_oaDesignInstObject),
    0,
    (destructor)oaStringAppDef_oaDesignInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaDesignInst_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaDesignInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaDesignInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaDesignInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaDesignInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesignInst_static_find_doc[] = 
"Class: oaStringAppDef_oaDesignInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDesignInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaDesignInst|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDesignInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaDesignInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDesignInstp result= (oaStringAppDef_oaDesignInst::find(p1.Data()));
            return PyoaStringAppDef_oaDesignInst_FromoaStringAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDesignInstp result= (oaStringAppDef_oaDesignInst::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDesignInst_FromoaStringAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDesignInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDesignInst_static_get_doc[] = 
"Class: oaStringAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDesignInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesignInst|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaDesignInst* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesignInst|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDesignInst* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesignInst|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaDesignInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDesignInstp result= (oaStringAppDef_oaDesignInst::get(p1.Data()));
            return PyoaStringAppDef_oaDesignInst_FromoaStringAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaDesignInstp result= (oaStringAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDesignInst_FromoaStringAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaDesignInstp result= (oaStringAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDesignInst_FromoaStringAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDesignInstp result= (oaStringAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDesignInst_FromoaStringAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDesignInstp result= (oaStringAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDesignInst_FromoaStringAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDesignInstp result= (oaStringAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaDesignInst_FromoaStringAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDesignInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaDesignInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaDesignInst_static_find,METH_VARARGS,oaStringAppDef_oaDesignInst_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaDesignInst_static_get,METH_VARARGS,oaStringAppDef_oaDesignInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaDesignInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaDesignInst_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaDesignInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaDesignInst",
           (PyObject*)(&PyoaStringAppDef_oaDesignInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaDesignInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaDesignInst_Type.tp_dict;
    for(method=oaStringAppDef_oaDesignInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStringAppDef_oaDevice
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDevice_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStringAppDef_oaDevice_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStringAppDef_oaDeviceObject* self = (PyoaStringAppDef_oaDeviceObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStringAppDef_oaDevice)
    {
        PyParamoaStringAppDef_oaDevice p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStringAppDef_oaDevice_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStringAppDef_oaDevice, Choices are:\n"
        "    (oaStringAppDef_oaDevice)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStringAppDef_oaDevice_tp_dealloc(PyoaStringAppDef_oaDeviceObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStringAppDef_oaDevice_tp_repr(PyObject *ob)
{
    PyParamoaStringAppDef_oaDevice value;
    int convert_status=PyoaStringAppDef_oaDevice_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaStringAppDef_oaDevice::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStringAppDef_oaDevice_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStringAppDef_oaDevice v1;
    PyParamoaStringAppDef_oaDevice v2;
    int convert_status1=PyoaStringAppDef_oaDevice_Convert(ob1,&v1);
    int convert_status2=PyoaStringAppDef_oaDevice_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStringAppDef_oaDevice_Convert(PyObject* ob,PyParamoaStringAppDef_oaDevice* result)
{
    if (ob == NULL) return 1;
    if (PyoaStringAppDef_oaDevice_Check(ob)) {
        result->SetData( (oaStringAppDef_oaDevice**) ((PyoaStringAppDef_oaDeviceObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStringAppDef_oaDevice Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDevice_FromoaStringAppDef_oaDevice(oaStringAppDef_oaDevice** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStringAppDef_oaDevice* data=*value;
        PyObject* bself = PyoaStringAppDef_oaDevice_Type.tp_alloc(&PyoaStringAppDef_oaDevice_Type,0);
        if (bself == NULL) return bself;
        PyoaStringAppDef_oaDeviceObject* self = (PyoaStringAppDef_oaDeviceObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStringAppDef_oaDevice_FromoaStringAppDef_oaDevice(oaStringAppDef_oaDevice* data)
{
    if (data) {
       PyObject* bself = PyoaStringAppDef_oaDevice_Type.tp_alloc(&PyoaStringAppDef_oaDevice_Type,0);
       if (bself == NULL) return bself;
       PyoaStringAppDef_oaDeviceObject* self = (PyoaStringAppDef_oaDeviceObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDevice_get_doc[] = 
"Class: oaStringAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaDevice,oaString)\n"
"    Calls: void get(const oaDevice* object,oaString& value)\n"
"    Signature: get|void-void|cptr-oaDevice,ref-oaString,\n"
"    This function returns the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDevice_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDevice data;
    int convert_status=PyoaStringAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDeviceObject* self=(PyoaStringAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDevice_getDefault_doc[] = 
"Class: oaStringAppDef_oaDevice, Function: getDefault\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDefault(oaString& value) const\n"
"    Signature: getDefault|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function fills out the default value for this string extension.\n"
"    value\n"
"    The string to be filled out with the default value\n"
;

static PyObject*
oaStringAppDef_oaDevice_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDevice data;
    int convert_status=PyoaStringAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDeviceObject* self=(PyoaStringAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDevice_set_doc[] = 
"Class: oaStringAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDevice,oaString)\n"
"    Calls: void set(oaDevice* object,const oaString& value)\n"
"    Signature: set|void-void|ptr-oaDevice,cref-oaString,\n"
"    This function sets the value of this string extension.\n"
"    object\n"
"    The object type with which this extension is associated\n"
"    value\n"
"    The value of the string extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaStringAppDef_oaDevice_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStringAppDef_oaDevice data;
    int convert_status=PyoaStringAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringAppDef_oaDeviceObject* self=(PyoaStringAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDevice_isNull_doc[] =
"Class: oaStringAppDef_oaDevice, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStringAppDef_oaDevice_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStringAppDef_oaDevice data;
    int convert_status=PyoaStringAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStringAppDef_oaDevice_assign_doc[] = 
"Class: oaStringAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStringAppDef_oaDevice_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStringAppDef_oaDevice data;
  int convert_status=PyoaStringAppDef_oaDevice_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStringAppDef_oaDevice p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStringAppDef_oaDevice_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStringAppDef_oaDevice_methodlist[] = {
    {"get",(PyCFunction)oaStringAppDef_oaDevice_get,METH_VARARGS,oaStringAppDef_oaDevice_get_doc},
    {"getDefault",(PyCFunction)oaStringAppDef_oaDevice_getDefault,METH_VARARGS,oaStringAppDef_oaDevice_getDefault_doc},
    {"set",(PyCFunction)oaStringAppDef_oaDevice_set,METH_VARARGS,oaStringAppDef_oaDevice_set_doc},
    {"isNull",(PyCFunction)oaStringAppDef_oaDevice_tp_isNull,METH_VARARGS,oaStringAppDef_oaDevice_isNull_doc},
    {"assign",(PyCFunction)oaStringAppDef_oaDevice_tp_assign,METH_VARARGS,oaStringAppDef_oaDevice_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDevice_doc[] = 
"Class: oaStringAppDef_oaDevice\n"
"  The oaStringAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When these classes are created, a string field is added to each object of the specified dataType. The default value of the string field is the empty string. Applications can use the new string field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaStringAppDef_oaDevice)\n"
"    Calls: (const oaStringAppDef_oaDevice&)\n"
"    Signature: oaStringAppDef_oaDevice||cref-oaStringAppDef_oaDevice,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStringAppDef_oaDevice_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStringAppDef_oaDevice",
    sizeof(PyoaStringAppDef_oaDeviceObject),
    0,
    (destructor)oaStringAppDef_oaDevice_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStringAppDef_oaDevice_tp_compare,	/* tp_compare */
    (reprfunc)oaStringAppDef_oaDevice_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStringAppDef_oaDevice_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStringAppDef_oaDevice_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStringAppDef_oaDevice_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStringAppDef_oaDevice_static_find_doc[] = 
"Class: oaStringAppDef_oaDevice, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDevice* find(const oaString& name)\n"
"    Signature: find|ptr-oaStringAppDef_oaDevice|cref-oaString,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDevice* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaStringAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaStringAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaStringAppDef_oaDevice_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDevicep result= (oaStringAppDef_oaDevice::find(p1.Data()));
            return PyoaStringAppDef_oaDevice_FromoaStringAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDevicep result= (oaStringAppDef_oaDevice::find(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDevice_FromoaStringAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDevice, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStringAppDef_oaDevice_static_get_doc[] = 
"Class: oaStringAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaStringAppDef_oaDevice* get(const oaString& name)\n"
"    Signature: get|ptr-oaStringAppDef_oaDevice|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString)\n"
"    Calls: oaStringAppDef_oaDevice* get(const oaString& name,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDevice|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDevice* get(const oaString& name,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDevice|cref-oaString,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name . You can create a string extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaStringAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaStringAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaStringAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString)\n"
"    Calls: oaStringAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue)\n"
"    Signature: get|ptr-oaStringAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
"    Calls: oaStringAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,const oaString& defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaStringAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaStringAppDef class string extension with the specified name for the specified object extension.\n"
"    name\n"
"    The name of the string extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaStringAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaStringAppDef_oaDevice_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaStringAppDef_oaDevicep result= (oaStringAppDef_oaDevice::get(p1.Data()));
            return PyoaStringAppDef_oaDevice_FromoaStringAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            oaStringAppDef_oaDevicep result= (oaStringAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDevice_FromoaStringAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaStringAppDef_oaDevicep result= (oaStringAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDevice_FromoaStringAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDevicep result= (oaStringAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaStringAppDef_oaDevice_FromoaStringAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDevicep result= (oaStringAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaStringAppDef_oaDevice_FromoaStringAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaString p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaStringAppDef_oaDevicep result= (oaStringAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaStringAppDef_oaDevice_FromoaStringAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaStringAppDef_oaDevice, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaString)\n"
        "    (oaString,oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaString)\n"
        "    (oaString,oaAppObjectDef,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStringAppDef_oaDevice_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaStringAppDef_oaDevice_static_find,METH_VARARGS,oaStringAppDef_oaDevice_static_find_doc},
    {"static_get",(PyCFunction)oaStringAppDef_oaDevice_static_get,METH_VARARGS,oaStringAppDef_oaDevice_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStringAppDef_oaDevice_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStringAppDef_oaDevice_Type)<0) {
      printf("** PyType_Ready failed for: oaStringAppDef_oaDevice\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStringAppDef_oaDevice",
           (PyObject*)(&PyoaStringAppDef_oaDevice_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStringAppDef_oaDevice\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStringAppDef_oaDevice_Type.tp_dict;
    for(method=oaStringAppDef_oaDevice_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

