
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject* self = (PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCellView_oaCellViewModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum* p=new pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCellView_oaCellViewModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum* p=new pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaCellView_oaCellViewModTypeEnum_tp_dealloc(PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaCellView_oaCellViewModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaCellView_oaCellViewModTypeEnum value;
    int convert_status=PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oaStdObserver_oaCellView_oaCellViewModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaCellView_oaCellViewModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaCellView_oaCellViewModTypeEnum v1;
    PyParamoaStdObserver_oaCellView_oaCellViewModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaCellView_oaCellViewModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaCellView_oaCellViewModTypeEnum*) ((PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaCellView_oaCellViewModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_FromoaStdObserver_oaCellView_oaCellViewModTypeEnum(oaStdObserver_oaCellView_oaCellViewModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject* self = (PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum::pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaCellView_oaCellViewModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum::pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaCellView_oaCellViewModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPostCreate(oaCellView* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCellView_FromoaCellView(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPostModify(oaCellView* p1,oaCellViewModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCellView_FromoaCellView(p1));
    PyTuple_SetItem(args,1,PyoaCellViewModTypeEnum_FromoaCellViewModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPreDestroy(oaCellView* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCellView_FromoaCellView(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPreModify(oaCellView* p1,oaCellViewModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCellView_FromoaCellView(p1));
    PyTuple_SetItem(args,1,PyoaCellViewModTypeEnum_FromoaCellViewModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaCellView)\n"
"    Calls: virtual void onPostCreate(oaCellView* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaCellView,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCellView_oaCellViewModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject* self=(PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject*)ob;

    PyParamoaCellView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCellView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaCellView,oaCellViewModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaCellView* object,oaCellViewModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaCellView,simple-oaCellViewModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCellView_oaCellViewModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject* self=(PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject*)ob;

    PyParamoaCellView p1;
    PyParamoaCellViewModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaCellViewModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaCellView)\n"
"    Calls: virtual void onPreDestroy(oaCellView* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaCellView,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCellView_oaCellViewModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject* self=(PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject*)ob;

    PyParamoaCellView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCellView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaCellView,oaCellViewModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaCellView* object,oaCellViewModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaCellView,simple-oaCellViewModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCellView_oaCellViewModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject* self=(PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject*)ob;

    PyParamoaCellView p1;
    PyParamoaCellViewModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaCellViewModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCellView_oaCellViewModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaCellView_oaCellViewModTypeEnum data;
  int convert_status=PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaCellView_oaCellViewModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaCellView_oaCellViewModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaCellView_oaCellViewModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaCellView_oaCellViewModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaCellView_oaCellViewModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaCellView_oaCellViewModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaCellView_oaCellViewModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaCellView_oaCellViewModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaCellView_oaCellViewModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaCellView_oaCellViewModTypeEnum",
    sizeof(PyoaStdObserver_oaCellView_oaCellViewModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaCellView_oaCellViewModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaCellView_oaCellViewModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaCellView_oaCellViewModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaCellView_oaCellViewModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaCellView_oaCellViewModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaCellView_oaCellViewModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaCellView_oaCellViewModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaCellView)\n"
"    Calls: void notifyPostCreateObservers(oaCellView* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaCellView,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCellView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCellView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCellView_oaCellViewModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaCellView,oaCellViewModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaCellView* object,oaCellViewModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaCellView,simple-oaCellViewModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCellView p1;
    PyParamoaCellViewModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaCellViewModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCellView_oaCellViewModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaCellView)\n"
"    Calls: void notifyPreDestroyObservers(oaCellView* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaCellView,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCellView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCellView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCellView_oaCellViewModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaCellView_oaCellViewModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaCellView,oaCellViewModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaCellView* object,oaCellViewModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaCellView,simple-oaCellViewModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCellView p1;
    PyParamoaCellViewModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaCellViewModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCellView_oaCellViewModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaCellView_oaCellViewModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaCellView_oaCellViewModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaCellView_oaCellViewModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaCellView_oaCellViewModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaCellView_oaCellViewModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaCellView_oaCellViewModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaCell_oaCellModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaCell_oaCellModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaCell_oaCellModTypeEnumObject* self = (PyoaStdObserver_oaCell_oaCellModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCell_oaCellModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaCell_oaCellModTypeEnum* p=new pyv_oaStdObserver_oaCell_oaCellModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCell_oaCellModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaCell_oaCellModTypeEnum* p=new pyv_oaStdObserver_oaCell_oaCellModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaCell_oaCellModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaCell_oaCellModTypeEnum_tp_dealloc(PyoaStdObserver_oaCell_oaCellModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaCell_oaCellModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaCell_oaCellModTypeEnum value;
    int convert_status=PyoaStdObserver_oaCell_oaCellModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaStdObserver_oaCell_oaCellModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaCell_oaCellModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaCell_oaCellModTypeEnum v1;
    PyParamoaStdObserver_oaCell_oaCellModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaCell_oaCellModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaCell_oaCellModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaCell_oaCellModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaCell_oaCellModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaCell_oaCellModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaCell_oaCellModTypeEnum*) ((PyoaStdObserver_oaCell_oaCellModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaCell_oaCellModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaCell_oaCellModTypeEnum_FromoaStdObserver_oaCell_oaCellModTypeEnum(oaStdObserver_oaCell_oaCellModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaCell_oaCellModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaCell_oaCellModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaCell_oaCellModTypeEnumObject* self = (PyoaStdObserver_oaCell_oaCellModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCell_oaCellModTypeEnum::pyv_oaStdObserver_oaCell_oaCellModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaCell_oaCellModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCell_oaCellModTypeEnum::pyv_oaStdObserver_oaCell_oaCellModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaCell_oaCellModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCell_oaCellModTypeEnum::onPostCreate(oaCell* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCell_oaCellModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCell_FromoaCell(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCell_oaCellModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCell_oaCellModTypeEnum::onPostModify(oaCell* p1,oaCellModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCell_oaCellModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCell_FromoaCell(p1));
    PyTuple_SetItem(args,1,PyoaCellModTypeEnum_FromoaCellModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCell_oaCellModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCell_oaCellModTypeEnum::onPreDestroy(oaCell* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCell_oaCellModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCell_FromoaCell(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCell_oaCellModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCell_oaCellModTypeEnum::onPreModify(oaCell* p1,oaCellModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCell_oaCellModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCell_FromoaCell(p1));
    PyTuple_SetItem(args,1,PyoaCellModTypeEnum_FromoaCellModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCell_oaCellModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCell_oaCellModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaCell)\n"
"    Calls: virtual void onPostCreate(oaCell* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaCell,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCell_oaCellModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCell_oaCellModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCell_oaCellModTypeEnumObject* self=(PyoaStdObserver_oaCell_oaCellModTypeEnumObject*)ob;

    PyParamoaCell p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCell_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCell_oaCellModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCell_oaCellModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaCell,oaCellModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaCell* object,oaCellModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaCell,simple-oaCellModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCell_oaCellModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCell_oaCellModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCell_oaCellModTypeEnumObject* self=(PyoaStdObserver_oaCell_oaCellModTypeEnumObject*)ob;

    PyParamoaCell p1;
    PyParamoaCellModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaCellModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCell_oaCellModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCell_oaCellModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaCell)\n"
"    Calls: virtual void onPreDestroy(oaCell* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaCell,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCell_oaCellModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCell_oaCellModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCell_oaCellModTypeEnumObject* self=(PyoaStdObserver_oaCell_oaCellModTypeEnumObject*)ob;

    PyParamoaCell p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCell_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCell_oaCellModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCell_oaCellModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaCell,oaCellModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaCell* object,oaCellModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaCell,simple-oaCellModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCell_oaCellModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCell_oaCellModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCell_oaCellModTypeEnumObject* self=(PyoaStdObserver_oaCell_oaCellModTypeEnumObject*)ob;

    PyParamoaCell p1;
    PyParamoaCellModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaCellModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCell_oaCellModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaCell_oaCellModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaCell_oaCellModTypeEnum data;
  int convert_status=PyoaStdObserver_oaCell_oaCellModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaCell_oaCellModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaCell_oaCellModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaCell_oaCellModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaCell_oaCellModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaCell_oaCellModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaCell_oaCellModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaCell_oaCellModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaCell_oaCellModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaCell_oaCellModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaCell_oaCellModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaCell_oaCellModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaCell_oaCellModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaCell_oaCellModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCell_oaCellModTypeEnum_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaCell_oaCellModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaCell_oaCellModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaCell_oaCellModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaCell_oaCellModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaCell_oaCellModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaCell_oaCellModTypeEnum",
    sizeof(PyoaStdObserver_oaCell_oaCellModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaCell_oaCellModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaCell_oaCellModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaCell_oaCellModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaCell_oaCellModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaCell_oaCellModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaCell_oaCellModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCell_oaCellModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaCell_oaCellModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaCell)\n"
"    Calls: void notifyPostCreateObservers(oaCell* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaCell,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCell p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCell_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCell_oaCellModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaCell,oaCellModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaCell* object,oaCellModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaCell,simple-oaCellModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCell p1;
    PyParamoaCellModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaCellModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCell_oaCellModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaCell)\n"
"    Calls: void notifyPreDestroyObservers(oaCell* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaCell,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCell p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCell_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCell_oaCellModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaCell_oaCellModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaCell,oaCellModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaCell* object,oaCellModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaCell,simple-oaCellModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCell p1;
    PyParamoaCellModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaCellModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCell_oaCellModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaCell_oaCellModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaCell_oaCellModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaCell_oaCellModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaCell_oaCellModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaCell_oaCellModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaCell_oaCellModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaCell_oaCellModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaCell_oaCellModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaCell_oaCellModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaCell_oaCellModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaCell_oaCellModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaCell_oaCellModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject* self = (PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum* p=new pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum* p=new pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_tp_dealloc(PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum value;
    int convert_status=PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum v1;
    PyParamoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum*) ((PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_FromoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject* self = (PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPostCreate(oaClusterBoundary* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaClusterBoundary_FromoaClusterBoundary(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPostModify(oaClusterBoundary* p1,oaBoundaryModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaClusterBoundary_FromoaClusterBoundary(p1));
    PyTuple_SetItem(args,1,PyoaBoundaryModTypeEnum_FromoaBoundaryModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPreDestroy(oaClusterBoundary* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaClusterBoundary_FromoaClusterBoundary(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPreModify(oaClusterBoundary* p1,oaBoundaryModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaClusterBoundary_FromoaClusterBoundary(p1));
    PyTuple_SetItem(args,1,PyoaBoundaryModTypeEnum_FromoaBoundaryModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaClusterBoundary)\n"
"    Calls: virtual void onPostCreate(oaClusterBoundary* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaClusterBoundary,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaClusterBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaClusterBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaClusterBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaClusterBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaClusterBoundary,simple-oaBoundaryModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaClusterBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaClusterBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaClusterBoundary)\n"
"    Calls: virtual void onPreDestroy(oaClusterBoundary* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaClusterBoundary,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaClusterBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaClusterBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaClusterBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaClusterBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaClusterBoundary,simple-oaBoundaryModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaClusterBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaClusterBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum data;
  int convert_status=PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum",
    sizeof(PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaClusterBoundary)\n"
"    Calls: void notifyPostCreateObservers(oaClusterBoundary* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaClusterBoundary,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaClusterBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaClusterBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaClusterBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaClusterBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaClusterBoundary,simple-oaBoundaryModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaClusterBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaClusterBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaClusterBoundary)\n"
"    Calls: void notifyPreDestroyObservers(oaClusterBoundary* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaClusterBoundary,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaClusterBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaClusterBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaClusterBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaClusterBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaClusterBoundary,simple-oaBoundaryModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaClusterBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaClusterBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaCluster_oaClusterModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject* self = (PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCluster_oaClusterModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum* p=new pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCluster_oaClusterModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum* p=new pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaCluster_oaClusterModTypeEnum_tp_dealloc(PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaCluster_oaClusterModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaCluster_oaClusterModTypeEnum value;
    int convert_status=PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaCluster_oaClusterModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaCluster_oaClusterModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaCluster_oaClusterModTypeEnum v1;
    PyParamoaStdObserver_oaCluster_oaClusterModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaCluster_oaClusterModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaCluster_oaClusterModTypeEnum*) ((PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaCluster_oaClusterModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaCluster_oaClusterModTypeEnum_FromoaStdObserver_oaCluster_oaClusterModTypeEnum(oaStdObserver_oaCluster_oaClusterModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject* self = (PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum::pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaCluster_oaClusterModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum::pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaCluster_oaClusterModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum::onPostCreate(oaCluster* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCluster_oaClusterModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCluster_FromoaCluster(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCluster_oaClusterModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum::onPostModify(oaCluster* p1,oaClusterModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCluster_oaClusterModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCluster_FromoaCluster(p1));
    PyTuple_SetItem(args,1,PyoaClusterModTypeEnum_FromoaClusterModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCluster_oaClusterModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum::onPreDestroy(oaCluster* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCluster_oaClusterModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCluster_FromoaCluster(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCluster_oaClusterModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCluster_oaClusterModTypeEnum::onPreModify(oaCluster* p1,oaClusterModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCluster_oaClusterModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCluster_FromoaCluster(p1));
    PyTuple_SetItem(args,1,PyoaClusterModTypeEnum_FromoaClusterModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCluster_oaClusterModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCluster_oaClusterModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaCluster)\n"
"    Calls: virtual void onPostCreate(oaCluster* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaCluster,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCluster_oaClusterModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject* self=(PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject*)ob;

    PyParamoaCluster p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCluster_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCluster_oaClusterModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCluster_oaClusterModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaCluster,oaClusterModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaCluster* object,oaClusterModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaCluster,simple-oaClusterModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCluster_oaClusterModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject* self=(PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject*)ob;

    PyParamoaCluster p1;
    PyParamoaClusterModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaClusterModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCluster_oaClusterModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCluster_oaClusterModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaCluster)\n"
"    Calls: virtual void onPreDestroy(oaCluster* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaCluster,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCluster_oaClusterModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject* self=(PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject*)ob;

    PyParamoaCluster p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCluster_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCluster_oaClusterModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCluster_oaClusterModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaCluster,oaClusterModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaCluster* object,oaClusterModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaCluster,simple-oaClusterModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCluster_oaClusterModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject* self=(PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject*)ob;

    PyParamoaCluster p1;
    PyParamoaClusterModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaClusterModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCluster_oaClusterModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaCluster_oaClusterModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaCluster_oaClusterModTypeEnum data;
  int convert_status=PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaCluster_oaClusterModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaCluster_oaClusterModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaCluster_oaClusterModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaCluster_oaClusterModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaCluster_oaClusterModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaCluster_oaClusterModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaCluster_oaClusterModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaCluster_oaClusterModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaCluster_oaClusterModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaCluster_oaClusterModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaCluster_oaClusterModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaCluster_oaClusterModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCluster_oaClusterModTypeEnum_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaCluster_oaClusterModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaCluster_oaClusterModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaCluster_oaClusterModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaCluster_oaClusterModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaCluster_oaClusterModTypeEnum",
    sizeof(PyoaStdObserver_oaCluster_oaClusterModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaCluster_oaClusterModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaCluster_oaClusterModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaCluster_oaClusterModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaCluster_oaClusterModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaCluster_oaClusterModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaCluster_oaClusterModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCluster_oaClusterModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaCluster_oaClusterModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaCluster)\n"
"    Calls: void notifyPostCreateObservers(oaCluster* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaCluster,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCluster p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCluster_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCluster_oaClusterModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaCluster,oaClusterModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaCluster* object,oaClusterModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaCluster,simple-oaClusterModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCluster p1;
    PyParamoaClusterModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaClusterModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCluster_oaClusterModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaCluster)\n"
"    Calls: void notifyPreDestroyObservers(oaCluster* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaCluster,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCluster p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCluster_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCluster_oaClusterModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaCluster_oaClusterModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaCluster,oaClusterModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaCluster* object,oaClusterModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaCluster,simple-oaClusterModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCluster p1;
    PyParamoaClusterModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaClusterModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCluster_oaClusterModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaCluster_oaClusterModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaCluster_oaClusterModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaCluster_oaClusterModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaCluster_oaClusterModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaCluster_oaClusterModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaCluster_oaClusterModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaCluster_oaClusterModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaCluster_oaClusterModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaCluster_oaClusterModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaCluster_oaClusterModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum v1;
    PyParamoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum*) ((PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_FromoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPostCreate(oaConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaConnectDef_FromoaConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPostModify(oaConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaConnectDef_FromoaConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPreDestroy(oaConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaConnectDef_FromoaConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPreModify(oaConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaConnectDef_FromoaConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaConnectDef)\n"
"    Calls: virtual void onPostCreate(oaConnectDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaConnectDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaConnectDef)\n"
"    Calls: virtual void onPreDestroy(oaConnectDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaConnectDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum",
    sizeof(PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaConnectDef)\n"
"    Calls: void notifyPostCreateObservers(oaConnectDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaConnectDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaConnectDef)\n"
"    Calls: void notifyPreDestroyObservers(oaConnectDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaConnectDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject* self = (PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum* p=new pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum* p=new pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_tp_dealloc(PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum value;
    int convert_status=PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[88];
    sprintf(buffer,"<oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum v1;
    PyParamoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum*) ((PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_FromoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject* self = (PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPostCreate(oaConstraintGroupMem* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaConstraintGroupMem_FromoaConstraintGroupMem(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPostModify(oaConstraintGroupMem* p1,oaConstraintGroupMemModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaConstraintGroupMem_FromoaConstraintGroupMem(p1));
    PyTuple_SetItem(args,1,PyoaConstraintGroupMemModTypeEnum_FromoaConstraintGroupMemModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPreDestroy(oaConstraintGroupMem* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaConstraintGroupMem_FromoaConstraintGroupMem(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPreModify(oaConstraintGroupMem* p1,oaConstraintGroupMemModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaConstraintGroupMem_FromoaConstraintGroupMem(p1));
    PyTuple_SetItem(args,1,PyoaConstraintGroupMemModTypeEnum_FromoaConstraintGroupMemModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaConstraintGroupMem)\n"
"    Calls: virtual void onPostCreate(oaConstraintGroupMem* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaConstraintGroupMem,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject* self=(PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject*)ob;

    PyParamoaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaConstraintGroupMem,oaConstraintGroupMemModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaConstraintGroupMem* object,oaConstraintGroupMemModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaConstraintGroupMem,simple-oaConstraintGroupMemModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject* self=(PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject*)ob;

    PyParamoaConstraintGroupMem p1;
    PyParamoaConstraintGroupMemModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaConstraintGroupMemModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaConstraintGroupMem)\n"
"    Calls: virtual void onPreDestroy(oaConstraintGroupMem* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaConstraintGroupMem,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject* self=(PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject*)ob;

    PyParamoaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaConstraintGroupMem,oaConstraintGroupMemModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaConstraintGroupMem* object,oaConstraintGroupMemModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaConstraintGroupMem,simple-oaConstraintGroupMemModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject* self=(PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject*)ob;

    PyParamoaConstraintGroupMem p1;
    PyParamoaConstraintGroupMemModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaConstraintGroupMemModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum data;
  int convert_status=PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum",
    sizeof(PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaConstraintGroupMem)\n"
"    Calls: void notifyPostCreateObservers(oaConstraintGroupMem* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaConstraintGroupMem,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaConstraintGroupMem,oaConstraintGroupMemModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaConstraintGroupMem* object,oaConstraintGroupMemModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaConstraintGroupMem,simple-oaConstraintGroupMemModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintGroupMem p1;
    PyParamoaConstraintGroupMemModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaConstraintGroupMemModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaConstraintGroupMem)\n"
"    Calls: void notifyPreDestroyObservers(oaConstraintGroupMem* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaConstraintGroupMem,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaConstraintGroupMem,oaConstraintGroupMemModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaConstraintGroupMem* object,oaConstraintGroupMemModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaConstraintGroupMem,simple-oaConstraintGroupMemModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintGroupMem p1;
    PyParamoaConstraintGroupMemModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaConstraintGroupMemModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject* self = (PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum* p=new pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum* p=new pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_tp_dealloc(PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum value;
    int convert_status=PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[82];
    sprintf(buffer,"<oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum v1;
    PyParamoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum*) ((PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_FromoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject* self = (PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPostCreate(oaConstraintGroup* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaConstraintGroup_FromoaConstraintGroup(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPostModify(oaConstraintGroup* p1,oaConstraintGroupModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaConstraintGroup_FromoaConstraintGroup(p1));
    PyTuple_SetItem(args,1,PyoaConstraintGroupModTypeEnum_FromoaConstraintGroupModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPreDestroy(oaConstraintGroup* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaConstraintGroup_FromoaConstraintGroup(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPreModify(oaConstraintGroup* p1,oaConstraintGroupModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaConstraintGroup_FromoaConstraintGroup(p1));
    PyTuple_SetItem(args,1,PyoaConstraintGroupModTypeEnum_FromoaConstraintGroupModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaConstraintGroup)\n"
"    Calls: virtual void onPostCreate(oaConstraintGroup* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaConstraintGroup,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject* self=(PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject*)ob;

    PyParamoaConstraintGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaConstraintGroup,oaConstraintGroupModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaConstraintGroup* object,oaConstraintGroupModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaConstraintGroup,simple-oaConstraintGroupModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject* self=(PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject*)ob;

    PyParamoaConstraintGroup p1;
    PyParamoaConstraintGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaConstraintGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaConstraintGroup)\n"
"    Calls: virtual void onPreDestroy(oaConstraintGroup* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaConstraintGroup,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject* self=(PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject*)ob;

    PyParamoaConstraintGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaConstraintGroup,oaConstraintGroupModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaConstraintGroup* object,oaConstraintGroupModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaConstraintGroup,simple-oaConstraintGroupModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject* self=(PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject*)ob;

    PyParamoaConstraintGroup p1;
    PyParamoaConstraintGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaConstraintGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum data;
  int convert_status=PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum",
    sizeof(PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaConstraintGroup)\n"
"    Calls: void notifyPostCreateObservers(oaConstraintGroup* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaConstraintGroup,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaConstraintGroup,oaConstraintGroupModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaConstraintGroup* object,oaConstraintGroupModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaConstraintGroup,simple-oaConstraintGroupModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintGroup p1;
    PyParamoaConstraintGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaConstraintGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaConstraintGroup)\n"
"    Calls: void notifyPreDestroyObservers(oaConstraintGroup* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaConstraintGroup,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaConstraintGroup,oaConstraintGroupModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaConstraintGroup* object,oaConstraintGroupModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaConstraintGroup,simple-oaConstraintGroupModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintGroup p1;
    PyParamoaConstraintGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaConstraintGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject* self = (PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum* p=new pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum* p=new pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_tp_dealloc(PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum value;
    int convert_status=PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[82];
    sprintf(buffer,"<oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum v1;
    PyParamoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum*) ((PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_FromoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject* self = (PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPostCreate(oaConstraintParam* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaConstraintParam_FromoaConstraintParam(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPostModify(oaConstraintParam* p1,oaConstraintParamModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaConstraintParam_FromoaConstraintParam(p1));
    PyTuple_SetItem(args,1,PyoaConstraintParamModTypeEnum_FromoaConstraintParamModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPreDestroy(oaConstraintParam* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaConstraintParam_FromoaConstraintParam(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPreModify(oaConstraintParam* p1,oaConstraintParamModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaConstraintParam_FromoaConstraintParam(p1));
    PyTuple_SetItem(args,1,PyoaConstraintParamModTypeEnum_FromoaConstraintParamModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaConstraintParam)\n"
"    Calls: virtual void onPostCreate(oaConstraintParam* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaConstraintParam,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject* self=(PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject*)ob;

    PyParamoaConstraintParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaConstraintParam,oaConstraintParamModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaConstraintParam* object,oaConstraintParamModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaConstraintParam,simple-oaConstraintParamModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject* self=(PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject*)ob;

    PyParamoaConstraintParam p1;
    PyParamoaConstraintParamModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaConstraintParamModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaConstraintParam)\n"
"    Calls: virtual void onPreDestroy(oaConstraintParam* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaConstraintParam,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject* self=(PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject*)ob;

    PyParamoaConstraintParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaConstraintParam,oaConstraintParamModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaConstraintParam* object,oaConstraintParamModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaConstraintParam,simple-oaConstraintParamModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject* self=(PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject*)ob;

    PyParamoaConstraintParam p1;
    PyParamoaConstraintParamModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaConstraintParamModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum data;
  int convert_status=PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum",
    sizeof(PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaConstraintParam)\n"
"    Calls: void notifyPostCreateObservers(oaConstraintParam* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaConstraintParam,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaConstraintParam,oaConstraintParamModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaConstraintParam* object,oaConstraintParamModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaConstraintParam,simple-oaConstraintParamModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintParam p1;
    PyParamoaConstraintParamModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaConstraintParamModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaConstraintParam)\n"
"    Calls: void notifyPreDestroyObservers(oaConstraintParam* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaConstraintParam,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaConstraintParam,oaConstraintParamModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaConstraintParam* object,oaConstraintParamModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaConstraintParam,simple-oaConstraintParamModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraintParam p1;
    PyParamoaConstraintParamModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaConstraintParamModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject* self = (PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaConstraint_oaConstraintModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum* p=new pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaConstraint_oaConstraintModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum* p=new pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_tp_dealloc(PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaConstraint_oaConstraintModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaConstraint_oaConstraintModTypeEnum value;
    int convert_status=PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaConstraint_oaConstraintModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaConstraint_oaConstraintModTypeEnum v1;
    PyParamoaStdObserver_oaConstraint_oaConstraintModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaConstraint_oaConstraintModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaConstraint_oaConstraintModTypeEnum*) ((PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_FromoaStdObserver_oaConstraint_oaConstraintModTypeEnum(oaStdObserver_oaConstraint_oaConstraintModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject* self = (PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum::pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaConstraint_oaConstraintModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum::pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaConstraint_oaConstraintModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPostCreate(oaConstraint* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaConstraint_FromoaConstraint(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPostModify(oaConstraint* p1,oaConstraintModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaConstraint_FromoaConstraint(p1));
    PyTuple_SetItem(args,1,PyoaConstraintModTypeEnum_FromoaConstraintModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPreDestroy(oaConstraint* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaConstraint_FromoaConstraint(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPreModify(oaConstraint* p1,oaConstraintModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaConstraint_FromoaConstraint(p1));
    PyTuple_SetItem(args,1,PyoaConstraintModTypeEnum_FromoaConstraintModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaConstraint)\n"
"    Calls: virtual void onPostCreate(oaConstraint* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaConstraint,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraint_oaConstraintModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject* self=(PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject*)ob;

    PyParamoaConstraint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaConstraint,oaConstraintModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaConstraint* object,oaConstraintModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaConstraint,simple-oaConstraintModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraint_oaConstraintModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject* self=(PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject*)ob;

    PyParamoaConstraint p1;
    PyParamoaConstraintModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaConstraintModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaConstraint)\n"
"    Calls: virtual void onPreDestroy(oaConstraint* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaConstraint,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraint_oaConstraintModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject* self=(PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject*)ob;

    PyParamoaConstraint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaConstraint,oaConstraintModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaConstraint* object,oaConstraintModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaConstraint,simple-oaConstraintModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaConstraint_oaConstraintModTypeEnum data;
    int convert_status=PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject* self=(PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject*)ob;

    PyParamoaConstraint p1;
    PyParamoaConstraintModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaConstraintModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaConstraint_oaConstraintModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaConstraint_oaConstraintModTypeEnum data;
  int convert_status=PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaConstraint_oaConstraintModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaConstraint_oaConstraintModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaConstraint_oaConstraintModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaConstraint_oaConstraintModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaConstraint_oaConstraintModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaConstraint_oaConstraintModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaConstraint_oaConstraintModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaConstraint_oaConstraintModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaConstraint_oaConstraintModTypeEnum",
    sizeof(PyoaStdObserver_oaConstraint_oaConstraintModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaConstraint_oaConstraintModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaConstraint_oaConstraintModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaConstraint_oaConstraintModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaConstraint_oaConstraintModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaConstraint)\n"
"    Calls: void notifyPostCreateObservers(oaConstraint* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaConstraint,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraint_oaConstraintModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaConstraint,oaConstraintModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaConstraint* object,oaConstraintModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaConstraint,simple-oaConstraintModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraint p1;
    PyParamoaConstraintModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaConstraintModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraint_oaConstraintModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaConstraint)\n"
"    Calls: void notifyPreDestroyObservers(oaConstraint* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaConstraint,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraint_oaConstraintModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaConstraint_oaConstraintModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaConstraint,oaConstraintModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaConstraint* object,oaConstraintModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaConstraint,simple-oaConstraintModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaConstraint p1;
    PyParamoaConstraintModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaConstraintModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaConstraint_oaConstraintModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaConstraint_oaConstraintModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaConstraint_oaConstraintModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaConstraint_oaConstraintModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaConstraint_oaConstraintModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaConstraint_oaConstraintModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaConstraint_oaConstraintModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject* self = (PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum* p=new pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum* p=new pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_tp_dealloc(PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum value;
    int convert_status=PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum v1;
    PyParamoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum*) ((PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_FromoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject* self = (PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPostCreate(oaCouplingCap* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCouplingCap_FromoaCouplingCap(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPostModify(oaCouplingCap* p1,oaDeviceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCouplingCap_FromoaCouplingCap(p1));
    PyTuple_SetItem(args,1,PyoaDeviceModTypeEnum_FromoaDeviceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPreDestroy(oaCouplingCap* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCouplingCap_FromoaCouplingCap(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPreModify(oaCouplingCap* p1,oaDeviceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCouplingCap_FromoaCouplingCap(p1));
    PyTuple_SetItem(args,1,PyoaDeviceModTypeEnum_FromoaDeviceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaCouplingCap)\n"
"    Calls: virtual void onPostCreate(oaCouplingCap* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaCouplingCap,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject*)ob;

    PyParamoaCouplingCap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCouplingCap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaCouplingCap,oaDeviceModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaCouplingCap* object,oaDeviceModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaCouplingCap,simple-oaDeviceModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject*)ob;

    PyParamoaCouplingCap p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCouplingCap_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaCouplingCap)\n"
"    Calls: virtual void onPreDestroy(oaCouplingCap* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaCouplingCap,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject*)ob;

    PyParamoaCouplingCap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCouplingCap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaCouplingCap,oaDeviceModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaCouplingCap* object,oaDeviceModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaCouplingCap,simple-oaDeviceModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject*)ob;

    PyParamoaCouplingCap p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCouplingCap_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum data;
  int convert_status=PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum",
    sizeof(PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaCouplingCap)\n"
"    Calls: void notifyPostCreateObservers(oaCouplingCap* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaCouplingCap,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCouplingCap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCouplingCap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaCouplingCap,oaDeviceModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaCouplingCap* object,oaDeviceModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaCouplingCap,simple-oaDeviceModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCouplingCap p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCouplingCap_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaCouplingCap)\n"
"    Calls: void notifyPreDestroyObservers(oaCouplingCap* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaCouplingCap,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCouplingCap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCouplingCap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaCouplingCap,oaDeviceModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaCouplingCap* object,oaDeviceModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaCouplingCap,simple-oaDeviceModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCouplingCap p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCouplingCap_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject* self = (PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum* p=new pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum* p=new pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum v1;
    PyParamoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum*) ((PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_FromoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject* self = (PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPostCreate(oaCustomViaDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCustomViaDef_FromoaCustomViaDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPostModify(oaCustomViaDef* p1,oaViaDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCustomViaDef_FromoaCustomViaDef(p1));
    PyTuple_SetItem(args,1,PyoaViaDefModTypeEnum_FromoaViaDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPreDestroy(oaCustomViaDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCustomViaDef_FromoaCustomViaDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPreModify(oaCustomViaDef* p1,oaViaDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCustomViaDef_FromoaCustomViaDef(p1));
    PyTuple_SetItem(args,1,PyoaViaDefModTypeEnum_FromoaViaDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaCustomViaDef)\n"
"    Calls: virtual void onPostCreate(oaCustomViaDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaCustomViaDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject* self=(PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject*)ob;

    PyParamoaCustomViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaCustomViaDef,oaViaDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaCustomViaDef* object,oaViaDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaCustomViaDef,simple-oaViaDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject* self=(PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject*)ob;

    PyParamoaCustomViaDef p1;
    PyParamoaViaDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomViaDef_Convert,&p1,
          &PyoaViaDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaCustomViaDef)\n"
"    Calls: virtual void onPreDestroy(oaCustomViaDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaCustomViaDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject* self=(PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject*)ob;

    PyParamoaCustomViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaCustomViaDef,oaViaDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaCustomViaDef* object,oaViaDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaCustomViaDef,simple-oaViaDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject* self=(PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject*)ob;

    PyParamoaCustomViaDef p1;
    PyParamoaViaDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomViaDef_Convert,&p1,
          &PyoaViaDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum",
    sizeof(PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaCustomViaDef)\n"
"    Calls: void notifyPostCreateObservers(oaCustomViaDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaCustomViaDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaCustomViaDef,oaViaDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaCustomViaDef* object,oaViaDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaCustomViaDef,simple-oaViaDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomViaDef p1;
    PyParamoaViaDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomViaDef_Convert,&p1,
          &PyoaViaDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaCustomViaDef)\n"
"    Calls: void notifyPreDestroyObservers(oaCustomViaDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaCustomViaDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaCustomViaDef,oaViaDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaCustomViaDef* object,oaViaDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaCustomViaDef,simple-oaViaDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomViaDef p1;
    PyParamoaViaDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomViaDef_Convert,&p1,
          &PyoaViaDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject* self = (PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum* p=new pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum* p=new pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_tp_dealloc(PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum value;
    int convert_status=PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[76];
    sprintf(buffer,"<oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum v1;
    PyParamoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum*) ((PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_FromoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject* self = (PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPostCreate(oaCustomViaHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCustomViaHeader_FromoaCustomViaHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPostModify(oaCustomViaHeader* p1,oaViaHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCustomViaHeader_FromoaCustomViaHeader(p1));
    PyTuple_SetItem(args,1,PyoaViaHeaderModTypeEnum_FromoaViaHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPreDestroy(oaCustomViaHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCustomViaHeader_FromoaCustomViaHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPreModify(oaCustomViaHeader* p1,oaViaHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCustomViaHeader_FromoaCustomViaHeader(p1));
    PyTuple_SetItem(args,1,PyoaViaHeaderModTypeEnum_FromoaViaHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaCustomViaHeader)\n"
"    Calls: virtual void onPostCreate(oaCustomViaHeader* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaCustomViaHeader,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject* self=(PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject*)ob;

    PyParamoaCustomViaHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomViaHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaCustomViaHeader,oaViaHeaderModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaCustomViaHeader* object,oaViaHeaderModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaCustomViaHeader,simple-oaViaHeaderModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject* self=(PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject*)ob;

    PyParamoaCustomViaHeader p1;
    PyParamoaViaHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomViaHeader_Convert,&p1,
          &PyoaViaHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaCustomViaHeader)\n"
"    Calls: virtual void onPreDestroy(oaCustomViaHeader* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaCustomViaHeader,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject* self=(PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject*)ob;

    PyParamoaCustomViaHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomViaHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaCustomViaHeader,oaViaHeaderModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaCustomViaHeader* object,oaViaHeaderModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaCustomViaHeader,simple-oaViaHeaderModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject* self=(PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject*)ob;

    PyParamoaCustomViaHeader p1;
    PyParamoaViaHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomViaHeader_Convert,&p1,
          &PyoaViaHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum data;
  int convert_status=PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum",
    sizeof(PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaCustomViaHeader)\n"
"    Calls: void notifyPostCreateObservers(oaCustomViaHeader* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaCustomViaHeader,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomViaHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomViaHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaCustomViaHeader,oaViaHeaderModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaCustomViaHeader* object,oaViaHeaderModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaCustomViaHeader,simple-oaViaHeaderModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomViaHeader p1;
    PyParamoaViaHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomViaHeader_Convert,&p1,
          &PyoaViaHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaCustomViaHeader)\n"
"    Calls: void notifyPreDestroyObservers(oaCustomViaHeader* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaCustomViaHeader,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomViaHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomViaHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaCustomViaHeader,oaViaHeaderModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaCustomViaHeader* object,oaViaHeaderModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaCustomViaHeader,simple-oaViaHeaderModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomViaHeader p1;
    PyParamoaViaHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomViaHeader_Convert,&p1,
          &PyoaViaHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject* self = (PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCustomVia_oaViaModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum* p=new pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCustomVia_oaViaModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum* p=new pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaCustomVia_oaViaModTypeEnum_tp_dealloc(PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaCustomVia_oaViaModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaCustomVia_oaViaModTypeEnum value;
    int convert_status=PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaCustomVia_oaViaModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaCustomVia_oaViaModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaCustomVia_oaViaModTypeEnum v1;
    PyParamoaStdObserver_oaCustomVia_oaViaModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaCustomVia_oaViaModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaCustomVia_oaViaModTypeEnum*) ((PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaCustomVia_oaViaModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_FromoaStdObserver_oaCustomVia_oaViaModTypeEnum(oaStdObserver_oaCustomVia_oaViaModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject* self = (PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum::pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaCustomVia_oaViaModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum::pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaCustomVia_oaViaModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPostCreate(oaCustomVia* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCustomVia_FromoaCustomVia(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPostModify(oaCustomVia* p1,oaViaModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCustomVia_FromoaCustomVia(p1));
    PyTuple_SetItem(args,1,PyoaViaModTypeEnum_FromoaViaModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPreDestroy(oaCustomVia* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCustomVia_FromoaCustomVia(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPreModify(oaCustomVia* p1,oaViaModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCustomVia_FromoaCustomVia(p1));
    PyTuple_SetItem(args,1,PyoaViaModTypeEnum_FromoaViaModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaCustomVia)\n"
"    Calls: virtual void onPostCreate(oaCustomVia* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaCustomVia,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomVia_oaViaModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject* self=(PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject*)ob;

    PyParamoaCustomVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaCustomVia,oaViaModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaCustomVia* object,oaViaModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaCustomVia,simple-oaViaModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomVia_oaViaModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject* self=(PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject*)ob;

    PyParamoaCustomVia p1;
    PyParamoaViaModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomVia_Convert,&p1,
          &PyoaViaModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaCustomVia)\n"
"    Calls: virtual void onPreDestroy(oaCustomVia* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaCustomVia,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomVia_oaViaModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject* self=(PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject*)ob;

    PyParamoaCustomVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaCustomVia,oaViaModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaCustomVia* object,oaViaModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaCustomVia,simple-oaViaModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCustomVia_oaViaModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject* self=(PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject*)ob;

    PyParamoaCustomVia p1;
    PyParamoaViaModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomVia_Convert,&p1,
          &PyoaViaModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCustomVia_oaViaModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaCustomVia_oaViaModTypeEnum data;
  int convert_status=PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaCustomVia_oaViaModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaCustomVia_oaViaModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaCustomVia_oaViaModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaCustomVia_oaViaModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaCustomVia_oaViaModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaCustomVia_oaViaModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaCustomVia_oaViaModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaCustomVia_oaViaModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaCustomVia_oaViaModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaCustomVia_oaViaModTypeEnum",
    sizeof(PyoaStdObserver_oaCustomVia_oaViaModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaCustomVia_oaViaModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaCustomVia_oaViaModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaCustomVia_oaViaModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaCustomVia_oaViaModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaCustomVia_oaViaModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaCustomVia_oaViaModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaCustomVia_oaViaModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaCustomVia)\n"
"    Calls: void notifyPostCreateObservers(oaCustomVia* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaCustomVia,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomVia_oaViaModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaCustomVia,oaViaModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaCustomVia* object,oaViaModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaCustomVia,simple-oaViaModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomVia p1;
    PyParamoaViaModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomVia_Convert,&p1,
          &PyoaViaModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomVia_oaViaModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaCustomVia)\n"
"    Calls: void notifyPreDestroyObservers(oaCustomVia* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaCustomVia,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCustomVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomVia_oaViaModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaCustomVia_oaViaModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaCustomVia,oaViaModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaCustomVia* object,oaViaModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaCustomVia,simple-oaViaModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCustomVia p1;
    PyParamoaViaModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCustomVia_Convert,&p1,
          &PyoaViaModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCustomVia_oaViaModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaCustomVia_oaViaModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaCustomVia_oaViaModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaCustomVia_oaViaModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaCustomVia_oaViaModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaCustomVia_oaViaModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaCustomVia_oaViaModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject* self = (PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDMFile_oaDMFileModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum* p=new pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDMFile_oaDMFileModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum* p=new pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_tp_dealloc(PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDMFile_oaDMFileModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDMFile_oaDMFileModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaDMFile_oaDMFileModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDMFile_oaDMFileModTypeEnum v1;
    PyParamoaStdObserver_oaDMFile_oaDMFileModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDMFile_oaDMFileModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDMFile_oaDMFileModTypeEnum*) ((PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_FromoaStdObserver_oaDMFile_oaDMFileModTypeEnum(oaStdObserver_oaDMFile_oaDMFileModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject* self = (PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum::pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDMFile_oaDMFileModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum::pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDMFile_oaDMFileModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPostCreate(oaDMFile* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDMFile_FromoaDMFile(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPostModify(oaDMFile* p1,oaDMFileModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDMFile_FromoaDMFile(p1));
    PyTuple_SetItem(args,1,PyoaDMFileModTypeEnum_FromoaDMFileModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPreDestroy(oaDMFile* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDMFile_FromoaDMFile(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPreModify(oaDMFile* p1,oaDMFileModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDMFile_FromoaDMFile(p1));
    PyTuple_SetItem(args,1,PyoaDMFileModTypeEnum_FromoaDMFileModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDMFile)\n"
"    Calls: virtual void onPostCreate(oaDMFile* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDMFile,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDMFile_oaDMFileModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject* self=(PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject*)ob;

    PyParamoaDMFile p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMFile_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDMFile,oaDMFileModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDMFile* object,oaDMFileModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDMFile,simple-oaDMFileModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDMFile_oaDMFileModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject* self=(PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject*)ob;

    PyParamoaDMFile p1;
    PyParamoaDMFileModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaDMFileModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDMFile)\n"
"    Calls: virtual void onPreDestroy(oaDMFile* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDMFile,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDMFile_oaDMFileModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject* self=(PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject*)ob;

    PyParamoaDMFile p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMFile_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDMFile,oaDMFileModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDMFile* object,oaDMFileModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDMFile,simple-oaDMFileModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDMFile_oaDMFileModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject* self=(PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject*)ob;

    PyParamoaDMFile p1;
    PyParamoaDMFileModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaDMFileModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDMFile_oaDMFileModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDMFile_oaDMFileModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDMFile_oaDMFileModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDMFile_oaDMFileModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDMFile_oaDMFileModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDMFile_oaDMFileModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDMFile_oaDMFileModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDMFile_oaDMFileModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDMFile_oaDMFileModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDMFile_oaDMFileModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDMFile_oaDMFileModTypeEnum",
    sizeof(PyoaStdObserver_oaDMFile_oaDMFileModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDMFile_oaDMFileModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDMFile_oaDMFileModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDMFile_oaDMFileModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDMFile_oaDMFileModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDMFile)\n"
"    Calls: void notifyPostCreateObservers(oaDMFile* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDMFile,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDMFile p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMFile_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDMFile_oaDMFileModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDMFile,oaDMFileModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDMFile* object,oaDMFileModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDMFile,simple-oaDMFileModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDMFile p1;
    PyParamoaDMFileModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaDMFileModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDMFile_oaDMFileModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDMFile)\n"
"    Calls: void notifyPreDestroyObservers(oaDMFile* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDMFile,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDMFile p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMFile_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDMFile_oaDMFileModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDMFile_oaDMFileModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDMFile,oaDMFileModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDMFile* object,oaDMFileModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDMFile,simple-oaDMFileModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDMFile p1;
    PyParamoaDMFileModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaDMFileModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDMFile_oaDMFileModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDMFile_oaDMFileModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDMFile_oaDMFileModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDMFile_oaDMFileModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDMFile_oaDMFileModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDMFile_oaDMFileModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDMFile_oaDMFileModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject* self = (PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum* p=new pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum* p=new pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_tp_dealloc(PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[86];
    sprintf(buffer,"<oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum v1;
    PyParamoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum*) ((PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_FromoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject* self = (PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPostCreate(oaDerivedLayerParam* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDerivedLayerParam_FromoaDerivedLayerParam(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPostModify(oaDerivedLayerParam* p1,oaDerivedLayerParamModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDerivedLayerParam_FromoaDerivedLayerParam(p1));
    PyTuple_SetItem(args,1,PyoaDerivedLayerParamModTypeEnum_FromoaDerivedLayerParamModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPreDestroy(oaDerivedLayerParam* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDerivedLayerParam_FromoaDerivedLayerParam(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPreModify(oaDerivedLayerParam* p1,oaDerivedLayerParamModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDerivedLayerParam_FromoaDerivedLayerParam(p1));
    PyTuple_SetItem(args,1,PyoaDerivedLayerParamModTypeEnum_FromoaDerivedLayerParamModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDerivedLayerParam)\n"
"    Calls: virtual void onPostCreate(oaDerivedLayerParam* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDerivedLayerParam,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject* self=(PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject*)ob;

    PyParamoaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayerParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDerivedLayerParam,oaDerivedLayerParamModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDerivedLayerParam* object,oaDerivedLayerParamModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDerivedLayerParam,simple-oaDerivedLayerParamModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject* self=(PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject*)ob;

    PyParamoaDerivedLayerParam p1;
    PyParamoaDerivedLayerParamModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaDerivedLayerParamModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDerivedLayerParam)\n"
"    Calls: virtual void onPreDestroy(oaDerivedLayerParam* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDerivedLayerParam,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject* self=(PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject*)ob;

    PyParamoaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayerParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDerivedLayerParam,oaDerivedLayerParamModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDerivedLayerParam* object,oaDerivedLayerParamModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDerivedLayerParam,simple-oaDerivedLayerParamModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject* self=(PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject*)ob;

    PyParamoaDerivedLayerParam p1;
    PyParamoaDerivedLayerParamModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaDerivedLayerParamModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum",
    sizeof(PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDerivedLayerParam)\n"
"    Calls: void notifyPostCreateObservers(oaDerivedLayerParam* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDerivedLayerParam,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayerParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDerivedLayerParam,oaDerivedLayerParamModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDerivedLayerParam* object,oaDerivedLayerParamModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDerivedLayerParam,simple-oaDerivedLayerParamModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDerivedLayerParam p1;
    PyParamoaDerivedLayerParamModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaDerivedLayerParamModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDerivedLayerParam)\n"
"    Calls: void notifyPreDestroyObservers(oaDerivedLayerParam* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDerivedLayerParam,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayerParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDerivedLayerParam,oaDerivedLayerParamModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDerivedLayerParam* object,oaDerivedLayerParamModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDerivedLayerParam,simple-oaDerivedLayerParamModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDerivedLayerParam p1;
    PyParamoaDerivedLayerParamModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaDerivedLayerParamModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject* self = (PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum* p=new pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum* p=new pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_tp_dealloc(PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum v1;
    PyParamoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum*) ((PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_FromoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject* self = (PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPostCreate(oaDerivedLayer* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDerivedLayer_FromoaDerivedLayer(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPostModify(oaDerivedLayer* p1,oaLayerModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDerivedLayer_FromoaDerivedLayer(p1));
    PyTuple_SetItem(args,1,PyoaLayerModTypeEnum_FromoaLayerModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPreDestroy(oaDerivedLayer* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDerivedLayer_FromoaDerivedLayer(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPreModify(oaDerivedLayer* p1,oaLayerModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDerivedLayer_FromoaDerivedLayer(p1));
    PyTuple_SetItem(args,1,PyoaLayerModTypeEnum_FromoaLayerModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDerivedLayer)\n"
"    Calls: virtual void onPostCreate(oaDerivedLayer* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDerivedLayer,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject* self=(PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject*)ob;

    PyParamoaDerivedLayer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDerivedLayer,oaLayerModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDerivedLayer* object,oaLayerModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDerivedLayer,simple-oaLayerModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject* self=(PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject*)ob;

    PyParamoaDerivedLayer p1;
    PyParamoaLayerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayer_Convert,&p1,
          &PyoaLayerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDerivedLayer)\n"
"    Calls: virtual void onPreDestroy(oaDerivedLayer* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDerivedLayer,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject* self=(PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject*)ob;

    PyParamoaDerivedLayer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDerivedLayer,oaLayerModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDerivedLayer* object,oaLayerModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDerivedLayer,simple-oaLayerModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject* self=(PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject*)ob;

    PyParamoaDerivedLayer p1;
    PyParamoaLayerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayer_Convert,&p1,
          &PyoaLayerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum",
    sizeof(PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDerivedLayer)\n"
"    Calls: void notifyPostCreateObservers(oaDerivedLayer* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDerivedLayer,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDerivedLayer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDerivedLayer,oaLayerModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDerivedLayer* object,oaLayerModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDerivedLayer,simple-oaLayerModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDerivedLayer p1;
    PyParamoaLayerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayer_Convert,&p1,
          &PyoaLayerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDerivedLayer)\n"
"    Calls: void notifyPreDestroyObservers(oaDerivedLayer* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDerivedLayer,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDerivedLayer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDerivedLayer,oaLayerModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDerivedLayer* object,oaLayerModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDerivedLayer,simple-oaLayerModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDerivedLayer p1;
    PyParamoaLayerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayer_Convert,&p1,
          &PyoaLayerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject* self = (PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum* p=new pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum* p=new pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum v1;
    PyParamoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum*) ((PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_FromoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject* self = (PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPostCreate(oaDesignInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDesignInst_FromoaDesignInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPostModify(oaDesignInst* p1,oaDesignInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDesignInst_FromoaDesignInst(p1));
    PyTuple_SetItem(args,1,PyoaDesignInstModTypeEnum_FromoaDesignInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPreDestroy(oaDesignInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDesignInst_FromoaDesignInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPreModify(oaDesignInst* p1,oaDesignInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDesignInst_FromoaDesignInst(p1));
    PyTuple_SetItem(args,1,PyoaDesignInstModTypeEnum_FromoaDesignInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDesignInst)\n"
"    Calls: virtual void onPostCreate(oaDesignInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDesignInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject* self=(PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject*)ob;

    PyParamoaDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDesignInst,oaDesignInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDesignInst* object,oaDesignInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDesignInst,simple-oaDesignInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject* self=(PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject*)ob;

    PyParamoaDesignInst p1;
    PyParamoaDesignInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaDesignInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDesignInst)\n"
"    Calls: virtual void onPreDestroy(oaDesignInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDesignInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject* self=(PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject*)ob;

    PyParamoaDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDesignInst,oaDesignInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDesignInst* object,oaDesignInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDesignInst,simple-oaDesignInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject* self=(PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject*)ob;

    PyParamoaDesignInst p1;
    PyParamoaDesignInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaDesignInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum",
    sizeof(PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDesignInst)\n"
"    Calls: void notifyPostCreateObservers(oaDesignInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDesignInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDesignInst,oaDesignInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDesignInst* object,oaDesignInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDesignInst,simple-oaDesignInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDesignInst p1;
    PyParamoaDesignInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaDesignInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDesignInst)\n"
"    Calls: void notifyPreDestroyObservers(oaDesignInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDesignInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDesignInst,oaDesignInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDesignInst* object,oaDesignInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDesignInst,simple-oaDesignInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDesignInst p1;
    PyParamoaDesignInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaDesignInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDesign_oaDesignModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject* self = (PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDesign_oaDesignModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum* p=new pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDesign_oaDesignModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum* p=new pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDesign_oaDesignModTypeEnum_tp_dealloc(PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDesign_oaDesignModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDesign_oaDesignModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaDesign_oaDesignModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDesign_oaDesignModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDesign_oaDesignModTypeEnum v1;
    PyParamoaStdObserver_oaDesign_oaDesignModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDesign_oaDesignModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDesign_oaDesignModTypeEnum*) ((PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDesign_oaDesignModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDesign_oaDesignModTypeEnum_FromoaStdObserver_oaDesign_oaDesignModTypeEnum(oaStdObserver_oaDesign_oaDesignModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject* self = (PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum::pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDesign_oaDesignModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum::pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDesign_oaDesignModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum::onPostCreate(oaDesign* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesign_oaDesignModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDesign_FromoaDesign(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesign_oaDesignModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum::onPostModify(oaDesign* p1,oaDesignModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesign_oaDesignModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDesign_FromoaDesign(p1));
    PyTuple_SetItem(args,1,PyoaDesignModTypeEnum_FromoaDesignModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesign_oaDesignModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum::onPreDestroy(oaDesign* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesign_oaDesignModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDesign_FromoaDesign(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesign_oaDesignModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDesign_oaDesignModTypeEnum::onPreModify(oaDesign* p1,oaDesignModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesign_oaDesignModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDesign_FromoaDesign(p1));
    PyTuple_SetItem(args,1,PyoaDesignModTypeEnum_FromoaDesignModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDesign_oaDesignModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDesign_oaDesignModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDesign)\n"
"    Calls: virtual void onPostCreate(oaDesign* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDesign,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDesign_oaDesignModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject* self=(PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject*)ob;

    PyParamoaDesign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesign_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDesign_oaDesignModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesign_oaDesignModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDesign,oaDesignModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDesign* object,oaDesignModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDesign,simple-oaDesignModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDesign_oaDesignModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject* self=(PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject*)ob;

    PyParamoaDesign p1;
    PyParamoaDesignModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaDesignModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDesign_oaDesignModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesign_oaDesignModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDesign)\n"
"    Calls: virtual void onPreDestroy(oaDesign* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDesign,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDesign_oaDesignModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject* self=(PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject*)ob;

    PyParamoaDesign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesign_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDesign_oaDesignModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesign_oaDesignModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDesign,oaDesignModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDesign* object,oaDesignModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDesign,simple-oaDesignModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDesign_oaDesignModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject* self=(PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject*)ob;

    PyParamoaDesign p1;
    PyParamoaDesignModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaDesignModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDesign_oaDesignModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDesign_oaDesignModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDesign_oaDesignModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDesign_oaDesignModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDesign_oaDesignModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDesign_oaDesignModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDesign_oaDesignModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDesign_oaDesignModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDesign_oaDesignModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDesign_oaDesignModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDesign_oaDesignModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDesign_oaDesignModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDesign_oaDesignModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDesign_oaDesignModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDesign_oaDesignModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDesign_oaDesignModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDesign_oaDesignModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDesign_oaDesignModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDesign_oaDesignModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDesign_oaDesignModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDesign_oaDesignModTypeEnum",
    sizeof(PyoaStdObserver_oaDesign_oaDesignModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDesign_oaDesignModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDesign_oaDesignModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDesign_oaDesignModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDesign_oaDesignModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDesign_oaDesignModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDesign_oaDesignModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDesign_oaDesignModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDesign_oaDesignModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDesign)\n"
"    Calls: void notifyPostCreateObservers(oaDesign* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDesign,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDesign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesign_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDesign_oaDesignModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDesign,oaDesignModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDesign* object,oaDesignModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDesign,simple-oaDesignModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDesign p1;
    PyParamoaDesignModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaDesignModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDesign_oaDesignModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDesign)\n"
"    Calls: void notifyPreDestroyObservers(oaDesign* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDesign,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDesign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesign_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDesign_oaDesignModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDesign_oaDesignModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDesign,oaDesignModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDesign* object,oaDesignModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDesign,simple-oaDesignModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDesign p1;
    PyParamoaDesignModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaDesignModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDesign_oaDesignModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDesign_oaDesignModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDesign_oaDesignModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDesign_oaDesignModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDesign_oaDesignModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDesign_oaDesignModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDesign_oaDesignModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDesign_oaDesignModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDesign_oaDesignModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDesign_oaDesignModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDesign_oaDesignModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject* self = (PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDevice_oaDeviceModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum* p=new pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDevice_oaDeviceModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum* p=new pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDevice_oaDeviceModTypeEnum_tp_dealloc(PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDevice_oaDeviceModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDevice_oaDeviceModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaDevice_oaDeviceModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDevice_oaDeviceModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDevice_oaDeviceModTypeEnum v1;
    PyParamoaStdObserver_oaDevice_oaDeviceModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDevice_oaDeviceModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDevice_oaDeviceModTypeEnum*) ((PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDevice_oaDeviceModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_FromoaStdObserver_oaDevice_oaDeviceModTypeEnum(oaStdObserver_oaDevice_oaDeviceModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject* self = (PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum::pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDevice_oaDeviceModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum::pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDevice_oaDeviceModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPostCreate(oaDevice* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDevice_FromoaDevice(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPostModify(oaDevice* p1,oaDeviceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDevice_FromoaDevice(p1));
    PyTuple_SetItem(args,1,PyoaDeviceModTypeEnum_FromoaDeviceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPreDestroy(oaDevice* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDevice_FromoaDevice(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPreModify(oaDevice* p1,oaDeviceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDevice_FromoaDevice(p1));
    PyTuple_SetItem(args,1,PyoaDeviceModTypeEnum_FromoaDeviceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDevice)\n"
"    Calls: virtual void onPostCreate(oaDevice* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDevice,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDevice_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject*)ob;

    PyParamoaDevice p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDevice_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDevice,oaDeviceModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDevice* object,oaDeviceModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDevice,simple-oaDeviceModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDevice_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject*)ob;

    PyParamoaDevice p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDevice)\n"
"    Calls: virtual void onPreDestroy(oaDevice* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDevice,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDevice_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject*)ob;

    PyParamoaDevice p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDevice_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDevice,oaDeviceModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDevice* object,oaDeviceModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDevice,simple-oaDeviceModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDevice_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject*)ob;

    PyParamoaDevice p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDevice_oaDeviceModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDevice_oaDeviceModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDevice_oaDeviceModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDevice_oaDeviceModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDevice_oaDeviceModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDevice_oaDeviceModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDevice_oaDeviceModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDevice_oaDeviceModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDevice_oaDeviceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDevice_oaDeviceModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDevice_oaDeviceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDevice_oaDeviceModTypeEnum",
    sizeof(PyoaStdObserver_oaDevice_oaDeviceModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDevice_oaDeviceModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDevice_oaDeviceModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDevice_oaDeviceModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDevice_oaDeviceModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDevice_oaDeviceModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDevice_oaDeviceModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDevice_oaDeviceModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDevice)\n"
"    Calls: void notifyPostCreateObservers(oaDevice* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDevice,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDevice p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDevice_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDevice_oaDeviceModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDevice,oaDeviceModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDevice* object,oaDeviceModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDevice,simple-oaDeviceModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDevice p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDevice_oaDeviceModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDevice)\n"
"    Calls: void notifyPreDestroyObservers(oaDevice* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDevice,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDevice p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDevice_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDevice_oaDeviceModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDevice_oaDeviceModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDevice,oaDeviceModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDevice* object,oaDeviceModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDevice,simple-oaDeviceModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDevice p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDevice_oaDeviceModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDevice_oaDeviceModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDevice_oaDeviceModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDevice_oaDeviceModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDevice_oaDeviceModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDevice_oaDeviceModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDevice_oaDeviceModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject* self = (PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDiode_oaDeviceModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum* p=new pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDiode_oaDeviceModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum* p=new pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDiode_oaDeviceModTypeEnum_tp_dealloc(PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDiode_oaDeviceModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDiode_oaDeviceModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaStdObserver_oaDiode_oaDeviceModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDiode_oaDeviceModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDiode_oaDeviceModTypeEnum v1;
    PyParamoaStdObserver_oaDiode_oaDeviceModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDiode_oaDeviceModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDiode_oaDeviceModTypeEnum*) ((PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDiode_oaDeviceModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_FromoaStdObserver_oaDiode_oaDeviceModTypeEnum(oaStdObserver_oaDiode_oaDeviceModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject* self = (PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum::pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDiode_oaDeviceModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum::pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDiode_oaDeviceModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPostCreate(oaDiode* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDiode_FromoaDiode(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPostModify(oaDiode* p1,oaDeviceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDiode_FromoaDiode(p1));
    PyTuple_SetItem(args,1,PyoaDeviceModTypeEnum_FromoaDeviceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPreDestroy(oaDiode* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDiode_FromoaDiode(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPreModify(oaDiode* p1,oaDeviceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDiode_FromoaDiode(p1));
    PyTuple_SetItem(args,1,PyoaDeviceModTypeEnum_FromoaDeviceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDiode)\n"
"    Calls: virtual void onPostCreate(oaDiode* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDiode,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDiode_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject*)ob;

    PyParamoaDiode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDiode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDiode,oaDeviceModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDiode* object,oaDeviceModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDiode,simple-oaDeviceModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDiode_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject*)ob;

    PyParamoaDiode p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDiode_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDiode)\n"
"    Calls: virtual void onPreDestroy(oaDiode* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDiode,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDiode_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject*)ob;

    PyParamoaDiode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDiode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDiode,oaDeviceModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDiode* object,oaDeviceModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDiode,simple-oaDeviceModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDiode_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject*)ob;

    PyParamoaDiode p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDiode_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDiode_oaDeviceModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDiode_oaDeviceModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDiode_oaDeviceModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDiode_oaDeviceModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDiode_oaDeviceModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDiode_oaDeviceModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDiode_oaDeviceModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDiode_oaDeviceModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDiode_oaDeviceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDiode_oaDeviceModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDiode_oaDeviceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDiode_oaDeviceModTypeEnum",
    sizeof(PyoaStdObserver_oaDiode_oaDeviceModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDiode_oaDeviceModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDiode_oaDeviceModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDiode_oaDeviceModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDiode_oaDeviceModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDiode_oaDeviceModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDiode_oaDeviceModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDiode_oaDeviceModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDiode)\n"
"    Calls: void notifyPostCreateObservers(oaDiode* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDiode,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDiode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDiode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDiode_oaDeviceModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDiode,oaDeviceModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDiode* object,oaDeviceModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDiode,simple-oaDeviceModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDiode p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDiode_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDiode_oaDeviceModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDiode)\n"
"    Calls: void notifyPreDestroyObservers(oaDiode* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDiode,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDiode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDiode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDiode_oaDeviceModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDiode_oaDeviceModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDiode,oaDeviceModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDiode* object,oaDeviceModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDiode,simple-oaDeviceModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDiode p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDiode_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDiode_oaDeviceModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDiode_oaDeviceModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDiode_oaDeviceModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDiode_oaDeviceModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDiode_oaDeviceModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDiode_oaDeviceModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDiode_oaDeviceModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDonut_oaShapeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDonut_oaShapeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDonut_oaShapeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDonut_oaShapeModTypeEnum_tp_dealloc(PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDonut_oaShapeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDonut_oaShapeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[62];
    sprintf(buffer,"<oaStdObserver_oaDonut_oaShapeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDonut_oaShapeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDonut_oaShapeModTypeEnum v1;
    PyParamoaStdObserver_oaDonut_oaShapeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDonut_oaShapeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDonut_oaShapeModTypeEnum*) ((PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDonut_oaShapeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDonut_oaShapeModTypeEnum_FromoaStdObserver_oaDonut_oaShapeModTypeEnum(oaStdObserver_oaDonut_oaShapeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum::pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDonut_oaShapeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum::pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDonut_oaShapeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum::onPostCreate(oaDonut* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDonut_oaShapeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDonut_FromoaDonut(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDonut_oaShapeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum::onPostModify(oaDonut* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDonut_oaShapeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDonut_FromoaDonut(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDonut_oaShapeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum::onPreDestroy(oaDonut* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDonut_oaShapeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDonut_FromoaDonut(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDonut_oaShapeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDonut_oaShapeModTypeEnum::onPreModify(oaDonut* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDonut_oaShapeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDonut_FromoaDonut(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDonut_oaShapeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDonut_oaShapeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDonut)\n"
"    Calls: virtual void onPostCreate(oaDonut* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDonut,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDonut_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject*)ob;

    PyParamoaDonut p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDonut_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDonut_oaShapeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDonut_oaShapeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDonut,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDonut* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDonut,simple-oaShapeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDonut_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject*)ob;

    PyParamoaDonut p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDonut_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDonut_oaShapeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDonut_oaShapeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDonut)\n"
"    Calls: virtual void onPreDestroy(oaDonut* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDonut,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDonut_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject*)ob;

    PyParamoaDonut p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDonut_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDonut_oaShapeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDonut_oaShapeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDonut,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDonut* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDonut,simple-oaShapeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDonut_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject*)ob;

    PyParamoaDonut p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDonut_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDonut_oaShapeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDonut_oaShapeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDonut_oaShapeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDonut_oaShapeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDonut_oaShapeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDonut_oaShapeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDonut_oaShapeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDonut_oaShapeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDonut_oaShapeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDonut_oaShapeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDonut_oaShapeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDonut_oaShapeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDonut_oaShapeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDonut_oaShapeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDonut_oaShapeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDonut_oaShapeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDonut_oaShapeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDonut_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDonut_oaShapeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDonut_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDonut_oaShapeModTypeEnum",
    sizeof(PyoaStdObserver_oaDonut_oaShapeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDonut_oaShapeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDonut_oaShapeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDonut_oaShapeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDonut_oaShapeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDonut_oaShapeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDonut_oaShapeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDonut_oaShapeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDonut_oaShapeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDonut)\n"
"    Calls: void notifyPostCreateObservers(oaDonut* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDonut,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDonut_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDonut_oaShapeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDonut,oaShapeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDonut* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDonut,simple-oaShapeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDonut_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDonut_oaShapeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDonut)\n"
"    Calls: void notifyPreDestroyObservers(oaDonut* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDonut,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDonut_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDonut_oaShapeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDonut_oaShapeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDonut,oaShapeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDonut* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDonut,simple-oaShapeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDonut p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDonut_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDonut_oaShapeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDonut_oaShapeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDonut_oaShapeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDonut_oaShapeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDonut_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDonut_oaShapeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDonut_oaShapeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDonut_oaShapeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDonut_oaShapeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDonut_oaShapeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDonut_oaShapeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDot_oaShapeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDot_oaShapeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDot_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaDot_oaShapeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDot_oaShapeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDot_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaDot_oaShapeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDot_oaShapeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDot_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaDot_oaShapeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDot_oaShapeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDot_oaShapeModTypeEnum_tp_dealloc(PyoaStdObserver_oaDot_oaShapeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDot_oaShapeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDot_oaShapeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDot_oaShapeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaStdObserver_oaDot_oaShapeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDot_oaShapeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDot_oaShapeModTypeEnum v1;
    PyParamoaStdObserver_oaDot_oaShapeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDot_oaShapeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDot_oaShapeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDot_oaShapeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDot_oaShapeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDot_oaShapeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDot_oaShapeModTypeEnum*) ((PyoaStdObserver_oaDot_oaShapeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDot_oaShapeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDot_oaShapeModTypeEnum_FromoaStdObserver_oaDot_oaShapeModTypeEnum(oaStdObserver_oaDot_oaShapeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDot_oaShapeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDot_oaShapeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDot_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaDot_oaShapeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDot_oaShapeModTypeEnum::pyv_oaStdObserver_oaDot_oaShapeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDot_oaShapeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDot_oaShapeModTypeEnum::pyv_oaStdObserver_oaDot_oaShapeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDot_oaShapeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDot_oaShapeModTypeEnum::onPostCreate(oaDot* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDot_oaShapeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDot_FromoaDot(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDot_oaShapeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDot_oaShapeModTypeEnum::onPostModify(oaDot* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDot_oaShapeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDot_FromoaDot(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDot_oaShapeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDot_oaShapeModTypeEnum::onPreDestroy(oaDot* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDot_oaShapeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDot_FromoaDot(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDot_oaShapeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDot_oaShapeModTypeEnum::onPreModify(oaDot* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDot_oaShapeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDot_FromoaDot(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDot_oaShapeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDot_oaShapeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDot)\n"
"    Calls: virtual void onPostCreate(oaDot* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDot,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDot_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDot_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDot_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaDot_oaShapeModTypeEnumObject*)ob;

    PyParamoaDot p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDot_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDot_oaShapeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDot_oaShapeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDot,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDot* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDot,simple-oaShapeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDot_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDot_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDot_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaDot_oaShapeModTypeEnumObject*)ob;

    PyParamoaDot p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDot_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDot_oaShapeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDot_oaShapeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDot)\n"
"    Calls: virtual void onPreDestroy(oaDot* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDot,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDot_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDot_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDot_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaDot_oaShapeModTypeEnumObject*)ob;

    PyParamoaDot p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDot_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDot_oaShapeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDot_oaShapeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDot,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDot* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDot,simple-oaShapeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDot_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDot_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDot_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaDot_oaShapeModTypeEnumObject*)ob;

    PyParamoaDot p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDot_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDot_oaShapeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDot_oaShapeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDot_oaShapeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDot_oaShapeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDot_oaShapeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDot_oaShapeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDot_oaShapeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDot_oaShapeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDot_oaShapeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDot_oaShapeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDot_oaShapeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDot_oaShapeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDot_oaShapeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDot_oaShapeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDot_oaShapeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDot_oaShapeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDot_oaShapeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDot_oaShapeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDot_oaShapeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDot_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDot_oaShapeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDot_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDot_oaShapeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDot_oaShapeModTypeEnum",
    sizeof(PyoaStdObserver_oaDot_oaShapeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDot_oaShapeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDot_oaShapeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDot_oaShapeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDot_oaShapeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDot_oaShapeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDot_oaShapeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDot_oaShapeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDot_oaShapeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDot)\n"
"    Calls: void notifyPostCreateObservers(oaDot* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDot,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDot p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDot_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDot_oaShapeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDot,oaShapeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDot* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDot,simple-oaShapeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDot p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDot_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDot_oaShapeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDot)\n"
"    Calls: void notifyPreDestroyObservers(oaDot* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDot,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDot p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDot_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDot_oaShapeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDot_oaShapeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDot,oaShapeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDot* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDot,simple-oaShapeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDot p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDot_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDot_oaShapeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDot_oaShapeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDot_oaShapeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDot_oaShapeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDot_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDot_oaShapeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDot_oaShapeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDot_oaShapeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDot_oaShapeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDot_oaShapeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDot_oaShapeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDot_oaShapeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDot_oaShapeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDoubleProp_oaPropModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDoubleProp_oaPropModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_tp_dealloc(PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDoubleProp_oaPropModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDoubleProp_oaPropModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaDoubleProp_oaPropModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDoubleProp_oaPropModTypeEnum v1;
    PyParamoaStdObserver_oaDoubleProp_oaPropModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDoubleProp_oaPropModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDoubleProp_oaPropModTypeEnum*) ((PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_FromoaStdObserver_oaDoubleProp_oaPropModTypeEnum(oaStdObserver_oaDoubleProp_oaPropModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum::pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDoubleProp_oaPropModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum::pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDoubleProp_oaPropModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPostCreate(oaDoubleProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDoubleProp_FromoaDoubleProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPostModify(oaDoubleProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDoubleProp_FromoaDoubleProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPreDestroy(oaDoubleProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDoubleProp_FromoaDoubleProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPreModify(oaDoubleProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDoubleProp_FromoaDoubleProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDoubleProp)\n"
"    Calls: virtual void onPostCreate(oaDoubleProp* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDoubleProp,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDoubleProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject*)ob;

    PyParamoaDoubleProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDoubleProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDoubleProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDoubleProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDoubleProp,simple-oaPropModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDoubleProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject*)ob;

    PyParamoaDoubleProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDoubleProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDoubleProp)\n"
"    Calls: virtual void onPreDestroy(oaDoubleProp* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDoubleProp,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDoubleProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject*)ob;

    PyParamoaDoubleProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDoubleProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDoubleProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDoubleProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDoubleProp,simple-oaPropModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDoubleProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject*)ob;

    PyParamoaDoubleProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDoubleProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDoubleProp_oaPropModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDoubleProp_oaPropModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDoubleProp_oaPropModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDoubleProp_oaPropModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDoubleProp_oaPropModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDoubleProp_oaPropModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDoubleProp_oaPropModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDoubleProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDoubleProp_oaPropModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDoubleProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDoubleProp_oaPropModTypeEnum",
    sizeof(PyoaStdObserver_oaDoubleProp_oaPropModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDoubleProp_oaPropModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDoubleProp_oaPropModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDoubleProp_oaPropModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDoubleProp_oaPropModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDoubleProp)\n"
"    Calls: void notifyPostCreateObservers(oaDoubleProp* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDoubleProp,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDoubleProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDoubleProp_oaPropModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDoubleProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDoubleProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDoubleProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDoubleProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDoubleProp_oaPropModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDoubleProp)\n"
"    Calls: void notifyPreDestroyObservers(oaDoubleProp* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDoubleProp,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDoubleProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDoubleProp_oaPropModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDoubleProp_oaPropModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDoubleProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDoubleProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDoubleProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDoubleProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDoubleProp_oaPropModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDoubleProp_oaPropModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDoubleProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDoubleProp_oaPropModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDoubleProp_oaPropModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDoubleProp_oaPropModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDoubleProp_oaPropModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_tp_dealloc(PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[71];
    sprintf(buffer,"<oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum v1;
    PyParamoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum*) ((PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_FromoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPostCreate(oaDoubleRangeProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDoubleRangeProp_FromoaDoubleRangeProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPostModify(oaDoubleRangeProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDoubleRangeProp_FromoaDoubleRangeProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPreDestroy(oaDoubleRangeProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDoubleRangeProp_FromoaDoubleRangeProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPreModify(oaDoubleRangeProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDoubleRangeProp_FromoaDoubleRangeProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDoubleRangeProp)\n"
"    Calls: virtual void onPostCreate(oaDoubleRangeProp* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDoubleRangeProp,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaDoubleRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDoubleRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDoubleRangeProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDoubleRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDoubleRangeProp,simple-oaPropModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaDoubleRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDoubleRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDoubleRangeProp)\n"
"    Calls: virtual void onPreDestroy(oaDoubleRangeProp* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDoubleRangeProp,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaDoubleRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDoubleRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDoubleRangeProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDoubleRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDoubleRangeProp,simple-oaPropModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaDoubleRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDoubleRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum",
    sizeof(PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDoubleRangeProp)\n"
"    Calls: void notifyPostCreateObservers(oaDoubleRangeProp* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDoubleRangeProp,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDoubleRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDoubleRangeProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDoubleRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDoubleRangeProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDoubleRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDoubleRangeProp)\n"
"    Calls: void notifyPreDestroyObservers(oaDoubleRangeProp* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDoubleRangeProp,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDoubleRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDoubleRangeProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDoubleRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDoubleRangeProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDoubleRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDoubleRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[74];
    sprintf(buffer,"<oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_FromoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPostCreate(oaDualInt1DTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDualInt1DTblValue_FromoaDualInt1DTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPostModify(oaDualInt1DTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDualInt1DTblValue_FromoaDualInt1DTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPreDestroy(oaDualInt1DTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDualInt1DTblValue_FromoaDualInt1DTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPreModify(oaDualInt1DTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDualInt1DTblValue_FromoaDualInt1DTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDualInt1DTblValue)\n"
"    Calls: virtual void onPostCreate(oaDualInt1DTblValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDualInt1DTblValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaDualInt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDualInt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDualInt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDualInt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDualInt1DTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaDualInt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDualInt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDualInt1DTblValue)\n"
"    Calls: virtual void onPreDestroy(oaDualInt1DTblValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDualInt1DTblValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaDualInt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDualInt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDualInt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDualInt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDualInt1DTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaDualInt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDualInt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDualInt1DTblValue)\n"
"    Calls: void notifyPostCreateObservers(oaDualInt1DTblValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDualInt1DTblValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDualInt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDualInt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDualInt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDualInt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDualInt1DTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDualInt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDualInt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDualInt1DTblValue)\n"
"    Calls: void notifyPreDestroyObservers(oaDualInt1DTblValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDualInt1DTblValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDualInt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDualInt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDualInt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDualInt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDualInt1DTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDualInt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDualInt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDualIntValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaDualIntValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaDualIntValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaDualIntValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaDualIntValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaDualIntValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaDualIntValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaDualIntValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaDualIntValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_FromoaStdObserver_oaDualIntValue_oaValueModTypeEnum(oaStdObserver_oaDualIntValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum::pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaDualIntValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum::pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaDualIntValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPostCreate(oaDualIntValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDualIntValue_FromoaDualIntValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPostModify(oaDualIntValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDualIntValue_FromoaDualIntValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPreDestroy(oaDualIntValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaDualIntValue_FromoaDualIntValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPreModify(oaDualIntValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaDualIntValue_FromoaDualIntValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaDualIntValue)\n"
"    Calls: virtual void onPostCreate(oaDualIntValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaDualIntValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDualIntValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject*)ob;

    PyParamoaDualIntValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDualIntValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaDualIntValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaDualIntValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaDualIntValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDualIntValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject*)ob;

    PyParamoaDualIntValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDualIntValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaDualIntValue)\n"
"    Calls: virtual void onPreDestroy(oaDualIntValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaDualIntValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDualIntValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject*)ob;

    PyParamoaDualIntValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDualIntValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaDualIntValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaDualIntValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaDualIntValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaDualIntValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject*)ob;

    PyParamoaDualIntValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDualIntValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaDualIntValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaDualIntValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaDualIntValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaDualIntValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaDualIntValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaDualIntValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaDualIntValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaDualIntValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaDualIntValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaDualIntValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaDualIntValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaDualIntValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaDualIntValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaDualIntValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaDualIntValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaDualIntValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaDualIntValue)\n"
"    Calls: void notifyPostCreateObservers(oaDualIntValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaDualIntValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDualIntValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDualIntValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDualIntValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaDualIntValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaDualIntValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaDualIntValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDualIntValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDualIntValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDualIntValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaDualIntValue)\n"
"    Calls: void notifyPreDestroyObservers(oaDualIntValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaDualIntValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDualIntValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDualIntValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDualIntValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaDualIntValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaDualIntValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaDualIntValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaDualIntValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDualIntValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDualIntValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaDualIntValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaDualIntValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaDualIntValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaDualIntValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaDualIntValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaDualIntValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaDualIntValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaEllipse_oaShapeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaEllipse_oaShapeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaEllipse_oaShapeModTypeEnum_tp_dealloc(PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaEllipse_oaShapeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaEllipse_oaShapeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaEllipse_oaShapeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaEllipse_oaShapeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaEllipse_oaShapeModTypeEnum v1;
    PyParamoaStdObserver_oaEllipse_oaShapeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaEllipse_oaShapeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaEllipse_oaShapeModTypeEnum*) ((PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaEllipse_oaShapeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_FromoaStdObserver_oaEllipse_oaShapeModTypeEnum(oaStdObserver_oaEllipse_oaShapeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum::pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaEllipse_oaShapeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum::pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaEllipse_oaShapeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPostCreate(oaEllipse* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaEllipse_FromoaEllipse(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPostModify(oaEllipse* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaEllipse_FromoaEllipse(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPreDestroy(oaEllipse* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaEllipse_FromoaEllipse(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPreModify(oaEllipse* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaEllipse_FromoaEllipse(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaEllipse)\n"
"    Calls: virtual void onPostCreate(oaEllipse* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaEllipse,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEllipse_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject*)ob;

    PyParamoaEllipse p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEllipse_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaEllipse,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaEllipse* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaEllipse,simple-oaShapeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEllipse_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject*)ob;

    PyParamoaEllipse p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEllipse_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaEllipse)\n"
"    Calls: virtual void onPreDestroy(oaEllipse* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaEllipse,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEllipse_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject*)ob;

    PyParamoaEllipse p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEllipse_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaEllipse,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaEllipse* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaEllipse,simple-oaShapeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEllipse_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject*)ob;

    PyParamoaEllipse p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEllipse_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEllipse_oaShapeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaEllipse_oaShapeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaEllipse_oaShapeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaEllipse_oaShapeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaEllipse_oaShapeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaEllipse_oaShapeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaEllipse_oaShapeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaEllipse_oaShapeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaEllipse_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaEllipse_oaShapeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaEllipse_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaEllipse_oaShapeModTypeEnum",
    sizeof(PyoaStdObserver_oaEllipse_oaShapeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaEllipse_oaShapeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaEllipse_oaShapeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaEllipse_oaShapeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaEllipse_oaShapeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaEllipse_oaShapeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaEllipse_oaShapeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaEllipse_oaShapeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaEllipse)\n"
"    Calls: void notifyPostCreateObservers(oaEllipse* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaEllipse,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEllipse p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEllipse_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEllipse_oaShapeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaEllipse,oaShapeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaEllipse* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaEllipse,simple-oaShapeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEllipse p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEllipse_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEllipse_oaShapeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaEllipse)\n"
"    Calls: void notifyPreDestroyObservers(oaEllipse* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaEllipse,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEllipse p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEllipse_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEllipse_oaShapeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaEllipse_oaShapeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaEllipse,oaShapeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaEllipse* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaEllipse,simple-oaShapeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEllipse p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEllipse_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEllipse_oaShapeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaEllipse_oaShapeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaEllipse_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaEllipse_oaShapeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaEllipse_oaShapeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaEllipse_oaShapeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaEllipse_oaShapeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject* self = (PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaElmore_oaElmoreModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum* p=new pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaElmore_oaElmoreModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum* p=new pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaElmore_oaElmoreModTypeEnum_tp_dealloc(PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaElmore_oaElmoreModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaElmore_oaElmoreModTypeEnum value;
    int convert_status=PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaElmore_oaElmoreModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaElmore_oaElmoreModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaElmore_oaElmoreModTypeEnum v1;
    PyParamoaStdObserver_oaElmore_oaElmoreModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaElmore_oaElmoreModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaElmore_oaElmoreModTypeEnum*) ((PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaElmore_oaElmoreModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_FromoaStdObserver_oaElmore_oaElmoreModTypeEnum(oaStdObserver_oaElmore_oaElmoreModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject* self = (PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum::pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaElmore_oaElmoreModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum::pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaElmore_oaElmoreModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPostCreate(oaElmore* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaElmore_FromoaElmore(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPostModify(oaElmore* p1,oaElmoreModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaElmore_FromoaElmore(p1));
    PyTuple_SetItem(args,1,PyoaElmoreModTypeEnum_FromoaElmoreModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPreDestroy(oaElmore* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaElmore_FromoaElmore(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPreModify(oaElmore* p1,oaElmoreModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaElmore_FromoaElmore(p1));
    PyTuple_SetItem(args,1,PyoaElmoreModTypeEnum_FromoaElmoreModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaElmore)\n"
"    Calls: virtual void onPostCreate(oaElmore* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaElmore,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaElmore_oaElmoreModTypeEnum data;
    int convert_status=PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject* self=(PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject*)ob;

    PyParamoaElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaElmore,oaElmoreModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaElmore* object,oaElmoreModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaElmore,simple-oaElmoreModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaElmore_oaElmoreModTypeEnum data;
    int convert_status=PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject* self=(PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject*)ob;

    PyParamoaElmore p1;
    PyParamoaElmoreModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaElmore_Convert,&p1,
          &PyoaElmoreModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaElmore)\n"
"    Calls: virtual void onPreDestroy(oaElmore* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaElmore,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaElmore_oaElmoreModTypeEnum data;
    int convert_status=PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject* self=(PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject*)ob;

    PyParamoaElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaElmore,oaElmoreModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaElmore* object,oaElmoreModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaElmore,simple-oaElmoreModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaElmore_oaElmoreModTypeEnum data;
    int convert_status=PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject* self=(PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject*)ob;

    PyParamoaElmore p1;
    PyParamoaElmoreModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaElmore_Convert,&p1,
          &PyoaElmoreModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaElmore_oaElmoreModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaElmore_oaElmoreModTypeEnum data;
  int convert_status=PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaElmore_oaElmoreModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaElmore_oaElmoreModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaElmore_oaElmoreModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaElmore_oaElmoreModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaElmore_oaElmoreModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaElmore_oaElmoreModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaElmore_oaElmoreModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaElmore_oaElmoreModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaElmore_oaElmoreModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaElmore_oaElmoreModTypeEnum",
    sizeof(PyoaStdObserver_oaElmore_oaElmoreModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaElmore_oaElmoreModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaElmore_oaElmoreModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaElmore_oaElmoreModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaElmore_oaElmoreModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaElmore_oaElmoreModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaElmore_oaElmoreModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaElmore_oaElmoreModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaElmore)\n"
"    Calls: void notifyPostCreateObservers(oaElmore* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaElmore,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaElmore_oaElmoreModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaElmore,oaElmoreModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaElmore* object,oaElmoreModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaElmore,simple-oaElmoreModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaElmore p1;
    PyParamoaElmoreModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaElmore_Convert,&p1,
          &PyoaElmoreModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaElmore_oaElmoreModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaElmore)\n"
"    Calls: void notifyPreDestroyObservers(oaElmore* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaElmore,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaElmore_oaElmoreModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaElmore_oaElmoreModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaElmore,oaElmoreModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaElmore* object,oaElmoreModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaElmore,simple-oaElmoreModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaElmore p1;
    PyParamoaElmoreModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaElmore_Convert,&p1,
          &PyoaElmoreModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaElmore_oaElmoreModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaElmore_oaElmoreModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaElmore_oaElmoreModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaElmore_oaElmoreModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaElmore_oaElmoreModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaElmore_oaElmoreModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaElmore_oaElmoreModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaEnumProp_oaPropModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaEnumProp_oaPropModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaEnumProp_oaPropModTypeEnum_tp_dealloc(PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaEnumProp_oaPropModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaEnumProp_oaPropModTypeEnum value;
    int convert_status=PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaEnumProp_oaPropModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaEnumProp_oaPropModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaEnumProp_oaPropModTypeEnum v1;
    PyParamoaStdObserver_oaEnumProp_oaPropModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaEnumProp_oaPropModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaEnumProp_oaPropModTypeEnum*) ((PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaEnumProp_oaPropModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_FromoaStdObserver_oaEnumProp_oaPropModTypeEnum(oaStdObserver_oaEnumProp_oaPropModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum::pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaEnumProp_oaPropModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum::pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaEnumProp_oaPropModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPostCreate(oaEnumProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaEnumProp_FromoaEnumProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPostModify(oaEnumProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaEnumProp_FromoaEnumProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPreDestroy(oaEnumProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaEnumProp_FromoaEnumProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPreModify(oaEnumProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaEnumProp_FromoaEnumProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaEnumProp)\n"
"    Calls: virtual void onPostCreate(oaEnumProp* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaEnumProp,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEnumProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject*)ob;

    PyParamoaEnumProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEnumProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaEnumProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaEnumProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaEnumProp,simple-oaPropModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEnumProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject*)ob;

    PyParamoaEnumProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEnumProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaEnumProp)\n"
"    Calls: virtual void onPreDestroy(oaEnumProp* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaEnumProp,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEnumProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject*)ob;

    PyParamoaEnumProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEnumProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaEnumProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaEnumProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaEnumProp,simple-oaPropModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEnumProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject*)ob;

    PyParamoaEnumProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEnumProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEnumProp_oaPropModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaEnumProp_oaPropModTypeEnum data;
  int convert_status=PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaEnumProp_oaPropModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaEnumProp_oaPropModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaEnumProp_oaPropModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaEnumProp_oaPropModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaEnumProp_oaPropModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaEnumProp_oaPropModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaEnumProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaEnumProp_oaPropModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaEnumProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaEnumProp_oaPropModTypeEnum",
    sizeof(PyoaStdObserver_oaEnumProp_oaPropModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaEnumProp_oaPropModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaEnumProp_oaPropModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaEnumProp_oaPropModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaEnumProp_oaPropModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaEnumProp_oaPropModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaEnumProp_oaPropModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaEnumProp_oaPropModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaEnumProp)\n"
"    Calls: void notifyPostCreateObservers(oaEnumProp* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaEnumProp,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEnumProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEnumProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEnumProp_oaPropModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaEnumProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaEnumProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaEnumProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEnumProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEnumProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEnumProp_oaPropModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaEnumProp)\n"
"    Calls: void notifyPreDestroyObservers(oaEnumProp* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaEnumProp,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEnumProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEnumProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEnumProp_oaPropModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaEnumProp_oaPropModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaEnumProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaEnumProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaEnumProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEnumProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEnumProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEnumProp_oaPropModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaEnumProp_oaPropModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaEnumProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaEnumProp_oaPropModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaEnumProp_oaPropModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaEnumProp_oaPropModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaEnumProp_oaPropModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaEvalText_oaShapeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaEvalText_oaShapeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaEvalText_oaShapeModTypeEnum_tp_dealloc(PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaEvalText_oaShapeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaEvalText_oaShapeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[65];
    sprintf(buffer,"<oaStdObserver_oaEvalText_oaShapeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaEvalText_oaShapeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaEvalText_oaShapeModTypeEnum v1;
    PyParamoaStdObserver_oaEvalText_oaShapeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaEvalText_oaShapeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaEvalText_oaShapeModTypeEnum*) ((PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaEvalText_oaShapeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_FromoaStdObserver_oaEvalText_oaShapeModTypeEnum(oaStdObserver_oaEvalText_oaShapeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum::pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaEvalText_oaShapeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum::pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaEvalText_oaShapeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPostCreate(oaEvalText* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaEvalText_FromoaEvalText(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPostModify(oaEvalText* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaEvalText_FromoaEvalText(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPreDestroy(oaEvalText* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaEvalText_FromoaEvalText(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPreModify(oaEvalText* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaEvalText_FromoaEvalText(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaEvalText)\n"
"    Calls: virtual void onPostCreate(oaEvalText* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaEvalText,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEvalText_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject*)ob;

    PyParamoaEvalText p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEvalText_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaEvalText,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaEvalText* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaEvalText,simple-oaShapeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEvalText_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject*)ob;

    PyParamoaEvalText p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEvalText_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaEvalText)\n"
"    Calls: virtual void onPreDestroy(oaEvalText* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaEvalText,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEvalText_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject*)ob;

    PyParamoaEvalText p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEvalText_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaEvalText,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaEvalText* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaEvalText,simple-oaShapeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaEvalText_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject*)ob;

    PyParamoaEvalText p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEvalText_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaEvalText_oaShapeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaEvalText_oaShapeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaEvalText_oaShapeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaEvalText_oaShapeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaEvalText_oaShapeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaEvalText_oaShapeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaEvalText_oaShapeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaEvalText_oaShapeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaEvalText_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaEvalText_oaShapeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaEvalText_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaEvalText_oaShapeModTypeEnum",
    sizeof(PyoaStdObserver_oaEvalText_oaShapeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaEvalText_oaShapeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaEvalText_oaShapeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaEvalText_oaShapeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaEvalText_oaShapeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaEvalText_oaShapeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaEvalText_oaShapeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaEvalText_oaShapeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaEvalText)\n"
"    Calls: void notifyPostCreateObservers(oaEvalText* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaEvalText,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEvalText p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEvalText_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEvalText_oaShapeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaEvalText,oaShapeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaEvalText* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaEvalText,simple-oaShapeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEvalText p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEvalText_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEvalText_oaShapeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaEvalText)\n"
"    Calls: void notifyPreDestroyObservers(oaEvalText* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaEvalText,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEvalText p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEvalText_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEvalText_oaShapeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaEvalText_oaShapeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaEvalText,oaShapeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaEvalText* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaEvalText,simple-oaShapeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaEvalText p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaEvalText_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaEvalText_oaShapeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaEvalText_oaShapeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaEvalText_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaEvalText_oaShapeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaEvalText_oaShapeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaEvalText_oaShapeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaEvalText_oaShapeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject* self = (PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum* p=new pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum* p=new pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_tp_dealloc(PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum value;
    int convert_status=PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[74];
    sprintf(buffer,"<oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum v1;
    PyParamoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum*) ((PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_FromoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject* self = (PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPostCreate(oaFigGroupMem* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFigGroupMem_FromoaFigGroupMem(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPostModify(oaFigGroupMem* p1,oaFigGroupMemModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFigGroupMem_FromoaFigGroupMem(p1));
    PyTuple_SetItem(args,1,PyoaFigGroupMemModTypeEnum_FromoaFigGroupMemModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPreDestroy(oaFigGroupMem* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFigGroupMem_FromoaFigGroupMem(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPreModify(oaFigGroupMem* p1,oaFigGroupMemModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFigGroupMem_FromoaFigGroupMem(p1));
    PyTuple_SetItem(args,1,PyoaFigGroupMemModTypeEnum_FromoaFigGroupMemModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaFigGroupMem)\n"
"    Calls: virtual void onPostCreate(oaFigGroupMem* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaFigGroupMem,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject* self=(PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject*)ob;

    PyParamoaFigGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaFigGroupMem,oaFigGroupMemModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaFigGroupMem* object,oaFigGroupMemModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaFigGroupMem,simple-oaFigGroupMemModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject* self=(PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject*)ob;

    PyParamoaFigGroupMem p1;
    PyParamoaFigGroupMemModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroupMem_Convert,&p1,
          &PyoaFigGroupMemModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaFigGroupMem)\n"
"    Calls: virtual void onPreDestroy(oaFigGroupMem* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaFigGroupMem,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject* self=(PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject*)ob;

    PyParamoaFigGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaFigGroupMem,oaFigGroupMemModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaFigGroupMem* object,oaFigGroupMemModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaFigGroupMem,simple-oaFigGroupMemModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject* self=(PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject*)ob;

    PyParamoaFigGroupMem p1;
    PyParamoaFigGroupMemModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroupMem_Convert,&p1,
          &PyoaFigGroupMemModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum data;
  int convert_status=PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum",
    sizeof(PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaFigGroupMem)\n"
"    Calls: void notifyPostCreateObservers(oaFigGroupMem* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaFigGroupMem,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFigGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaFigGroupMem,oaFigGroupMemModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaFigGroupMem* object,oaFigGroupMemModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaFigGroupMem,simple-oaFigGroupMemModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFigGroupMem p1;
    PyParamoaFigGroupMemModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroupMem_Convert,&p1,
          &PyoaFigGroupMemModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaFigGroupMem)\n"
"    Calls: void notifyPreDestroyObservers(oaFigGroupMem* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaFigGroupMem,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFigGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaFigGroupMem,oaFigGroupMemModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaFigGroupMem* object,oaFigGroupMemModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaFigGroupMem,simple-oaFigGroupMemModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFigGroupMem p1;
    PyParamoaFigGroupMemModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroupMem_Convert,&p1,
          &PyoaFigGroupMemModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject* self = (PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum* p=new pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum* p=new pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_tp_dealloc(PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum value;
    int convert_status=PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum v1;
    PyParamoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum*) ((PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_FromoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject* self = (PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPostCreate(oaFigGroup* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFigGroup_FromoaFigGroup(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPostModify(oaFigGroup* p1,oaFigGroupModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFigGroup_FromoaFigGroup(p1));
    PyTuple_SetItem(args,1,PyoaFigGroupModTypeEnum_FromoaFigGroupModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPreDestroy(oaFigGroup* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFigGroup_FromoaFigGroup(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPreModify(oaFigGroup* p1,oaFigGroupModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFigGroup_FromoaFigGroup(p1));
    PyTuple_SetItem(args,1,PyoaFigGroupModTypeEnum_FromoaFigGroupModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaFigGroup)\n"
"    Calls: virtual void onPostCreate(oaFigGroup* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaFigGroup,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject* self=(PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject*)ob;

    PyParamoaFigGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaFigGroup,oaFigGroupModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaFigGroup* object,oaFigGroupModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaFigGroup,simple-oaFigGroupModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject* self=(PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject*)ob;

    PyParamoaFigGroup p1;
    PyParamoaFigGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroup_Convert,&p1,
          &PyoaFigGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaFigGroup)\n"
"    Calls: virtual void onPreDestroy(oaFigGroup* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaFigGroup,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject* self=(PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject*)ob;

    PyParamoaFigGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaFigGroup,oaFigGroupModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaFigGroup* object,oaFigGroupModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaFigGroup,simple-oaFigGroupModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject* self=(PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject*)ob;

    PyParamoaFigGroup p1;
    PyParamoaFigGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroup_Convert,&p1,
          &PyoaFigGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum data;
  int convert_status=PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum",
    sizeof(PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaFigGroup)\n"
"    Calls: void notifyPostCreateObservers(oaFigGroup* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaFigGroup,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFigGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaFigGroup,oaFigGroupModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaFigGroup* object,oaFigGroupModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaFigGroup,simple-oaFigGroupModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFigGroup p1;
    PyParamoaFigGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroup_Convert,&p1,
          &PyoaFigGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaFigGroup)\n"
"    Calls: void notifyPreDestroyObservers(oaFigGroup* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaFigGroup,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFigGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaFigGroup,oaFigGroupModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaFigGroup* object,oaFigGroupModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaFigGroup,simple-oaFigGroupModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFigGroup p1;
    PyParamoaFigGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroup_Convert,&p1,
          &PyoaFigGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFloatProp_oaPropModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFloatProp_oaPropModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaFloatProp_oaPropModTypeEnum_tp_dealloc(PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaFloatProp_oaPropModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaFloatProp_oaPropModTypeEnum value;
    int convert_status=PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[65];
    sprintf(buffer,"<oaStdObserver_oaFloatProp_oaPropModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaFloatProp_oaPropModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaFloatProp_oaPropModTypeEnum v1;
    PyParamoaStdObserver_oaFloatProp_oaPropModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaFloatProp_oaPropModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaFloatProp_oaPropModTypeEnum*) ((PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaFloatProp_oaPropModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_FromoaStdObserver_oaFloatProp_oaPropModTypeEnum(oaStdObserver_oaFloatProp_oaPropModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum::pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaFloatProp_oaPropModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum::pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaFloatProp_oaPropModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPostCreate(oaFloatProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFloatProp_FromoaFloatProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPostModify(oaFloatProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFloatProp_FromoaFloatProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPreDestroy(oaFloatProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFloatProp_FromoaFloatProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPreModify(oaFloatProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFloatProp_FromoaFloatProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaFloatProp)\n"
"    Calls: virtual void onPostCreate(oaFloatProp* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaFloatProp,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFloatProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject*)ob;

    PyParamoaFloatProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloatProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaFloatProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaFloatProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaFloatProp,simple-oaPropModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFloatProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject*)ob;

    PyParamoaFloatProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFloatProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaFloatProp)\n"
"    Calls: virtual void onPreDestroy(oaFloatProp* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaFloatProp,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFloatProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject*)ob;

    PyParamoaFloatProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloatProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaFloatProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaFloatProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaFloatProp,simple-oaPropModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFloatProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject*)ob;

    PyParamoaFloatProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFloatProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFloatProp_oaPropModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaFloatProp_oaPropModTypeEnum data;
  int convert_status=PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaFloatProp_oaPropModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaFloatProp_oaPropModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaFloatProp_oaPropModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaFloatProp_oaPropModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaFloatProp_oaPropModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaFloatProp_oaPropModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaFloatProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaFloatProp_oaPropModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaFloatProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaFloatProp_oaPropModTypeEnum",
    sizeof(PyoaStdObserver_oaFloatProp_oaPropModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaFloatProp_oaPropModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaFloatProp_oaPropModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaFloatProp_oaPropModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaFloatProp_oaPropModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaFloatProp_oaPropModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaFloatProp_oaPropModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaFloatProp_oaPropModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaFloatProp)\n"
"    Calls: void notifyPostCreateObservers(oaFloatProp* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaFloatProp,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloatProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFloatProp_oaPropModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaFloatProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaFloatProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaFloatProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFloatProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFloatProp_oaPropModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaFloatProp)\n"
"    Calls: void notifyPreDestroyObservers(oaFloatProp* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaFloatProp,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloatProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFloatProp_oaPropModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaFloatProp_oaPropModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaFloatProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaFloatProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaFloatProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFloatProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFloatProp_oaPropModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaFloatProp_oaPropModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaFloatProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaFloatProp_oaPropModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaFloatProp_oaPropModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaFloatProp_oaPropModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaFloatProp_oaPropModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_tp_dealloc(PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum value;
    int convert_status=PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum v1;
    PyParamoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum*) ((PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_FromoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPostCreate(oaFloatRangeProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFloatRangeProp_FromoaFloatRangeProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPostModify(oaFloatRangeProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFloatRangeProp_FromoaFloatRangeProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPreDestroy(oaFloatRangeProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFloatRangeProp_FromoaFloatRangeProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPreModify(oaFloatRangeProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFloatRangeProp_FromoaFloatRangeProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaFloatRangeProp)\n"
"    Calls: virtual void onPostCreate(oaFloatRangeProp* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaFloatRangeProp,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaFloatRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloatRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaFloatRangeProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaFloatRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaFloatRangeProp,simple-oaPropModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaFloatRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFloatRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaFloatRangeProp)\n"
"    Calls: virtual void onPreDestroy(oaFloatRangeProp* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaFloatRangeProp,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaFloatRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloatRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaFloatRangeProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaFloatRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaFloatRangeProp,simple-oaPropModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaFloatRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFloatRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum data;
  int convert_status=PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum",
    sizeof(PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaFloatRangeProp)\n"
"    Calls: void notifyPostCreateObservers(oaFloatRangeProp* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaFloatRangeProp,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloatRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaFloatRangeProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaFloatRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaFloatRangeProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFloatRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaFloatRangeProp)\n"
"    Calls: void notifyPreDestroyObservers(oaFloatRangeProp* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaFloatRangeProp,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloatRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaFloatRangeProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaFloatRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaFloatRangeProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFloatRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_FromoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPostCreate(oaFlt1DTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFlt1DTblValue_FromoaFlt1DTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPostModify(oaFlt1DTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFlt1DTblValue_FromoaFlt1DTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPreDestroy(oaFlt1DTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFlt1DTblValue_FromoaFlt1DTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPreModify(oaFlt1DTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFlt1DTblValue_FromoaFlt1DTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaFlt1DTblValue)\n"
"    Calls: virtual void onPostCreate(oaFlt1DTblValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaFlt1DTblValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFlt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFlt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaFlt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaFlt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaFlt1DTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFlt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFlt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaFlt1DTblValue)\n"
"    Calls: virtual void onPreDestroy(oaFlt1DTblValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaFlt1DTblValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFlt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFlt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaFlt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaFlt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaFlt1DTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFlt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFlt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaFlt1DTblValue)\n"
"    Calls: void notifyPostCreateObservers(oaFlt1DTblValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaFlt1DTblValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFlt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFlt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaFlt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaFlt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaFlt1DTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFlt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFlt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaFlt1DTblValue)\n"
"    Calls: void notifyPreDestroyObservers(oaFlt1DTblValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaFlt1DTblValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFlt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFlt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaFlt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaFlt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaFlt1DTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFlt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFlt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_FromoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPostCreate(oaFlt2DTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFlt2DTblValue_FromoaFlt2DTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPostModify(oaFlt2DTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFlt2DTblValue_FromoaFlt2DTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPreDestroy(oaFlt2DTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFlt2DTblValue_FromoaFlt2DTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPreModify(oaFlt2DTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFlt2DTblValue_FromoaFlt2DTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaFlt2DTblValue)\n"
"    Calls: virtual void onPostCreate(oaFlt2DTblValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaFlt2DTblValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFlt2DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFlt2DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaFlt2DTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaFlt2DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaFlt2DTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFlt2DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFlt2DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaFlt2DTblValue)\n"
"    Calls: virtual void onPreDestroy(oaFlt2DTblValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaFlt2DTblValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFlt2DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFlt2DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaFlt2DTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaFlt2DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaFlt2DTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFlt2DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFlt2DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaFlt2DTblValue)\n"
"    Calls: void notifyPostCreateObservers(oaFlt2DTblValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaFlt2DTblValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFlt2DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFlt2DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaFlt2DTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaFlt2DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaFlt2DTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFlt2DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFlt2DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaFlt2DTblValue)\n"
"    Calls: void notifyPreDestroyObservers(oaFlt2DTblValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaFlt2DTblValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFlt2DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFlt2DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaFlt2DTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaFlt2DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaFlt2DTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFlt2DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFlt2DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[74];
    sprintf(buffer,"<oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_FromoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPostCreate(oaFltIntFltTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFltIntFltTblValue_FromoaFltIntFltTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPostModify(oaFltIntFltTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFltIntFltTblValue_FromoaFltIntFltTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPreDestroy(oaFltIntFltTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFltIntFltTblValue_FromoaFltIntFltTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPreModify(oaFltIntFltTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFltIntFltTblValue_FromoaFltIntFltTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaFltIntFltTblValue)\n"
"    Calls: virtual void onPostCreate(oaFltIntFltTblValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaFltIntFltTblValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFltIntFltTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFltIntFltTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaFltIntFltTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaFltIntFltTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaFltIntFltTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFltIntFltTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFltIntFltTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaFltIntFltTblValue)\n"
"    Calls: virtual void onPreDestroy(oaFltIntFltTblValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaFltIntFltTblValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFltIntFltTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFltIntFltTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaFltIntFltTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaFltIntFltTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaFltIntFltTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFltIntFltTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFltIntFltTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaFltIntFltTblValue)\n"
"    Calls: void notifyPostCreateObservers(oaFltIntFltTblValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaFltIntFltTblValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFltIntFltTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFltIntFltTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaFltIntFltTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaFltIntFltTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaFltIntFltTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFltIntFltTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFltIntFltTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaFltIntFltTblValue)\n"
"    Calls: void notifyPreDestroyObservers(oaFltIntFltTblValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaFltIntFltTblValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFltIntFltTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFltIntFltTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaFltIntFltTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaFltIntFltTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaFltIntFltTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFltIntFltTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFltIntFltTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaFltValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFltValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFltValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaFltValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaFltValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaFltValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[65];
    sprintf(buffer,"<oaStdObserver_oaFltValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaFltValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaFltValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaFltValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaFltValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaFltValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaFltValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaFltValue_oaValueModTypeEnum_FromoaStdObserver_oaFltValue_oaValueModTypeEnum(oaStdObserver_oaFltValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum::pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaFltValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum::pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaFltValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum::onPostCreate(oaFltValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFltValue_FromoaFltValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum::onPostModify(oaFltValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFltValue_FromoaFltValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum::onPreDestroy(oaFltValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFltValue_FromoaFltValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFltValue_oaValueModTypeEnum::onPreModify(oaFltValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFltValue_FromoaFltValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFltValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFltValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaFltValue)\n"
"    Calls: virtual void onPostCreate(oaFltValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaFltValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFltValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFltValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFltValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFltValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaFltValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaFltValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaFltValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFltValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFltValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFltValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFltValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaFltValue)\n"
"    Calls: virtual void onPreDestroy(oaFltValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaFltValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFltValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFltValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFltValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFltValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaFltValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaFltValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaFltValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFltValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject*)ob;

    PyParamoaFltValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFltValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFltValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaFltValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaFltValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaFltValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaFltValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaFltValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaFltValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaFltValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaFltValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaFltValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaFltValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaFltValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaFltValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaFltValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaFltValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFltValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaFltValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaFltValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaFltValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaFltValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaFltValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaFltValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaFltValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaFltValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaFltValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaFltValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaFltValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaFltValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFltValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaFltValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaFltValue)\n"
"    Calls: void notifyPostCreateObservers(oaFltValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaFltValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFltValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFltValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFltValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaFltValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaFltValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaFltValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFltValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFltValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFltValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaFltValue)\n"
"    Calls: void notifyPreDestroyObservers(oaFltValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaFltValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFltValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFltValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFltValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaFltValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaFltValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaFltValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaFltValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFltValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFltValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFltValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaFltValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaFltValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaFltValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaFltValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaFltValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaFltValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaFltValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaFltValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaFltValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaFltValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject* self = (PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum* p=new pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum* p=new pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum v1;
    PyParamoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum*) ((PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_FromoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject* self = (PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPostCreate(oaFrameInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFrameInst_FromoaFrameInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPostModify(oaFrameInst* p1,oaFrameInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFrameInst_FromoaFrameInst(p1));
    PyTuple_SetItem(args,1,PyoaFrameInstModTypeEnum_FromoaFrameInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPreDestroy(oaFrameInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFrameInst_FromoaFrameInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPreModify(oaFrameInst* p1,oaFrameInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFrameInst_FromoaFrameInst(p1));
    PyTuple_SetItem(args,1,PyoaFrameInstModTypeEnum_FromoaFrameInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaFrameInst)\n"
"    Calls: virtual void onPostCreate(oaFrameInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaFrameInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject* self=(PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject*)ob;

    PyParamoaFrameInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrameInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaFrameInst,oaFrameInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaFrameInst* object,oaFrameInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaFrameInst,simple-oaFrameInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject* self=(PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject*)ob;

    PyParamoaFrameInst p1;
    PyParamoaFrameInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrameInst_Convert,&p1,
          &PyoaFrameInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaFrameInst)\n"
"    Calls: virtual void onPreDestroy(oaFrameInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaFrameInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject* self=(PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject*)ob;

    PyParamoaFrameInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrameInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaFrameInst,oaFrameInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaFrameInst* object,oaFrameInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaFrameInst,simple-oaFrameInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject* self=(PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject*)ob;

    PyParamoaFrameInst p1;
    PyParamoaFrameInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrameInst_Convert,&p1,
          &PyoaFrameInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum",
    sizeof(PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaFrameInst)\n"
"    Calls: void notifyPostCreateObservers(oaFrameInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaFrameInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFrameInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrameInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaFrameInst,oaFrameInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaFrameInst* object,oaFrameInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaFrameInst,simple-oaFrameInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFrameInst p1;
    PyParamoaFrameInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrameInst_Convert,&p1,
          &PyoaFrameInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaFrameInst)\n"
"    Calls: void notifyPreDestroyObservers(oaFrameInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaFrameInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFrameInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrameInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaFrameInst,oaFrameInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaFrameInst* object,oaFrameInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaFrameInst,simple-oaFrameInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFrameInst p1;
    PyParamoaFrameInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrameInst_Convert,&p1,
          &PyoaFrameInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaFrame_oaFrameModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject* self = (PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFrame_oaFrameModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum* p=new pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaFrame_oaFrameModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum* p=new pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaFrame_oaFrameModTypeEnum_tp_dealloc(PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaFrame_oaFrameModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaFrame_oaFrameModTypeEnum value;
    int convert_status=PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[62];
    sprintf(buffer,"<oaStdObserver_oaFrame_oaFrameModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaFrame_oaFrameModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaFrame_oaFrameModTypeEnum v1;
    PyParamoaStdObserver_oaFrame_oaFrameModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaFrame_oaFrameModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaFrame_oaFrameModTypeEnum*) ((PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaFrame_oaFrameModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaFrame_oaFrameModTypeEnum_FromoaStdObserver_oaFrame_oaFrameModTypeEnum(oaStdObserver_oaFrame_oaFrameModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject* self = (PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum::pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaFrame_oaFrameModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum::pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaFrame_oaFrameModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum::onPostCreate(oaFrame* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrame_oaFrameModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFrame_FromoaFrame(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrame_oaFrameModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum::onPostModify(oaFrame* p1,oaFrameModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrame_oaFrameModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFrame_FromoaFrame(p1));
    PyTuple_SetItem(args,1,PyoaFrameModTypeEnum_FromoaFrameModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrame_oaFrameModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum::onPreDestroy(oaFrame* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrame_oaFrameModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaFrame_FromoaFrame(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrame_oaFrameModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaFrame_oaFrameModTypeEnum::onPreModify(oaFrame* p1,oaFrameModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrame_oaFrameModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaFrame_FromoaFrame(p1));
    PyTuple_SetItem(args,1,PyoaFrameModTypeEnum_FromoaFrameModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaFrame_oaFrameModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFrame_oaFrameModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaFrame)\n"
"    Calls: virtual void onPostCreate(oaFrame* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaFrame,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFrame_oaFrameModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject* self=(PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject*)ob;

    PyParamoaFrame p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrame_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFrame_oaFrameModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrame_oaFrameModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaFrame,oaFrameModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaFrame* object,oaFrameModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaFrame,simple-oaFrameModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFrame_oaFrameModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject* self=(PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject*)ob;

    PyParamoaFrame p1;
    PyParamoaFrameModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrame_Convert,&p1,
          &PyoaFrameModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFrame_oaFrameModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrame_oaFrameModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaFrame)\n"
"    Calls: virtual void onPreDestroy(oaFrame* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaFrame,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFrame_oaFrameModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject* self=(PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject*)ob;

    PyParamoaFrame p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrame_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFrame_oaFrameModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrame_oaFrameModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaFrame,oaFrameModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaFrame* object,oaFrameModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaFrame,simple-oaFrameModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaFrame_oaFrameModTypeEnum data;
    int convert_status=PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject* self=(PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject*)ob;

    PyParamoaFrame p1;
    PyParamoaFrameModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrame_Convert,&p1,
          &PyoaFrameModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaFrame_oaFrameModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaFrame_oaFrameModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaFrame_oaFrameModTypeEnum data;
  int convert_status=PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaFrame_oaFrameModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaFrame_oaFrameModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaFrame_oaFrameModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaFrame_oaFrameModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaFrame_oaFrameModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaFrame_oaFrameModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaFrame_oaFrameModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaFrame_oaFrameModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaFrame_oaFrameModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaFrame_oaFrameModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaFrame_oaFrameModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaFrame_oaFrameModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFrame_oaFrameModTypeEnum_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaFrame_oaFrameModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaFrame_oaFrameModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaFrame_oaFrameModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaFrame_oaFrameModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaFrame_oaFrameModTypeEnum",
    sizeof(PyoaStdObserver_oaFrame_oaFrameModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaFrame_oaFrameModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaFrame_oaFrameModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaFrame_oaFrameModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaFrame_oaFrameModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaFrame_oaFrameModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaFrame_oaFrameModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaFrame_oaFrameModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaFrame_oaFrameModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaFrame)\n"
"    Calls: void notifyPostCreateObservers(oaFrame* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaFrame,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFrame p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrame_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFrame_oaFrameModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaFrame,oaFrameModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaFrame* object,oaFrameModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaFrame,simple-oaFrameModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFrame p1;
    PyParamoaFrameModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrame_Convert,&p1,
          &PyoaFrameModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFrame_oaFrameModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaFrame)\n"
"    Calls: void notifyPreDestroyObservers(oaFrame* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaFrame,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFrame p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrame_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFrame_oaFrameModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaFrame_oaFrameModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaFrame,oaFrameModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaFrame* object,oaFrameModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaFrame,simple-oaFrameModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFrame p1;
    PyParamoaFrameModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrame_Convert,&p1,
          &PyoaFrameModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaFrame_oaFrameModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaFrame_oaFrameModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaFrame_oaFrameModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaFrame_oaFrameModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaFrame_oaFrameModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaFrame_oaFrameModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaFrame_oaFrameModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaFrame_oaFrameModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaFrame_oaFrameModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaFrame_oaFrameModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaFrame_oaFrameModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject* self = (PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum* p=new pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum* p=new pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_tp_dealloc(PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum value;
    int convert_status=PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[76];
    sprintf(buffer,"<oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum v1;
    PyParamoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum*) ((PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_FromoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject* self = (PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPostCreate(oaGCellPattern* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaGCellPattern_FromoaGCellPattern(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPostModify(oaGCellPattern* p1,oaGCellPatternModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaGCellPattern_FromoaGCellPattern(p1));
    PyTuple_SetItem(args,1,PyoaGCellPatternModTypeEnum_FromoaGCellPatternModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPreDestroy(oaGCellPattern* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaGCellPattern_FromoaGCellPattern(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPreModify(oaGCellPattern* p1,oaGCellPatternModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaGCellPattern_FromoaGCellPattern(p1));
    PyTuple_SetItem(args,1,PyoaGCellPatternModTypeEnum_FromoaGCellPatternModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaGCellPattern)\n"
"    Calls: virtual void onPostCreate(oaGCellPattern* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaGCellPattern,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject* self=(PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject*)ob;

    PyParamoaGCellPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGCellPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaGCellPattern,oaGCellPatternModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaGCellPattern* object,oaGCellPatternModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaGCellPattern,simple-oaGCellPatternModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject* self=(PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject*)ob;

    PyParamoaGCellPattern p1;
    PyParamoaGCellPatternModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGCellPattern_Convert,&p1,
          &PyoaGCellPatternModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaGCellPattern)\n"
"    Calls: virtual void onPreDestroy(oaGCellPattern* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaGCellPattern,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject* self=(PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject*)ob;

    PyParamoaGCellPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGCellPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaGCellPattern,oaGCellPatternModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaGCellPattern* object,oaGCellPatternModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaGCellPattern,simple-oaGCellPatternModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject* self=(PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject*)ob;

    PyParamoaGCellPattern p1;
    PyParamoaGCellPatternModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGCellPattern_Convert,&p1,
          &PyoaGCellPatternModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum data;
  int convert_status=PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum",
    sizeof(PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaGCellPattern)\n"
"    Calls: void notifyPostCreateObservers(oaGCellPattern* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaGCellPattern,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGCellPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGCellPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaGCellPattern,oaGCellPatternModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaGCellPattern* object,oaGCellPatternModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaGCellPattern,simple-oaGCellPatternModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGCellPattern p1;
    PyParamoaGCellPatternModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGCellPattern_Convert,&p1,
          &PyoaGCellPatternModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaGCellPattern)\n"
"    Calls: void notifyPreDestroyObservers(oaGCellPattern* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaGCellPattern,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGCellPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGCellPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaGCellPattern,oaGCellPatternModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaGCellPattern* object,oaGCellPatternModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaGCellPattern,simple-oaGCellPatternModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGCellPattern p1;
    PyParamoaGCellPatternModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGCellPattern_Convert,&p1,
          &PyoaGCellPatternModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject* self = (PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaGroundedNode_oaNodeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum* p=new pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaGroundedNode_oaNodeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum* p=new pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_tp_dealloc(PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaGroundedNode_oaNodeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaGroundedNode_oaNodeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaGroundedNode_oaNodeModTypeEnum v1;
    PyParamoaStdObserver_oaGroundedNode_oaNodeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaGroundedNode_oaNodeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaGroundedNode_oaNodeModTypeEnum*) ((PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_FromoaStdObserver_oaGroundedNode_oaNodeModTypeEnum(oaStdObserver_oaGroundedNode_oaNodeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject* self = (PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaGroundedNode_oaNodeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaGroundedNode_oaNodeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPostCreate(oaGroundedNode* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaGroundedNode_FromoaGroundedNode(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPostModify(oaGroundedNode* p1,oaNodeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaGroundedNode_FromoaGroundedNode(p1));
    PyTuple_SetItem(args,1,PyoaNodeModTypeEnum_FromoaNodeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPreDestroy(oaGroundedNode* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaGroundedNode_FromoaGroundedNode(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPreModify(oaGroundedNode* p1,oaNodeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaGroundedNode_FromoaGroundedNode(p1));
    PyTuple_SetItem(args,1,PyoaNodeModTypeEnum_FromoaNodeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaGroundedNode)\n"
"    Calls: virtual void onPostCreate(oaGroundedNode* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaGroundedNode,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroundedNode_oaNodeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject* self=(PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject*)ob;

    PyParamoaGroundedNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroundedNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaGroundedNode,oaNodeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaGroundedNode* object,oaNodeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaGroundedNode,simple-oaNodeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroundedNode_oaNodeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject* self=(PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject*)ob;

    PyParamoaGroundedNode p1;
    PyParamoaNodeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroundedNode_Convert,&p1,
          &PyoaNodeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaGroundedNode)\n"
"    Calls: virtual void onPreDestroy(oaGroundedNode* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaGroundedNode,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroundedNode_oaNodeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject* self=(PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject*)ob;

    PyParamoaGroundedNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroundedNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaGroundedNode,oaNodeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaGroundedNode* object,oaNodeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaGroundedNode,simple-oaNodeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroundedNode_oaNodeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject* self=(PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject*)ob;

    PyParamoaGroundedNode p1;
    PyParamoaNodeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroundedNode_Convert,&p1,
          &PyoaNodeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaGroundedNode_oaNodeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaGroundedNode_oaNodeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaGroundedNode_oaNodeModTypeEnum",
    sizeof(PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaGroundedNode)\n"
"    Calls: void notifyPostCreateObservers(oaGroundedNode* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaGroundedNode,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroundedNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroundedNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaGroundedNode,oaNodeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaGroundedNode* object,oaNodeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaGroundedNode,simple-oaNodeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroundedNode p1;
    PyParamoaNodeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroundedNode_Convert,&p1,
          &PyoaNodeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaGroundedNode)\n"
"    Calls: void notifyPreDestroyObservers(oaGroundedNode* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaGroundedNode,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroundedNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroundedNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaGroundedNode,oaNodeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaGroundedNode* object,oaNodeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaGroundedNode,simple-oaNodeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroundedNode p1;
    PyParamoaNodeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroundedNode_Convert,&p1,
          &PyoaNodeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroundedNode_oaNodeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaGroundedNode_oaNodeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaGroundedNode_oaNodeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaGroundedNode_oaNodeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject* self = (PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum* p=new pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum* p=new pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_tp_dealloc(PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum value;
    int convert_status=PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[74];
    sprintf(buffer,"<oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum v1;
    PyParamoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum*) ((PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_FromoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject* self = (PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPostCreate(oaGroupMember* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaGroupMember_FromoaGroupMember(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPostModify(oaGroupMember* p1,oaGroupMemberModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaGroupMember_FromoaGroupMember(p1));
    PyTuple_SetItem(args,1,PyoaGroupMemberModTypeEnum_FromoaGroupMemberModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPreDestroy(oaGroupMember* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaGroupMember_FromoaGroupMember(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPreModify(oaGroupMember* p1,oaGroupMemberModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaGroupMember_FromoaGroupMember(p1));
    PyTuple_SetItem(args,1,PyoaGroupMemberModTypeEnum_FromoaGroupMemberModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaGroupMember)\n"
"    Calls: virtual void onPostCreate(oaGroupMember* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaGroupMember,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject* self=(PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject*)ob;

    PyParamoaGroupMember p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroupMember_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaGroupMember,oaGroupMemberModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaGroupMember* object,oaGroupMemberModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaGroupMember,simple-oaGroupMemberModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject* self=(PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject*)ob;

    PyParamoaGroupMember p1;
    PyParamoaGroupMemberModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroupMember_Convert,&p1,
          &PyoaGroupMemberModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaGroupMember)\n"
"    Calls: virtual void onPreDestroy(oaGroupMember* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaGroupMember,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject* self=(PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject*)ob;

    PyParamoaGroupMember p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroupMember_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaGroupMember,oaGroupMemberModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaGroupMember* object,oaGroupMemberModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaGroupMember,simple-oaGroupMemberModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject* self=(PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject*)ob;

    PyParamoaGroupMember p1;
    PyParamoaGroupMemberModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroupMember_Convert,&p1,
          &PyoaGroupMemberModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum data;
  int convert_status=PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum",
    sizeof(PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaGroupMember)\n"
"    Calls: void notifyPostCreateObservers(oaGroupMember* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaGroupMember,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroupMember p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroupMember_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaGroupMember,oaGroupMemberModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaGroupMember* object,oaGroupMemberModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaGroupMember,simple-oaGroupMemberModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroupMember p1;
    PyParamoaGroupMemberModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroupMember_Convert,&p1,
          &PyoaGroupMemberModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaGroupMember)\n"
"    Calls: void notifyPreDestroyObservers(oaGroupMember* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaGroupMember,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroupMember p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroupMember_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaGroupMember,oaGroupMemberModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaGroupMember* object,oaGroupMemberModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaGroupMember,simple-oaGroupMemberModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroupMember p1;
    PyParamoaGroupMemberModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroupMember_Convert,&p1,
          &PyoaGroupMemberModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaGroup_oaGroupModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject* self = (PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaGroup_oaGroupModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum* p=new pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaGroup_oaGroupModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum* p=new pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaGroup_oaGroupModTypeEnum_tp_dealloc(PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaGroup_oaGroupModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaGroup_oaGroupModTypeEnum value;
    int convert_status=PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[62];
    sprintf(buffer,"<oaStdObserver_oaGroup_oaGroupModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaGroup_oaGroupModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaGroup_oaGroupModTypeEnum v1;
    PyParamoaStdObserver_oaGroup_oaGroupModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaGroup_oaGroupModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaGroup_oaGroupModTypeEnum*) ((PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaGroup_oaGroupModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaGroup_oaGroupModTypeEnum_FromoaStdObserver_oaGroup_oaGroupModTypeEnum(oaStdObserver_oaGroup_oaGroupModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject* self = (PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum::pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaGroup_oaGroupModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum::pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaGroup_oaGroupModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum::onPostCreate(oaGroup* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroup_oaGroupModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaGroup_FromoaGroup(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroup_oaGroupModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum::onPostModify(oaGroup* p1,oaGroupModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroup_oaGroupModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaGroup_FromoaGroup(p1));
    PyTuple_SetItem(args,1,PyoaGroupModTypeEnum_FromoaGroupModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroup_oaGroupModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum::onPreDestroy(oaGroup* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroup_oaGroupModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaGroup_FromoaGroup(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroup_oaGroupModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGroup_oaGroupModTypeEnum::onPreModify(oaGroup* p1,oaGroupModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroup_oaGroupModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaGroup_FromoaGroup(p1));
    PyTuple_SetItem(args,1,PyoaGroupModTypeEnum_FromoaGroupModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGroup_oaGroupModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGroup_oaGroupModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaGroup)\n"
"    Calls: virtual void onPostCreate(oaGroup* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaGroup,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroup_oaGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject* self=(PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject*)ob;

    PyParamoaGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroup_oaGroupModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroup_oaGroupModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaGroup,oaGroupModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaGroup* object,oaGroupModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaGroup,simple-oaGroupModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroup_oaGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject* self=(PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject*)ob;

    PyParamoaGroup p1;
    PyParamoaGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroup_Convert,&p1,
          &PyoaGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroup_oaGroupModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroup_oaGroupModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaGroup)\n"
"    Calls: virtual void onPreDestroy(oaGroup* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaGroup,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroup_oaGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject* self=(PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject*)ob;

    PyParamoaGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroup_oaGroupModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroup_oaGroupModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaGroup,oaGroupModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaGroup* object,oaGroupModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaGroup,simple-oaGroupModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGroup_oaGroupModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject* self=(PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject*)ob;

    PyParamoaGroup p1;
    PyParamoaGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroup_Convert,&p1,
          &PyoaGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGroup_oaGroupModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaGroup_oaGroupModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaGroup_oaGroupModTypeEnum data;
  int convert_status=PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaGroup_oaGroupModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaGroup_oaGroupModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaGroup_oaGroupModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaGroup_oaGroupModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaGroup_oaGroupModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaGroup_oaGroupModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaGroup_oaGroupModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaGroup_oaGroupModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaGroup_oaGroupModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaGroup_oaGroupModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaGroup_oaGroupModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaGroup_oaGroupModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGroup_oaGroupModTypeEnum_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaGroup_oaGroupModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaGroup_oaGroupModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaGroup_oaGroupModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaGroup_oaGroupModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaGroup_oaGroupModTypeEnum",
    sizeof(PyoaStdObserver_oaGroup_oaGroupModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaGroup_oaGroupModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaGroup_oaGroupModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaGroup_oaGroupModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaGroup_oaGroupModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaGroup_oaGroupModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaGroup_oaGroupModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGroup_oaGroupModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaGroup_oaGroupModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaGroup)\n"
"    Calls: void notifyPostCreateObservers(oaGroup* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaGroup,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroup_oaGroupModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaGroup,oaGroupModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaGroup* object,oaGroupModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaGroup,simple-oaGroupModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroup p1;
    PyParamoaGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroup_Convert,&p1,
          &PyoaGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroup_oaGroupModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaGroup)\n"
"    Calls: void notifyPreDestroyObservers(oaGroup* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaGroup,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroup_oaGroupModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaGroup_oaGroupModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaGroup,oaGroupModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaGroup* object,oaGroupModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaGroup,simple-oaGroupModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGroup p1;
    PyParamoaGroupModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroup_Convert,&p1,
          &PyoaGroupModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGroup_oaGroupModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaGroup_oaGroupModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaGroup_oaGroupModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaGroup_oaGroupModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaGroup_oaGroupModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaGroup_oaGroupModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaGroup_oaGroupModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaGroup_oaGroupModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaGroup_oaGroupModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaGroup_oaGroupModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaGroup_oaGroupModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaGuide_oaGuideModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject* self = (PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaGuide_oaGuideModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum* p=new pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaGuide_oaGuideModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum* p=new pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaGuide_oaGuideModTypeEnum_tp_dealloc(PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaGuide_oaGuideModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaGuide_oaGuideModTypeEnum value;
    int convert_status=PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[62];
    sprintf(buffer,"<oaStdObserver_oaGuide_oaGuideModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaGuide_oaGuideModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaGuide_oaGuideModTypeEnum v1;
    PyParamoaStdObserver_oaGuide_oaGuideModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaGuide_oaGuideModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaGuide_oaGuideModTypeEnum*) ((PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaGuide_oaGuideModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaGuide_oaGuideModTypeEnum_FromoaStdObserver_oaGuide_oaGuideModTypeEnum(oaStdObserver_oaGuide_oaGuideModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject* self = (PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum::pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaGuide_oaGuideModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum::pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaGuide_oaGuideModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum::onPostCreate(oaGuide* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGuide_oaGuideModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaGuide_FromoaGuide(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGuide_oaGuideModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum::onPostModify(oaGuide* p1,oaGuideModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGuide_oaGuideModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaGuide_FromoaGuide(p1));
    PyTuple_SetItem(args,1,PyoaGuideModTypeEnum_FromoaGuideModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGuide_oaGuideModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum::onPreDestroy(oaGuide* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGuide_oaGuideModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaGuide_FromoaGuide(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGuide_oaGuideModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaGuide_oaGuideModTypeEnum::onPreModify(oaGuide* p1,oaGuideModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGuide_oaGuideModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaGuide_FromoaGuide(p1));
    PyTuple_SetItem(args,1,PyoaGuideModTypeEnum_FromoaGuideModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaGuide_oaGuideModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGuide_oaGuideModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaGuide)\n"
"    Calls: virtual void onPostCreate(oaGuide* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaGuide,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGuide_oaGuideModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject* self=(PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject*)ob;

    PyParamoaGuide p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGuide_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGuide_oaGuideModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGuide_oaGuideModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaGuide,oaGuideModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaGuide* object,oaGuideModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaGuide,simple-oaGuideModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGuide_oaGuideModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject* self=(PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject*)ob;

    PyParamoaGuide p1;
    PyParamoaGuideModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGuide_Convert,&p1,
          &PyoaGuideModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGuide_oaGuideModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGuide_oaGuideModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaGuide)\n"
"    Calls: virtual void onPreDestroy(oaGuide* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaGuide,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGuide_oaGuideModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject* self=(PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject*)ob;

    PyParamoaGuide p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGuide_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGuide_oaGuideModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGuide_oaGuideModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaGuide,oaGuideModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaGuide* object,oaGuideModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaGuide,simple-oaGuideModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaGuide_oaGuideModTypeEnum data;
    int convert_status=PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject* self=(PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject*)ob;

    PyParamoaGuide p1;
    PyParamoaGuideModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGuide_Convert,&p1,
          &PyoaGuideModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaGuide_oaGuideModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaGuide_oaGuideModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaGuide_oaGuideModTypeEnum data;
  int convert_status=PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaGuide_oaGuideModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaGuide_oaGuideModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaGuide_oaGuideModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaGuide_oaGuideModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaGuide_oaGuideModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaGuide_oaGuideModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaGuide_oaGuideModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaGuide_oaGuideModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaGuide_oaGuideModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaGuide_oaGuideModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaGuide_oaGuideModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaGuide_oaGuideModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGuide_oaGuideModTypeEnum_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaGuide_oaGuideModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaGuide_oaGuideModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaGuide_oaGuideModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaGuide_oaGuideModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaGuide_oaGuideModTypeEnum",
    sizeof(PyoaStdObserver_oaGuide_oaGuideModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaGuide_oaGuideModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaGuide_oaGuideModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaGuide_oaGuideModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaGuide_oaGuideModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaGuide_oaGuideModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaGuide_oaGuideModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaGuide_oaGuideModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaGuide_oaGuideModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaGuide)\n"
"    Calls: void notifyPostCreateObservers(oaGuide* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaGuide,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGuide p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGuide_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGuide_oaGuideModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaGuide,oaGuideModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaGuide* object,oaGuideModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaGuide,simple-oaGuideModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGuide p1;
    PyParamoaGuideModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGuide_Convert,&p1,
          &PyoaGuideModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGuide_oaGuideModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaGuide)\n"
"    Calls: void notifyPreDestroyObservers(oaGuide* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaGuide,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGuide p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGuide_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGuide_oaGuideModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaGuide_oaGuideModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaGuide,oaGuideModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaGuide* object,oaGuideModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaGuide,simple-oaGuideModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaGuide p1;
    PyParamoaGuideModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGuide_Convert,&p1,
          &PyoaGuideModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaGuide_oaGuideModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaGuide_oaGuideModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaGuide_oaGuideModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaGuide_oaGuideModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaGuide_oaGuideModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaGuide_oaGuideModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaGuide_oaGuideModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaGuide_oaGuideModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaGuide_oaGuideModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaGuide_oaGuideModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaGuide_oaGuideModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaHierProp_oaPropModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaHierProp_oaPropModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaHierProp_oaPropModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaHierProp_oaPropModTypeEnum_tp_dealloc(PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaHierProp_oaPropModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaHierProp_oaPropModTypeEnum value;
    int convert_status=PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaHierProp_oaPropModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaHierProp_oaPropModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaHierProp_oaPropModTypeEnum v1;
    PyParamoaStdObserver_oaHierProp_oaPropModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaHierProp_oaPropModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaHierProp_oaPropModTypeEnum*) ((PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaHierProp_oaPropModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaHierProp_oaPropModTypeEnum_FromoaStdObserver_oaHierProp_oaPropModTypeEnum(oaStdObserver_oaHierProp_oaPropModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum::pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaHierProp_oaPropModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum::pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaHierProp_oaPropModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum::onPostCreate(oaHierProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaHierProp_oaPropModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaHierProp_FromoaHierProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaHierProp_oaPropModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum::onPostModify(oaHierProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaHierProp_oaPropModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaHierProp_FromoaHierProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaHierProp_oaPropModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum::onPreDestroy(oaHierProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaHierProp_oaPropModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaHierProp_FromoaHierProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaHierProp_oaPropModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaHierProp_oaPropModTypeEnum::onPreModify(oaHierProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaHierProp_oaPropModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaHierProp_FromoaHierProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaHierProp_oaPropModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaHierProp_oaPropModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaHierProp)\n"
"    Calls: virtual void onPostCreate(oaHierProp* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaHierProp,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaHierProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject*)ob;

    PyParamoaHierProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaHierProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaHierProp_oaPropModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaHierProp_oaPropModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaHierProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaHierProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaHierProp,simple-oaPropModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaHierProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject*)ob;

    PyParamoaHierProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaHierProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaHierProp_oaPropModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaHierProp_oaPropModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaHierProp)\n"
"    Calls: virtual void onPreDestroy(oaHierProp* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaHierProp,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaHierProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject*)ob;

    PyParamoaHierProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaHierProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaHierProp_oaPropModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaHierProp_oaPropModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaHierProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaHierProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaHierProp,simple-oaPropModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaHierProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject*)ob;

    PyParamoaHierProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaHierProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaHierProp_oaPropModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaHierProp_oaPropModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaHierProp_oaPropModTypeEnum data;
  int convert_status=PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaHierProp_oaPropModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaHierProp_oaPropModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaHierProp_oaPropModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaHierProp_oaPropModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaHierProp_oaPropModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaHierProp_oaPropModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaHierProp_oaPropModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaHierProp_oaPropModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaHierProp_oaPropModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaHierProp_oaPropModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaHierProp_oaPropModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaHierProp_oaPropModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaHierProp_oaPropModTypeEnum_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaHierProp_oaPropModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaHierProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaHierProp_oaPropModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaHierProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaHierProp_oaPropModTypeEnum",
    sizeof(PyoaStdObserver_oaHierProp_oaPropModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaHierProp_oaPropModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaHierProp_oaPropModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaHierProp_oaPropModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaHierProp_oaPropModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaHierProp_oaPropModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaHierProp_oaPropModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaHierProp_oaPropModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaHierProp_oaPropModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaHierProp)\n"
"    Calls: void notifyPostCreateObservers(oaHierProp* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaHierProp,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaHierProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaHierProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaHierProp_oaPropModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaHierProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaHierProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaHierProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaHierProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaHierProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaHierProp_oaPropModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaHierProp)\n"
"    Calls: void notifyPreDestroyObservers(oaHierProp* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaHierProp,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaHierProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaHierProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaHierProp_oaPropModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaHierProp_oaPropModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaHierProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaHierProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaHierProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaHierProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaHierProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaHierProp_oaPropModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaHierProp_oaPropModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaHierProp_oaPropModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaHierProp_oaPropModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaHierProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaHierProp_oaPropModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaHierProp_oaPropModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaHierProp_oaPropModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaHierProp_oaPropModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaHierProp_oaPropModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaHierProp_oaPropModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaImage_oaImageModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaImage_oaImageModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaImage_oaImageModTypeEnumObject* self = (PyoaStdObserver_oaImage_oaImageModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaImage_oaImageModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaImage_oaImageModTypeEnum* p=new pyv_oaStdObserver_oaImage_oaImageModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaImage_oaImageModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaImage_oaImageModTypeEnum* p=new pyv_oaStdObserver_oaImage_oaImageModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaImage_oaImageModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaImage_oaImageModTypeEnum_tp_dealloc(PyoaStdObserver_oaImage_oaImageModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaImage_oaImageModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaImage_oaImageModTypeEnum value;
    int convert_status=PyoaStdObserver_oaImage_oaImageModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[62];
    sprintf(buffer,"<oaStdObserver_oaImage_oaImageModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaImage_oaImageModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaImage_oaImageModTypeEnum v1;
    PyParamoaStdObserver_oaImage_oaImageModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaImage_oaImageModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaImage_oaImageModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaImage_oaImageModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaImage_oaImageModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaImage_oaImageModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaImage_oaImageModTypeEnum*) ((PyoaStdObserver_oaImage_oaImageModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaImage_oaImageModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaImage_oaImageModTypeEnum_FromoaStdObserver_oaImage_oaImageModTypeEnum(oaStdObserver_oaImage_oaImageModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaImage_oaImageModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaImage_oaImageModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaImage_oaImageModTypeEnumObject* self = (PyoaStdObserver_oaImage_oaImageModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaImage_oaImageModTypeEnum::pyv_oaStdObserver_oaImage_oaImageModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaImage_oaImageModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaImage_oaImageModTypeEnum::pyv_oaStdObserver_oaImage_oaImageModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaImage_oaImageModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaImage_oaImageModTypeEnum::onPostCreate(oaImage* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaImage_oaImageModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaImage_FromoaImage(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaImage_oaImageModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaImage_oaImageModTypeEnum::onPostModify(oaImage* p1,oaImageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaImage_oaImageModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaImage_FromoaImage(p1));
    PyTuple_SetItem(args,1,PyoaImageModTypeEnum_FromoaImageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaImage_oaImageModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaImage_oaImageModTypeEnum::onPreDestroy(oaImage* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaImage_oaImageModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaImage_FromoaImage(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaImage_oaImageModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaImage_oaImageModTypeEnum::onPreModify(oaImage* p1,oaImageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaImage_oaImageModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaImage_FromoaImage(p1));
    PyTuple_SetItem(args,1,PyoaImageModTypeEnum_FromoaImageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaImage_oaImageModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaImage_oaImageModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaImage)\n"
"    Calls: virtual void onPostCreate(oaImage* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaImage,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaImage_oaImageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaImage_oaImageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaImage_oaImageModTypeEnumObject* self=(PyoaStdObserver_oaImage_oaImageModTypeEnumObject*)ob;

    PyParamoaImage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaImage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaImage_oaImageModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaImage_oaImageModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaImage,oaImageModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaImage* object,oaImageModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaImage,simple-oaImageModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaImage_oaImageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaImage_oaImageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaImage_oaImageModTypeEnumObject* self=(PyoaStdObserver_oaImage_oaImageModTypeEnumObject*)ob;

    PyParamoaImage p1;
    PyParamoaImageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaImage_Convert,&p1,
          &PyoaImageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaImage_oaImageModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaImage_oaImageModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaImage)\n"
"    Calls: virtual void onPreDestroy(oaImage* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaImage,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaImage_oaImageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaImage_oaImageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaImage_oaImageModTypeEnumObject* self=(PyoaStdObserver_oaImage_oaImageModTypeEnumObject*)ob;

    PyParamoaImage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaImage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaImage_oaImageModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaImage_oaImageModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaImage,oaImageModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaImage* object,oaImageModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaImage,simple-oaImageModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaImage_oaImageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaImage_oaImageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaImage_oaImageModTypeEnumObject* self=(PyoaStdObserver_oaImage_oaImageModTypeEnumObject*)ob;

    PyParamoaImage p1;
    PyParamoaImageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaImage_Convert,&p1,
          &PyoaImageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaImage_oaImageModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaImage_oaImageModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaImage_oaImageModTypeEnum data;
  int convert_status=PyoaStdObserver_oaImage_oaImageModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaImage_oaImageModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaImage_oaImageModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaImage_oaImageModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaImage_oaImageModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaImage_oaImageModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaImage_oaImageModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaImage_oaImageModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaImage_oaImageModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaImage_oaImageModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaImage_oaImageModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaImage_oaImageModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaImage_oaImageModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaImage_oaImageModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaImage_oaImageModTypeEnum_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaImage_oaImageModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaImage_oaImageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaImage_oaImageModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaImage_oaImageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaImage_oaImageModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaImage_oaImageModTypeEnum",
    sizeof(PyoaStdObserver_oaImage_oaImageModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaImage_oaImageModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaImage_oaImageModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaImage_oaImageModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaImage_oaImageModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaImage_oaImageModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaImage_oaImageModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaImage_oaImageModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaImage_oaImageModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaImage)\n"
"    Calls: void notifyPostCreateObservers(oaImage* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaImage,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaImage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaImage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaImage_oaImageModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaImage,oaImageModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaImage* object,oaImageModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaImage,simple-oaImageModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaImage p1;
    PyParamoaImageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaImage_Convert,&p1,
          &PyoaImageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaImage_oaImageModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaImage)\n"
"    Calls: void notifyPreDestroyObservers(oaImage* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaImage,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaImage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaImage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaImage_oaImageModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaImage_oaImageModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaImage,oaImageModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaImage* object,oaImageModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaImage,simple-oaImageModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaImage p1;
    PyParamoaImageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaImage_Convert,&p1,
          &PyoaImageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaImage_oaImageModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaImage_oaImageModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaImage_oaImageModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaImage_oaImageModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaImage_oaImageModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaImage_oaImageModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaImage_oaImageModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaImage_oaImageModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaImage_oaImageModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaImage_oaImageModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaImage_oaImageModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaImage_oaImageModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaImage_oaImageModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject* self = (PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInductor_oaDeviceModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum* p=new pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInductor_oaDeviceModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum* p=new pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaInductor_oaDeviceModTypeEnum_tp_dealloc(PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaInductor_oaDeviceModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaInductor_oaDeviceModTypeEnum value;
    int convert_status=PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaInductor_oaDeviceModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaInductor_oaDeviceModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaInductor_oaDeviceModTypeEnum v1;
    PyParamoaStdObserver_oaInductor_oaDeviceModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaInductor_oaDeviceModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaInductor_oaDeviceModTypeEnum*) ((PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaInductor_oaDeviceModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_FromoaStdObserver_oaInductor_oaDeviceModTypeEnum(oaStdObserver_oaInductor_oaDeviceModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject* self = (PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum::pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaInductor_oaDeviceModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum::pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaInductor_oaDeviceModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPostCreate(oaInductor* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInductor_FromoaInductor(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPostModify(oaInductor* p1,oaDeviceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInductor_FromoaInductor(p1));
    PyTuple_SetItem(args,1,PyoaDeviceModTypeEnum_FromoaDeviceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPreDestroy(oaInductor* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInductor_FromoaInductor(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPreModify(oaInductor* p1,oaDeviceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInductor_FromoaInductor(p1));
    PyTuple_SetItem(args,1,PyoaDeviceModTypeEnum_FromoaDeviceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaInductor)\n"
"    Calls: virtual void onPostCreate(oaInductor* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaInductor,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInductor_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject*)ob;

    PyParamoaInductor p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInductor_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaInductor,oaDeviceModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaInductor* object,oaDeviceModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaInductor,simple-oaDeviceModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInductor_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject*)ob;

    PyParamoaInductor p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInductor_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaInductor)\n"
"    Calls: virtual void onPreDestroy(oaInductor* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaInductor,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInductor_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject*)ob;

    PyParamoaInductor p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInductor_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaInductor,oaDeviceModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaInductor* object,oaDeviceModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaInductor,simple-oaDeviceModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInductor_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject*)ob;

    PyParamoaInductor p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInductor_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInductor_oaDeviceModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaInductor_oaDeviceModTypeEnum data;
  int convert_status=PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaInductor_oaDeviceModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaInductor_oaDeviceModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaInductor_oaDeviceModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaInductor_oaDeviceModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaInductor_oaDeviceModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaInductor_oaDeviceModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaInductor_oaDeviceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaInductor_oaDeviceModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaInductor_oaDeviceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaInductor_oaDeviceModTypeEnum",
    sizeof(PyoaStdObserver_oaInductor_oaDeviceModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaInductor_oaDeviceModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaInductor_oaDeviceModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaInductor_oaDeviceModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaInductor_oaDeviceModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaInductor_oaDeviceModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaInductor_oaDeviceModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaInductor_oaDeviceModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaInductor)\n"
"    Calls: void notifyPostCreateObservers(oaInductor* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaInductor,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInductor p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInductor_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInductor_oaDeviceModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaInductor,oaDeviceModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaInductor* object,oaDeviceModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaInductor,simple-oaDeviceModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInductor p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInductor_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInductor_oaDeviceModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaInductor)\n"
"    Calls: void notifyPreDestroyObservers(oaInductor* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaInductor,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInductor p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInductor_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInductor_oaDeviceModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaInductor_oaDeviceModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaInductor,oaDeviceModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaInductor* object,oaDeviceModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaInductor,simple-oaDeviceModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInductor p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInductor_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInductor_oaDeviceModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaInductor_oaDeviceModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaInductor_oaDeviceModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaInductor_oaDeviceModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaInductor_oaDeviceModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaInductor_oaDeviceModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaInductor_oaDeviceModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_tp_dealloc(PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum v1;
    PyParamoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum*) ((PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_FromoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPostCreate(oaInstAttrDisplay* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInstAttrDisplay_FromoaInstAttrDisplay(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPostModify(oaInstAttrDisplay* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInstAttrDisplay_FromoaInstAttrDisplay(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPreDestroy(oaInstAttrDisplay* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInstAttrDisplay_FromoaInstAttrDisplay(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPreModify(oaInstAttrDisplay* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInstAttrDisplay_FromoaInstAttrDisplay(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaInstAttrDisplay)\n"
"    Calls: virtual void onPostCreate(oaInstAttrDisplay* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaInstAttrDisplay,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaInstAttrDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstAttrDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaInstAttrDisplay,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaInstAttrDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaInstAttrDisplay,simple-oaShapeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaInstAttrDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstAttrDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaInstAttrDisplay)\n"
"    Calls: virtual void onPreDestroy(oaInstAttrDisplay* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaInstAttrDisplay,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaInstAttrDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstAttrDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaInstAttrDisplay,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaInstAttrDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaInstAttrDisplay,simple-oaShapeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaInstAttrDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstAttrDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum",
    sizeof(PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaInstAttrDisplay)\n"
"    Calls: void notifyPostCreateObservers(oaInstAttrDisplay* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaInstAttrDisplay,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstAttrDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstAttrDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaInstAttrDisplay,oaShapeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaInstAttrDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaInstAttrDisplay,simple-oaShapeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstAttrDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstAttrDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaInstAttrDisplay)\n"
"    Calls: void notifyPreDestroyObservers(oaInstAttrDisplay* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaInstAttrDisplay,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstAttrDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstAttrDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaInstAttrDisplay,oaShapeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaInstAttrDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaInstAttrDisplay,simple-oaShapeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstAttrDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstAttrDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject* self = (PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum* p=new pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum* p=new pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_tp_dealloc(PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum value;
    int convert_status=PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum v1;
    PyParamoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum*) ((PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_FromoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject* self = (PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPostCreate(oaInstHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInstHeader_FromoaInstHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPostModify(oaInstHeader* p1,oaInstHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInstHeader_FromoaInstHeader(p1));
    PyTuple_SetItem(args,1,PyoaInstHeaderModTypeEnum_FromoaInstHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPreDestroy(oaInstHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInstHeader_FromoaInstHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPreModify(oaInstHeader* p1,oaInstHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInstHeader_FromoaInstHeader(p1));
    PyTuple_SetItem(args,1,PyoaInstHeaderModTypeEnum_FromoaInstHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaInstHeader)\n"
"    Calls: virtual void onPostCreate(oaInstHeader* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaInstHeader,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaInstHeader)\n"
"    Calls: virtual void onPreDestroy(oaInstHeader* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaInstHeader,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum data;
  int convert_status=PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum",
    sizeof(PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaInstHeader)\n"
"    Calls: void notifyPostCreateObservers(oaInstHeader* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaInstHeader,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaInstHeader)\n"
"    Calls: void notifyPreDestroyObservers(oaInstHeader* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaInstHeader,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

