
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaAnalysisPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaAnalysisPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaAnalysisPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaAnalysisPointObject* self = (PyoaFloatAppDef_oaAnalysisPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaAnalysisPoint)
    {
        PyParamoaFloatAppDef_oaAnalysisPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaAnalysisPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaAnalysisPoint, Choices are:\n"
        "    (oaFloatAppDef_oaAnalysisPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaAnalysisPoint_tp_dealloc(PyoaFloatAppDef_oaAnalysisPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaAnalysisPoint_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaAnalysisPoint value;
    int convert_status=PyoaFloatAppDef_oaAnalysisPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaAnalysisPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaAnalysisPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaAnalysisPoint v1;
    PyParamoaFloatAppDef_oaAnalysisPoint v2;
    int convert_status1=PyoaFloatAppDef_oaAnalysisPoint_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaAnalysisPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaAnalysisPoint_Convert(PyObject* ob,PyParamoaFloatAppDef_oaAnalysisPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaAnalysisPoint_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaAnalysisPoint**) ((PyoaFloatAppDef_oaAnalysisPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaAnalysisPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaAnalysisPoint_FromoaFloatAppDef_oaAnalysisPoint(oaFloatAppDef_oaAnalysisPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaAnalysisPoint* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaFloatAppDef_oaAnalysisPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaAnalysisPointObject* self = (PyoaFloatAppDef_oaAnalysisPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaAnalysisPoint_FromoaFloatAppDef_oaAnalysisPoint(oaFloatAppDef_oaAnalysisPoint* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaFloatAppDef_oaAnalysisPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaAnalysisPointObject* self = (PyoaFloatAppDef_oaAnalysisPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAnalysisPoint_get_doc[] = 
"Class: oaFloatAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: oaFloat get(const oaAnalysisPoint* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaAnalysisPoint,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaAnalysisPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaAnalysisPoint data;
    int convert_status=PyoaFloatAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaAnalysisPointObject* self=(PyoaFloatAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAnalysisPoint_getDefault_doc[] = 
"Class: oaFloatAppDef_oaAnalysisPoint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaAnalysisPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaAnalysisPoint data;
    int convert_status=PyoaFloatAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaAnalysisPointObject* self=(PyoaFloatAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAnalysisPoint_set_doc[] = 
"Class: oaFloatAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaAnalysisPoint,oaFloat)\n"
"    Calls: void set(oaAnalysisPoint* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaAnalysisPoint,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaAnalysisPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaAnalysisPoint data;
    int convert_status=PyoaFloatAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaAnalysisPointObject* self=(PyoaFloatAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAnalysisPoint_isNull_doc[] =
"Class: oaFloatAppDef_oaAnalysisPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaAnalysisPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaAnalysisPoint data;
    int convert_status=PyoaFloatAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaAnalysisPoint_assign_doc[] = 
"Class: oaFloatAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaAnalysisPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaAnalysisPoint data;
  int convert_status=PyoaFloatAppDef_oaAnalysisPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaAnalysisPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaAnalysisPoint_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaAnalysisPoint_get,METH_VARARGS,oaFloatAppDef_oaAnalysisPoint_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaAnalysisPoint_getDefault,METH_VARARGS,oaFloatAppDef_oaAnalysisPoint_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaAnalysisPoint_set,METH_VARARGS,oaFloatAppDef_oaAnalysisPoint_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaAnalysisPoint_tp_isNull,METH_VARARGS,oaFloatAppDef_oaAnalysisPoint_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaAnalysisPoint_tp_assign,METH_VARARGS,oaFloatAppDef_oaAnalysisPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAnalysisPoint_doc[] = 
"Class: oaFloatAppDef_oaAnalysisPoint\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaAnalysisPoint)\n"
"    Calls: (const oaFloatAppDef_oaAnalysisPoint&)\n"
"    Signature: oaFloatAppDef_oaAnalysisPoint||cref-oaFloatAppDef_oaAnalysisPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaAnalysisPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaAnalysisPoint",
    sizeof(PyoaFloatAppDef_oaAnalysisPointObject),
    0,
    (destructor)oaFloatAppDef_oaAnalysisPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaAnalysisPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaAnalysisPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaAnalysisPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaAnalysisPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaAnalysisPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAnalysisPoint_static_find_doc[] = 
"Class: oaFloatAppDef_oaAnalysisPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaAnalysisPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaAnalysisPoint|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaAnalysisPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaAnalysisPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaAnalysisPointp result= (oaFloatAppDef_oaAnalysisPoint::find(p1.Data()));
            return PyoaFloatAppDef_oaAnalysisPoint_FromoaFloatAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAnalysisPointp result= (oaFloatAppDef_oaAnalysisPoint::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaAnalysisPoint_FromoaFloatAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaAnalysisPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAnalysisPoint_static_get_doc[] = 
"Class: oaFloatAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaAnalysisPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAnalysisPoint|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaAnalysisPoint* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAnalysisPoint|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaAnalysisPoint* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAnalysisPoint|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaAnalysisPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaAnalysisPointp result= (oaFloatAppDef_oaAnalysisPoint::get(p1.Data()));
            return PyoaFloatAppDef_oaAnalysisPoint_FromoaFloatAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaAnalysisPointp result= (oaFloatAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaAnalysisPoint_FromoaFloatAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaAnalysisPointp result= (oaFloatAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaAnalysisPoint_FromoaFloatAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAnalysisPointp result= (oaFloatAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaAnalysisPoint_FromoaFloatAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAnalysisPointp result= (oaFloatAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaAnalysisPoint_FromoaFloatAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAnalysisPointp result= (oaFloatAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaAnalysisPoint_FromoaFloatAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaAnalysisPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaAnalysisPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaAnalysisPoint_static_find,METH_VARARGS,oaFloatAppDef_oaAnalysisPoint_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaAnalysisPoint_static_get,METH_VARARGS,oaFloatAppDef_oaAnalysisPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaAnalysisPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaAnalysisPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaAnalysisPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaAnalysisPoint",
           (PyObject*)(&PyoaFloatAppDef_oaAnalysisPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaAnalysisPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaAnalysisPoint_Type.tp_dict;
    for(method=oaFloatAppDef_oaAnalysisPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaAppObject
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaAppObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaAppObject_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaAppObjectObject* self = (PyoaFloatAppDef_oaAppObjectObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaAppObject)
    {
        PyParamoaFloatAppDef_oaAppObject p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaAppObject_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaAppObject, Choices are:\n"
        "    (oaFloatAppDef_oaAppObject)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaAppObject_tp_dealloc(PyoaFloatAppDef_oaAppObjectObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaAppObject_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaAppObject value;
    int convert_status=PyoaFloatAppDef_oaAppObject_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaFloatAppDef_oaAppObject::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaAppObject_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaAppObject v1;
    PyParamoaFloatAppDef_oaAppObject v2;
    int convert_status1=PyoaFloatAppDef_oaAppObject_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaAppObject_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaAppObject_Convert(PyObject* ob,PyParamoaFloatAppDef_oaAppObject* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaAppObject_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaAppObject**) ((PyoaFloatAppDef_oaAppObjectObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaAppObject Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaAppObject_FromoaFloatAppDef_oaAppObject(oaFloatAppDef_oaAppObject** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaAppObject* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaAppObject_Type.tp_alloc(&PyoaFloatAppDef_oaAppObject_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaAppObjectObject* self = (PyoaFloatAppDef_oaAppObjectObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaAppObject_FromoaFloatAppDef_oaAppObject(oaFloatAppDef_oaAppObject* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaAppObject_Type.tp_alloc(&PyoaFloatAppDef_oaAppObject_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaAppObjectObject* self = (PyoaFloatAppDef_oaAppObjectObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAppObject_get_doc[] = 
"Class: oaFloatAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaAppObject)\n"
"    Calls: oaFloat get(const oaAppObject* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaAppObject,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaAppObject_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaAppObject data;
    int convert_status=PyoaFloatAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaAppObjectObject* self=(PyoaFloatAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAppObject_getDefault_doc[] = 
"Class: oaFloatAppDef_oaAppObject, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaAppObject_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaAppObject data;
    int convert_status=PyoaFloatAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaAppObjectObject* self=(PyoaFloatAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAppObject_set_doc[] = 
"Class: oaFloatAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaAppObject,oaFloat)\n"
"    Calls: void set(oaAppObject* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaAppObject,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaAppObject_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaAppObject data;
    int convert_status=PyoaFloatAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaAppObjectObject* self=(PyoaFloatAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAppObject_isNull_doc[] =
"Class: oaFloatAppDef_oaAppObject, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaAppObject_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaAppObject data;
    int convert_status=PyoaFloatAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaAppObject_assign_doc[] = 
"Class: oaFloatAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaAppObject_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaAppObject data;
  int convert_status=PyoaFloatAppDef_oaAppObject_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaAppObject p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaAppObject_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaAppObject_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaAppObject_get,METH_VARARGS,oaFloatAppDef_oaAppObject_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaAppObject_getDefault,METH_VARARGS,oaFloatAppDef_oaAppObject_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaAppObject_set,METH_VARARGS,oaFloatAppDef_oaAppObject_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaAppObject_tp_isNull,METH_VARARGS,oaFloatAppDef_oaAppObject_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaAppObject_tp_assign,METH_VARARGS,oaFloatAppDef_oaAppObject_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAppObject_doc[] = 
"Class: oaFloatAppDef_oaAppObject\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaAppObject)\n"
"    Calls: (const oaFloatAppDef_oaAppObject&)\n"
"    Signature: oaFloatAppDef_oaAppObject||cref-oaFloatAppDef_oaAppObject,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaAppObject_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaAppObject",
    sizeof(PyoaFloatAppDef_oaAppObjectObject),
    0,
    (destructor)oaFloatAppDef_oaAppObject_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaAppObject_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaAppObject_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaAppObject_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaAppObject_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaAppObject_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAppObject_static_find_doc[] = 
"Class: oaFloatAppDef_oaAppObject, Function: find\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaAppObject* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaAppObject_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString p1;
    PyParamoaAppObjectDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaString_Convert,&p1,
          &PyoaAppObjectDef_Convert,&p2)) {
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        oaFloatAppDef_oaAppObjectp result= (oaFloatAppDef_oaAppObject::find(p1.Data(),p2.Data()));
        return PyoaFloatAppDef_oaAppObject_FromoaFloatAppDef_oaAppObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAppObject_static_get_doc[] = 
"Class: oaFloatAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaAppObject_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAppObjectp result= (oaFloatAppDef_oaAppObject::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaAppObject_FromoaFloatAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAppObjectp result= (oaFloatAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaAppObject_FromoaFloatAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAppObjectp result= (oaFloatAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaAppObject_FromoaFloatAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaAppObject, function: get, Choices are:\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaAppObject_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaAppObject_static_find,METH_VARARGS,oaFloatAppDef_oaAppObject_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaAppObject_static_get,METH_VARARGS,oaFloatAppDef_oaAppObject_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaAppObject_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaAppObject_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaAppObject\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaAppObject",
           (PyObject*)(&PyoaFloatAppDef_oaAppObject_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaAppObject\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaAppObject_Type.tp_dict;
    for(method=oaFloatAppDef_oaAppObject_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaAssignmentObject* self = (PyoaFloatAppDef_oaAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaAssignment)
    {
        PyParamoaFloatAppDef_oaAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaAssignment_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaAssignment, Choices are:\n"
        "    (oaFloatAppDef_oaAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaAssignment_tp_dealloc(PyoaFloatAppDef_oaAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaAssignment_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaAssignment value;
    int convert_status=PyoaFloatAppDef_oaAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaFloatAppDef_oaAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaAssignment v1;
    PyParamoaFloatAppDef_oaAssignment v2;
    int convert_status1=PyoaFloatAppDef_oaAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaAssignment_Convert(PyObject* ob,PyParamoaFloatAppDef_oaAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaAssignment_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaAssignment**) ((PyoaFloatAppDef_oaAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaAssignment_FromoaFloatAppDef_oaAssignment(oaFloatAppDef_oaAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaAssignment* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaAssignment_Type.tp_alloc(&PyoaFloatAppDef_oaAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaAssignmentObject* self = (PyoaFloatAppDef_oaAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaAssignment_FromoaFloatAppDef_oaAssignment(oaFloatAppDef_oaAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaAssignment_Type.tp_alloc(&PyoaFloatAppDef_oaAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaAssignmentObject* self = (PyoaFloatAppDef_oaAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAssignment_get_doc[] = 
"Class: oaFloatAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaAssignment)\n"
"    Calls: oaFloat get(const oaAssignment* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaAssignment,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaAssignment data;
    int convert_status=PyoaFloatAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaAssignmentObject* self=(PyoaFloatAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAssignment_getDefault_doc[] = 
"Class: oaFloatAppDef_oaAssignment, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaAssignment data;
    int convert_status=PyoaFloatAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaAssignmentObject* self=(PyoaFloatAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAssignment_set_doc[] = 
"Class: oaFloatAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaAssignment,oaFloat)\n"
"    Calls: void set(oaAssignment* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaAssignment,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaAssignment data;
    int convert_status=PyoaFloatAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaAssignmentObject* self=(PyoaFloatAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAssignment_isNull_doc[] =
"Class: oaFloatAppDef_oaAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaAssignment data;
    int convert_status=PyoaFloatAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaAssignment_assign_doc[] = 
"Class: oaFloatAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaAssignment data;
  int convert_status=PyoaFloatAppDef_oaAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaAssignment_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaAssignment_get,METH_VARARGS,oaFloatAppDef_oaAssignment_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaAssignment_getDefault,METH_VARARGS,oaFloatAppDef_oaAssignment_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaAssignment_set,METH_VARARGS,oaFloatAppDef_oaAssignment_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaAssignment_tp_isNull,METH_VARARGS,oaFloatAppDef_oaAssignment_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaAssignment_tp_assign,METH_VARARGS,oaFloatAppDef_oaAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAssignment_doc[] = 
"Class: oaFloatAppDef_oaAssignment\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaAssignment)\n"
"    Calls: (const oaFloatAppDef_oaAssignment&)\n"
"    Signature: oaFloatAppDef_oaAssignment||cref-oaFloatAppDef_oaAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaAssignment",
    sizeof(PyoaFloatAppDef_oaAssignmentObject),
    0,
    (destructor)oaFloatAppDef_oaAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAssignment_static_find_doc[] = 
"Class: oaFloatAppDef_oaAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaAssignment|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaAssignmentp result= (oaFloatAppDef_oaAssignment::find(p1.Data()));
            return PyoaFloatAppDef_oaAssignment_FromoaFloatAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAssignmentp result= (oaFloatAppDef_oaAssignment::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaAssignment_FromoaFloatAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaAssignment_static_get_doc[] = 
"Class: oaFloatAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaAssignment* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAssignment|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaAssignment* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAssignment|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaAssignment* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAssignment|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaAssignmentp result= (oaFloatAppDef_oaAssignment::get(p1.Data()));
            return PyoaFloatAppDef_oaAssignment_FromoaFloatAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaAssignmentp result= (oaFloatAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaAssignment_FromoaFloatAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaAssignmentp result= (oaFloatAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaAssignment_FromoaFloatAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAssignmentp result= (oaFloatAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaAssignment_FromoaFloatAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAssignmentp result= (oaFloatAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaAssignment_FromoaFloatAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaAssignmentp result= (oaFloatAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaAssignment_FromoaFloatAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaAssignment, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaAssignment_static_find,METH_VARARGS,oaFloatAppDef_oaAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaAssignment_static_get,METH_VARARGS,oaFloatAppDef_oaAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaAssignment",
           (PyObject*)(&PyoaFloatAppDef_oaAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaAssignment_Type.tp_dict;
    for(method=oaFloatAppDef_oaAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaBlock
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaBlock_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaBlock_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaBlockObject* self = (PyoaFloatAppDef_oaBlockObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaBlock)
    {
        PyParamoaFloatAppDef_oaBlock p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaBlock_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaBlock, Choices are:\n"
        "    (oaFloatAppDef_oaBlock)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaBlock_tp_dealloc(PyoaFloatAppDef_oaBlockObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaBlock_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaBlock value;
    int convert_status=PyoaFloatAppDef_oaBlock_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaFloatAppDef_oaBlock::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaBlock_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaBlock v1;
    PyParamoaFloatAppDef_oaBlock v2;
    int convert_status1=PyoaFloatAppDef_oaBlock_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaBlock_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaBlock_Convert(PyObject* ob,PyParamoaFloatAppDef_oaBlock* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaBlock_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaBlock**) ((PyoaFloatAppDef_oaBlockObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaBlock Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaBlock_FromoaFloatAppDef_oaBlock(oaFloatAppDef_oaBlock** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaBlock* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaBlock_Type.tp_alloc(&PyoaFloatAppDef_oaBlock_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaBlockObject* self = (PyoaFloatAppDef_oaBlockObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaBlock_FromoaFloatAppDef_oaBlock(oaFloatAppDef_oaBlock* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaBlock_Type.tp_alloc(&PyoaFloatAppDef_oaBlock_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaBlockObject* self = (PyoaFloatAppDef_oaBlockObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlock_get_doc[] = 
"Class: oaFloatAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaBlock)\n"
"    Calls: oaFloat get(const oaBlock* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaBlock,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaBlock_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBlock data;
    int convert_status=PyoaFloatAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBlockObject* self=(PyoaFloatAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlock_getDefault_doc[] = 
"Class: oaFloatAppDef_oaBlock, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaBlock_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBlock data;
    int convert_status=PyoaFloatAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBlockObject* self=(PyoaFloatAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlock_set_doc[] = 
"Class: oaFloatAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaBlock,oaFloat)\n"
"    Calls: void set(oaBlock* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaBlock,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaBlock_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBlock data;
    int convert_status=PyoaFloatAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBlockObject* self=(PyoaFloatAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlock_isNull_doc[] =
"Class: oaFloatAppDef_oaBlock, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaBlock_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaBlock data;
    int convert_status=PyoaFloatAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaBlock_assign_doc[] = 
"Class: oaFloatAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaBlock_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaBlock data;
  int convert_status=PyoaFloatAppDef_oaBlock_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaBlock p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaBlock_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaBlock_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaBlock_get,METH_VARARGS,oaFloatAppDef_oaBlock_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaBlock_getDefault,METH_VARARGS,oaFloatAppDef_oaBlock_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaBlock_set,METH_VARARGS,oaFloatAppDef_oaBlock_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaBlock_tp_isNull,METH_VARARGS,oaFloatAppDef_oaBlock_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaBlock_tp_assign,METH_VARARGS,oaFloatAppDef_oaBlock_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlock_doc[] = 
"Class: oaFloatAppDef_oaBlock\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaBlock)\n"
"    Calls: (const oaFloatAppDef_oaBlock&)\n"
"    Signature: oaFloatAppDef_oaBlock||cref-oaFloatAppDef_oaBlock,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaBlock_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaBlock",
    sizeof(PyoaFloatAppDef_oaBlockObject),
    0,
    (destructor)oaFloatAppDef_oaBlock_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaBlock_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaBlock_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaBlock_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaBlock_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaBlock_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlock_static_find_doc[] = 
"Class: oaFloatAppDef_oaBlock, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaBlock* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaBlock|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaBlock* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaBlock_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaBlockp result= (oaFloatAppDef_oaBlock::find(p1.Data()));
            return PyoaFloatAppDef_oaBlock_FromoaFloatAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBlockp result= (oaFloatAppDef_oaBlock::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBlock_FromoaFloatAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaBlock, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlock_static_get_doc[] = 
"Class: oaFloatAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaBlock* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlock|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaBlock* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlock|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaBlock* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlock|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaBlock_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaBlockp result= (oaFloatAppDef_oaBlock::get(p1.Data()));
            return PyoaFloatAppDef_oaBlock_FromoaFloatAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaBlockp result= (oaFloatAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBlock_FromoaFloatAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaBlockp result= (oaFloatAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaBlock_FromoaFloatAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBlockp result= (oaFloatAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBlock_FromoaFloatAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBlockp result= (oaFloatAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaBlock_FromoaFloatAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBlockp result= (oaFloatAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaBlock_FromoaFloatAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaBlock, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaBlock_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaBlock_static_find,METH_VARARGS,oaFloatAppDef_oaBlock_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaBlock_static_get,METH_VARARGS,oaFloatAppDef_oaBlock_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaBlock_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaBlock_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaBlock\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaBlock",
           (PyObject*)(&PyoaFloatAppDef_oaBlock_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaBlock\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaBlock_Type.tp_dict;
    for(method=oaFloatAppDef_oaBlock_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaBlockage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaBlockage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaBlockage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaBlockageObject* self = (PyoaFloatAppDef_oaBlockageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaBlockage)
    {
        PyParamoaFloatAppDef_oaBlockage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaBlockage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaBlockage, Choices are:\n"
        "    (oaFloatAppDef_oaBlockage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaBlockage_tp_dealloc(PyoaFloatAppDef_oaBlockageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaBlockage_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaBlockage value;
    int convert_status=PyoaFloatAppDef_oaBlockage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaFloatAppDef_oaBlockage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaBlockage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaBlockage v1;
    PyParamoaFloatAppDef_oaBlockage v2;
    int convert_status1=PyoaFloatAppDef_oaBlockage_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaBlockage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaBlockage_Convert(PyObject* ob,PyParamoaFloatAppDef_oaBlockage* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaBlockage_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaBlockage**) ((PyoaFloatAppDef_oaBlockageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaBlockage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaBlockage_FromoaFloatAppDef_oaBlockage(oaFloatAppDef_oaBlockage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaBlockage* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaBlockage_Type.tp_alloc(&PyoaFloatAppDef_oaBlockage_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaBlockageObject* self = (PyoaFloatAppDef_oaBlockageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaBlockage_FromoaFloatAppDef_oaBlockage(oaFloatAppDef_oaBlockage* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaBlockage_Type.tp_alloc(&PyoaFloatAppDef_oaBlockage_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaBlockageObject* self = (PyoaFloatAppDef_oaBlockageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlockage_get_doc[] = 
"Class: oaFloatAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaBlockage)\n"
"    Calls: oaFloat get(const oaBlockage* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaBlockage,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaBlockage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBlockage data;
    int convert_status=PyoaFloatAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBlockageObject* self=(PyoaFloatAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlockage_getDefault_doc[] = 
"Class: oaFloatAppDef_oaBlockage, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaBlockage_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBlockage data;
    int convert_status=PyoaFloatAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBlockageObject* self=(PyoaFloatAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlockage_set_doc[] = 
"Class: oaFloatAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaBlockage,oaFloat)\n"
"    Calls: void set(oaBlockage* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaBlockage,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaBlockage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBlockage data;
    int convert_status=PyoaFloatAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBlockageObject* self=(PyoaFloatAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlockage_isNull_doc[] =
"Class: oaFloatAppDef_oaBlockage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaBlockage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaBlockage data;
    int convert_status=PyoaFloatAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaBlockage_assign_doc[] = 
"Class: oaFloatAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaBlockage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaBlockage data;
  int convert_status=PyoaFloatAppDef_oaBlockage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaBlockage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaBlockage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaBlockage_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaBlockage_get,METH_VARARGS,oaFloatAppDef_oaBlockage_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaBlockage_getDefault,METH_VARARGS,oaFloatAppDef_oaBlockage_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaBlockage_set,METH_VARARGS,oaFloatAppDef_oaBlockage_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaBlockage_tp_isNull,METH_VARARGS,oaFloatAppDef_oaBlockage_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaBlockage_tp_assign,METH_VARARGS,oaFloatAppDef_oaBlockage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlockage_doc[] = 
"Class: oaFloatAppDef_oaBlockage\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaBlockage)\n"
"    Calls: (const oaFloatAppDef_oaBlockage&)\n"
"    Signature: oaFloatAppDef_oaBlockage||cref-oaFloatAppDef_oaBlockage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaBlockage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaBlockage",
    sizeof(PyoaFloatAppDef_oaBlockageObject),
    0,
    (destructor)oaFloatAppDef_oaBlockage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaBlockage_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaBlockage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaBlockage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaBlockage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaBlockage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlockage_static_find_doc[] = 
"Class: oaFloatAppDef_oaBlockage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaBlockage* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaBlockage|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaBlockage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaBlockage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaBlockagep result= (oaFloatAppDef_oaBlockage::find(p1.Data()));
            return PyoaFloatAppDef_oaBlockage_FromoaFloatAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBlockagep result= (oaFloatAppDef_oaBlockage::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBlockage_FromoaFloatAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaBlockage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBlockage_static_get_doc[] = 
"Class: oaFloatAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaBlockage* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlockage|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaBlockage* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlockage|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaBlockage* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlockage|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaBlockage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaBlockagep result= (oaFloatAppDef_oaBlockage::get(p1.Data()));
            return PyoaFloatAppDef_oaBlockage_FromoaFloatAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaBlockagep result= (oaFloatAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBlockage_FromoaFloatAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaBlockagep result= (oaFloatAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaBlockage_FromoaFloatAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBlockagep result= (oaFloatAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBlockage_FromoaFloatAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBlockagep result= (oaFloatAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaBlockage_FromoaFloatAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBlockagep result= (oaFloatAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaBlockage_FromoaFloatAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaBlockage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaBlockage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaBlockage_static_find,METH_VARARGS,oaFloatAppDef_oaBlockage_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaBlockage_static_get,METH_VARARGS,oaFloatAppDef_oaBlockage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaBlockage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaBlockage_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaBlockage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaBlockage",
           (PyObject*)(&PyoaFloatAppDef_oaBlockage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaBlockage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaBlockage_Type.tp_dict;
    for(method=oaFloatAppDef_oaBlockage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaBoundary
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaBoundary_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaBoundary_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaBoundaryObject* self = (PyoaFloatAppDef_oaBoundaryObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaBoundary)
    {
        PyParamoaFloatAppDef_oaBoundary p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaBoundary_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaBoundary, Choices are:\n"
        "    (oaFloatAppDef_oaBoundary)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaBoundary_tp_dealloc(PyoaFloatAppDef_oaBoundaryObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaBoundary_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaBoundary value;
    int convert_status=PyoaFloatAppDef_oaBoundary_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaFloatAppDef_oaBoundary::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaBoundary_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaBoundary v1;
    PyParamoaFloatAppDef_oaBoundary v2;
    int convert_status1=PyoaFloatAppDef_oaBoundary_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaBoundary_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaBoundary_Convert(PyObject* ob,PyParamoaFloatAppDef_oaBoundary* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaBoundary_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaBoundary**) ((PyoaFloatAppDef_oaBoundaryObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaBoundary Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaBoundary_FromoaFloatAppDef_oaBoundary(oaFloatAppDef_oaBoundary** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaBoundary* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaBoundary_Type.tp_alloc(&PyoaFloatAppDef_oaBoundary_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaBoundaryObject* self = (PyoaFloatAppDef_oaBoundaryObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaBoundary_FromoaFloatAppDef_oaBoundary(oaFloatAppDef_oaBoundary* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaBoundary_Type.tp_alloc(&PyoaFloatAppDef_oaBoundary_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaBoundaryObject* self = (PyoaFloatAppDef_oaBoundaryObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBoundary_get_doc[] = 
"Class: oaFloatAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaBoundary)\n"
"    Calls: oaFloat get(const oaBoundary* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaBoundary,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaBoundary_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBoundary data;
    int convert_status=PyoaFloatAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBoundaryObject* self=(PyoaFloatAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBoundary_getDefault_doc[] = 
"Class: oaFloatAppDef_oaBoundary, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaBoundary_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBoundary data;
    int convert_status=PyoaFloatAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBoundaryObject* self=(PyoaFloatAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBoundary_set_doc[] = 
"Class: oaFloatAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaBoundary,oaFloat)\n"
"    Calls: void set(oaBoundary* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaBoundary,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaBoundary_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBoundary data;
    int convert_status=PyoaFloatAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBoundaryObject* self=(PyoaFloatAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBoundary_isNull_doc[] =
"Class: oaFloatAppDef_oaBoundary, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaBoundary_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaBoundary data;
    int convert_status=PyoaFloatAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaBoundary_assign_doc[] = 
"Class: oaFloatAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaBoundary_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaBoundary data;
  int convert_status=PyoaFloatAppDef_oaBoundary_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaBoundary p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaBoundary_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaBoundary_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaBoundary_get,METH_VARARGS,oaFloatAppDef_oaBoundary_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaBoundary_getDefault,METH_VARARGS,oaFloatAppDef_oaBoundary_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaBoundary_set,METH_VARARGS,oaFloatAppDef_oaBoundary_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaBoundary_tp_isNull,METH_VARARGS,oaFloatAppDef_oaBoundary_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaBoundary_tp_assign,METH_VARARGS,oaFloatAppDef_oaBoundary_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBoundary_doc[] = 
"Class: oaFloatAppDef_oaBoundary\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaBoundary)\n"
"    Calls: (const oaFloatAppDef_oaBoundary&)\n"
"    Signature: oaFloatAppDef_oaBoundary||cref-oaFloatAppDef_oaBoundary,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaBoundary_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaBoundary",
    sizeof(PyoaFloatAppDef_oaBoundaryObject),
    0,
    (destructor)oaFloatAppDef_oaBoundary_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaBoundary_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaBoundary_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaBoundary_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaBoundary_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaBoundary_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBoundary_static_find_doc[] = 
"Class: oaFloatAppDef_oaBoundary, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaBoundary* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaBoundary|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaBoundary* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaBoundary_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaBoundaryp result= (oaFloatAppDef_oaBoundary::find(p1.Data()));
            return PyoaFloatAppDef_oaBoundary_FromoaFloatAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBoundaryp result= (oaFloatAppDef_oaBoundary::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBoundary_FromoaFloatAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaBoundary, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBoundary_static_get_doc[] = 
"Class: oaFloatAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaBoundary* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBoundary|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaBoundary* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBoundary|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaBoundary* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBoundary|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaBoundary_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaBoundaryp result= (oaFloatAppDef_oaBoundary::get(p1.Data()));
            return PyoaFloatAppDef_oaBoundary_FromoaFloatAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaBoundaryp result= (oaFloatAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBoundary_FromoaFloatAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaBoundaryp result= (oaFloatAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaBoundary_FromoaFloatAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBoundaryp result= (oaFloatAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBoundary_FromoaFloatAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBoundaryp result= (oaFloatAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaBoundary_FromoaFloatAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBoundaryp result= (oaFloatAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaBoundary_FromoaFloatAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaBoundary, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaBoundary_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaBoundary_static_find,METH_VARARGS,oaFloatAppDef_oaBoundary_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaBoundary_static_get,METH_VARARGS,oaFloatAppDef_oaBoundary_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaBoundary_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaBoundary_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaBoundary\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaBoundary",
           (PyObject*)(&PyoaFloatAppDef_oaBoundary_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaBoundary\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaBoundary_Type.tp_dict;
    for(method=oaFloatAppDef_oaBoundary_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaBusNetDefObject* self = (PyoaFloatAppDef_oaBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaBusNetDef)
    {
        PyParamoaFloatAppDef_oaBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaBusNetDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaBusNetDef, Choices are:\n"
        "    (oaFloatAppDef_oaBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaBusNetDef_tp_dealloc(PyoaFloatAppDef_oaBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaBusNetDef value;
    int convert_status=PyoaFloatAppDef_oaBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaFloatAppDef_oaBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaBusNetDef v1;
    PyParamoaFloatAppDef_oaBusNetDef v2;
    int convert_status1=PyoaFloatAppDef_oaBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaBusNetDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaBusNetDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaBusNetDef**) ((PyoaFloatAppDef_oaBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaBusNetDef_FromoaFloatAppDef_oaBusNetDef(oaFloatAppDef_oaBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaBusNetDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaBusNetDef_Type.tp_alloc(&PyoaFloatAppDef_oaBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaBusNetDefObject* self = (PyoaFloatAppDef_oaBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaBusNetDef_FromoaFloatAppDef_oaBusNetDef(oaFloatAppDef_oaBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaBusNetDef_Type.tp_alloc(&PyoaFloatAppDef_oaBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaBusNetDefObject* self = (PyoaFloatAppDef_oaBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusNetDef_get_doc[] = 
"Class: oaFloatAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaBusNetDef)\n"
"    Calls: oaFloat get(const oaBusNetDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaBusNetDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBusNetDefObject* self=(PyoaFloatAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusNetDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaBusNetDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaBusNetDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBusNetDefObject* self=(PyoaFloatAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusNetDef_set_doc[] = 
"Class: oaFloatAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaBusNetDef,oaFloat)\n"
"    Calls: void set(oaBusNetDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaBusNetDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBusNetDefObject* self=(PyoaFloatAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusNetDef_isNull_doc[] =
"Class: oaFloatAppDef_oaBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaBusNetDef_assign_doc[] = 
"Class: oaFloatAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaBusNetDef data;
  int convert_status=PyoaFloatAppDef_oaBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaBusNetDef_get,METH_VARARGS,oaFloatAppDef_oaBusNetDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaBusNetDef_getDefault,METH_VARARGS,oaFloatAppDef_oaBusNetDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaBusNetDef_set,METH_VARARGS,oaFloatAppDef_oaBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaBusNetDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaBusNetDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusNetDef_doc[] = 
"Class: oaFloatAppDef_oaBusNetDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaBusNetDef)\n"
"    Calls: (const oaFloatAppDef_oaBusNetDef&)\n"
"    Signature: oaFloatAppDef_oaBusNetDef||cref-oaFloatAppDef_oaBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaBusNetDef",
    sizeof(PyoaFloatAppDef_oaBusNetDefObject),
    0,
    (destructor)oaFloatAppDef_oaBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusNetDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaBusNetDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaBusNetDefp result= (oaFloatAppDef_oaBusNetDef::find(p1.Data()));
            return PyoaFloatAppDef_oaBusNetDef_FromoaFloatAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBusNetDefp result= (oaFloatAppDef_oaBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBusNetDef_FromoaFloatAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusNetDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaBusNetDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusNetDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaBusNetDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusNetDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaBusNetDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusNetDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaBusNetDefp result= (oaFloatAppDef_oaBusNetDef::get(p1.Data()));
            return PyoaFloatAppDef_oaBusNetDef_FromoaFloatAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaBusNetDefp result= (oaFloatAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBusNetDef_FromoaFloatAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaBusNetDefp result= (oaFloatAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaBusNetDef_FromoaFloatAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBusNetDefp result= (oaFloatAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBusNetDef_FromoaFloatAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBusNetDefp result= (oaFloatAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaBusNetDef_FromoaFloatAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBusNetDefp result= (oaFloatAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaBusNetDef_FromoaFloatAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaBusNetDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaBusNetDef_static_find,METH_VARARGS,oaFloatAppDef_oaBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaBusNetDef_static_get,METH_VARARGS,oaFloatAppDef_oaBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaBusNetDef",
           (PyObject*)(&PyoaFloatAppDef_oaBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaBusNetDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaBusTermDefObject* self = (PyoaFloatAppDef_oaBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaBusTermDef)
    {
        PyParamoaFloatAppDef_oaBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaBusTermDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaBusTermDef, Choices are:\n"
        "    (oaFloatAppDef_oaBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaBusTermDef_tp_dealloc(PyoaFloatAppDef_oaBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaBusTermDef value;
    int convert_status=PyoaFloatAppDef_oaBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaFloatAppDef_oaBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaBusTermDef v1;
    PyParamoaFloatAppDef_oaBusTermDef v2;
    int convert_status1=PyoaFloatAppDef_oaBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaBusTermDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaBusTermDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaBusTermDef**) ((PyoaFloatAppDef_oaBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaBusTermDef_FromoaFloatAppDef_oaBusTermDef(oaFloatAppDef_oaBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaBusTermDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaBusTermDef_Type.tp_alloc(&PyoaFloatAppDef_oaBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaBusTermDefObject* self = (PyoaFloatAppDef_oaBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaBusTermDef_FromoaFloatAppDef_oaBusTermDef(oaFloatAppDef_oaBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaBusTermDef_Type.tp_alloc(&PyoaFloatAppDef_oaBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaBusTermDefObject* self = (PyoaFloatAppDef_oaBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusTermDef_get_doc[] = 
"Class: oaFloatAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaBusTermDef)\n"
"    Calls: oaFloat get(const oaBusTermDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaBusTermDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBusTermDefObject* self=(PyoaFloatAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusTermDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaBusTermDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaBusTermDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBusTermDefObject* self=(PyoaFloatAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusTermDef_set_doc[] = 
"Class: oaFloatAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaBusTermDef,oaFloat)\n"
"    Calls: void set(oaBusTermDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaBusTermDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaBusTermDefObject* self=(PyoaFloatAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusTermDef_isNull_doc[] =
"Class: oaFloatAppDef_oaBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaBusTermDef_assign_doc[] = 
"Class: oaFloatAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaBusTermDef data;
  int convert_status=PyoaFloatAppDef_oaBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaBusTermDef_get,METH_VARARGS,oaFloatAppDef_oaBusTermDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaBusTermDef_getDefault,METH_VARARGS,oaFloatAppDef_oaBusTermDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaBusTermDef_set,METH_VARARGS,oaFloatAppDef_oaBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaBusTermDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaBusTermDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusTermDef_doc[] = 
"Class: oaFloatAppDef_oaBusTermDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaBusTermDef)\n"
"    Calls: (const oaFloatAppDef_oaBusTermDef&)\n"
"    Signature: oaFloatAppDef_oaBusTermDef||cref-oaFloatAppDef_oaBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaBusTermDef",
    sizeof(PyoaFloatAppDef_oaBusTermDefObject),
    0,
    (destructor)oaFloatAppDef_oaBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusTermDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaBusTermDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaBusTermDefp result= (oaFloatAppDef_oaBusTermDef::find(p1.Data()));
            return PyoaFloatAppDef_oaBusTermDef_FromoaFloatAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBusTermDefp result= (oaFloatAppDef_oaBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBusTermDef_FromoaFloatAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaBusTermDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaBusTermDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusTermDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaBusTermDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusTermDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaBusTermDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusTermDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaBusTermDefp result= (oaFloatAppDef_oaBusTermDef::get(p1.Data()));
            return PyoaFloatAppDef_oaBusTermDef_FromoaFloatAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaBusTermDefp result= (oaFloatAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBusTermDef_FromoaFloatAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaBusTermDefp result= (oaFloatAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaBusTermDef_FromoaFloatAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBusTermDefp result= (oaFloatAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaBusTermDef_FromoaFloatAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBusTermDefp result= (oaFloatAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaBusTermDef_FromoaFloatAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaBusTermDefp result= (oaFloatAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaBusTermDef_FromoaFloatAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaBusTermDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaBusTermDef_static_find,METH_VARARGS,oaFloatAppDef_oaBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaBusTermDef_static_get,METH_VARARGS,oaFloatAppDef_oaBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaBusTermDef",
           (PyObject*)(&PyoaFloatAppDef_oaBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaBusTermDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaCMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaCMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaCMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaCMapObject* self = (PyoaFloatAppDef_oaCMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaCMap)
    {
        PyParamoaFloatAppDef_oaCMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaCMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaCMap, Choices are:\n"
        "    (oaFloatAppDef_oaCMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaCMap_tp_dealloc(PyoaFloatAppDef_oaCMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaCMap_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaCMap value;
    int convert_status=PyoaFloatAppDef_oaCMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaFloatAppDef_oaCMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaCMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaCMap v1;
    PyParamoaFloatAppDef_oaCMap v2;
    int convert_status1=PyoaFloatAppDef_oaCMap_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaCMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaCMap_Convert(PyObject* ob,PyParamoaFloatAppDef_oaCMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaCMap_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaCMap**) ((PyoaFloatAppDef_oaCMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaCMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaCMap_FromoaFloatAppDef_oaCMap(oaFloatAppDef_oaCMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaCMap* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaCMap_Type.tp_alloc(&PyoaFloatAppDef_oaCMap_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaCMapObject* self = (PyoaFloatAppDef_oaCMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaCMap_FromoaFloatAppDef_oaCMap(oaFloatAppDef_oaCMap* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaCMap_Type.tp_alloc(&PyoaFloatAppDef_oaCMap_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaCMapObject* self = (PyoaFloatAppDef_oaCMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCMap_get_doc[] = 
"Class: oaFloatAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaCMap)\n"
"    Calls: oaFloat get(const oaCMap* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaCMap,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaCMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCMap data;
    int convert_status=PyoaFloatAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaCMapObject* self=(PyoaFloatAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCMap_getDefault_doc[] = 
"Class: oaFloatAppDef_oaCMap, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaCMap_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCMap data;
    int convert_status=PyoaFloatAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaCMapObject* self=(PyoaFloatAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCMap_set_doc[] = 
"Class: oaFloatAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaCMap,oaFloat)\n"
"    Calls: void set(oaCMap* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaCMap,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaCMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCMap data;
    int convert_status=PyoaFloatAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaCMapObject* self=(PyoaFloatAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCMap_isNull_doc[] =
"Class: oaFloatAppDef_oaCMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaCMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaCMap data;
    int convert_status=PyoaFloatAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaCMap_assign_doc[] = 
"Class: oaFloatAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaCMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaCMap data;
  int convert_status=PyoaFloatAppDef_oaCMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaCMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaCMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaCMap_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaCMap_get,METH_VARARGS,oaFloatAppDef_oaCMap_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaCMap_getDefault,METH_VARARGS,oaFloatAppDef_oaCMap_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaCMap_set,METH_VARARGS,oaFloatAppDef_oaCMap_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaCMap_tp_isNull,METH_VARARGS,oaFloatAppDef_oaCMap_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaCMap_tp_assign,METH_VARARGS,oaFloatAppDef_oaCMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCMap_doc[] = 
"Class: oaFloatAppDef_oaCMap\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaCMap)\n"
"    Calls: (const oaFloatAppDef_oaCMap&)\n"
"    Signature: oaFloatAppDef_oaCMap||cref-oaFloatAppDef_oaCMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaCMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaCMap",
    sizeof(PyoaFloatAppDef_oaCMapObject),
    0,
    (destructor)oaFloatAppDef_oaCMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaCMap_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaCMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaCMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaCMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaCMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCMap_static_find_doc[] = 
"Class: oaFloatAppDef_oaCMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaCMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaCMap|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaCMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaCMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaCMapp result= (oaFloatAppDef_oaCMap::find(p1.Data()));
            return PyoaFloatAppDef_oaCMap_FromoaFloatAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCMapp result= (oaFloatAppDef_oaCMap::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCMap_FromoaFloatAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaCMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCMap_static_get_doc[] = 
"Class: oaFloatAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaCMap* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCMap|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaCMap* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCMap|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaCMap* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCMap|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaCMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaCMapp result= (oaFloatAppDef_oaCMap::get(p1.Data()));
            return PyoaFloatAppDef_oaCMap_FromoaFloatAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaCMapp result= (oaFloatAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCMap_FromoaFloatAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaCMapp result= (oaFloatAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaCMap_FromoaFloatAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCMapp result= (oaFloatAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCMap_FromoaFloatAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCMapp result= (oaFloatAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaCMap_FromoaFloatAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCMapp result= (oaFloatAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaCMap_FromoaFloatAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaCMap, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaCMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaCMap_static_find,METH_VARARGS,oaFloatAppDef_oaCMap_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaCMap_static_get,METH_VARARGS,oaFloatAppDef_oaCMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaCMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaCMap_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaCMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaCMap",
           (PyObject*)(&PyoaFloatAppDef_oaCMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaCMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaCMap_Type.tp_dict;
    for(method=oaFloatAppDef_oaCMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaCell
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaCell_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaCell_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaCellObject* self = (PyoaFloatAppDef_oaCellObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaCell)
    {
        PyParamoaFloatAppDef_oaCell p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaCell_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaCell, Choices are:\n"
        "    (oaFloatAppDef_oaCell)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaCell_tp_dealloc(PyoaFloatAppDef_oaCellObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaCell_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaCell value;
    int convert_status=PyoaFloatAppDef_oaCell_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaFloatAppDef_oaCell::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaCell_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaCell v1;
    PyParamoaFloatAppDef_oaCell v2;
    int convert_status1=PyoaFloatAppDef_oaCell_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaCell_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaCell_Convert(PyObject* ob,PyParamoaFloatAppDef_oaCell* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaCell_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaCell**) ((PyoaFloatAppDef_oaCellObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaCell Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaCell_FromoaFloatAppDef_oaCell(oaFloatAppDef_oaCell** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaCell* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaCell_Type.tp_alloc(&PyoaFloatAppDef_oaCell_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaCellObject* self = (PyoaFloatAppDef_oaCellObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaCell_FromoaFloatAppDef_oaCell(oaFloatAppDef_oaCell* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaCell_Type.tp_alloc(&PyoaFloatAppDef_oaCell_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaCellObject* self = (PyoaFloatAppDef_oaCellObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCell_get_doc[] = 
"Class: oaFloatAppDef_oaCell, Function: get\n"
"  Paramegers: (oaCell)\n"
"    Calls: oaFloat get(const oaCell* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaCell,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaCell_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCell data;
    int convert_status=PyoaFloatAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaCellObject* self=(PyoaFloatAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCell_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCell_getDefault_doc[] = 
"Class: oaFloatAppDef_oaCell, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaCell_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCell data;
    int convert_status=PyoaFloatAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaCellObject* self=(PyoaFloatAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCell_set_doc[] = 
"Class: oaFloatAppDef_oaCell, Function: set\n"
"  Paramegers: (oaCell,oaFloat)\n"
"    Calls: void set(oaCell* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaCell,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaCell_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCell data;
    int convert_status=PyoaFloatAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaCellObject* self=(PyoaFloatAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCell_isNull_doc[] =
"Class: oaFloatAppDef_oaCell, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaCell_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaCell data;
    int convert_status=PyoaFloatAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaCell_assign_doc[] = 
"Class: oaFloatAppDef_oaCell, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaCell_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaCell data;
  int convert_status=PyoaFloatAppDef_oaCell_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaCell p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaCell_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaCell_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaCell_get,METH_VARARGS,oaFloatAppDef_oaCell_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaCell_getDefault,METH_VARARGS,oaFloatAppDef_oaCell_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaCell_set,METH_VARARGS,oaFloatAppDef_oaCell_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaCell_tp_isNull,METH_VARARGS,oaFloatAppDef_oaCell_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaCell_tp_assign,METH_VARARGS,oaFloatAppDef_oaCell_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCell_doc[] = 
"Class: oaFloatAppDef_oaCell\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaCell)\n"
"    Calls: (const oaFloatAppDef_oaCell&)\n"
"    Signature: oaFloatAppDef_oaCell||cref-oaFloatAppDef_oaCell,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaCell_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaCell",
    sizeof(PyoaFloatAppDef_oaCellObject),
    0,
    (destructor)oaFloatAppDef_oaCell_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaCell_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaCell_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaCell_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaCell_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaCell_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCell_static_find_doc[] = 
"Class: oaFloatAppDef_oaCell, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaCell* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaCell|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaCell* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaCell_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaCellp result= (oaFloatAppDef_oaCell::find(p1.Data()));
            return PyoaFloatAppDef_oaCell_FromoaFloatAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCellp result= (oaFloatAppDef_oaCell::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCell_FromoaFloatAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaCell, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCell_static_get_doc[] = 
"Class: oaFloatAppDef_oaCell, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaCell* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCell|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaCell* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCell|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaCell* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCell|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaCell_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaCellp result= (oaFloatAppDef_oaCell::get(p1.Data()));
            return PyoaFloatAppDef_oaCell_FromoaFloatAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaCellp result= (oaFloatAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCell_FromoaFloatAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaCellp result= (oaFloatAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaCell_FromoaFloatAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCellp result= (oaFloatAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCell_FromoaFloatAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCellp result= (oaFloatAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaCell_FromoaFloatAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCellp result= (oaFloatAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaCell_FromoaFloatAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaCell, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaCell_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaCell_static_find,METH_VARARGS,oaFloatAppDef_oaCell_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaCell_static_get,METH_VARARGS,oaFloatAppDef_oaCell_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaCell_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaCell_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaCell\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaCell",
           (PyObject*)(&PyoaFloatAppDef_oaCell_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaCell\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaCell_Type.tp_dict;
    for(method=oaFloatAppDef_oaCell_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaCellView
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaCellView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaCellView_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaCellViewObject* self = (PyoaFloatAppDef_oaCellViewObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaCellView)
    {
        PyParamoaFloatAppDef_oaCellView p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaCellView_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaCellView, Choices are:\n"
        "    (oaFloatAppDef_oaCellView)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaCellView_tp_dealloc(PyoaFloatAppDef_oaCellViewObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaCellView_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaCellView value;
    int convert_status=PyoaFloatAppDef_oaCellView_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaFloatAppDef_oaCellView::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaCellView_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaCellView v1;
    PyParamoaFloatAppDef_oaCellView v2;
    int convert_status1=PyoaFloatAppDef_oaCellView_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaCellView_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaCellView_Convert(PyObject* ob,PyParamoaFloatAppDef_oaCellView* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaCellView_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaCellView**) ((PyoaFloatAppDef_oaCellViewObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaCellView Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaCellView_FromoaFloatAppDef_oaCellView(oaFloatAppDef_oaCellView** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaCellView* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaCellView_Type.tp_alloc(&PyoaFloatAppDef_oaCellView_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaCellViewObject* self = (PyoaFloatAppDef_oaCellViewObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaCellView_FromoaFloatAppDef_oaCellView(oaFloatAppDef_oaCellView* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaCellView_Type.tp_alloc(&PyoaFloatAppDef_oaCellView_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaCellViewObject* self = (PyoaFloatAppDef_oaCellViewObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCellView_get_doc[] = 
"Class: oaFloatAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaCellView)\n"
"    Calls: oaFloat get(const oaCellView* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaCellView,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaCellView_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCellView data;
    int convert_status=PyoaFloatAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaCellViewObject* self=(PyoaFloatAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCellView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCellView_getDefault_doc[] = 
"Class: oaFloatAppDef_oaCellView, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaCellView_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCellView data;
    int convert_status=PyoaFloatAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaCellViewObject* self=(PyoaFloatAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCellView_set_doc[] = 
"Class: oaFloatAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaCellView,oaFloat)\n"
"    Calls: void set(oaCellView* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaCellView,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaCellView_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCellView data;
    int convert_status=PyoaFloatAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaCellViewObject* self=(PyoaFloatAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCellView_isNull_doc[] =
"Class: oaFloatAppDef_oaCellView, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaCellView_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaCellView data;
    int convert_status=PyoaFloatAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaCellView_assign_doc[] = 
"Class: oaFloatAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaCellView_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaCellView data;
  int convert_status=PyoaFloatAppDef_oaCellView_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaCellView p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaCellView_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaCellView_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaCellView_get,METH_VARARGS,oaFloatAppDef_oaCellView_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaCellView_getDefault,METH_VARARGS,oaFloatAppDef_oaCellView_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaCellView_set,METH_VARARGS,oaFloatAppDef_oaCellView_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaCellView_tp_isNull,METH_VARARGS,oaFloatAppDef_oaCellView_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaCellView_tp_assign,METH_VARARGS,oaFloatAppDef_oaCellView_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCellView_doc[] = 
"Class: oaFloatAppDef_oaCellView\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaCellView)\n"
"    Calls: (const oaFloatAppDef_oaCellView&)\n"
"    Signature: oaFloatAppDef_oaCellView||cref-oaFloatAppDef_oaCellView,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaCellView_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaCellView",
    sizeof(PyoaFloatAppDef_oaCellViewObject),
    0,
    (destructor)oaFloatAppDef_oaCellView_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaCellView_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaCellView_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaCellView_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaCellView_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaCellView_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCellView_static_find_doc[] = 
"Class: oaFloatAppDef_oaCellView, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaCellView* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaCellView|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaCellView* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaCellView_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaCellViewp result= (oaFloatAppDef_oaCellView::find(p1.Data()));
            return PyoaFloatAppDef_oaCellView_FromoaFloatAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCellViewp result= (oaFloatAppDef_oaCellView::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCellView_FromoaFloatAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaCellView, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCellView_static_get_doc[] = 
"Class: oaFloatAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaCellView* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCellView|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaCellView* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCellView|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaCellView* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCellView|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaCellView_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaCellViewp result= (oaFloatAppDef_oaCellView::get(p1.Data()));
            return PyoaFloatAppDef_oaCellView_FromoaFloatAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaCellViewp result= (oaFloatAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCellView_FromoaFloatAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaCellViewp result= (oaFloatAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaCellView_FromoaFloatAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCellViewp result= (oaFloatAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCellView_FromoaFloatAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCellViewp result= (oaFloatAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaCellView_FromoaFloatAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaCellViewp result= (oaFloatAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaCellView_FromoaFloatAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaCellView, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaCellView_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaCellView_static_find,METH_VARARGS,oaFloatAppDef_oaCellView_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaCellView_static_get,METH_VARARGS,oaFloatAppDef_oaCellView_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaCellView_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaCellView_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaCellView\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaCellView",
           (PyObject*)(&PyoaFloatAppDef_oaCellView_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaCellView\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaCellView_Type.tp_dict;
    for(method=oaFloatAppDef_oaCellView_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaCluster
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaCluster_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaCluster_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaClusterObject* self = (PyoaFloatAppDef_oaClusterObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaCluster)
    {
        PyParamoaFloatAppDef_oaCluster p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaCluster_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaCluster, Choices are:\n"
        "    (oaFloatAppDef_oaCluster)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaCluster_tp_dealloc(PyoaFloatAppDef_oaClusterObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaCluster_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaCluster value;
    int convert_status=PyoaFloatAppDef_oaCluster_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaFloatAppDef_oaCluster::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaCluster_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaCluster v1;
    PyParamoaFloatAppDef_oaCluster v2;
    int convert_status1=PyoaFloatAppDef_oaCluster_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaCluster_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaCluster_Convert(PyObject* ob,PyParamoaFloatAppDef_oaCluster* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaCluster_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaCluster**) ((PyoaFloatAppDef_oaClusterObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaCluster Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaCluster_FromoaFloatAppDef_oaCluster(oaFloatAppDef_oaCluster** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaCluster* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaCluster_Type.tp_alloc(&PyoaFloatAppDef_oaCluster_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaClusterObject* self = (PyoaFloatAppDef_oaClusterObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaCluster_FromoaFloatAppDef_oaCluster(oaFloatAppDef_oaCluster* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaCluster_Type.tp_alloc(&PyoaFloatAppDef_oaCluster_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaClusterObject* self = (PyoaFloatAppDef_oaClusterObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCluster_get_doc[] = 
"Class: oaFloatAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaCluster)\n"
"    Calls: oaFloat get(const oaCluster* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaCluster,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaCluster_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCluster data;
    int convert_status=PyoaFloatAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaClusterObject* self=(PyoaFloatAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCluster_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCluster_getDefault_doc[] = 
"Class: oaFloatAppDef_oaCluster, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaCluster_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCluster data;
    int convert_status=PyoaFloatAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaClusterObject* self=(PyoaFloatAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCluster_set_doc[] = 
"Class: oaFloatAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaCluster,oaFloat)\n"
"    Calls: void set(oaCluster* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaCluster,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaCluster_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaCluster data;
    int convert_status=PyoaFloatAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaClusterObject* self=(PyoaFloatAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCluster_isNull_doc[] =
"Class: oaFloatAppDef_oaCluster, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaCluster_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaCluster data;
    int convert_status=PyoaFloatAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaCluster_assign_doc[] = 
"Class: oaFloatAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaCluster_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaCluster data;
  int convert_status=PyoaFloatAppDef_oaCluster_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaCluster p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaCluster_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaCluster_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaCluster_get,METH_VARARGS,oaFloatAppDef_oaCluster_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaCluster_getDefault,METH_VARARGS,oaFloatAppDef_oaCluster_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaCluster_set,METH_VARARGS,oaFloatAppDef_oaCluster_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaCluster_tp_isNull,METH_VARARGS,oaFloatAppDef_oaCluster_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaCluster_tp_assign,METH_VARARGS,oaFloatAppDef_oaCluster_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCluster_doc[] = 
"Class: oaFloatAppDef_oaCluster\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaCluster)\n"
"    Calls: (const oaFloatAppDef_oaCluster&)\n"
"    Signature: oaFloatAppDef_oaCluster||cref-oaFloatAppDef_oaCluster,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaCluster_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaCluster",
    sizeof(PyoaFloatAppDef_oaClusterObject),
    0,
    (destructor)oaFloatAppDef_oaCluster_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaCluster_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaCluster_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaCluster_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaCluster_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaCluster_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCluster_static_find_doc[] = 
"Class: oaFloatAppDef_oaCluster, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaCluster* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaCluster|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaCluster* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaCluster_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaClusterp result= (oaFloatAppDef_oaCluster::find(p1.Data()));
            return PyoaFloatAppDef_oaCluster_FromoaFloatAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaClusterp result= (oaFloatAppDef_oaCluster::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCluster_FromoaFloatAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaCluster, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaCluster_static_get_doc[] = 
"Class: oaFloatAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaCluster* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCluster|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaCluster* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCluster|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaCluster* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCluster|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaCluster_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaClusterp result= (oaFloatAppDef_oaCluster::get(p1.Data()));
            return PyoaFloatAppDef_oaCluster_FromoaFloatAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaClusterp result= (oaFloatAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCluster_FromoaFloatAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaClusterp result= (oaFloatAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaCluster_FromoaFloatAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaClusterp result= (oaFloatAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaCluster_FromoaFloatAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaClusterp result= (oaFloatAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaCluster_FromoaFloatAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaClusterp result= (oaFloatAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaCluster_FromoaFloatAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaCluster, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaCluster_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaCluster_static_find,METH_VARARGS,oaFloatAppDef_oaCluster_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaCluster_static_get,METH_VARARGS,oaFloatAppDef_oaCluster_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaCluster_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaCluster_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaCluster\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaCluster",
           (PyObject*)(&PyoaFloatAppDef_oaCluster_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaCluster\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaCluster_Type.tp_dict;
    for(method=oaFloatAppDef_oaCluster_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaConnectDefObject* self = (PyoaFloatAppDef_oaConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaConnectDef)
    {
        PyParamoaFloatAppDef_oaConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaConnectDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaConnectDef, Choices are:\n"
        "    (oaFloatAppDef_oaConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaConnectDef_tp_dealloc(PyoaFloatAppDef_oaConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaConnectDef value;
    int convert_status=PyoaFloatAppDef_oaConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaFloatAppDef_oaConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaConnectDef v1;
    PyParamoaFloatAppDef_oaConnectDef v2;
    int convert_status1=PyoaFloatAppDef_oaConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaConnectDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaConnectDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaConnectDef**) ((PyoaFloatAppDef_oaConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConnectDef_FromoaFloatAppDef_oaConnectDef(oaFloatAppDef_oaConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaConnectDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaConnectDef_Type.tp_alloc(&PyoaFloatAppDef_oaConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaConnectDefObject* self = (PyoaFloatAppDef_oaConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConnectDef_FromoaFloatAppDef_oaConnectDef(oaFloatAppDef_oaConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaConnectDef_Type.tp_alloc(&PyoaFloatAppDef_oaConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaConnectDefObject* self = (PyoaFloatAppDef_oaConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConnectDef_get_doc[] = 
"Class: oaFloatAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaConnectDef)\n"
"    Calls: oaFloat get(const oaConnectDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaConnectDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConnectDef data;
    int convert_status=PyoaFloatAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConnectDefObject* self=(PyoaFloatAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConnectDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaConnectDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConnectDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConnectDef data;
    int convert_status=PyoaFloatAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConnectDefObject* self=(PyoaFloatAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConnectDef_set_doc[] = 
"Class: oaFloatAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaConnectDef,oaFloat)\n"
"    Calls: void set(oaConnectDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaConnectDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConnectDef data;
    int convert_status=PyoaFloatAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConnectDefObject* self=(PyoaFloatAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConnectDef_isNull_doc[] =
"Class: oaFloatAppDef_oaConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaConnectDef data;
    int convert_status=PyoaFloatAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaConnectDef_assign_doc[] = 
"Class: oaFloatAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaConnectDef data;
  int convert_status=PyoaFloatAppDef_oaConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaConnectDef_get,METH_VARARGS,oaFloatAppDef_oaConnectDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaConnectDef_getDefault,METH_VARARGS,oaFloatAppDef_oaConnectDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaConnectDef_set,METH_VARARGS,oaFloatAppDef_oaConnectDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaConnectDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaConnectDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConnectDef_doc[] = 
"Class: oaFloatAppDef_oaConnectDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaConnectDef)\n"
"    Calls: (const oaFloatAppDef_oaConnectDef&)\n"
"    Signature: oaFloatAppDef_oaConnectDef||cref-oaFloatAppDef_oaConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaConnectDef",
    sizeof(PyoaFloatAppDef_oaConnectDefObject),
    0,
    (destructor)oaFloatAppDef_oaConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConnectDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConnectDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConnectDefp result= (oaFloatAppDef_oaConnectDef::find(p1.Data()));
            return PyoaFloatAppDef_oaConnectDef_FromoaFloatAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConnectDefp result= (oaFloatAppDef_oaConnectDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConnectDef_FromoaFloatAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConnectDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConnectDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConnectDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConnectDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConnectDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConnectDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConnectDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConnectDefp result= (oaFloatAppDef_oaConnectDef::get(p1.Data()));
            return PyoaFloatAppDef_oaConnectDef_FromoaFloatAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaConnectDefp result= (oaFloatAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConnectDef_FromoaFloatAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaConnectDefp result= (oaFloatAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConnectDef_FromoaFloatAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConnectDefp result= (oaFloatAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConnectDef_FromoaFloatAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConnectDefp result= (oaFloatAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConnectDef_FromoaFloatAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConnectDefp result= (oaFloatAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaConnectDef_FromoaFloatAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConnectDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaConnectDef_static_find,METH_VARARGS,oaFloatAppDef_oaConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaConnectDef_static_get,METH_VARARGS,oaFloatAppDef_oaConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaConnectDef",
           (PyObject*)(&PyoaFloatAppDef_oaConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaConnectDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaConstraint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaConstraint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaConstraintObject* self = (PyoaFloatAppDef_oaConstraintObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaConstraint)
    {
        PyParamoaFloatAppDef_oaConstraint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaConstraint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaConstraint, Choices are:\n"
        "    (oaFloatAppDef_oaConstraint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaConstraint_tp_dealloc(PyoaFloatAppDef_oaConstraintObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraint_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaConstraint value;
    int convert_status=PyoaFloatAppDef_oaConstraint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaFloatAppDef_oaConstraint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaConstraint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaConstraint v1;
    PyParamoaFloatAppDef_oaConstraint v2;
    int convert_status1=PyoaFloatAppDef_oaConstraint_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaConstraint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaConstraint_Convert(PyObject* ob,PyParamoaFloatAppDef_oaConstraint* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaConstraint_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaConstraint**) ((PyoaFloatAppDef_oaConstraintObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaConstraint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraint_FromoaFloatAppDef_oaConstraint(oaFloatAppDef_oaConstraint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaConstraint* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaConstraint_Type.tp_alloc(&PyoaFloatAppDef_oaConstraint_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaConstraintObject* self = (PyoaFloatAppDef_oaConstraintObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraint_FromoaFloatAppDef_oaConstraint(oaFloatAppDef_oaConstraint* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaConstraint_Type.tp_alloc(&PyoaFloatAppDef_oaConstraint_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaConstraintObject* self = (PyoaFloatAppDef_oaConstraintObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraint_get_doc[] = 
"Class: oaFloatAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaConstraint)\n"
"    Calls: oaFloat get(const oaConstraint* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaConstraint,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraint data;
    int convert_status=PyoaFloatAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintObject* self=(PyoaFloatAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraint_getDefault_doc[] = 
"Class: oaFloatAppDef_oaConstraint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraint data;
    int convert_status=PyoaFloatAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintObject* self=(PyoaFloatAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraint_set_doc[] = 
"Class: oaFloatAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaConstraint,oaFloat)\n"
"    Calls: void set(oaConstraint* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaConstraint,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaConstraint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraint data;
    int convert_status=PyoaFloatAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintObject* self=(PyoaFloatAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraint_isNull_doc[] =
"Class: oaFloatAppDef_oaConstraint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaConstraint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaConstraint data;
    int convert_status=PyoaFloatAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaConstraint_assign_doc[] = 
"Class: oaFloatAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaConstraint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaConstraint data;
  int convert_status=PyoaFloatAppDef_oaConstraint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaConstraint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaConstraint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaConstraint_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaConstraint_get,METH_VARARGS,oaFloatAppDef_oaConstraint_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaConstraint_getDefault,METH_VARARGS,oaFloatAppDef_oaConstraint_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaConstraint_set,METH_VARARGS,oaFloatAppDef_oaConstraint_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaConstraint_tp_isNull,METH_VARARGS,oaFloatAppDef_oaConstraint_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaConstraint_tp_assign,METH_VARARGS,oaFloatAppDef_oaConstraint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraint_doc[] = 
"Class: oaFloatAppDef_oaConstraint\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaConstraint)\n"
"    Calls: (const oaFloatAppDef_oaConstraint&)\n"
"    Signature: oaFloatAppDef_oaConstraint||cref-oaFloatAppDef_oaConstraint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaConstraint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaConstraint",
    sizeof(PyoaFloatAppDef_oaConstraintObject),
    0,
    (destructor)oaFloatAppDef_oaConstraint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaConstraint_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaConstraint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaConstraint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaConstraint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaConstraint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraint_static_find_doc[] = 
"Class: oaFloatAppDef_oaConstraint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraint* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraint|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaConstraint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintp result= (oaFloatAppDef_oaConstraint::find(p1.Data()));
            return PyoaFloatAppDef_oaConstraint_FromoaFloatAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintp result= (oaFloatAppDef_oaConstraint::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraint_FromoaFloatAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraint_static_get_doc[] = 
"Class: oaFloatAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraint* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraint|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraint* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraint|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraint* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraint|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaConstraint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintp result= (oaFloatAppDef_oaConstraint::get(p1.Data()));
            return PyoaFloatAppDef_oaConstraint_FromoaFloatAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaConstraintp result= (oaFloatAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraint_FromoaFloatAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaConstraintp result= (oaFloatAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraint_FromoaFloatAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintp result= (oaFloatAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraint_FromoaFloatAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintp result= (oaFloatAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraint_FromoaFloatAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintp result= (oaFloatAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaConstraint_FromoaFloatAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaConstraint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaConstraint_static_find,METH_VARARGS,oaFloatAppDef_oaConstraint_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaConstraint_static_get,METH_VARARGS,oaFloatAppDef_oaConstraint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaConstraint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaConstraint_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaConstraint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaConstraint",
           (PyObject*)(&PyoaFloatAppDef_oaConstraint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaConstraint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaConstraint_Type.tp_dict;
    for(method=oaFloatAppDef_oaConstraint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaConstraintDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaConstraintDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaConstraintDefObject* self = (PyoaFloatAppDef_oaConstraintDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaConstraintDef)
    {
        PyParamoaFloatAppDef_oaConstraintDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaConstraintDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaConstraintDef, Choices are:\n"
        "    (oaFloatAppDef_oaConstraintDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaConstraintDef_tp_dealloc(PyoaFloatAppDef_oaConstraintDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaConstraintDef value;
    int convert_status=PyoaFloatAppDef_oaConstraintDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaConstraintDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaConstraintDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaConstraintDef v1;
    PyParamoaFloatAppDef_oaConstraintDef v2;
    int convert_status1=PyoaFloatAppDef_oaConstraintDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaConstraintDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaConstraintDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaConstraintDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaConstraintDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaConstraintDef**) ((PyoaFloatAppDef_oaConstraintDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaConstraintDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintDef_FromoaFloatAppDef_oaConstraintDef(oaFloatAppDef_oaConstraintDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaConstraintDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaConstraintDef_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaConstraintDefObject* self = (PyoaFloatAppDef_oaConstraintDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintDef_FromoaFloatAppDef_oaConstraintDef(oaFloatAppDef_oaConstraintDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaConstraintDef_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaConstraintDefObject* self = (PyoaFloatAppDef_oaConstraintDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintDef_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaConstraintDef)\n"
"    Calls: oaFloat get(const oaConstraintDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaConstraintDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintDef data;
    int convert_status=PyoaFloatAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintDefObject* self=(PyoaFloatAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaConstraintDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintDef data;
    int convert_status=PyoaFloatAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintDefObject* self=(PyoaFloatAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintDef_set_doc[] = 
"Class: oaFloatAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaConstraintDef,oaFloat)\n"
"    Calls: void set(oaConstraintDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaConstraintDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaConstraintDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintDef data;
    int convert_status=PyoaFloatAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintDefObject* self=(PyoaFloatAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintDef_isNull_doc[] =
"Class: oaFloatAppDef_oaConstraintDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaConstraintDef data;
    int convert_status=PyoaFloatAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaConstraintDef_assign_doc[] = 
"Class: oaFloatAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaConstraintDef data;
  int convert_status=PyoaFloatAppDef_oaConstraintDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaConstraintDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaConstraintDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaConstraintDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaConstraintDef_get,METH_VARARGS,oaFloatAppDef_oaConstraintDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaConstraintDef_getDefault,METH_VARARGS,oaFloatAppDef_oaConstraintDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaConstraintDef_set,METH_VARARGS,oaFloatAppDef_oaConstraintDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaConstraintDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaConstraintDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaConstraintDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaConstraintDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintDef_doc[] = 
"Class: oaFloatAppDef_oaConstraintDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaConstraintDef)\n"
"    Calls: (const oaFloatAppDef_oaConstraintDef&)\n"
"    Signature: oaFloatAppDef_oaConstraintDef||cref-oaFloatAppDef_oaConstraintDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaConstraintDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaConstraintDef",
    sizeof(PyoaFloatAppDef_oaConstraintDefObject),
    0,
    (destructor)oaFloatAppDef_oaConstraintDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaConstraintDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaConstraintDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaConstraintDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaConstraintDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaConstraintDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaConstraintDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaConstraintDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintDefp result= (oaFloatAppDef_oaConstraintDef::find(p1.Data()));
            return PyoaFloatAppDef_oaConstraintDef_FromoaFloatAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintDefp result= (oaFloatAppDef_oaConstraintDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintDef_FromoaFloatAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaConstraintDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintDefp result= (oaFloatAppDef_oaConstraintDef::get(p1.Data()));
            return PyoaFloatAppDef_oaConstraintDef_FromoaFloatAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaConstraintDefp result= (oaFloatAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintDef_FromoaFloatAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaConstraintDefp result= (oaFloatAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintDef_FromoaFloatAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintDefp result= (oaFloatAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintDef_FromoaFloatAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintDefp result= (oaFloatAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintDef_FromoaFloatAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintDefp result= (oaFloatAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaConstraintDef_FromoaFloatAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaConstraintDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaConstraintDef_static_find,METH_VARARGS,oaFloatAppDef_oaConstraintDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaConstraintDef_static_get,METH_VARARGS,oaFloatAppDef_oaConstraintDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaConstraintDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaConstraintDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaConstraintDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaConstraintDef",
           (PyObject*)(&PyoaFloatAppDef_oaConstraintDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaConstraintDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaConstraintDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaConstraintDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaConstraintGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaConstraintGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaConstraintGroupObject* self = (PyoaFloatAppDef_oaConstraintGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaConstraintGroup)
    {
        PyParamoaFloatAppDef_oaConstraintGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaConstraintGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaConstraintGroup, Choices are:\n"
        "    (oaFloatAppDef_oaConstraintGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaConstraintGroup_tp_dealloc(PyoaFloatAppDef_oaConstraintGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintGroup_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaConstraintGroup value;
    int convert_status=PyoaFloatAppDef_oaConstraintGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaFloatAppDef_oaConstraintGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaConstraintGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaConstraintGroup v1;
    PyParamoaFloatAppDef_oaConstraintGroup v2;
    int convert_status1=PyoaFloatAppDef_oaConstraintGroup_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaConstraintGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaConstraintGroup_Convert(PyObject* ob,PyParamoaFloatAppDef_oaConstraintGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaConstraintGroup_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaConstraintGroup**) ((PyoaFloatAppDef_oaConstraintGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaConstraintGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintGroup_FromoaFloatAppDef_oaConstraintGroup(oaFloatAppDef_oaConstraintGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaConstraintGroup* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaConstraintGroupObject* self = (PyoaFloatAppDef_oaConstraintGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintGroup_FromoaFloatAppDef_oaConstraintGroup(oaFloatAppDef_oaConstraintGroup* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaConstraintGroupObject* self = (PyoaFloatAppDef_oaConstraintGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroup_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaConstraintGroup)\n"
"    Calls: oaFloat get(const oaConstraintGroup* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaConstraintGroup,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintGroup data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintGroupObject* self=(PyoaFloatAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroup_getDefault_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintGroup data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintGroupObject* self=(PyoaFloatAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroup_set_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaConstraintGroup,oaFloat)\n"
"    Calls: void set(oaConstraintGroup* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroup,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintGroup data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintGroupObject* self=(PyoaFloatAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroup_isNull_doc[] =
"Class: oaFloatAppDef_oaConstraintGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaConstraintGroup data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaConstraintGroup_assign_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaConstraintGroup data;
  int convert_status=PyoaFloatAppDef_oaConstraintGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaConstraintGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaConstraintGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaConstraintGroup_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaConstraintGroup_get,METH_VARARGS,oaFloatAppDef_oaConstraintGroup_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaConstraintGroup_getDefault,METH_VARARGS,oaFloatAppDef_oaConstraintGroup_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaConstraintGroup_set,METH_VARARGS,oaFloatAppDef_oaConstraintGroup_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaConstraintGroup_tp_isNull,METH_VARARGS,oaFloatAppDef_oaConstraintGroup_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaConstraintGroup_tp_assign,METH_VARARGS,oaFloatAppDef_oaConstraintGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroup_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroup\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaConstraintGroup)\n"
"    Calls: (const oaFloatAppDef_oaConstraintGroup&)\n"
"    Signature: oaFloatAppDef_oaConstraintGroup||cref-oaFloatAppDef_oaConstraintGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaConstraintGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaConstraintGroup",
    sizeof(PyoaFloatAppDef_oaConstraintGroupObject),
    0,
    (destructor)oaFloatAppDef_oaConstraintGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaConstraintGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaConstraintGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaConstraintGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaConstraintGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaConstraintGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroup_static_find_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintGroup|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintGroupp result= (oaFloatAppDef_oaConstraintGroup::find(p1.Data()));
            return PyoaFloatAppDef_oaConstraintGroup_FromoaFloatAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupp result= (oaFloatAppDef_oaConstraintGroup::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintGroup_FromoaFloatAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroup_static_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroup|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintGroup* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroup|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintGroup* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroup|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintGroupp result= (oaFloatAppDef_oaConstraintGroup::get(p1.Data()));
            return PyoaFloatAppDef_oaConstraintGroup_FromoaFloatAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaConstraintGroupp result= (oaFloatAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintGroup_FromoaFloatAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaConstraintGroupp result= (oaFloatAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintGroup_FromoaFloatAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupp result= (oaFloatAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintGroup_FromoaFloatAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupp result= (oaFloatAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintGroup_FromoaFloatAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupp result= (oaFloatAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaConstraintGroup_FromoaFloatAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaConstraintGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaConstraintGroup_static_find,METH_VARARGS,oaFloatAppDef_oaConstraintGroup_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaConstraintGroup_static_get,METH_VARARGS,oaFloatAppDef_oaConstraintGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaConstraintGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaConstraintGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaConstraintGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaConstraintGroup",
           (PyObject*)(&PyoaFloatAppDef_oaConstraintGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaConstraintGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaConstraintGroup_Type.tp_dict;
    for(method=oaFloatAppDef_oaConstraintGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaConstraintGroupHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintGroupHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaConstraintGroupHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaConstraintGroupHeaderObject* self = (PyoaFloatAppDef_oaConstraintGroupHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaConstraintGroupHeader)
    {
        PyParamoaFloatAppDef_oaConstraintGroupHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaConstraintGroupHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaConstraintGroupHeader, Choices are:\n"
        "    (oaFloatAppDef_oaConstraintGroupHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaConstraintGroupHeader_tp_dealloc(PyoaFloatAppDef_oaConstraintGroupHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintGroupHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaConstraintGroupHeader value;
    int convert_status=PyoaFloatAppDef_oaConstraintGroupHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[59];
    sprintf(buffer,"<oaFloatAppDef_oaConstraintGroupHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaConstraintGroupHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaConstraintGroupHeader v1;
    PyParamoaFloatAppDef_oaConstraintGroupHeader v2;
    int convert_status1=PyoaFloatAppDef_oaConstraintGroupHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaConstraintGroupHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaConstraintGroupHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaConstraintGroupHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaConstraintGroupHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaConstraintGroupHeader**) ((PyoaFloatAppDef_oaConstraintGroupHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaConstraintGroupHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintGroupHeader_FromoaFloatAppDef_oaConstraintGroupHeader(oaFloatAppDef_oaConstraintGroupHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaConstraintGroupHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintGroupHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaConstraintGroupHeaderObject* self = (PyoaFloatAppDef_oaConstraintGroupHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintGroupHeader_FromoaFloatAppDef_oaConstraintGroupHeader(oaFloatAppDef_oaConstraintGroupHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintGroupHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaConstraintGroupHeaderObject* self = (PyoaFloatAppDef_oaConstraintGroupHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupHeader_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaConstraintGroupHeader)\n"
"    Calls: oaFloat get(const oaConstraintGroupHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaConstraintGroupHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintGroupHeaderObject* self=(PyoaFloatAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintGroupHeaderObject* self=(PyoaFloatAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupHeader_set_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaConstraintGroupHeader,oaFloat)\n"
"    Calls: void set(oaConstraintGroupHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintGroupHeaderObject* self=(PyoaFloatAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaConstraintGroupHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaConstraintGroupHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaConstraintGroupHeader data;
  int convert_status=PyoaFloatAppDef_oaConstraintGroupHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaConstraintGroupHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaConstraintGroupHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaConstraintGroupHeader_get,METH_VARARGS,oaFloatAppDef_oaConstraintGroupHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaConstraintGroupHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaConstraintGroupHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaConstraintGroupHeader_set,METH_VARARGS,oaFloatAppDef_oaConstraintGroupHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaConstraintGroupHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaConstraintGroupHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaConstraintGroupHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaConstraintGroupHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupHeader_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaConstraintGroupHeader)\n"
"    Calls: (const oaFloatAppDef_oaConstraintGroupHeader&)\n"
"    Signature: oaFloatAppDef_oaConstraintGroupHeader||cref-oaFloatAppDef_oaConstraintGroupHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaConstraintGroupHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaConstraintGroupHeader",
    sizeof(PyoaFloatAppDef_oaConstraintGroupHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaConstraintGroupHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaConstraintGroupHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaConstraintGroupHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaConstraintGroupHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaConstraintGroupHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaConstraintGroupHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintGroupHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintGroupHeaderp result= (oaFloatAppDef_oaConstraintGroupHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaConstraintGroupHeader_FromoaFloatAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupHeaderp result= (oaFloatAppDef_oaConstraintGroupHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintGroupHeader_FromoaFloatAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintGroupHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintGroupHeaderp result= (oaFloatAppDef_oaConstraintGroupHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaConstraintGroupHeader_FromoaFloatAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaConstraintGroupHeaderp result= (oaFloatAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintGroupHeader_FromoaFloatAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaConstraintGroupHeaderp result= (oaFloatAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintGroupHeader_FromoaFloatAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupHeaderp result= (oaFloatAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintGroupHeader_FromoaFloatAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupHeaderp result= (oaFloatAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintGroupHeader_FromoaFloatAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupHeaderp result= (oaFloatAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaConstraintGroupHeader_FromoaFloatAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintGroupHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaConstraintGroupHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaConstraintGroupHeader_static_find,METH_VARARGS,oaFloatAppDef_oaConstraintGroupHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaConstraintGroupHeader_static_get,METH_VARARGS,oaFloatAppDef_oaConstraintGroupHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaConstraintGroupHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaConstraintGroupHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaConstraintGroupHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaConstraintGroupHeader",
           (PyObject*)(&PyoaFloatAppDef_oaConstraintGroupHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaConstraintGroupHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaConstraintGroupHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaConstraintGroupHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaConstraintGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaConstraintGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaConstraintGroupMemObject* self = (PyoaFloatAppDef_oaConstraintGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaConstraintGroupMem)
    {
        PyParamoaFloatAppDef_oaConstraintGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaConstraintGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaConstraintGroupMem, Choices are:\n"
        "    (oaFloatAppDef_oaConstraintGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaConstraintGroupMem_tp_dealloc(PyoaFloatAppDef_oaConstraintGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaConstraintGroupMem value;
    int convert_status=PyoaFloatAppDef_oaConstraintGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[56];
    sprintf(buffer,"<oaFloatAppDef_oaConstraintGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaConstraintGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaConstraintGroupMem v1;
    PyParamoaFloatAppDef_oaConstraintGroupMem v2;
    int convert_status1=PyoaFloatAppDef_oaConstraintGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaConstraintGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaConstraintGroupMem_Convert(PyObject* ob,PyParamoaFloatAppDef_oaConstraintGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaConstraintGroupMem_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaConstraintGroupMem**) ((PyoaFloatAppDef_oaConstraintGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaConstraintGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintGroupMem_FromoaFloatAppDef_oaConstraintGroupMem(oaFloatAppDef_oaConstraintGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaConstraintGroupMem* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaConstraintGroupMemObject* self = (PyoaFloatAppDef_oaConstraintGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintGroupMem_FromoaFloatAppDef_oaConstraintGroupMem(oaFloatAppDef_oaConstraintGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaConstraintGroupMemObject* self = (PyoaFloatAppDef_oaConstraintGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupMem_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaConstraintGroupMem)\n"
"    Calls: oaFloat get(const oaConstraintGroupMem* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaConstraintGroupMem,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintGroupMemObject* self=(PyoaFloatAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupMem_getDefault_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupMem, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupMem_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintGroupMemObject* self=(PyoaFloatAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupMem_set_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaConstraintGroupMem,oaFloat)\n"
"    Calls: void set(oaConstraintGroupMem* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupMem,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintGroupMemObject* self=(PyoaFloatAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupMem_isNull_doc[] =
"Class: oaFloatAppDef_oaConstraintGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaFloatAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaConstraintGroupMem_assign_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaConstraintGroupMem data;
  int convert_status=PyoaFloatAppDef_oaConstraintGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaConstraintGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaConstraintGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaConstraintGroupMem_get,METH_VARARGS,oaFloatAppDef_oaConstraintGroupMem_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaConstraintGroupMem_getDefault,METH_VARARGS,oaFloatAppDef_oaConstraintGroupMem_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaConstraintGroupMem_set,METH_VARARGS,oaFloatAppDef_oaConstraintGroupMem_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaConstraintGroupMem_tp_isNull,METH_VARARGS,oaFloatAppDef_oaConstraintGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaConstraintGroupMem_tp_assign,METH_VARARGS,oaFloatAppDef_oaConstraintGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupMem_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupMem\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaConstraintGroupMem)\n"
"    Calls: (const oaFloatAppDef_oaConstraintGroupMem&)\n"
"    Signature: oaFloatAppDef_oaConstraintGroupMem||cref-oaFloatAppDef_oaConstraintGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaConstraintGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaConstraintGroupMem",
    sizeof(PyoaFloatAppDef_oaConstraintGroupMemObject),
    0,
    (destructor)oaFloatAppDef_oaConstraintGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaConstraintGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaConstraintGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaConstraintGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaConstraintGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaConstraintGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupMem_static_find_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintGroupMem|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintGroupMemp result= (oaFloatAppDef_oaConstraintGroupMem::find(p1.Data()));
            return PyoaFloatAppDef_oaConstraintGroupMem_FromoaFloatAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupMemp result= (oaFloatAppDef_oaConstraintGroupMem::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintGroupMem_FromoaFloatAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintGroupMem_static_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupMem|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupMem* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupMem|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupMem* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupMem|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaConstraintGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintGroupMemp result= (oaFloatAppDef_oaConstraintGroupMem::get(p1.Data()));
            return PyoaFloatAppDef_oaConstraintGroupMem_FromoaFloatAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaConstraintGroupMemp result= (oaFloatAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintGroupMem_FromoaFloatAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaConstraintGroupMemp result= (oaFloatAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintGroupMem_FromoaFloatAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupMemp result= (oaFloatAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintGroupMem_FromoaFloatAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupMemp result= (oaFloatAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintGroupMem_FromoaFloatAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintGroupMemp result= (oaFloatAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaConstraintGroupMem_FromoaFloatAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaConstraintGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaConstraintGroupMem_static_find,METH_VARARGS,oaFloatAppDef_oaConstraintGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaConstraintGroupMem_static_get,METH_VARARGS,oaFloatAppDef_oaConstraintGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaConstraintGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaConstraintGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaConstraintGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaConstraintGroupMem",
           (PyObject*)(&PyoaFloatAppDef_oaConstraintGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaConstraintGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaConstraintGroupMem_Type.tp_dict;
    for(method=oaFloatAppDef_oaConstraintGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaConstraintParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaConstraintParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaConstraintParamObject* self = (PyoaFloatAppDef_oaConstraintParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaConstraintParam)
    {
        PyParamoaFloatAppDef_oaConstraintParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaConstraintParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaConstraintParam, Choices are:\n"
        "    (oaFloatAppDef_oaConstraintParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaConstraintParam_tp_dealloc(PyoaFloatAppDef_oaConstraintParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintParam_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaConstraintParam value;
    int convert_status=PyoaFloatAppDef_oaConstraintParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaFloatAppDef_oaConstraintParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaConstraintParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaConstraintParam v1;
    PyParamoaFloatAppDef_oaConstraintParam v2;
    int convert_status1=PyoaFloatAppDef_oaConstraintParam_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaConstraintParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaConstraintParam_Convert(PyObject* ob,PyParamoaFloatAppDef_oaConstraintParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaConstraintParam_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaConstraintParam**) ((PyoaFloatAppDef_oaConstraintParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaConstraintParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintParam_FromoaFloatAppDef_oaConstraintParam(oaFloatAppDef_oaConstraintParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaConstraintParam* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaConstraintParam_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintParam_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaConstraintParamObject* self = (PyoaFloatAppDef_oaConstraintParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintParam_FromoaFloatAppDef_oaConstraintParam(oaFloatAppDef_oaConstraintParam* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaConstraintParam_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintParam_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaConstraintParamObject* self = (PyoaFloatAppDef_oaConstraintParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParam_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaConstraintParam)\n"
"    Calls: oaFloat get(const oaConstraintParam* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaConstraintParam,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintParam data;
    int convert_status=PyoaFloatAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintParamObject* self=(PyoaFloatAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParam_getDefault_doc[] = 
"Class: oaFloatAppDef_oaConstraintParam, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintParam data;
    int convert_status=PyoaFloatAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintParamObject* self=(PyoaFloatAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParam_set_doc[] = 
"Class: oaFloatAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaConstraintParam,oaFloat)\n"
"    Calls: void set(oaConstraintParam* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaConstraintParam,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintParam data;
    int convert_status=PyoaFloatAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintParamObject* self=(PyoaFloatAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParam_isNull_doc[] =
"Class: oaFloatAppDef_oaConstraintParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaConstraintParam data;
    int convert_status=PyoaFloatAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaConstraintParam_assign_doc[] = 
"Class: oaFloatAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaConstraintParam data;
  int convert_status=PyoaFloatAppDef_oaConstraintParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaConstraintParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaConstraintParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaConstraintParam_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaConstraintParam_get,METH_VARARGS,oaFloatAppDef_oaConstraintParam_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaConstraintParam_getDefault,METH_VARARGS,oaFloatAppDef_oaConstraintParam_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaConstraintParam_set,METH_VARARGS,oaFloatAppDef_oaConstraintParam_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaConstraintParam_tp_isNull,METH_VARARGS,oaFloatAppDef_oaConstraintParam_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaConstraintParam_tp_assign,METH_VARARGS,oaFloatAppDef_oaConstraintParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParam_doc[] = 
"Class: oaFloatAppDef_oaConstraintParam\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaConstraintParam)\n"
"    Calls: (const oaFloatAppDef_oaConstraintParam&)\n"
"    Signature: oaFloatAppDef_oaConstraintParam||cref-oaFloatAppDef_oaConstraintParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaConstraintParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaConstraintParam",
    sizeof(PyoaFloatAppDef_oaConstraintParamObject),
    0,
    (destructor)oaFloatAppDef_oaConstraintParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaConstraintParam_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaConstraintParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaConstraintParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaConstraintParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaConstraintParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParam_static_find_doc[] = 
"Class: oaFloatAppDef_oaConstraintParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintParam|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintParamp result= (oaFloatAppDef_oaConstraintParam::find(p1.Data()));
            return PyoaFloatAppDef_oaConstraintParam_FromoaFloatAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintParamp result= (oaFloatAppDef_oaConstraintParam::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintParam_FromoaFloatAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParam_static_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParam|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintParam* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParam|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintParam* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParam|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintParamp result= (oaFloatAppDef_oaConstraintParam::get(p1.Data()));
            return PyoaFloatAppDef_oaConstraintParam_FromoaFloatAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaConstraintParamp result= (oaFloatAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintParam_FromoaFloatAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaConstraintParamp result= (oaFloatAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintParam_FromoaFloatAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintParamp result= (oaFloatAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintParam_FromoaFloatAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintParamp result= (oaFloatAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintParam_FromoaFloatAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintParamp result= (oaFloatAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaConstraintParam_FromoaFloatAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaConstraintParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaConstraintParam_static_find,METH_VARARGS,oaFloatAppDef_oaConstraintParam_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaConstraintParam_static_get,METH_VARARGS,oaFloatAppDef_oaConstraintParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaConstraintParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaConstraintParam_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaConstraintParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaConstraintParam",
           (PyObject*)(&PyoaFloatAppDef_oaConstraintParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaConstraintParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaConstraintParam_Type.tp_dict;
    for(method=oaFloatAppDef_oaConstraintParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaConstraintParamDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintParamDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaConstraintParamDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaConstraintParamDefObject* self = (PyoaFloatAppDef_oaConstraintParamDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaConstraintParamDef)
    {
        PyParamoaFloatAppDef_oaConstraintParamDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaConstraintParamDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaConstraintParamDef, Choices are:\n"
        "    (oaFloatAppDef_oaConstraintParamDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaConstraintParamDef_tp_dealloc(PyoaFloatAppDef_oaConstraintParamDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaConstraintParamDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaConstraintParamDef value;
    int convert_status=PyoaFloatAppDef_oaConstraintParamDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[56];
    sprintf(buffer,"<oaFloatAppDef_oaConstraintParamDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaConstraintParamDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaConstraintParamDef v1;
    PyParamoaFloatAppDef_oaConstraintParamDef v2;
    int convert_status1=PyoaFloatAppDef_oaConstraintParamDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaConstraintParamDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaConstraintParamDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaConstraintParamDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaConstraintParamDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaConstraintParamDef**) ((PyoaFloatAppDef_oaConstraintParamDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaConstraintParamDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintParamDef_FromoaFloatAppDef_oaConstraintParamDef(oaFloatAppDef_oaConstraintParamDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaConstraintParamDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintParamDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaConstraintParamDefObject* self = (PyoaFloatAppDef_oaConstraintParamDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaConstraintParamDef_FromoaFloatAppDef_oaConstraintParamDef(oaFloatAppDef_oaConstraintParamDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaFloatAppDef_oaConstraintParamDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaConstraintParamDefObject* self = (PyoaFloatAppDef_oaConstraintParamDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParamDef_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaConstraintParamDef)\n"
"    Calls: oaFloat get(const oaConstraintParamDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaConstraintParamDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParamDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintParamDef data;
    int convert_status=PyoaFloatAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintParamDefObject* self=(PyoaFloatAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParamDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParamDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaConstraintParamDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParamDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintParamDef data;
    int convert_status=PyoaFloatAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintParamDefObject* self=(PyoaFloatAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParamDef_set_doc[] = 
"Class: oaFloatAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaConstraintParamDef,oaFloat)\n"
"    Calls: void set(oaConstraintParamDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaConstraintParamDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParamDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaConstraintParamDef data;
    int convert_status=PyoaFloatAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaConstraintParamDefObject* self=(PyoaFloatAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParamDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParamDef_isNull_doc[] =
"Class: oaFloatAppDef_oaConstraintParamDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParamDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaConstraintParamDef data;
    int convert_status=PyoaFloatAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaConstraintParamDef_assign_doc[] = 
"Class: oaFloatAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParamDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaConstraintParamDef data;
  int convert_status=PyoaFloatAppDef_oaConstraintParamDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaConstraintParamDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaConstraintParamDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaConstraintParamDef_get,METH_VARARGS,oaFloatAppDef_oaConstraintParamDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaConstraintParamDef_getDefault,METH_VARARGS,oaFloatAppDef_oaConstraintParamDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaConstraintParamDef_set,METH_VARARGS,oaFloatAppDef_oaConstraintParamDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaConstraintParamDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaConstraintParamDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaConstraintParamDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaConstraintParamDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParamDef_doc[] = 
"Class: oaFloatAppDef_oaConstraintParamDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaConstraintParamDef)\n"
"    Calls: (const oaFloatAppDef_oaConstraintParamDef&)\n"
"    Signature: oaFloatAppDef_oaConstraintParamDef||cref-oaFloatAppDef_oaConstraintParamDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaConstraintParamDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaConstraintParamDef",
    sizeof(PyoaFloatAppDef_oaConstraintParamDefObject),
    0,
    (destructor)oaFloatAppDef_oaConstraintParamDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaConstraintParamDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaConstraintParamDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaConstraintParamDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaConstraintParamDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaConstraintParamDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParamDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaConstraintParamDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintParamDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintParamDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintParamDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParamDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintParamDefp result= (oaFloatAppDef_oaConstraintParamDef::find(p1.Data()));
            return PyoaFloatAppDef_oaConstraintParamDef_FromoaFloatAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintParamDefp result= (oaFloatAppDef_oaConstraintParamDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintParamDef_FromoaFloatAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintParamDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaConstraintParamDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaConstraintParamDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParamDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintParamDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParamDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintParamDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParamDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaConstraintParamDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaConstraintParamDefp result= (oaFloatAppDef_oaConstraintParamDef::get(p1.Data()));
            return PyoaFloatAppDef_oaConstraintParamDef_FromoaFloatAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaConstraintParamDefp result= (oaFloatAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintParamDef_FromoaFloatAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaConstraintParamDefp result= (oaFloatAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintParamDef_FromoaFloatAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintParamDefp result= (oaFloatAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaConstraintParamDef_FromoaFloatAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintParamDefp result= (oaFloatAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaConstraintParamDef_FromoaFloatAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaConstraintParamDefp result= (oaFloatAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaConstraintParamDef_FromoaFloatAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaConstraintParamDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaConstraintParamDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaConstraintParamDef_static_find,METH_VARARGS,oaFloatAppDef_oaConstraintParamDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaConstraintParamDef_static_get,METH_VARARGS,oaFloatAppDef_oaConstraintParamDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaConstraintParamDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaConstraintParamDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaConstraintParamDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaConstraintParamDef",
           (PyObject*)(&PyoaFloatAppDef_oaConstraintParamDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaConstraintParamDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaConstraintParamDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaConstraintParamDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaDMData
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDMData_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaDMData_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaDMDataObject* self = (PyoaFloatAppDef_oaDMDataObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaDMData)
    {
        PyParamoaFloatAppDef_oaDMData p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaDMData_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaDMData, Choices are:\n"
        "    (oaFloatAppDef_oaDMData)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaDMData_tp_dealloc(PyoaFloatAppDef_oaDMDataObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDMData_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaDMData value;
    int convert_status=PyoaFloatAppDef_oaDMData_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaFloatAppDef_oaDMData::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaDMData_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaDMData v1;
    PyParamoaFloatAppDef_oaDMData v2;
    int convert_status1=PyoaFloatAppDef_oaDMData_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaDMData_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaDMData_Convert(PyObject* ob,PyParamoaFloatAppDef_oaDMData* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaDMData_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaDMData**) ((PyoaFloatAppDef_oaDMDataObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaDMData Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDMData_FromoaFloatAppDef_oaDMData(oaFloatAppDef_oaDMData** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaDMData* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaDMData_Type.tp_alloc(&PyoaFloatAppDef_oaDMData_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaDMDataObject* self = (PyoaFloatAppDef_oaDMDataObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDMData_FromoaFloatAppDef_oaDMData(oaFloatAppDef_oaDMData* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaDMData_Type.tp_alloc(&PyoaFloatAppDef_oaDMData_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaDMDataObject* self = (PyoaFloatAppDef_oaDMDataObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMData_get_doc[] = 
"Class: oaFloatAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaDMData)\n"
"    Calls: oaFloat get(const oaDMData* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaDMData,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDMData_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDMData data;
    int convert_status=PyoaFloatAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDMDataObject* self=(PyoaFloatAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMData_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMData_getDefault_doc[] = 
"Class: oaFloatAppDef_oaDMData, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDMData_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDMData data;
    int convert_status=PyoaFloatAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDMDataObject* self=(PyoaFloatAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMData_set_doc[] = 
"Class: oaFloatAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDMData,oaFloat)\n"
"    Calls: void set(oaDMData* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaDMData,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaDMData_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDMData data;
    int convert_status=PyoaFloatAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDMDataObject* self=(PyoaFloatAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMData_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMData_isNull_doc[] =
"Class: oaFloatAppDef_oaDMData, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaDMData_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaDMData data;
    int convert_status=PyoaFloatAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaDMData_assign_doc[] = 
"Class: oaFloatAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaDMData_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaDMData data;
  int convert_status=PyoaFloatAppDef_oaDMData_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaDMData p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaDMData_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaDMData_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaDMData_get,METH_VARARGS,oaFloatAppDef_oaDMData_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaDMData_getDefault,METH_VARARGS,oaFloatAppDef_oaDMData_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaDMData_set,METH_VARARGS,oaFloatAppDef_oaDMData_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaDMData_tp_isNull,METH_VARARGS,oaFloatAppDef_oaDMData_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaDMData_tp_assign,METH_VARARGS,oaFloatAppDef_oaDMData_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMData_doc[] = 
"Class: oaFloatAppDef_oaDMData\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaDMData)\n"
"    Calls: (const oaFloatAppDef_oaDMData&)\n"
"    Signature: oaFloatAppDef_oaDMData||cref-oaFloatAppDef_oaDMData,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaDMData_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaDMData",
    sizeof(PyoaFloatAppDef_oaDMDataObject),
    0,
    (destructor)oaFloatAppDef_oaDMData_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaDMData_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaDMData_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaDMData_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaDMData_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaDMData_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMData_static_find_doc[] = 
"Class: oaFloatAppDef_oaDMData, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDMData* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDMData|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDMData* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaDMData_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDMDatap result= (oaFloatAppDef_oaDMData::find(p1.Data()));
            return PyoaFloatAppDef_oaDMData_FromoaFloatAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDMDatap result= (oaFloatAppDef_oaDMData::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDMData_FromoaFloatAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDMData, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMData_static_get_doc[] = 
"Class: oaFloatAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDMData* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMData|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDMData* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMData|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDMData* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMData|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaDMData_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDMDatap result= (oaFloatAppDef_oaDMData::get(p1.Data()));
            return PyoaFloatAppDef_oaDMData_FromoaFloatAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaDMDatap result= (oaFloatAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDMData_FromoaFloatAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaDMDatap result= (oaFloatAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDMData_FromoaFloatAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDMDatap result= (oaFloatAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDMData_FromoaFloatAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDMDatap result= (oaFloatAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDMData_FromoaFloatAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDMDatap result= (oaFloatAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaDMData_FromoaFloatAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDMData, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaDMData_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaDMData_static_find,METH_VARARGS,oaFloatAppDef_oaDMData_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaDMData_static_get,METH_VARARGS,oaFloatAppDef_oaDMData_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaDMData_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaDMData_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaDMData\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaDMData",
           (PyObject*)(&PyoaFloatAppDef_oaDMData_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaDMData\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaDMData_Type.tp_dict;
    for(method=oaFloatAppDef_oaDMData_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaDMFile
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDMFile_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaDMFile_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaDMFileObject* self = (PyoaFloatAppDef_oaDMFileObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaDMFile)
    {
        PyParamoaFloatAppDef_oaDMFile p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaDMFile_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaDMFile, Choices are:\n"
        "    (oaFloatAppDef_oaDMFile)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaDMFile_tp_dealloc(PyoaFloatAppDef_oaDMFileObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDMFile_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaDMFile value;
    int convert_status=PyoaFloatAppDef_oaDMFile_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaFloatAppDef_oaDMFile::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaDMFile_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaDMFile v1;
    PyParamoaFloatAppDef_oaDMFile v2;
    int convert_status1=PyoaFloatAppDef_oaDMFile_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaDMFile_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaDMFile_Convert(PyObject* ob,PyParamoaFloatAppDef_oaDMFile* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaDMFile_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaDMFile**) ((PyoaFloatAppDef_oaDMFileObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaDMFile Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDMFile_FromoaFloatAppDef_oaDMFile(oaFloatAppDef_oaDMFile** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaDMFile* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaDMFile_Type.tp_alloc(&PyoaFloatAppDef_oaDMFile_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaDMFileObject* self = (PyoaFloatAppDef_oaDMFileObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDMFile_FromoaFloatAppDef_oaDMFile(oaFloatAppDef_oaDMFile* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaDMFile_Type.tp_alloc(&PyoaFloatAppDef_oaDMFile_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaDMFileObject* self = (PyoaFloatAppDef_oaDMFileObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMFile_get_doc[] = 
"Class: oaFloatAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaDMFile)\n"
"    Calls: oaFloat get(const oaDMFile* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaDMFile,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDMFile_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDMFile data;
    int convert_status=PyoaFloatAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDMFileObject* self=(PyoaFloatAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMFile_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMFile_getDefault_doc[] = 
"Class: oaFloatAppDef_oaDMFile, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDMFile_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDMFile data;
    int convert_status=PyoaFloatAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDMFileObject* self=(PyoaFloatAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMFile_set_doc[] = 
"Class: oaFloatAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDMFile,oaFloat)\n"
"    Calls: void set(oaDMFile* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaDMFile,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaDMFile_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDMFile data;
    int convert_status=PyoaFloatAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDMFileObject* self=(PyoaFloatAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMFile_isNull_doc[] =
"Class: oaFloatAppDef_oaDMFile, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaDMFile_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaDMFile data;
    int convert_status=PyoaFloatAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaDMFile_assign_doc[] = 
"Class: oaFloatAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaDMFile_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaDMFile data;
  int convert_status=PyoaFloatAppDef_oaDMFile_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaDMFile p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaDMFile_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaDMFile_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaDMFile_get,METH_VARARGS,oaFloatAppDef_oaDMFile_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaDMFile_getDefault,METH_VARARGS,oaFloatAppDef_oaDMFile_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaDMFile_set,METH_VARARGS,oaFloatAppDef_oaDMFile_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaDMFile_tp_isNull,METH_VARARGS,oaFloatAppDef_oaDMFile_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaDMFile_tp_assign,METH_VARARGS,oaFloatAppDef_oaDMFile_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMFile_doc[] = 
"Class: oaFloatAppDef_oaDMFile\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaDMFile)\n"
"    Calls: (const oaFloatAppDef_oaDMFile&)\n"
"    Signature: oaFloatAppDef_oaDMFile||cref-oaFloatAppDef_oaDMFile,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaDMFile_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaDMFile",
    sizeof(PyoaFloatAppDef_oaDMFileObject),
    0,
    (destructor)oaFloatAppDef_oaDMFile_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaDMFile_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaDMFile_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaDMFile_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaDMFile_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaDMFile_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMFile_static_find_doc[] = 
"Class: oaFloatAppDef_oaDMFile, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDMFile* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDMFile|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDMFile* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaDMFile_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDMFilep result= (oaFloatAppDef_oaDMFile::find(p1.Data()));
            return PyoaFloatAppDef_oaDMFile_FromoaFloatAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDMFilep result= (oaFloatAppDef_oaDMFile::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDMFile_FromoaFloatAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDMFile, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDMFile_static_get_doc[] = 
"Class: oaFloatAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDMFile* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMFile|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDMFile* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMFile|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDMFile* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMFile|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaDMFile_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDMFilep result= (oaFloatAppDef_oaDMFile::get(p1.Data()));
            return PyoaFloatAppDef_oaDMFile_FromoaFloatAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaDMFilep result= (oaFloatAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDMFile_FromoaFloatAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaDMFilep result= (oaFloatAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDMFile_FromoaFloatAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDMFilep result= (oaFloatAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDMFile_FromoaFloatAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDMFilep result= (oaFloatAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDMFile_FromoaFloatAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDMFilep result= (oaFloatAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaDMFile_FromoaFloatAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDMFile, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaDMFile_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaDMFile_static_find,METH_VARARGS,oaFloatAppDef_oaDMFile_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaDMFile_static_get,METH_VARARGS,oaFloatAppDef_oaDMFile_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaDMFile_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaDMFile_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaDMFile\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaDMFile",
           (PyObject*)(&PyoaFloatAppDef_oaDMFile_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaDMFile\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaDMFile_Type.tp_dict;
    for(method=oaFloatAppDef_oaDMFile_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaDerivedLayerParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDerivedLayerParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaDerivedLayerParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaDerivedLayerParamObject* self = (PyoaFloatAppDef_oaDerivedLayerParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaDerivedLayerParam)
    {
        PyParamoaFloatAppDef_oaDerivedLayerParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaDerivedLayerParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaDerivedLayerParam, Choices are:\n"
        "    (oaFloatAppDef_oaDerivedLayerParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaDerivedLayerParam_tp_dealloc(PyoaFloatAppDef_oaDerivedLayerParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDerivedLayerParam_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaDerivedLayerParam value;
    int convert_status=PyoaFloatAppDef_oaDerivedLayerParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaFloatAppDef_oaDerivedLayerParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaDerivedLayerParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaDerivedLayerParam v1;
    PyParamoaFloatAppDef_oaDerivedLayerParam v2;
    int convert_status1=PyoaFloatAppDef_oaDerivedLayerParam_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaDerivedLayerParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaDerivedLayerParam_Convert(PyObject* ob,PyParamoaFloatAppDef_oaDerivedLayerParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaDerivedLayerParam_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaDerivedLayerParam**) ((PyoaFloatAppDef_oaDerivedLayerParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaDerivedLayerParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDerivedLayerParam_FromoaFloatAppDef_oaDerivedLayerParam(oaFloatAppDef_oaDerivedLayerParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaDerivedLayerParam* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaFloatAppDef_oaDerivedLayerParam_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaDerivedLayerParamObject* self = (PyoaFloatAppDef_oaDerivedLayerParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDerivedLayerParam_FromoaFloatAppDef_oaDerivedLayerParam(oaFloatAppDef_oaDerivedLayerParam* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaFloatAppDef_oaDerivedLayerParam_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaDerivedLayerParamObject* self = (PyoaFloatAppDef_oaDerivedLayerParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDerivedLayerParam_get_doc[] = 
"Class: oaFloatAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaDerivedLayerParam)\n"
"    Calls: oaFloat get(const oaDerivedLayerParam* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaDerivedLayerParam,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDerivedLayerParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaFloatAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDerivedLayerParamObject* self=(PyoaFloatAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayerParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDerivedLayerParam_getDefault_doc[] = 
"Class: oaFloatAppDef_oaDerivedLayerParam, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDerivedLayerParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaFloatAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDerivedLayerParamObject* self=(PyoaFloatAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDerivedLayerParam_set_doc[] = 
"Class: oaFloatAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDerivedLayerParam,oaFloat)\n"
"    Calls: void set(oaDerivedLayerParam* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaDerivedLayerParam,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaDerivedLayerParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaFloatAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDerivedLayerParamObject* self=(PyoaFloatAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDerivedLayerParam_isNull_doc[] =
"Class: oaFloatAppDef_oaDerivedLayerParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaDerivedLayerParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaFloatAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaDerivedLayerParam_assign_doc[] = 
"Class: oaFloatAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaDerivedLayerParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaDerivedLayerParam data;
  int convert_status=PyoaFloatAppDef_oaDerivedLayerParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaDerivedLayerParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaDerivedLayerParam_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaDerivedLayerParam_get,METH_VARARGS,oaFloatAppDef_oaDerivedLayerParam_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaDerivedLayerParam_getDefault,METH_VARARGS,oaFloatAppDef_oaDerivedLayerParam_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaDerivedLayerParam_set,METH_VARARGS,oaFloatAppDef_oaDerivedLayerParam_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaDerivedLayerParam_tp_isNull,METH_VARARGS,oaFloatAppDef_oaDerivedLayerParam_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaDerivedLayerParam_tp_assign,METH_VARARGS,oaFloatAppDef_oaDerivedLayerParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDerivedLayerParam_doc[] = 
"Class: oaFloatAppDef_oaDerivedLayerParam\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaDerivedLayerParam)\n"
"    Calls: (const oaFloatAppDef_oaDerivedLayerParam&)\n"
"    Signature: oaFloatAppDef_oaDerivedLayerParam||cref-oaFloatAppDef_oaDerivedLayerParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaDerivedLayerParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaDerivedLayerParam",
    sizeof(PyoaFloatAppDef_oaDerivedLayerParamObject),
    0,
    (destructor)oaFloatAppDef_oaDerivedLayerParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaDerivedLayerParam_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaDerivedLayerParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaDerivedLayerParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaDerivedLayerParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaDerivedLayerParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDerivedLayerParam_static_find_doc[] = 
"Class: oaFloatAppDef_oaDerivedLayerParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDerivedLayerParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDerivedLayerParam|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDerivedLayerParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaDerivedLayerParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDerivedLayerParamp result= (oaFloatAppDef_oaDerivedLayerParam::find(p1.Data()));
            return PyoaFloatAppDef_oaDerivedLayerParam_FromoaFloatAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDerivedLayerParamp result= (oaFloatAppDef_oaDerivedLayerParam::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDerivedLayerParam_FromoaFloatAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDerivedLayerParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDerivedLayerParam_static_get_doc[] = 
"Class: oaFloatAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDerivedLayerParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDerivedLayerParam|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDerivedLayerParam* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDerivedLayerParam|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDerivedLayerParam* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDerivedLayerParam|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaDerivedLayerParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDerivedLayerParamp result= (oaFloatAppDef_oaDerivedLayerParam::get(p1.Data()));
            return PyoaFloatAppDef_oaDerivedLayerParam_FromoaFloatAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaDerivedLayerParamp result= (oaFloatAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDerivedLayerParam_FromoaFloatAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaDerivedLayerParamp result= (oaFloatAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDerivedLayerParam_FromoaFloatAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDerivedLayerParamp result= (oaFloatAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDerivedLayerParam_FromoaFloatAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDerivedLayerParamp result= (oaFloatAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDerivedLayerParam_FromoaFloatAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDerivedLayerParamp result= (oaFloatAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaDerivedLayerParam_FromoaFloatAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDerivedLayerParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaDerivedLayerParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaDerivedLayerParam_static_find,METH_VARARGS,oaFloatAppDef_oaDerivedLayerParam_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaDerivedLayerParam_static_get,METH_VARARGS,oaFloatAppDef_oaDerivedLayerParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaDerivedLayerParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaDerivedLayerParam_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaDerivedLayerParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaDerivedLayerParam",
           (PyObject*)(&PyoaFloatAppDef_oaDerivedLayerParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaDerivedLayerParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaDerivedLayerParam_Type.tp_dict;
    for(method=oaFloatAppDef_oaDerivedLayerParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaDesign
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDesign_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaDesign_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaDesignObject* self = (PyoaFloatAppDef_oaDesignObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaDesign)
    {
        PyParamoaFloatAppDef_oaDesign p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaDesign_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaDesign, Choices are:\n"
        "    (oaFloatAppDef_oaDesign)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaDesign_tp_dealloc(PyoaFloatAppDef_oaDesignObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDesign_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaDesign value;
    int convert_status=PyoaFloatAppDef_oaDesign_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaFloatAppDef_oaDesign::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaDesign_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaDesign v1;
    PyParamoaFloatAppDef_oaDesign v2;
    int convert_status1=PyoaFloatAppDef_oaDesign_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaDesign_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaDesign_Convert(PyObject* ob,PyParamoaFloatAppDef_oaDesign* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaDesign_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaDesign**) ((PyoaFloatAppDef_oaDesignObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaDesign Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDesign_FromoaFloatAppDef_oaDesign(oaFloatAppDef_oaDesign** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaDesign* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaDesign_Type.tp_alloc(&PyoaFloatAppDef_oaDesign_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaDesignObject* self = (PyoaFloatAppDef_oaDesignObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDesign_FromoaFloatAppDef_oaDesign(oaFloatAppDef_oaDesign* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaDesign_Type.tp_alloc(&PyoaFloatAppDef_oaDesign_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaDesignObject* self = (PyoaFloatAppDef_oaDesignObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesign_get_doc[] = 
"Class: oaFloatAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaDesign)\n"
"    Calls: oaFloat get(const oaDesign* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaDesign,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDesign_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDesign data;
    int convert_status=PyoaFloatAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDesignObject* self=(PyoaFloatAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesign_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesign_getDefault_doc[] = 
"Class: oaFloatAppDef_oaDesign, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDesign_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDesign data;
    int convert_status=PyoaFloatAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDesignObject* self=(PyoaFloatAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesign_set_doc[] = 
"Class: oaFloatAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDesign,oaFloat)\n"
"    Calls: void set(oaDesign* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaDesign,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaDesign_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDesign data;
    int convert_status=PyoaFloatAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDesignObject* self=(PyoaFloatAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesign_isNull_doc[] =
"Class: oaFloatAppDef_oaDesign, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaDesign_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaDesign data;
    int convert_status=PyoaFloatAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaDesign_assign_doc[] = 
"Class: oaFloatAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaDesign_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaDesign data;
  int convert_status=PyoaFloatAppDef_oaDesign_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaDesign p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaDesign_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaDesign_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaDesign_get,METH_VARARGS,oaFloatAppDef_oaDesign_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaDesign_getDefault,METH_VARARGS,oaFloatAppDef_oaDesign_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaDesign_set,METH_VARARGS,oaFloatAppDef_oaDesign_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaDesign_tp_isNull,METH_VARARGS,oaFloatAppDef_oaDesign_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaDesign_tp_assign,METH_VARARGS,oaFloatAppDef_oaDesign_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesign_doc[] = 
"Class: oaFloatAppDef_oaDesign\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaDesign)\n"
"    Calls: (const oaFloatAppDef_oaDesign&)\n"
"    Signature: oaFloatAppDef_oaDesign||cref-oaFloatAppDef_oaDesign,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaDesign_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaDesign",
    sizeof(PyoaFloatAppDef_oaDesignObject),
    0,
    (destructor)oaFloatAppDef_oaDesign_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaDesign_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaDesign_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaDesign_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaDesign_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaDesign_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesign_static_find_doc[] = 
"Class: oaFloatAppDef_oaDesign, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDesign* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDesign|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDesign* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaDesign_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDesignp result= (oaFloatAppDef_oaDesign::find(p1.Data()));
            return PyoaFloatAppDef_oaDesign_FromoaFloatAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDesignp result= (oaFloatAppDef_oaDesign::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDesign_FromoaFloatAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDesign, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesign_static_get_doc[] = 
"Class: oaFloatAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDesign* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesign|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDesign* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesign|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDesign* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesign|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaDesign_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDesignp result= (oaFloatAppDef_oaDesign::get(p1.Data()));
            return PyoaFloatAppDef_oaDesign_FromoaFloatAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaDesignp result= (oaFloatAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDesign_FromoaFloatAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaDesignp result= (oaFloatAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDesign_FromoaFloatAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDesignp result= (oaFloatAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDesign_FromoaFloatAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDesignp result= (oaFloatAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDesign_FromoaFloatAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDesignp result= (oaFloatAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaDesign_FromoaFloatAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDesign, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaDesign_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaDesign_static_find,METH_VARARGS,oaFloatAppDef_oaDesign_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaDesign_static_get,METH_VARARGS,oaFloatAppDef_oaDesign_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaDesign_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaDesign_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaDesign\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaDesign",
           (PyObject*)(&PyoaFloatAppDef_oaDesign_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaDesign\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaDesign_Type.tp_dict;
    for(method=oaFloatAppDef_oaDesign_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaDesignInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDesignInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaDesignInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaDesignInstObject* self = (PyoaFloatAppDef_oaDesignInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaDesignInst)
    {
        PyParamoaFloatAppDef_oaDesignInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaDesignInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaDesignInst, Choices are:\n"
        "    (oaFloatAppDef_oaDesignInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaDesignInst_tp_dealloc(PyoaFloatAppDef_oaDesignInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDesignInst_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaDesignInst value;
    int convert_status=PyoaFloatAppDef_oaDesignInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaFloatAppDef_oaDesignInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaDesignInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaDesignInst v1;
    PyParamoaFloatAppDef_oaDesignInst v2;
    int convert_status1=PyoaFloatAppDef_oaDesignInst_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaDesignInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaDesignInst_Convert(PyObject* ob,PyParamoaFloatAppDef_oaDesignInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaDesignInst_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaDesignInst**) ((PyoaFloatAppDef_oaDesignInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaDesignInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDesignInst_FromoaFloatAppDef_oaDesignInst(oaFloatAppDef_oaDesignInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaDesignInst* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaDesignInst_Type.tp_alloc(&PyoaFloatAppDef_oaDesignInst_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaDesignInstObject* self = (PyoaFloatAppDef_oaDesignInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDesignInst_FromoaFloatAppDef_oaDesignInst(oaFloatAppDef_oaDesignInst* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaDesignInst_Type.tp_alloc(&PyoaFloatAppDef_oaDesignInst_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaDesignInstObject* self = (PyoaFloatAppDef_oaDesignInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesignInst_get_doc[] = 
"Class: oaFloatAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaDesignInst)\n"
"    Calls: oaFloat get(const oaDesignInst* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaDesignInst,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDesignInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDesignInst data;
    int convert_status=PyoaFloatAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDesignInstObject* self=(PyoaFloatAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesignInst_getDefault_doc[] = 
"Class: oaFloatAppDef_oaDesignInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDesignInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDesignInst data;
    int convert_status=PyoaFloatAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDesignInstObject* self=(PyoaFloatAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesignInst_set_doc[] = 
"Class: oaFloatAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDesignInst,oaFloat)\n"
"    Calls: void set(oaDesignInst* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaDesignInst,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaDesignInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDesignInst data;
    int convert_status=PyoaFloatAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDesignInstObject* self=(PyoaFloatAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesignInst_isNull_doc[] =
"Class: oaFloatAppDef_oaDesignInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaDesignInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaDesignInst data;
    int convert_status=PyoaFloatAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaDesignInst_assign_doc[] = 
"Class: oaFloatAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaDesignInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaDesignInst data;
  int convert_status=PyoaFloatAppDef_oaDesignInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaDesignInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaDesignInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaDesignInst_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaDesignInst_get,METH_VARARGS,oaFloatAppDef_oaDesignInst_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaDesignInst_getDefault,METH_VARARGS,oaFloatAppDef_oaDesignInst_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaDesignInst_set,METH_VARARGS,oaFloatAppDef_oaDesignInst_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaDesignInst_tp_isNull,METH_VARARGS,oaFloatAppDef_oaDesignInst_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaDesignInst_tp_assign,METH_VARARGS,oaFloatAppDef_oaDesignInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesignInst_doc[] = 
"Class: oaFloatAppDef_oaDesignInst\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaDesignInst)\n"
"    Calls: (const oaFloatAppDef_oaDesignInst&)\n"
"    Signature: oaFloatAppDef_oaDesignInst||cref-oaFloatAppDef_oaDesignInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaDesignInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaDesignInst",
    sizeof(PyoaFloatAppDef_oaDesignInstObject),
    0,
    (destructor)oaFloatAppDef_oaDesignInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaDesignInst_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaDesignInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaDesignInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaDesignInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaDesignInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesignInst_static_find_doc[] = 
"Class: oaFloatAppDef_oaDesignInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDesignInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDesignInst|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDesignInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaDesignInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDesignInstp result= (oaFloatAppDef_oaDesignInst::find(p1.Data()));
            return PyoaFloatAppDef_oaDesignInst_FromoaFloatAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDesignInstp result= (oaFloatAppDef_oaDesignInst::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDesignInst_FromoaFloatAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDesignInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDesignInst_static_get_doc[] = 
"Class: oaFloatAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDesignInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesignInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDesignInst* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesignInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDesignInst* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesignInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaDesignInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDesignInstp result= (oaFloatAppDef_oaDesignInst::get(p1.Data()));
            return PyoaFloatAppDef_oaDesignInst_FromoaFloatAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaDesignInstp result= (oaFloatAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDesignInst_FromoaFloatAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaDesignInstp result= (oaFloatAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDesignInst_FromoaFloatAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDesignInstp result= (oaFloatAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDesignInst_FromoaFloatAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDesignInstp result= (oaFloatAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDesignInst_FromoaFloatAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDesignInstp result= (oaFloatAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaDesignInst_FromoaFloatAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDesignInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaDesignInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaDesignInst_static_find,METH_VARARGS,oaFloatAppDef_oaDesignInst_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaDesignInst_static_get,METH_VARARGS,oaFloatAppDef_oaDesignInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaDesignInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaDesignInst_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaDesignInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaDesignInst",
           (PyObject*)(&PyoaFloatAppDef_oaDesignInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaDesignInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaDesignInst_Type.tp_dict;
    for(method=oaFloatAppDef_oaDesignInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaDevice
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDevice_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaDevice_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaDeviceObject* self = (PyoaFloatAppDef_oaDeviceObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaDevice)
    {
        PyParamoaFloatAppDef_oaDevice p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaDevice_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaDevice, Choices are:\n"
        "    (oaFloatAppDef_oaDevice)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaDevice_tp_dealloc(PyoaFloatAppDef_oaDeviceObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaDevice_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaDevice value;
    int convert_status=PyoaFloatAppDef_oaDevice_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaFloatAppDef_oaDevice::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaDevice_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaDevice v1;
    PyParamoaFloatAppDef_oaDevice v2;
    int convert_status1=PyoaFloatAppDef_oaDevice_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaDevice_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaDevice_Convert(PyObject* ob,PyParamoaFloatAppDef_oaDevice* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaDevice_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaDevice**) ((PyoaFloatAppDef_oaDeviceObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaDevice Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDevice_FromoaFloatAppDef_oaDevice(oaFloatAppDef_oaDevice** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaDevice* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaDevice_Type.tp_alloc(&PyoaFloatAppDef_oaDevice_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaDeviceObject* self = (PyoaFloatAppDef_oaDeviceObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaDevice_FromoaFloatAppDef_oaDevice(oaFloatAppDef_oaDevice* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaDevice_Type.tp_alloc(&PyoaFloatAppDef_oaDevice_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaDeviceObject* self = (PyoaFloatAppDef_oaDeviceObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDevice_get_doc[] = 
"Class: oaFloatAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaDevice)\n"
"    Calls: oaFloat get(const oaDevice* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaDevice,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDevice_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDevice data;
    int convert_status=PyoaFloatAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDeviceObject* self=(PyoaFloatAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDevice_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDevice_getDefault_doc[] = 
"Class: oaFloatAppDef_oaDevice, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaDevice_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDevice data;
    int convert_status=PyoaFloatAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDeviceObject* self=(PyoaFloatAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDevice_set_doc[] = 
"Class: oaFloatAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDevice,oaFloat)\n"
"    Calls: void set(oaDevice* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaDevice,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaDevice_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaDevice data;
    int convert_status=PyoaFloatAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaDeviceObject* self=(PyoaFloatAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDevice_isNull_doc[] =
"Class: oaFloatAppDef_oaDevice, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaDevice_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaDevice data;
    int convert_status=PyoaFloatAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaDevice_assign_doc[] = 
"Class: oaFloatAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaDevice_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaDevice data;
  int convert_status=PyoaFloatAppDef_oaDevice_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaDevice p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaDevice_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaDevice_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaDevice_get,METH_VARARGS,oaFloatAppDef_oaDevice_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaDevice_getDefault,METH_VARARGS,oaFloatAppDef_oaDevice_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaDevice_set,METH_VARARGS,oaFloatAppDef_oaDevice_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaDevice_tp_isNull,METH_VARARGS,oaFloatAppDef_oaDevice_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaDevice_tp_assign,METH_VARARGS,oaFloatAppDef_oaDevice_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDevice_doc[] = 
"Class: oaFloatAppDef_oaDevice\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaDevice)\n"
"    Calls: (const oaFloatAppDef_oaDevice&)\n"
"    Signature: oaFloatAppDef_oaDevice||cref-oaFloatAppDef_oaDevice,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaDevice_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaDevice",
    sizeof(PyoaFloatAppDef_oaDeviceObject),
    0,
    (destructor)oaFloatAppDef_oaDevice_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaDevice_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaDevice_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaDevice_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaDevice_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaDevice_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDevice_static_find_doc[] = 
"Class: oaFloatAppDef_oaDevice, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDevice* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDevice|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDevice* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaDevice_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDevicep result= (oaFloatAppDef_oaDevice::find(p1.Data()));
            return PyoaFloatAppDef_oaDevice_FromoaFloatAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDevicep result= (oaFloatAppDef_oaDevice::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDevice_FromoaFloatAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDevice, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaDevice_static_get_doc[] = 
"Class: oaFloatAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaDevice* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDevice|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDevice* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDevice|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDevice* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDevice|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaDevice_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaDevicep result= (oaFloatAppDef_oaDevice::get(p1.Data()));
            return PyoaFloatAppDef_oaDevice_FromoaFloatAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaDevicep result= (oaFloatAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDevice_FromoaFloatAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaDevicep result= (oaFloatAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDevice_FromoaFloatAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDevicep result= (oaFloatAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaDevice_FromoaFloatAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDevicep result= (oaFloatAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaDevice_FromoaFloatAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaDevicep result= (oaFloatAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaDevice_FromoaFloatAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaDevice, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaDevice_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaDevice_static_find,METH_VARARGS,oaFloatAppDef_oaDevice_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaDevice_static_get,METH_VARARGS,oaFloatAppDef_oaDevice_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaDevice_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaDevice_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaDevice\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaDevice",
           (PyObject*)(&PyoaFloatAppDef_oaDevice_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaDevice\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaDevice_Type.tp_dict;
    for(method=oaFloatAppDef_oaDevice_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaElmore
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaElmore_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaElmore_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaElmoreObject* self = (PyoaFloatAppDef_oaElmoreObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaElmore)
    {
        PyParamoaFloatAppDef_oaElmore p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaElmore_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaElmore, Choices are:\n"
        "    (oaFloatAppDef_oaElmore)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaElmore_tp_dealloc(PyoaFloatAppDef_oaElmoreObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaElmore_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaElmore value;
    int convert_status=PyoaFloatAppDef_oaElmore_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaFloatAppDef_oaElmore::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaElmore_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaElmore v1;
    PyParamoaFloatAppDef_oaElmore v2;
    int convert_status1=PyoaFloatAppDef_oaElmore_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaElmore_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaElmore_Convert(PyObject* ob,PyParamoaFloatAppDef_oaElmore* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaElmore_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaElmore**) ((PyoaFloatAppDef_oaElmoreObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaElmore Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaElmore_FromoaFloatAppDef_oaElmore(oaFloatAppDef_oaElmore** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaElmore* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaElmore_Type.tp_alloc(&PyoaFloatAppDef_oaElmore_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaElmoreObject* self = (PyoaFloatAppDef_oaElmoreObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaElmore_FromoaFloatAppDef_oaElmore(oaFloatAppDef_oaElmore* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaElmore_Type.tp_alloc(&PyoaFloatAppDef_oaElmore_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaElmoreObject* self = (PyoaFloatAppDef_oaElmoreObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaElmore_get_doc[] = 
"Class: oaFloatAppDef_oaElmore, Function: get\n"
"  Paramegers: (oaElmore)\n"
"    Calls: oaFloat get(const oaElmore* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaElmore,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaElmore_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaElmore data;
    int convert_status=PyoaFloatAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaElmoreObject* self=(PyoaFloatAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaElmore_getDefault_doc[] = 
"Class: oaFloatAppDef_oaElmore, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaElmore_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaElmore data;
    int convert_status=PyoaFloatAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaElmoreObject* self=(PyoaFloatAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaElmore_set_doc[] = 
"Class: oaFloatAppDef_oaElmore, Function: set\n"
"  Paramegers: (oaElmore,oaFloat)\n"
"    Calls: void set(oaElmore* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaElmore,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaElmore_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaElmore data;
    int convert_status=PyoaFloatAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaElmoreObject* self=(PyoaFloatAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaElmore_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaElmore_isNull_doc[] =
"Class: oaFloatAppDef_oaElmore, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaElmore_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaElmore data;
    int convert_status=PyoaFloatAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaElmore_assign_doc[] = 
"Class: oaFloatAppDef_oaElmore, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaElmore_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaElmore data;
  int convert_status=PyoaFloatAppDef_oaElmore_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaElmore p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaElmore_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaElmore_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaElmore_get,METH_VARARGS,oaFloatAppDef_oaElmore_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaElmore_getDefault,METH_VARARGS,oaFloatAppDef_oaElmore_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaElmore_set,METH_VARARGS,oaFloatAppDef_oaElmore_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaElmore_tp_isNull,METH_VARARGS,oaFloatAppDef_oaElmore_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaElmore_tp_assign,METH_VARARGS,oaFloatAppDef_oaElmore_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaElmore_doc[] = 
"Class: oaFloatAppDef_oaElmore\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaElmore)\n"
"    Calls: (const oaFloatAppDef_oaElmore&)\n"
"    Signature: oaFloatAppDef_oaElmore||cref-oaFloatAppDef_oaElmore,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaElmore_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaElmore",
    sizeof(PyoaFloatAppDef_oaElmoreObject),
    0,
    (destructor)oaFloatAppDef_oaElmore_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaElmore_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaElmore_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaElmore_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaElmore_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaElmore_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaElmore_static_find_doc[] = 
"Class: oaFloatAppDef_oaElmore, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaElmore* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaElmore|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaElmore* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaElmore_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaElmorep result= (oaFloatAppDef_oaElmore::find(p1.Data()));
            return PyoaFloatAppDef_oaElmore_FromoaFloatAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaElmorep result= (oaFloatAppDef_oaElmore::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaElmore_FromoaFloatAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaElmore, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaElmore_static_get_doc[] = 
"Class: oaFloatAppDef_oaElmore, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaElmore* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaElmore|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaElmore* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaElmore|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaElmore* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaElmore|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaElmore_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaElmorep result= (oaFloatAppDef_oaElmore::get(p1.Data()));
            return PyoaFloatAppDef_oaElmore_FromoaFloatAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaElmorep result= (oaFloatAppDef_oaElmore::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaElmore_FromoaFloatAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaElmorep result= (oaFloatAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaElmore_FromoaFloatAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaElmorep result= (oaFloatAppDef_oaElmore::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaElmore_FromoaFloatAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaElmorep result= (oaFloatAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaElmore_FromoaFloatAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaElmorep result= (oaFloatAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaElmore_FromoaFloatAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaElmore, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaElmore_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaElmore_static_find,METH_VARARGS,oaFloatAppDef_oaElmore_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaElmore_static_get,METH_VARARGS,oaFloatAppDef_oaElmore_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaElmore_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaElmore_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaElmore\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaElmore",
           (PyObject*)(&PyoaFloatAppDef_oaElmore_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaElmore\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaElmore_Type.tp_dict;
    for(method=oaFloatAppDef_oaElmore_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaFigGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaFigGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaFigGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaFigGroupObject* self = (PyoaFloatAppDef_oaFigGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaFigGroup)
    {
        PyParamoaFloatAppDef_oaFigGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaFigGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaFigGroup, Choices are:\n"
        "    (oaFloatAppDef_oaFigGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaFigGroup_tp_dealloc(PyoaFloatAppDef_oaFigGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaFigGroup_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaFigGroup value;
    int convert_status=PyoaFloatAppDef_oaFigGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaFloatAppDef_oaFigGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaFigGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaFigGroup v1;
    PyParamoaFloatAppDef_oaFigGroup v2;
    int convert_status1=PyoaFloatAppDef_oaFigGroup_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaFigGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaFigGroup_Convert(PyObject* ob,PyParamoaFloatAppDef_oaFigGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaFigGroup_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaFigGroup**) ((PyoaFloatAppDef_oaFigGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaFigGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaFigGroup_FromoaFloatAppDef_oaFigGroup(oaFloatAppDef_oaFigGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaFigGroup* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaFigGroup_Type.tp_alloc(&PyoaFloatAppDef_oaFigGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaFigGroupObject* self = (PyoaFloatAppDef_oaFigGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaFigGroup_FromoaFloatAppDef_oaFigGroup(oaFloatAppDef_oaFigGroup* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaFigGroup_Type.tp_alloc(&PyoaFloatAppDef_oaFigGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaFigGroupObject* self = (PyoaFloatAppDef_oaFigGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroup_get_doc[] = 
"Class: oaFloatAppDef_oaFigGroup, Function: get\n"
"  Paramegers: (oaFigGroup)\n"
"    Calls: oaFloat get(const oaFigGroup* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaFigGroup,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaFigGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFigGroup data;
    int convert_status=PyoaFloatAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFigGroupObject* self=(PyoaFloatAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroup_getDefault_doc[] = 
"Class: oaFloatAppDef_oaFigGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaFigGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFigGroup data;
    int convert_status=PyoaFloatAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFigGroupObject* self=(PyoaFloatAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroup_set_doc[] = 
"Class: oaFloatAppDef_oaFigGroup, Function: set\n"
"  Paramegers: (oaFigGroup,oaFloat)\n"
"    Calls: void set(oaFigGroup* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaFigGroup,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaFigGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFigGroup data;
    int convert_status=PyoaFloatAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFigGroupObject* self=(PyoaFloatAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroup_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroup_isNull_doc[] =
"Class: oaFloatAppDef_oaFigGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaFigGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaFigGroup data;
    int convert_status=PyoaFloatAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaFigGroup_assign_doc[] = 
"Class: oaFloatAppDef_oaFigGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaFigGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaFigGroup data;
  int convert_status=PyoaFloatAppDef_oaFigGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaFigGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaFigGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaFigGroup_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaFigGroup_get,METH_VARARGS,oaFloatAppDef_oaFigGroup_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaFigGroup_getDefault,METH_VARARGS,oaFloatAppDef_oaFigGroup_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaFigGroup_set,METH_VARARGS,oaFloatAppDef_oaFigGroup_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaFigGroup_tp_isNull,METH_VARARGS,oaFloatAppDef_oaFigGroup_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaFigGroup_tp_assign,METH_VARARGS,oaFloatAppDef_oaFigGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroup_doc[] = 
"Class: oaFloatAppDef_oaFigGroup\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaFigGroup)\n"
"    Calls: (const oaFloatAppDef_oaFigGroup&)\n"
"    Signature: oaFloatAppDef_oaFigGroup||cref-oaFloatAppDef_oaFigGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaFigGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaFigGroup",
    sizeof(PyoaFloatAppDef_oaFigGroupObject),
    0,
    (destructor)oaFloatAppDef_oaFigGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaFigGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaFigGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaFigGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaFigGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaFigGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroup_static_find_doc[] = 
"Class: oaFloatAppDef_oaFigGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaFigGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaFigGroup|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaFigGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaFigGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaFigGroupp result= (oaFloatAppDef_oaFigGroup::find(p1.Data()));
            return PyoaFloatAppDef_oaFigGroup_FromoaFloatAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFigGroupp result= (oaFloatAppDef_oaFigGroup::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFigGroup_FromoaFloatAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaFigGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroup_static_get_doc[] = 
"Class: oaFloatAppDef_oaFigGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaFigGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroup|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaFigGroup* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroup|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaFigGroup* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroup|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaFigGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaFigGroupp result= (oaFloatAppDef_oaFigGroup::get(p1.Data()));
            return PyoaFloatAppDef_oaFigGroup_FromoaFloatAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaFigGroupp result= (oaFloatAppDef_oaFigGroup::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFigGroup_FromoaFloatAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaFigGroupp result= (oaFloatAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaFigGroup_FromoaFloatAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFigGroupp result= (oaFloatAppDef_oaFigGroup::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFigGroup_FromoaFloatAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFigGroupp result= (oaFloatAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaFigGroup_FromoaFloatAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFigGroupp result= (oaFloatAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaFigGroup_FromoaFloatAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaFigGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaFigGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaFigGroup_static_find,METH_VARARGS,oaFloatAppDef_oaFigGroup_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaFigGroup_static_get,METH_VARARGS,oaFloatAppDef_oaFigGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaFigGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaFigGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaFigGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaFigGroup",
           (PyObject*)(&PyoaFloatAppDef_oaFigGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaFigGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaFigGroup_Type.tp_dict;
    for(method=oaFloatAppDef_oaFigGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaFigGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaFigGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaFigGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaFigGroupMemObject* self = (PyoaFloatAppDef_oaFigGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaFigGroupMem)
    {
        PyParamoaFloatAppDef_oaFigGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaFigGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaFigGroupMem, Choices are:\n"
        "    (oaFloatAppDef_oaFigGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaFigGroupMem_tp_dealloc(PyoaFloatAppDef_oaFigGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaFigGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaFigGroupMem value;
    int convert_status=PyoaFloatAppDef_oaFigGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaFloatAppDef_oaFigGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaFigGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaFigGroupMem v1;
    PyParamoaFloatAppDef_oaFigGroupMem v2;
    int convert_status1=PyoaFloatAppDef_oaFigGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaFigGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaFigGroupMem_Convert(PyObject* ob,PyParamoaFloatAppDef_oaFigGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaFigGroupMem_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaFigGroupMem**) ((PyoaFloatAppDef_oaFigGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaFigGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaFigGroupMem_FromoaFloatAppDef_oaFigGroupMem(oaFloatAppDef_oaFigGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaFigGroupMem* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaFigGroupMem_Type.tp_alloc(&PyoaFloatAppDef_oaFigGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaFigGroupMemObject* self = (PyoaFloatAppDef_oaFigGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaFigGroupMem_FromoaFloatAppDef_oaFigGroupMem(oaFloatAppDef_oaFigGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaFigGroupMem_Type.tp_alloc(&PyoaFloatAppDef_oaFigGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaFigGroupMemObject* self = (PyoaFloatAppDef_oaFigGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroupMem_get_doc[] = 
"Class: oaFloatAppDef_oaFigGroupMem, Function: get\n"
"  Paramegers: (oaFigGroupMem)\n"
"    Calls: oaFloat get(const oaFigGroupMem* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaFigGroupMem,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaFigGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFigGroupMem data;
    int convert_status=PyoaFloatAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFigGroupMemObject* self=(PyoaFloatAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroupMem_getDefault_doc[] = 
"Class: oaFloatAppDef_oaFigGroupMem, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaFigGroupMem_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFigGroupMem data;
    int convert_status=PyoaFloatAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFigGroupMemObject* self=(PyoaFloatAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroupMem_set_doc[] = 
"Class: oaFloatAppDef_oaFigGroupMem, Function: set\n"
"  Paramegers: (oaFigGroupMem,oaFloat)\n"
"    Calls: void set(oaFigGroupMem* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaFigGroupMem,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaFigGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFigGroupMem data;
    int convert_status=PyoaFloatAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFigGroupMemObject* self=(PyoaFloatAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroupMem p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroupMem_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroupMem_isNull_doc[] =
"Class: oaFloatAppDef_oaFigGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaFigGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaFigGroupMem data;
    int convert_status=PyoaFloatAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaFigGroupMem_assign_doc[] = 
"Class: oaFloatAppDef_oaFigGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaFigGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaFigGroupMem data;
  int convert_status=PyoaFloatAppDef_oaFigGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaFigGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaFigGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaFigGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaFigGroupMem_get,METH_VARARGS,oaFloatAppDef_oaFigGroupMem_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaFigGroupMem_getDefault,METH_VARARGS,oaFloatAppDef_oaFigGroupMem_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaFigGroupMem_set,METH_VARARGS,oaFloatAppDef_oaFigGroupMem_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaFigGroupMem_tp_isNull,METH_VARARGS,oaFloatAppDef_oaFigGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaFigGroupMem_tp_assign,METH_VARARGS,oaFloatAppDef_oaFigGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroupMem_doc[] = 
"Class: oaFloatAppDef_oaFigGroupMem\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaFigGroupMem)\n"
"    Calls: (const oaFloatAppDef_oaFigGroupMem&)\n"
"    Signature: oaFloatAppDef_oaFigGroupMem||cref-oaFloatAppDef_oaFigGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaFigGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaFigGroupMem",
    sizeof(PyoaFloatAppDef_oaFigGroupMemObject),
    0,
    (destructor)oaFloatAppDef_oaFigGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaFigGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaFigGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaFigGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaFigGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaFigGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroupMem_static_find_doc[] = 
"Class: oaFloatAppDef_oaFigGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaFigGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaFigGroupMem|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaFigGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaFigGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaFigGroupMemp result= (oaFloatAppDef_oaFigGroupMem::find(p1.Data()));
            return PyoaFloatAppDef_oaFigGroupMem_FromoaFloatAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFigGroupMemp result= (oaFloatAppDef_oaFigGroupMem::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFigGroupMem_FromoaFloatAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaFigGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFigGroupMem_static_get_doc[] = 
"Class: oaFloatAppDef_oaFigGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaFigGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroupMem|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaFigGroupMem* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroupMem|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaFigGroupMem* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroupMem|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaFigGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaFigGroupMemp result= (oaFloatAppDef_oaFigGroupMem::get(p1.Data()));
            return PyoaFloatAppDef_oaFigGroupMem_FromoaFloatAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaFigGroupMemp result= (oaFloatAppDef_oaFigGroupMem::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFigGroupMem_FromoaFloatAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaFigGroupMemp result= (oaFloatAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaFigGroupMem_FromoaFloatAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFigGroupMemp result= (oaFloatAppDef_oaFigGroupMem::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFigGroupMem_FromoaFloatAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFigGroupMemp result= (oaFloatAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaFigGroupMem_FromoaFloatAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFigGroupMemp result= (oaFloatAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaFigGroupMem_FromoaFloatAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaFigGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaFigGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaFigGroupMem_static_find,METH_VARARGS,oaFloatAppDef_oaFigGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaFigGroupMem_static_get,METH_VARARGS,oaFloatAppDef_oaFigGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaFigGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaFigGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaFigGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaFigGroupMem",
           (PyObject*)(&PyoaFloatAppDef_oaFigGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaFigGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaFigGroupMem_Type.tp_dict;
    for(method=oaFloatAppDef_oaFigGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaFrame
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaFrame_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaFrame_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaFrameObject* self = (PyoaFloatAppDef_oaFrameObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaFrame)
    {
        PyParamoaFloatAppDef_oaFrame p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaFrame_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaFrame, Choices are:\n"
        "    (oaFloatAppDef_oaFrame)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaFrame_tp_dealloc(PyoaFloatAppDef_oaFrameObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaFrame_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaFrame value;
    int convert_status=PyoaFloatAppDef_oaFrame_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaFloatAppDef_oaFrame::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaFrame_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaFrame v1;
    PyParamoaFloatAppDef_oaFrame v2;
    int convert_status1=PyoaFloatAppDef_oaFrame_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaFrame_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaFrame_Convert(PyObject* ob,PyParamoaFloatAppDef_oaFrame* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaFrame_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaFrame**) ((PyoaFloatAppDef_oaFrameObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaFrame Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaFrame_FromoaFloatAppDef_oaFrame(oaFloatAppDef_oaFrame** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaFrame* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaFrame_Type.tp_alloc(&PyoaFloatAppDef_oaFrame_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaFrameObject* self = (PyoaFloatAppDef_oaFrameObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaFrame_FromoaFloatAppDef_oaFrame(oaFloatAppDef_oaFrame* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaFrame_Type.tp_alloc(&PyoaFloatAppDef_oaFrame_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaFrameObject* self = (PyoaFloatAppDef_oaFrameObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrame_get_doc[] = 
"Class: oaFloatAppDef_oaFrame, Function: get\n"
"  Paramegers: (oaFrame)\n"
"    Calls: oaFloat get(const oaFrame* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaFrame,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaFrame_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFrame data;
    int convert_status=PyoaFloatAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFrameObject* self=(PyoaFloatAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrame p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrame_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrame_getDefault_doc[] = 
"Class: oaFloatAppDef_oaFrame, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaFrame_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFrame data;
    int convert_status=PyoaFloatAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFrameObject* self=(PyoaFloatAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrame_set_doc[] = 
"Class: oaFloatAppDef_oaFrame, Function: set\n"
"  Paramegers: (oaFrame,oaFloat)\n"
"    Calls: void set(oaFrame* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaFrame,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaFrame_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFrame data;
    int convert_status=PyoaFloatAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFrameObject* self=(PyoaFloatAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrame p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrame_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrame_isNull_doc[] =
"Class: oaFloatAppDef_oaFrame, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaFrame_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaFrame data;
    int convert_status=PyoaFloatAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaFrame_assign_doc[] = 
"Class: oaFloatAppDef_oaFrame, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaFrame_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaFrame data;
  int convert_status=PyoaFloatAppDef_oaFrame_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaFrame p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaFrame_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaFrame_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaFrame_get,METH_VARARGS,oaFloatAppDef_oaFrame_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaFrame_getDefault,METH_VARARGS,oaFloatAppDef_oaFrame_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaFrame_set,METH_VARARGS,oaFloatAppDef_oaFrame_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaFrame_tp_isNull,METH_VARARGS,oaFloatAppDef_oaFrame_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaFrame_tp_assign,METH_VARARGS,oaFloatAppDef_oaFrame_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrame_doc[] = 
"Class: oaFloatAppDef_oaFrame\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaFrame)\n"
"    Calls: (const oaFloatAppDef_oaFrame&)\n"
"    Signature: oaFloatAppDef_oaFrame||cref-oaFloatAppDef_oaFrame,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaFrame_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaFrame",
    sizeof(PyoaFloatAppDef_oaFrameObject),
    0,
    (destructor)oaFloatAppDef_oaFrame_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaFrame_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaFrame_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaFrame_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaFrame_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaFrame_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrame_static_find_doc[] = 
"Class: oaFloatAppDef_oaFrame, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaFrame* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaFrame|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaFrame* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaFrame_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaFramep result= (oaFloatAppDef_oaFrame::find(p1.Data()));
            return PyoaFloatAppDef_oaFrame_FromoaFloatAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFramep result= (oaFloatAppDef_oaFrame::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFrame_FromoaFloatAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaFrame, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrame_static_get_doc[] = 
"Class: oaFloatAppDef_oaFrame, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaFrame* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrame|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaFrame* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrame|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaFrame* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrame|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaFrame_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaFramep result= (oaFloatAppDef_oaFrame::get(p1.Data()));
            return PyoaFloatAppDef_oaFrame_FromoaFloatAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaFramep result= (oaFloatAppDef_oaFrame::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFrame_FromoaFloatAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaFramep result= (oaFloatAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaFrame_FromoaFloatAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFramep result= (oaFloatAppDef_oaFrame::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFrame_FromoaFloatAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFramep result= (oaFloatAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaFrame_FromoaFloatAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFramep result= (oaFloatAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaFrame_FromoaFloatAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaFrame, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaFrame_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaFrame_static_find,METH_VARARGS,oaFloatAppDef_oaFrame_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaFrame_static_get,METH_VARARGS,oaFloatAppDef_oaFrame_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaFrame_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaFrame_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaFrame\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaFrame",
           (PyObject*)(&PyoaFloatAppDef_oaFrame_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaFrame\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaFrame_Type.tp_dict;
    for(method=oaFloatAppDef_oaFrame_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaFrameInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaFrameInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaFrameInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaFrameInstObject* self = (PyoaFloatAppDef_oaFrameInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaFrameInst)
    {
        PyParamoaFloatAppDef_oaFrameInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaFrameInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaFrameInst, Choices are:\n"
        "    (oaFloatAppDef_oaFrameInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaFrameInst_tp_dealloc(PyoaFloatAppDef_oaFrameInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaFrameInst_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaFrameInst value;
    int convert_status=PyoaFloatAppDef_oaFrameInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaFloatAppDef_oaFrameInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaFrameInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaFrameInst v1;
    PyParamoaFloatAppDef_oaFrameInst v2;
    int convert_status1=PyoaFloatAppDef_oaFrameInst_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaFrameInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaFrameInst_Convert(PyObject* ob,PyParamoaFloatAppDef_oaFrameInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaFrameInst_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaFrameInst**) ((PyoaFloatAppDef_oaFrameInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaFrameInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaFrameInst_FromoaFloatAppDef_oaFrameInst(oaFloatAppDef_oaFrameInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaFrameInst* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaFrameInst_Type.tp_alloc(&PyoaFloatAppDef_oaFrameInst_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaFrameInstObject* self = (PyoaFloatAppDef_oaFrameInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaFrameInst_FromoaFloatAppDef_oaFrameInst(oaFloatAppDef_oaFrameInst* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaFrameInst_Type.tp_alloc(&PyoaFloatAppDef_oaFrameInst_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaFrameInstObject* self = (PyoaFloatAppDef_oaFrameInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrameInst_get_doc[] = 
"Class: oaFloatAppDef_oaFrameInst, Function: get\n"
"  Paramegers: (oaFrameInst)\n"
"    Calls: oaFloat get(const oaFrameInst* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaFrameInst,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaFrameInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFrameInst data;
    int convert_status=PyoaFloatAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFrameInstObject* self=(PyoaFloatAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrameInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrameInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrameInst_getDefault_doc[] = 
"Class: oaFloatAppDef_oaFrameInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaFrameInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFrameInst data;
    int convert_status=PyoaFloatAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFrameInstObject* self=(PyoaFloatAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrameInst_set_doc[] = 
"Class: oaFloatAppDef_oaFrameInst, Function: set\n"
"  Paramegers: (oaFrameInst,oaFloat)\n"
"    Calls: void set(oaFrameInst* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaFrameInst,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaFrameInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaFrameInst data;
    int convert_status=PyoaFloatAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaFrameInstObject* self=(PyoaFloatAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrameInst p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrameInst_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrameInst_isNull_doc[] =
"Class: oaFloatAppDef_oaFrameInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaFrameInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaFrameInst data;
    int convert_status=PyoaFloatAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaFrameInst_assign_doc[] = 
"Class: oaFloatAppDef_oaFrameInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaFrameInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaFrameInst data;
  int convert_status=PyoaFloatAppDef_oaFrameInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaFrameInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaFrameInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaFrameInst_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaFrameInst_get,METH_VARARGS,oaFloatAppDef_oaFrameInst_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaFrameInst_getDefault,METH_VARARGS,oaFloatAppDef_oaFrameInst_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaFrameInst_set,METH_VARARGS,oaFloatAppDef_oaFrameInst_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaFrameInst_tp_isNull,METH_VARARGS,oaFloatAppDef_oaFrameInst_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaFrameInst_tp_assign,METH_VARARGS,oaFloatAppDef_oaFrameInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrameInst_doc[] = 
"Class: oaFloatAppDef_oaFrameInst\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaFrameInst)\n"
"    Calls: (const oaFloatAppDef_oaFrameInst&)\n"
"    Signature: oaFloatAppDef_oaFrameInst||cref-oaFloatAppDef_oaFrameInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaFrameInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaFrameInst",
    sizeof(PyoaFloatAppDef_oaFrameInstObject),
    0,
    (destructor)oaFloatAppDef_oaFrameInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaFrameInst_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaFrameInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaFrameInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaFrameInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaFrameInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrameInst_static_find_doc[] = 
"Class: oaFloatAppDef_oaFrameInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaFrameInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaFrameInst|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaFrameInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaFrameInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaFrameInstp result= (oaFloatAppDef_oaFrameInst::find(p1.Data()));
            return PyoaFloatAppDef_oaFrameInst_FromoaFloatAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFrameInstp result= (oaFloatAppDef_oaFrameInst::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFrameInst_FromoaFloatAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaFrameInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaFrameInst_static_get_doc[] = 
"Class: oaFloatAppDef_oaFrameInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaFrameInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrameInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaFrameInst* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrameInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaFrameInst* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrameInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaFrameInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaFrameInstp result= (oaFloatAppDef_oaFrameInst::get(p1.Data()));
            return PyoaFloatAppDef_oaFrameInst_FromoaFloatAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaFrameInstp result= (oaFloatAppDef_oaFrameInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFrameInst_FromoaFloatAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaFrameInstp result= (oaFloatAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaFrameInst_FromoaFloatAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFrameInstp result= (oaFloatAppDef_oaFrameInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaFrameInst_FromoaFloatAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFrameInstp result= (oaFloatAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaFrameInst_FromoaFloatAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaFrameInstp result= (oaFloatAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaFrameInst_FromoaFloatAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaFrameInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaFrameInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaFrameInst_static_find,METH_VARARGS,oaFloatAppDef_oaFrameInst_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaFrameInst_static_get,METH_VARARGS,oaFloatAppDef_oaFrameInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaFrameInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaFrameInst_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaFrameInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaFrameInst",
           (PyObject*)(&PyoaFloatAppDef_oaFrameInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaFrameInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaFrameInst_Type.tp_dict;
    for(method=oaFloatAppDef_oaFrameInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaGCellPattern
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaGCellPattern_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaGCellPattern_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaGCellPatternObject* self = (PyoaFloatAppDef_oaGCellPatternObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaGCellPattern)
    {
        PyParamoaFloatAppDef_oaGCellPattern p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaGCellPattern_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaGCellPattern, Choices are:\n"
        "    (oaFloatAppDef_oaGCellPattern)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaGCellPattern_tp_dealloc(PyoaFloatAppDef_oaGCellPatternObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaGCellPattern_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaGCellPattern value;
    int convert_status=PyoaFloatAppDef_oaGCellPattern_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaFloatAppDef_oaGCellPattern::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaGCellPattern_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaGCellPattern v1;
    PyParamoaFloatAppDef_oaGCellPattern v2;
    int convert_status1=PyoaFloatAppDef_oaGCellPattern_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaGCellPattern_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaGCellPattern_Convert(PyObject* ob,PyParamoaFloatAppDef_oaGCellPattern* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaGCellPattern_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaGCellPattern**) ((PyoaFloatAppDef_oaGCellPatternObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaGCellPattern Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaGCellPattern_FromoaFloatAppDef_oaGCellPattern(oaFloatAppDef_oaGCellPattern** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaGCellPattern* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaGCellPattern_Type.tp_alloc(&PyoaFloatAppDef_oaGCellPattern_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaGCellPatternObject* self = (PyoaFloatAppDef_oaGCellPatternObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaGCellPattern_FromoaFloatAppDef_oaGCellPattern(oaFloatAppDef_oaGCellPattern* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaGCellPattern_Type.tp_alloc(&PyoaFloatAppDef_oaGCellPattern_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaGCellPatternObject* self = (PyoaFloatAppDef_oaGCellPatternObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGCellPattern_get_doc[] = 
"Class: oaFloatAppDef_oaGCellPattern, Function: get\n"
"  Paramegers: (oaGCellPattern)\n"
"    Calls: oaFloat get(const oaGCellPattern* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaGCellPattern,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaGCellPattern_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGCellPattern data;
    int convert_status=PyoaFloatAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGCellPatternObject* self=(PyoaFloatAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGCellPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGCellPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGCellPattern_getDefault_doc[] = 
"Class: oaFloatAppDef_oaGCellPattern, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaGCellPattern_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGCellPattern data;
    int convert_status=PyoaFloatAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGCellPatternObject* self=(PyoaFloatAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGCellPattern_set_doc[] = 
"Class: oaFloatAppDef_oaGCellPattern, Function: set\n"
"  Paramegers: (oaGCellPattern,oaFloat)\n"
"    Calls: void set(oaGCellPattern* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaGCellPattern,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaGCellPattern_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGCellPattern data;
    int convert_status=PyoaFloatAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGCellPatternObject* self=(PyoaFloatAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGCellPattern p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGCellPattern_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGCellPattern_isNull_doc[] =
"Class: oaFloatAppDef_oaGCellPattern, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaGCellPattern_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaGCellPattern data;
    int convert_status=PyoaFloatAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaGCellPattern_assign_doc[] = 
"Class: oaFloatAppDef_oaGCellPattern, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaGCellPattern_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaGCellPattern data;
  int convert_status=PyoaFloatAppDef_oaGCellPattern_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaGCellPattern p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaGCellPattern_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaGCellPattern_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaGCellPattern_get,METH_VARARGS,oaFloatAppDef_oaGCellPattern_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaGCellPattern_getDefault,METH_VARARGS,oaFloatAppDef_oaGCellPattern_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaGCellPattern_set,METH_VARARGS,oaFloatAppDef_oaGCellPattern_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaGCellPattern_tp_isNull,METH_VARARGS,oaFloatAppDef_oaGCellPattern_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaGCellPattern_tp_assign,METH_VARARGS,oaFloatAppDef_oaGCellPattern_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGCellPattern_doc[] = 
"Class: oaFloatAppDef_oaGCellPattern\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaGCellPattern)\n"
"    Calls: (const oaFloatAppDef_oaGCellPattern&)\n"
"    Signature: oaFloatAppDef_oaGCellPattern||cref-oaFloatAppDef_oaGCellPattern,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaGCellPattern_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaGCellPattern",
    sizeof(PyoaFloatAppDef_oaGCellPatternObject),
    0,
    (destructor)oaFloatAppDef_oaGCellPattern_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaGCellPattern_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaGCellPattern_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaGCellPattern_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaGCellPattern_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaGCellPattern_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGCellPattern_static_find_doc[] = 
"Class: oaFloatAppDef_oaGCellPattern, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaGCellPattern* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaGCellPattern|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaGCellPattern* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaGCellPattern_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaGCellPatternp result= (oaFloatAppDef_oaGCellPattern::find(p1.Data()));
            return PyoaFloatAppDef_oaGCellPattern_FromoaFloatAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGCellPatternp result= (oaFloatAppDef_oaGCellPattern::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGCellPattern_FromoaFloatAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaGCellPattern, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGCellPattern_static_get_doc[] = 
"Class: oaFloatAppDef_oaGCellPattern, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaGCellPattern* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGCellPattern|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaGCellPattern* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGCellPattern|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaGCellPattern* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGCellPattern|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaGCellPattern_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaGCellPatternp result= (oaFloatAppDef_oaGCellPattern::get(p1.Data()));
            return PyoaFloatAppDef_oaGCellPattern_FromoaFloatAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaGCellPatternp result= (oaFloatAppDef_oaGCellPattern::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGCellPattern_FromoaFloatAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaGCellPatternp result= (oaFloatAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaGCellPattern_FromoaFloatAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGCellPatternp result= (oaFloatAppDef_oaGCellPattern::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGCellPattern_FromoaFloatAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGCellPatternp result= (oaFloatAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaGCellPattern_FromoaFloatAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGCellPatternp result= (oaFloatAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaGCellPattern_FromoaFloatAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaGCellPattern, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaGCellPattern_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaGCellPattern_static_find,METH_VARARGS,oaFloatAppDef_oaGCellPattern_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaGCellPattern_static_get,METH_VARARGS,oaFloatAppDef_oaGCellPattern_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaGCellPattern_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaGCellPattern_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaGCellPattern\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaGCellPattern",
           (PyObject*)(&PyoaFloatAppDef_oaGCellPattern_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaGCellPattern\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaGCellPattern_Type.tp_dict;
    for(method=oaFloatAppDef_oaGCellPattern_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaGroupObject* self = (PyoaFloatAppDef_oaGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaGroup)
    {
        PyParamoaFloatAppDef_oaGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaGroup, Choices are:\n"
        "    (oaFloatAppDef_oaGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaGroup_tp_dealloc(PyoaFloatAppDef_oaGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaGroup_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaGroup value;
    int convert_status=PyoaFloatAppDef_oaGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaFloatAppDef_oaGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaGroup v1;
    PyParamoaFloatAppDef_oaGroup v2;
    int convert_status1=PyoaFloatAppDef_oaGroup_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaGroup_Convert(PyObject* ob,PyParamoaFloatAppDef_oaGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaGroup_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaGroup**) ((PyoaFloatAppDef_oaGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaGroup_FromoaFloatAppDef_oaGroup(oaFloatAppDef_oaGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaGroup* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaGroup_Type.tp_alloc(&PyoaFloatAppDef_oaGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaGroupObject* self = (PyoaFloatAppDef_oaGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaGroup_FromoaFloatAppDef_oaGroup(oaFloatAppDef_oaGroup* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaGroup_Type.tp_alloc(&PyoaFloatAppDef_oaGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaGroupObject* self = (PyoaFloatAppDef_oaGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroup_get_doc[] = 
"Class: oaFloatAppDef_oaGroup, Function: get\n"
"  Paramegers: (oaGroup)\n"
"    Calls: oaFloat get(const oaGroup* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaGroup,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGroup data;
    int convert_status=PyoaFloatAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGroupObject* self=(PyoaFloatAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroup_getDefault_doc[] = 
"Class: oaFloatAppDef_oaGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGroup data;
    int convert_status=PyoaFloatAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGroupObject* self=(PyoaFloatAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroup_set_doc[] = 
"Class: oaFloatAppDef_oaGroup, Function: set\n"
"  Paramegers: (oaGroup,oaFloat)\n"
"    Calls: void set(oaGroup* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaGroup,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGroup data;
    int convert_status=PyoaFloatAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGroupObject* self=(PyoaFloatAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroup p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroup_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroup_isNull_doc[] =
"Class: oaFloatAppDef_oaGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaGroup data;
    int convert_status=PyoaFloatAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaGroup_assign_doc[] = 
"Class: oaFloatAppDef_oaGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaGroup data;
  int convert_status=PyoaFloatAppDef_oaGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaGroup_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaGroup_get,METH_VARARGS,oaFloatAppDef_oaGroup_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaGroup_getDefault,METH_VARARGS,oaFloatAppDef_oaGroup_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaGroup_set,METH_VARARGS,oaFloatAppDef_oaGroup_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaGroup_tp_isNull,METH_VARARGS,oaFloatAppDef_oaGroup_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaGroup_tp_assign,METH_VARARGS,oaFloatAppDef_oaGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroup_doc[] = 
"Class: oaFloatAppDef_oaGroup\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaGroup)\n"
"    Calls: (const oaFloatAppDef_oaGroup&)\n"
"    Signature: oaFloatAppDef_oaGroup||cref-oaFloatAppDef_oaGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaGroup",
    sizeof(PyoaFloatAppDef_oaGroupObject),
    0,
    (destructor)oaFloatAppDef_oaGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroup_static_find_doc[] = 
"Class: oaFloatAppDef_oaGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaGroup|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaGroupp result= (oaFloatAppDef_oaGroup::find(p1.Data()));
            return PyoaFloatAppDef_oaGroup_FromoaFloatAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGroupp result= (oaFloatAppDef_oaGroup::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGroup_FromoaFloatAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroup_static_get_doc[] = 
"Class: oaFloatAppDef_oaGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroup|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaGroup* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroup|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaGroup* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroup|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaGroupp result= (oaFloatAppDef_oaGroup::get(p1.Data()));
            return PyoaFloatAppDef_oaGroup_FromoaFloatAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaGroupp result= (oaFloatAppDef_oaGroup::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGroup_FromoaFloatAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaGroupp result= (oaFloatAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaGroup_FromoaFloatAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGroupp result= (oaFloatAppDef_oaGroup::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGroup_FromoaFloatAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGroupp result= (oaFloatAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaGroup_FromoaFloatAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGroupp result= (oaFloatAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaGroup_FromoaFloatAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaGroup_static_find,METH_VARARGS,oaFloatAppDef_oaGroup_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaGroup_static_get,METH_VARARGS,oaFloatAppDef_oaGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaGroup",
           (PyObject*)(&PyoaFloatAppDef_oaGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaGroup_Type.tp_dict;
    for(method=oaFloatAppDef_oaGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaGroupMember
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaGroupMember_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaGroupMember_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaGroupMemberObject* self = (PyoaFloatAppDef_oaGroupMemberObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaGroupMember)
    {
        PyParamoaFloatAppDef_oaGroupMember p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaGroupMember_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaGroupMember, Choices are:\n"
        "    (oaFloatAppDef_oaGroupMember)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaGroupMember_tp_dealloc(PyoaFloatAppDef_oaGroupMemberObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaGroupMember_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaGroupMember value;
    int convert_status=PyoaFloatAppDef_oaGroupMember_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaFloatAppDef_oaGroupMember::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaGroupMember_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaGroupMember v1;
    PyParamoaFloatAppDef_oaGroupMember v2;
    int convert_status1=PyoaFloatAppDef_oaGroupMember_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaGroupMember_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaGroupMember_Convert(PyObject* ob,PyParamoaFloatAppDef_oaGroupMember* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaGroupMember_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaGroupMember**) ((PyoaFloatAppDef_oaGroupMemberObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaGroupMember Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaGroupMember_FromoaFloatAppDef_oaGroupMember(oaFloatAppDef_oaGroupMember** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaGroupMember* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaGroupMember_Type.tp_alloc(&PyoaFloatAppDef_oaGroupMember_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaGroupMemberObject* self = (PyoaFloatAppDef_oaGroupMemberObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaGroupMember_FromoaFloatAppDef_oaGroupMember(oaFloatAppDef_oaGroupMember* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaGroupMember_Type.tp_alloc(&PyoaFloatAppDef_oaGroupMember_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaGroupMemberObject* self = (PyoaFloatAppDef_oaGroupMemberObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroupMember_get_doc[] = 
"Class: oaFloatAppDef_oaGroupMember, Function: get\n"
"  Paramegers: (oaGroupMember)\n"
"    Calls: oaFloat get(const oaGroupMember* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaGroupMember,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaGroupMember_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGroupMember data;
    int convert_status=PyoaFloatAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGroupMemberObject* self=(PyoaFloatAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroupMember p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroupMember_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroupMember_getDefault_doc[] = 
"Class: oaFloatAppDef_oaGroupMember, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaGroupMember_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGroupMember data;
    int convert_status=PyoaFloatAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGroupMemberObject* self=(PyoaFloatAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroupMember_set_doc[] = 
"Class: oaFloatAppDef_oaGroupMember, Function: set\n"
"  Paramegers: (oaGroupMember,oaFloat)\n"
"    Calls: void set(oaGroupMember* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaGroupMember,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaGroupMember_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGroupMember data;
    int convert_status=PyoaFloatAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGroupMemberObject* self=(PyoaFloatAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroupMember p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroupMember_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroupMember_isNull_doc[] =
"Class: oaFloatAppDef_oaGroupMember, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaGroupMember_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaGroupMember data;
    int convert_status=PyoaFloatAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaGroupMember_assign_doc[] = 
"Class: oaFloatAppDef_oaGroupMember, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaGroupMember_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaGroupMember data;
  int convert_status=PyoaFloatAppDef_oaGroupMember_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaGroupMember p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaGroupMember_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaGroupMember_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaGroupMember_get,METH_VARARGS,oaFloatAppDef_oaGroupMember_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaGroupMember_getDefault,METH_VARARGS,oaFloatAppDef_oaGroupMember_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaGroupMember_set,METH_VARARGS,oaFloatAppDef_oaGroupMember_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaGroupMember_tp_isNull,METH_VARARGS,oaFloatAppDef_oaGroupMember_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaGroupMember_tp_assign,METH_VARARGS,oaFloatAppDef_oaGroupMember_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroupMember_doc[] = 
"Class: oaFloatAppDef_oaGroupMember\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaGroupMember)\n"
"    Calls: (const oaFloatAppDef_oaGroupMember&)\n"
"    Signature: oaFloatAppDef_oaGroupMember||cref-oaFloatAppDef_oaGroupMember,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaGroupMember_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaGroupMember",
    sizeof(PyoaFloatAppDef_oaGroupMemberObject),
    0,
    (destructor)oaFloatAppDef_oaGroupMember_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaGroupMember_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaGroupMember_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaGroupMember_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaGroupMember_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaGroupMember_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroupMember_static_find_doc[] = 
"Class: oaFloatAppDef_oaGroupMember, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaGroupMember* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaGroupMember|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaGroupMember* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaGroupMember_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaGroupMemberp result= (oaFloatAppDef_oaGroupMember::find(p1.Data()));
            return PyoaFloatAppDef_oaGroupMember_FromoaFloatAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGroupMemberp result= (oaFloatAppDef_oaGroupMember::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGroupMember_FromoaFloatAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaGroupMember, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGroupMember_static_get_doc[] = 
"Class: oaFloatAppDef_oaGroupMember, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaGroupMember* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroupMember|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaGroupMember* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroupMember|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaGroupMember* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroupMember|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaGroupMember_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaGroupMemberp result= (oaFloatAppDef_oaGroupMember::get(p1.Data()));
            return PyoaFloatAppDef_oaGroupMember_FromoaFloatAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaGroupMemberp result= (oaFloatAppDef_oaGroupMember::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGroupMember_FromoaFloatAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaGroupMemberp result= (oaFloatAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaGroupMember_FromoaFloatAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGroupMemberp result= (oaFloatAppDef_oaGroupMember::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGroupMember_FromoaFloatAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGroupMemberp result= (oaFloatAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaGroupMember_FromoaFloatAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGroupMemberp result= (oaFloatAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaGroupMember_FromoaFloatAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaGroupMember, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaGroupMember_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaGroupMember_static_find,METH_VARARGS,oaFloatAppDef_oaGroupMember_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaGroupMember_static_get,METH_VARARGS,oaFloatAppDef_oaGroupMember_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaGroupMember_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaGroupMember_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaGroupMember\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaGroupMember",
           (PyObject*)(&PyoaFloatAppDef_oaGroupMember_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaGroupMember\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaGroupMember_Type.tp_dict;
    for(method=oaFloatAppDef_oaGroupMember_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaGuide
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaGuide_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaGuide_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaGuideObject* self = (PyoaFloatAppDef_oaGuideObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaGuide)
    {
        PyParamoaFloatAppDef_oaGuide p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaGuide_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaGuide, Choices are:\n"
        "    (oaFloatAppDef_oaGuide)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaGuide_tp_dealloc(PyoaFloatAppDef_oaGuideObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaGuide_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaGuide value;
    int convert_status=PyoaFloatAppDef_oaGuide_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaFloatAppDef_oaGuide::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaGuide_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaGuide v1;
    PyParamoaFloatAppDef_oaGuide v2;
    int convert_status1=PyoaFloatAppDef_oaGuide_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaGuide_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaGuide_Convert(PyObject* ob,PyParamoaFloatAppDef_oaGuide* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaGuide_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaGuide**) ((PyoaFloatAppDef_oaGuideObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaGuide Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaGuide_FromoaFloatAppDef_oaGuide(oaFloatAppDef_oaGuide** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaGuide* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaGuide_Type.tp_alloc(&PyoaFloatAppDef_oaGuide_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaGuideObject* self = (PyoaFloatAppDef_oaGuideObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaGuide_FromoaFloatAppDef_oaGuide(oaFloatAppDef_oaGuide* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaGuide_Type.tp_alloc(&PyoaFloatAppDef_oaGuide_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaGuideObject* self = (PyoaFloatAppDef_oaGuideObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGuide_get_doc[] = 
"Class: oaFloatAppDef_oaGuide, Function: get\n"
"  Paramegers: (oaGuide)\n"
"    Calls: oaFloat get(const oaGuide* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaGuide,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaGuide_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGuide data;
    int convert_status=PyoaFloatAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGuideObject* self=(PyoaFloatAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGuide p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGuide_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGuide_getDefault_doc[] = 
"Class: oaFloatAppDef_oaGuide, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaGuide_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGuide data;
    int convert_status=PyoaFloatAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGuideObject* self=(PyoaFloatAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGuide_set_doc[] = 
"Class: oaFloatAppDef_oaGuide, Function: set\n"
"  Paramegers: (oaGuide,oaFloat)\n"
"    Calls: void set(oaGuide* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaGuide,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaGuide_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaGuide data;
    int convert_status=PyoaFloatAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaGuideObject* self=(PyoaFloatAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGuide p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGuide_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGuide_isNull_doc[] =
"Class: oaFloatAppDef_oaGuide, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaGuide_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaGuide data;
    int convert_status=PyoaFloatAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaGuide_assign_doc[] = 
"Class: oaFloatAppDef_oaGuide, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaGuide_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaGuide data;
  int convert_status=PyoaFloatAppDef_oaGuide_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaGuide p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaGuide_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaGuide_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaGuide_get,METH_VARARGS,oaFloatAppDef_oaGuide_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaGuide_getDefault,METH_VARARGS,oaFloatAppDef_oaGuide_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaGuide_set,METH_VARARGS,oaFloatAppDef_oaGuide_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaGuide_tp_isNull,METH_VARARGS,oaFloatAppDef_oaGuide_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaGuide_tp_assign,METH_VARARGS,oaFloatAppDef_oaGuide_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGuide_doc[] = 
"Class: oaFloatAppDef_oaGuide\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaGuide)\n"
"    Calls: (const oaFloatAppDef_oaGuide&)\n"
"    Signature: oaFloatAppDef_oaGuide||cref-oaFloatAppDef_oaGuide,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaGuide_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaGuide",
    sizeof(PyoaFloatAppDef_oaGuideObject),
    0,
    (destructor)oaFloatAppDef_oaGuide_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaGuide_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaGuide_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaGuide_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaGuide_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaGuide_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGuide_static_find_doc[] = 
"Class: oaFloatAppDef_oaGuide, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaGuide* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaGuide|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaGuide* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaGuide_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaGuidep result= (oaFloatAppDef_oaGuide::find(p1.Data()));
            return PyoaFloatAppDef_oaGuide_FromoaFloatAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGuidep result= (oaFloatAppDef_oaGuide::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGuide_FromoaFloatAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaGuide, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaGuide_static_get_doc[] = 
"Class: oaFloatAppDef_oaGuide, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaGuide* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGuide|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaGuide* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGuide|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaGuide* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGuide|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaGuide_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaGuidep result= (oaFloatAppDef_oaGuide::get(p1.Data()));
            return PyoaFloatAppDef_oaGuide_FromoaFloatAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaGuidep result= (oaFloatAppDef_oaGuide::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGuide_FromoaFloatAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaGuidep result= (oaFloatAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaGuide_FromoaFloatAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGuidep result= (oaFloatAppDef_oaGuide::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaGuide_FromoaFloatAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGuidep result= (oaFloatAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaGuide_FromoaFloatAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaGuidep result= (oaFloatAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaGuide_FromoaFloatAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaGuide, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaGuide_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaGuide_static_find,METH_VARARGS,oaFloatAppDef_oaGuide_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaGuide_static_get,METH_VARARGS,oaFloatAppDef_oaGuide_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaGuide_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaGuide_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaGuide\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaGuide",
           (PyObject*)(&PyoaFloatAppDef_oaGuide_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaGuide\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaGuide_Type.tp_dict;
    for(method=oaFloatAppDef_oaGuide_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaImage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaImage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaImage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaImageObject* self = (PyoaFloatAppDef_oaImageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaImage)
    {
        PyParamoaFloatAppDef_oaImage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaImage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaImage, Choices are:\n"
        "    (oaFloatAppDef_oaImage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaImage_tp_dealloc(PyoaFloatAppDef_oaImageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaImage_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaImage value;
    int convert_status=PyoaFloatAppDef_oaImage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaFloatAppDef_oaImage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaImage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaImage v1;
    PyParamoaFloatAppDef_oaImage v2;
    int convert_status1=PyoaFloatAppDef_oaImage_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaImage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaImage_Convert(PyObject* ob,PyParamoaFloatAppDef_oaImage* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaImage_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaImage**) ((PyoaFloatAppDef_oaImageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaImage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaImage_FromoaFloatAppDef_oaImage(oaFloatAppDef_oaImage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaImage* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaImage_Type.tp_alloc(&PyoaFloatAppDef_oaImage_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaImageObject* self = (PyoaFloatAppDef_oaImageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaImage_FromoaFloatAppDef_oaImage(oaFloatAppDef_oaImage* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaImage_Type.tp_alloc(&PyoaFloatAppDef_oaImage_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaImageObject* self = (PyoaFloatAppDef_oaImageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaImage_get_doc[] = 
"Class: oaFloatAppDef_oaImage, Function: get\n"
"  Paramegers: (oaImage)\n"
"    Calls: oaFloat get(const oaImage* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaImage,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaImage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaImage data;
    int convert_status=PyoaFloatAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaImageObject* self=(PyoaFloatAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaImage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaImage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaImage_getDefault_doc[] = 
"Class: oaFloatAppDef_oaImage, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaImage_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaImage data;
    int convert_status=PyoaFloatAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaImageObject* self=(PyoaFloatAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaImage_set_doc[] = 
"Class: oaFloatAppDef_oaImage, Function: set\n"
"  Paramegers: (oaImage,oaFloat)\n"
"    Calls: void set(oaImage* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaImage,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaImage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaImage data;
    int convert_status=PyoaFloatAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaImageObject* self=(PyoaFloatAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaImage p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaImage_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaImage_isNull_doc[] =
"Class: oaFloatAppDef_oaImage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaImage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaImage data;
    int convert_status=PyoaFloatAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaImage_assign_doc[] = 
"Class: oaFloatAppDef_oaImage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaImage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaImage data;
  int convert_status=PyoaFloatAppDef_oaImage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaImage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaImage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaImage_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaImage_get,METH_VARARGS,oaFloatAppDef_oaImage_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaImage_getDefault,METH_VARARGS,oaFloatAppDef_oaImage_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaImage_set,METH_VARARGS,oaFloatAppDef_oaImage_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaImage_tp_isNull,METH_VARARGS,oaFloatAppDef_oaImage_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaImage_tp_assign,METH_VARARGS,oaFloatAppDef_oaImage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaImage_doc[] = 
"Class: oaFloatAppDef_oaImage\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaImage)\n"
"    Calls: (const oaFloatAppDef_oaImage&)\n"
"    Signature: oaFloatAppDef_oaImage||cref-oaFloatAppDef_oaImage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaImage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaImage",
    sizeof(PyoaFloatAppDef_oaImageObject),
    0,
    (destructor)oaFloatAppDef_oaImage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaImage_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaImage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaImage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaImage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaImage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaImage_static_find_doc[] = 
"Class: oaFloatAppDef_oaImage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaImage* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaImage|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaImage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaImage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaImagep result= (oaFloatAppDef_oaImage::find(p1.Data()));
            return PyoaFloatAppDef_oaImage_FromoaFloatAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaImagep result= (oaFloatAppDef_oaImage::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaImage_FromoaFloatAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaImage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaImage_static_get_doc[] = 
"Class: oaFloatAppDef_oaImage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaImage* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaImage|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaImage* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaImage|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaImage* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaImage|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaImage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaImagep result= (oaFloatAppDef_oaImage::get(p1.Data()));
            return PyoaFloatAppDef_oaImage_FromoaFloatAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaImagep result= (oaFloatAppDef_oaImage::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaImage_FromoaFloatAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaImagep result= (oaFloatAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaImage_FromoaFloatAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaImagep result= (oaFloatAppDef_oaImage::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaImage_FromoaFloatAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaImagep result= (oaFloatAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaImage_FromoaFloatAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaImagep result= (oaFloatAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaImage_FromoaFloatAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaImage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaImage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaImage_static_find,METH_VARARGS,oaFloatAppDef_oaImage_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaImage_static_get,METH_VARARGS,oaFloatAppDef_oaImage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaImage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaImage_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaImage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaImage",
           (PyObject*)(&PyoaFloatAppDef_oaImage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaImage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaImage_Type.tp_dict;
    for(method=oaFloatAppDef_oaImage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaInstObject* self = (PyoaFloatAppDef_oaInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaInst)
    {
        PyParamoaFloatAppDef_oaInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaInst, Choices are:\n"
        "    (oaFloatAppDef_oaInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaInst_tp_dealloc(PyoaFloatAppDef_oaInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaInst_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaInst value;
    int convert_status=PyoaFloatAppDef_oaInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaFloatAppDef_oaInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaInst v1;
    PyParamoaFloatAppDef_oaInst v2;
    int convert_status1=PyoaFloatAppDef_oaInst_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaInst_Convert(PyObject* ob,PyParamoaFloatAppDef_oaInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaInst_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaInst**) ((PyoaFloatAppDef_oaInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaInst_FromoaFloatAppDef_oaInst(oaFloatAppDef_oaInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaInst* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaInst_Type.tp_alloc(&PyoaFloatAppDef_oaInst_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaInstObject* self = (PyoaFloatAppDef_oaInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaInst_FromoaFloatAppDef_oaInst(oaFloatAppDef_oaInst* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaInst_Type.tp_alloc(&PyoaFloatAppDef_oaInst_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaInstObject* self = (PyoaFloatAppDef_oaInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInst_get_doc[] = 
"Class: oaFloatAppDef_oaInst, Function: get\n"
"  Paramegers: (oaInst)\n"
"    Calls: oaFloat get(const oaInst* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaInst,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaInst data;
    int convert_status=PyoaFloatAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaInstObject* self=(PyoaFloatAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInst_getDefault_doc[] = 
"Class: oaFloatAppDef_oaInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaInst data;
    int convert_status=PyoaFloatAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaInstObject* self=(PyoaFloatAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInst_set_doc[] = 
"Class: oaFloatAppDef_oaInst, Function: set\n"
"  Paramegers: (oaInst,oaFloat)\n"
"    Calls: void set(oaInst* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaInst,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaInst data;
    int convert_status=PyoaFloatAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaInstObject* self=(PyoaFloatAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInst p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInst_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInst_isNull_doc[] =
"Class: oaFloatAppDef_oaInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaInst data;
    int convert_status=PyoaFloatAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaInst_assign_doc[] = 
"Class: oaFloatAppDef_oaInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaInst data;
  int convert_status=PyoaFloatAppDef_oaInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaInst_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaInst_get,METH_VARARGS,oaFloatAppDef_oaInst_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaInst_getDefault,METH_VARARGS,oaFloatAppDef_oaInst_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaInst_set,METH_VARARGS,oaFloatAppDef_oaInst_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaInst_tp_isNull,METH_VARARGS,oaFloatAppDef_oaInst_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaInst_tp_assign,METH_VARARGS,oaFloatAppDef_oaInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInst_doc[] = 
"Class: oaFloatAppDef_oaInst\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaInst)\n"
"    Calls: (const oaFloatAppDef_oaInst&)\n"
"    Signature: oaFloatAppDef_oaInst||cref-oaFloatAppDef_oaInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaInst",
    sizeof(PyoaFloatAppDef_oaInstObject),
    0,
    (destructor)oaFloatAppDef_oaInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaInst_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInst_static_find_doc[] = 
"Class: oaFloatAppDef_oaInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaInst|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaInstp result= (oaFloatAppDef_oaInst::find(p1.Data()));
            return PyoaFloatAppDef_oaInst_FromoaFloatAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstp result= (oaFloatAppDef_oaInst::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaInst_FromoaFloatAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInst_static_get_doc[] = 
"Class: oaFloatAppDef_oaInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaInst* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaInst* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaInstp result= (oaFloatAppDef_oaInst::get(p1.Data()));
            return PyoaFloatAppDef_oaInst_FromoaFloatAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaInstp result= (oaFloatAppDef_oaInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaInst_FromoaFloatAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaInstp result= (oaFloatAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaInst_FromoaFloatAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstp result= (oaFloatAppDef_oaInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaInst_FromoaFloatAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstp result= (oaFloatAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaInst_FromoaFloatAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstp result= (oaFloatAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaInst_FromoaFloatAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaInst_static_find,METH_VARARGS,oaFloatAppDef_oaInst_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaInst_static_get,METH_VARARGS,oaFloatAppDef_oaInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaInst_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaInst",
           (PyObject*)(&PyoaFloatAppDef_oaInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaInst_Type.tp_dict;
    for(method=oaFloatAppDef_oaInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaInstHeaderObject* self = (PyoaFloatAppDef_oaInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaInstHeader)
    {
        PyParamoaFloatAppDef_oaInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaInstHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaInstHeader, Choices are:\n"
        "    (oaFloatAppDef_oaInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaInstHeader_tp_dealloc(PyoaFloatAppDef_oaInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaInstHeader value;
    int convert_status=PyoaFloatAppDef_oaInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaFloatAppDef_oaInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaInstHeader v1;
    PyParamoaFloatAppDef_oaInstHeader v2;
    int convert_status1=PyoaFloatAppDef_oaInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaInstHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaInstHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaInstHeader**) ((PyoaFloatAppDef_oaInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaInstHeader_FromoaFloatAppDef_oaInstHeader(oaFloatAppDef_oaInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaInstHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaInstHeader_Type.tp_alloc(&PyoaFloatAppDef_oaInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaInstHeaderObject* self = (PyoaFloatAppDef_oaInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaInstHeader_FromoaFloatAppDef_oaInstHeader(oaFloatAppDef_oaInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaInstHeader_Type.tp_alloc(&PyoaFloatAppDef_oaInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaInstHeaderObject* self = (PyoaFloatAppDef_oaInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstHeader_get_doc[] = 
"Class: oaFloatAppDef_oaInstHeader, Function: get\n"
"  Paramegers: (oaInstHeader)\n"
"    Calls: oaFloat get(const oaInstHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaInstHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaInstHeader data;
    int convert_status=PyoaFloatAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaInstHeaderObject* self=(PyoaFloatAppDef_oaInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaInstHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaInstHeader data;
    int convert_status=PyoaFloatAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaInstHeaderObject* self=(PyoaFloatAppDef_oaInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstHeader_set_doc[] = 
"Class: oaFloatAppDef_oaInstHeader, Function: set\n"
"  Paramegers: (oaInstHeader,oaFloat)\n"
"    Calls: void set(oaInstHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaInstHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaInstHeader data;
    int convert_status=PyoaFloatAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaInstHeaderObject* self=(PyoaFloatAppDef_oaInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaInstHeader data;
    int convert_status=PyoaFloatAppDef_oaInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaInstHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaInstHeader data;
  int convert_status=PyoaFloatAppDef_oaInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaInstHeader_get,METH_VARARGS,oaFloatAppDef_oaInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaInstHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaInstHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaInstHeader_set,METH_VARARGS,oaFloatAppDef_oaInstHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaInstHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaInstHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstHeader_doc[] = 
"Class: oaFloatAppDef_oaInstHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaInstHeader)\n"
"    Calls: (const oaFloatAppDef_oaInstHeader&)\n"
"    Signature: oaFloatAppDef_oaInstHeader||cref-oaFloatAppDef_oaInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaInstHeader",
    sizeof(PyoaFloatAppDef_oaInstHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaInstHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaInstHeaderp result= (oaFloatAppDef_oaInstHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaInstHeader_FromoaFloatAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstHeaderp result= (oaFloatAppDef_oaInstHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaInstHeader_FromoaFloatAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaInstHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaInstHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaInstHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaInstHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaInstHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaInstHeaderp result= (oaFloatAppDef_oaInstHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaInstHeader_FromoaFloatAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaInstHeaderp result= (oaFloatAppDef_oaInstHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaInstHeader_FromoaFloatAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaInstHeaderp result= (oaFloatAppDef_oaInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaInstHeader_FromoaFloatAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstHeaderp result= (oaFloatAppDef_oaInstHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaInstHeader_FromoaFloatAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstHeaderp result= (oaFloatAppDef_oaInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaInstHeader_FromoaFloatAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstHeaderp result= (oaFloatAppDef_oaInstHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaInstHeader_FromoaFloatAppDef_oaInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaInstHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaInstHeader_static_find,METH_VARARGS,oaFloatAppDef_oaInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaInstHeader_static_get,METH_VARARGS,oaFloatAppDef_oaInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaInstHeader",
           (PyObject*)(&PyoaFloatAppDef_oaInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaInstHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaInstTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaInstTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaInstTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaInstTermObject* self = (PyoaFloatAppDef_oaInstTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaInstTerm)
    {
        PyParamoaFloatAppDef_oaInstTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaInstTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaInstTerm, Choices are:\n"
        "    (oaFloatAppDef_oaInstTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaInstTerm_tp_dealloc(PyoaFloatAppDef_oaInstTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaInstTerm_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaInstTerm value;
    int convert_status=PyoaFloatAppDef_oaInstTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaFloatAppDef_oaInstTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaInstTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaInstTerm v1;
    PyParamoaFloatAppDef_oaInstTerm v2;
    int convert_status1=PyoaFloatAppDef_oaInstTerm_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaInstTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaInstTerm_Convert(PyObject* ob,PyParamoaFloatAppDef_oaInstTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaInstTerm_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaInstTerm**) ((PyoaFloatAppDef_oaInstTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaInstTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaInstTerm_FromoaFloatAppDef_oaInstTerm(oaFloatAppDef_oaInstTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaInstTerm* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaInstTerm_Type.tp_alloc(&PyoaFloatAppDef_oaInstTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaInstTermObject* self = (PyoaFloatAppDef_oaInstTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaInstTerm_FromoaFloatAppDef_oaInstTerm(oaFloatAppDef_oaInstTerm* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaInstTerm_Type.tp_alloc(&PyoaFloatAppDef_oaInstTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaInstTermObject* self = (PyoaFloatAppDef_oaInstTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstTerm_get_doc[] = 
"Class: oaFloatAppDef_oaInstTerm, Function: get\n"
"  Paramegers: (oaInstTerm)\n"
"    Calls: oaFloat get(const oaInstTerm* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaInstTerm,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaInstTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaInstTerm data;
    int convert_status=PyoaFloatAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaInstTermObject* self=(PyoaFloatAppDef_oaInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstTerm_getDefault_doc[] = 
"Class: oaFloatAppDef_oaInstTerm, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaInstTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaInstTerm data;
    int convert_status=PyoaFloatAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaInstTermObject* self=(PyoaFloatAppDef_oaInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstTerm_set_doc[] = 
"Class: oaFloatAppDef_oaInstTerm, Function: set\n"
"  Paramegers: (oaInstTerm,oaFloat)\n"
"    Calls: void set(oaInstTerm* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaInstTerm,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaInstTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaInstTerm data;
    int convert_status=PyoaFloatAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaInstTermObject* self=(PyoaFloatAppDef_oaInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInstTerm p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstTerm_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstTerm_isNull_doc[] =
"Class: oaFloatAppDef_oaInstTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaInstTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaInstTerm data;
    int convert_status=PyoaFloatAppDef_oaInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaInstTerm_assign_doc[] = 
"Class: oaFloatAppDef_oaInstTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaInstTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaInstTerm data;
  int convert_status=PyoaFloatAppDef_oaInstTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaInstTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaInstTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaInstTerm_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaInstTerm_get,METH_VARARGS,oaFloatAppDef_oaInstTerm_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaInstTerm_getDefault,METH_VARARGS,oaFloatAppDef_oaInstTerm_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaInstTerm_set,METH_VARARGS,oaFloatAppDef_oaInstTerm_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaInstTerm_tp_isNull,METH_VARARGS,oaFloatAppDef_oaInstTerm_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaInstTerm_tp_assign,METH_VARARGS,oaFloatAppDef_oaInstTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstTerm_doc[] = 
"Class: oaFloatAppDef_oaInstTerm\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaInstTerm)\n"
"    Calls: (const oaFloatAppDef_oaInstTerm&)\n"
"    Signature: oaFloatAppDef_oaInstTerm||cref-oaFloatAppDef_oaInstTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaInstTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaInstTerm",
    sizeof(PyoaFloatAppDef_oaInstTermObject),
    0,
    (destructor)oaFloatAppDef_oaInstTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaInstTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaInstTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaInstTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaInstTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaInstTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstTerm_static_find_doc[] = 
"Class: oaFloatAppDef_oaInstTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaInstTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaInstTerm|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaInstTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaInstTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaInstTermp result= (oaFloatAppDef_oaInstTerm::find(p1.Data()));
            return PyoaFloatAppDef_oaInstTerm_FromoaFloatAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstTermp result= (oaFloatAppDef_oaInstTerm::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaInstTerm_FromoaFloatAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaInstTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaInstTerm_static_get_doc[] = 
"Class: oaFloatAppDef_oaInstTerm, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaInstTerm* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaInstTerm* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaInstTerm* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaInstTerm* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaInstTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaInstTermp result= (oaFloatAppDef_oaInstTerm::get(p1.Data()));
            return PyoaFloatAppDef_oaInstTerm_FromoaFloatAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaInstTermp result= (oaFloatAppDef_oaInstTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaInstTerm_FromoaFloatAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaInstTermp result= (oaFloatAppDef_oaInstTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaInstTerm_FromoaFloatAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstTermp result= (oaFloatAppDef_oaInstTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaInstTerm_FromoaFloatAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstTermp result= (oaFloatAppDef_oaInstTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaInstTerm_FromoaFloatAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaInstTermp result= (oaFloatAppDef_oaInstTerm::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaInstTerm_FromoaFloatAppDef_oaInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaInstTerm, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaInstTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaInstTerm_static_find,METH_VARARGS,oaFloatAppDef_oaInstTerm_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaInstTerm_static_get,METH_VARARGS,oaFloatAppDef_oaInstTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaInstTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaInstTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaInstTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaInstTerm",
           (PyObject*)(&PyoaFloatAppDef_oaInstTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaInstTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaInstTerm_Type.tp_dict;
    for(method=oaFloatAppDef_oaInstTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaLPPHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaLPPHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaLPPHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaLPPHeaderObject* self = (PyoaFloatAppDef_oaLPPHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaLPPHeader)
    {
        PyParamoaFloatAppDef_oaLPPHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaLPPHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaLPPHeader, Choices are:\n"
        "    (oaFloatAppDef_oaLPPHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaLPPHeader_tp_dealloc(PyoaFloatAppDef_oaLPPHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaLPPHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaLPPHeader value;
    int convert_status=PyoaFloatAppDef_oaLPPHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaFloatAppDef_oaLPPHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaLPPHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaLPPHeader v1;
    PyParamoaFloatAppDef_oaLPPHeader v2;
    int convert_status1=PyoaFloatAppDef_oaLPPHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaLPPHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaLPPHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaLPPHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaLPPHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaLPPHeader**) ((PyoaFloatAppDef_oaLPPHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaLPPHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaLPPHeader_FromoaFloatAppDef_oaLPPHeader(oaFloatAppDef_oaLPPHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaLPPHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaLPPHeader_Type.tp_alloc(&PyoaFloatAppDef_oaLPPHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaLPPHeaderObject* self = (PyoaFloatAppDef_oaLPPHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaLPPHeader_FromoaFloatAppDef_oaLPPHeader(oaFloatAppDef_oaLPPHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaLPPHeader_Type.tp_alloc(&PyoaFloatAppDef_oaLPPHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaLPPHeaderObject* self = (PyoaFloatAppDef_oaLPPHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLPPHeader_get_doc[] = 
"Class: oaFloatAppDef_oaLPPHeader, Function: get\n"
"  Paramegers: (oaLPPHeader)\n"
"    Calls: oaFloat get(const oaLPPHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaLPPHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaLPPHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLPPHeader data;
    int convert_status=PyoaFloatAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLPPHeaderObject* self=(PyoaFloatAppDef_oaLPPHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLPPHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLPPHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLPPHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaLPPHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaLPPHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLPPHeader data;
    int convert_status=PyoaFloatAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLPPHeaderObject* self=(PyoaFloatAppDef_oaLPPHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLPPHeader_set_doc[] = 
"Class: oaFloatAppDef_oaLPPHeader, Function: set\n"
"  Paramegers: (oaLPPHeader,oaFloat)\n"
"    Calls: void set(oaLPPHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaLPPHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaLPPHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLPPHeader data;
    int convert_status=PyoaFloatAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLPPHeaderObject* self=(PyoaFloatAppDef_oaLPPHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLPPHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLPPHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLPPHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaLPPHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaLPPHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaLPPHeader data;
    int convert_status=PyoaFloatAppDef_oaLPPHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaLPPHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaLPPHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaLPPHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaLPPHeader data;
  int convert_status=PyoaFloatAppDef_oaLPPHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaLPPHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaLPPHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaLPPHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaLPPHeader_get,METH_VARARGS,oaFloatAppDef_oaLPPHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaLPPHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaLPPHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaLPPHeader_set,METH_VARARGS,oaFloatAppDef_oaLPPHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaLPPHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaLPPHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaLPPHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaLPPHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLPPHeader_doc[] = 
"Class: oaFloatAppDef_oaLPPHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaLPPHeader)\n"
"    Calls: (const oaFloatAppDef_oaLPPHeader&)\n"
"    Signature: oaFloatAppDef_oaLPPHeader||cref-oaFloatAppDef_oaLPPHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaLPPHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaLPPHeader",
    sizeof(PyoaFloatAppDef_oaLPPHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaLPPHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaLPPHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaLPPHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaLPPHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaLPPHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaLPPHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLPPHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaLPPHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaLPPHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaLPPHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaLPPHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaLPPHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaLPPHeaderp result= (oaFloatAppDef_oaLPPHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaLPPHeader_FromoaFloatAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLPPHeaderp result= (oaFloatAppDef_oaLPPHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLPPHeader_FromoaFloatAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaLPPHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLPPHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaLPPHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaLPPHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLPPHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaLPPHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLPPHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaLPPHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLPPHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaLPPHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaLPPHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaLPPHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLPPHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaLPPHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaLPPHeaderp result= (oaFloatAppDef_oaLPPHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaLPPHeader_FromoaFloatAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaLPPHeaderp result= (oaFloatAppDef_oaLPPHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLPPHeader_FromoaFloatAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaLPPHeaderp result= (oaFloatAppDef_oaLPPHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaLPPHeader_FromoaFloatAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLPPHeaderp result= (oaFloatAppDef_oaLPPHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLPPHeader_FromoaFloatAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLPPHeaderp result= (oaFloatAppDef_oaLPPHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaLPPHeader_FromoaFloatAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLPPHeaderp result= (oaFloatAppDef_oaLPPHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaLPPHeader_FromoaFloatAppDef_oaLPPHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaLPPHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaLPPHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaLPPHeader_static_find,METH_VARARGS,oaFloatAppDef_oaLPPHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaLPPHeader_static_get,METH_VARARGS,oaFloatAppDef_oaLPPHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaLPPHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaLPPHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaLPPHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaLPPHeader",
           (PyObject*)(&PyoaFloatAppDef_oaLPPHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaLPPHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaLPPHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaLPPHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaLayer
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaLayer_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaLayer_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaLayerObject* self = (PyoaFloatAppDef_oaLayerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaLayer)
    {
        PyParamoaFloatAppDef_oaLayer p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaLayer_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaLayer, Choices are:\n"
        "    (oaFloatAppDef_oaLayer)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaLayer_tp_dealloc(PyoaFloatAppDef_oaLayerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaLayer_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaLayer value;
    int convert_status=PyoaFloatAppDef_oaLayer_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaFloatAppDef_oaLayer::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaLayer_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaLayer v1;
    PyParamoaFloatAppDef_oaLayer v2;
    int convert_status1=PyoaFloatAppDef_oaLayer_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaLayer_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaLayer_Convert(PyObject* ob,PyParamoaFloatAppDef_oaLayer* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaLayer_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaLayer**) ((PyoaFloatAppDef_oaLayerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaLayer Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaLayer_FromoaFloatAppDef_oaLayer(oaFloatAppDef_oaLayer** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaLayer* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaLayer_Type.tp_alloc(&PyoaFloatAppDef_oaLayer_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaLayerObject* self = (PyoaFloatAppDef_oaLayerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaLayer_FromoaFloatAppDef_oaLayer(oaFloatAppDef_oaLayer* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaLayer_Type.tp_alloc(&PyoaFloatAppDef_oaLayer_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaLayerObject* self = (PyoaFloatAppDef_oaLayerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayer_get_doc[] = 
"Class: oaFloatAppDef_oaLayer, Function: get\n"
"  Paramegers: (oaLayer)\n"
"    Calls: oaFloat get(const oaLayer* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaLayer,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaLayer_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLayer data;
    int convert_status=PyoaFloatAppDef_oaLayer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLayerObject* self=(PyoaFloatAppDef_oaLayerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLayer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayer_getDefault_doc[] = 
"Class: oaFloatAppDef_oaLayer, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaLayer_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLayer data;
    int convert_status=PyoaFloatAppDef_oaLayer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLayerObject* self=(PyoaFloatAppDef_oaLayerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayer_set_doc[] = 
"Class: oaFloatAppDef_oaLayer, Function: set\n"
"  Paramegers: (oaLayer,oaFloat)\n"
"    Calls: void set(oaLayer* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaLayer,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaLayer_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLayer data;
    int convert_status=PyoaFloatAppDef_oaLayer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLayerObject* self=(PyoaFloatAppDef_oaLayerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLayer p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayer_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayer_isNull_doc[] =
"Class: oaFloatAppDef_oaLayer, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaLayer_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaLayer data;
    int convert_status=PyoaFloatAppDef_oaLayer_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaLayer_assign_doc[] = 
"Class: oaFloatAppDef_oaLayer, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaLayer_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaLayer data;
  int convert_status=PyoaFloatAppDef_oaLayer_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaLayer p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaLayer_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaLayer_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaLayer_get,METH_VARARGS,oaFloatAppDef_oaLayer_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaLayer_getDefault,METH_VARARGS,oaFloatAppDef_oaLayer_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaLayer_set,METH_VARARGS,oaFloatAppDef_oaLayer_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaLayer_tp_isNull,METH_VARARGS,oaFloatAppDef_oaLayer_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaLayer_tp_assign,METH_VARARGS,oaFloatAppDef_oaLayer_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayer_doc[] = 
"Class: oaFloatAppDef_oaLayer\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaLayer)\n"
"    Calls: (const oaFloatAppDef_oaLayer&)\n"
"    Signature: oaFloatAppDef_oaLayer||cref-oaFloatAppDef_oaLayer,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaLayer_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaLayer",
    sizeof(PyoaFloatAppDef_oaLayerObject),
    0,
    (destructor)oaFloatAppDef_oaLayer_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaLayer_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaLayer_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaLayer_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaLayer_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaLayer_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayer_static_find_doc[] = 
"Class: oaFloatAppDef_oaLayer, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaLayer* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaLayer|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaLayer* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaLayer|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaLayer_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaLayerp result= (oaFloatAppDef_oaLayer::find(p1.Data()));
            return PyoaFloatAppDef_oaLayer_FromoaFloatAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLayerp result= (oaFloatAppDef_oaLayer::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLayer_FromoaFloatAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaLayer, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayer_static_get_doc[] = 
"Class: oaFloatAppDef_oaLayer, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaLayer* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayer|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaLayer* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayer|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaLayer* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayer|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaLayer* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayer|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaLayer* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayer|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaLayer* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayer|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaLayer_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaLayerp result= (oaFloatAppDef_oaLayer::get(p1.Data()));
            return PyoaFloatAppDef_oaLayer_FromoaFloatAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaLayerp result= (oaFloatAppDef_oaLayer::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLayer_FromoaFloatAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaLayerp result= (oaFloatAppDef_oaLayer::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaLayer_FromoaFloatAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLayerp result= (oaFloatAppDef_oaLayer::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLayer_FromoaFloatAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLayerp result= (oaFloatAppDef_oaLayer::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaLayer_FromoaFloatAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLayerp result= (oaFloatAppDef_oaLayer::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaLayer_FromoaFloatAppDef_oaLayer(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaLayer, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaLayer_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaLayer_static_find,METH_VARARGS,oaFloatAppDef_oaLayer_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaLayer_static_get,METH_VARARGS,oaFloatAppDef_oaLayer_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaLayer_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaLayer_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaLayer\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaLayer",
           (PyObject*)(&PyoaFloatAppDef_oaLayer_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaLayer\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaLayer_Type.tp_dict;
    for(method=oaFloatAppDef_oaLayer_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaLayerHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaLayerHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaLayerHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaLayerHeaderObject* self = (PyoaFloatAppDef_oaLayerHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaLayerHeader)
    {
        PyParamoaFloatAppDef_oaLayerHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaLayerHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaLayerHeader, Choices are:\n"
        "    (oaFloatAppDef_oaLayerHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaLayerHeader_tp_dealloc(PyoaFloatAppDef_oaLayerHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaLayerHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaLayerHeader value;
    int convert_status=PyoaFloatAppDef_oaLayerHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaFloatAppDef_oaLayerHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaLayerHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaLayerHeader v1;
    PyParamoaFloatAppDef_oaLayerHeader v2;
    int convert_status1=PyoaFloatAppDef_oaLayerHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaLayerHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaLayerHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaLayerHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaLayerHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaLayerHeader**) ((PyoaFloatAppDef_oaLayerHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaLayerHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaLayerHeader_FromoaFloatAppDef_oaLayerHeader(oaFloatAppDef_oaLayerHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaLayerHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaLayerHeader_Type.tp_alloc(&PyoaFloatAppDef_oaLayerHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaLayerHeaderObject* self = (PyoaFloatAppDef_oaLayerHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaLayerHeader_FromoaFloatAppDef_oaLayerHeader(oaFloatAppDef_oaLayerHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaLayerHeader_Type.tp_alloc(&PyoaFloatAppDef_oaLayerHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaLayerHeaderObject* self = (PyoaFloatAppDef_oaLayerHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayerHeader_get_doc[] = 
"Class: oaFloatAppDef_oaLayerHeader, Function: get\n"
"  Paramegers: (oaLayerHeader)\n"
"    Calls: oaFloat get(const oaLayerHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaLayerHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaLayerHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLayerHeader data;
    int convert_status=PyoaFloatAppDef_oaLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLayerHeaderObject* self=(PyoaFloatAppDef_oaLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLayerHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayerHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaLayerHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaLayerHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLayerHeader data;
    int convert_status=PyoaFloatAppDef_oaLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLayerHeaderObject* self=(PyoaFloatAppDef_oaLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayerHeader_set_doc[] = 
"Class: oaFloatAppDef_oaLayerHeader, Function: set\n"
"  Paramegers: (oaLayerHeader,oaFloat)\n"
"    Calls: void set(oaLayerHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaLayerHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaLayerHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLayerHeader data;
    int convert_status=PyoaFloatAppDef_oaLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLayerHeaderObject* self=(PyoaFloatAppDef_oaLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLayerHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayerHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaLayerHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaLayerHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaLayerHeader data;
    int convert_status=PyoaFloatAppDef_oaLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaLayerHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaLayerHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaLayerHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaLayerHeader data;
  int convert_status=PyoaFloatAppDef_oaLayerHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaLayerHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaLayerHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaLayerHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaLayerHeader_get,METH_VARARGS,oaFloatAppDef_oaLayerHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaLayerHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaLayerHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaLayerHeader_set,METH_VARARGS,oaFloatAppDef_oaLayerHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaLayerHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaLayerHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaLayerHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaLayerHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayerHeader_doc[] = 
"Class: oaFloatAppDef_oaLayerHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaLayerHeader)\n"
"    Calls: (const oaFloatAppDef_oaLayerHeader&)\n"
"    Signature: oaFloatAppDef_oaLayerHeader||cref-oaFloatAppDef_oaLayerHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaLayerHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaLayerHeader",
    sizeof(PyoaFloatAppDef_oaLayerHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaLayerHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaLayerHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaLayerHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaLayerHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaLayerHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaLayerHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayerHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaLayerHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaLayerHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaLayerHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaLayerHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaLayerHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaLayerHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaLayerHeaderp result= (oaFloatAppDef_oaLayerHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaLayerHeader_FromoaFloatAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLayerHeaderp result= (oaFloatAppDef_oaLayerHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLayerHeader_FromoaFloatAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaLayerHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLayerHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaLayerHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaLayerHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayerHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaLayerHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayerHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaLayerHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayerHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaLayerHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaLayerHeaderp result= (oaFloatAppDef_oaLayerHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaLayerHeader_FromoaFloatAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaLayerHeaderp result= (oaFloatAppDef_oaLayerHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLayerHeader_FromoaFloatAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaLayerHeaderp result= (oaFloatAppDef_oaLayerHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaLayerHeader_FromoaFloatAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLayerHeaderp result= (oaFloatAppDef_oaLayerHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLayerHeader_FromoaFloatAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLayerHeaderp result= (oaFloatAppDef_oaLayerHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaLayerHeader_FromoaFloatAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLayerHeaderp result= (oaFloatAppDef_oaLayerHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaLayerHeader_FromoaFloatAppDef_oaLayerHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaLayerHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaLayerHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaLayerHeader_static_find,METH_VARARGS,oaFloatAppDef_oaLayerHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaLayerHeader_static_get,METH_VARARGS,oaFloatAppDef_oaLayerHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaLayerHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaLayerHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaLayerHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaLayerHeader",
           (PyObject*)(&PyoaFloatAppDef_oaLayerHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaLayerHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaLayerHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaLayerHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaLib
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaLib_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaLib_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaLibObject* self = (PyoaFloatAppDef_oaLibObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaLib)
    {
        PyParamoaFloatAppDef_oaLib p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaLib_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaLib, Choices are:\n"
        "    (oaFloatAppDef_oaLib)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaLib_tp_dealloc(PyoaFloatAppDef_oaLibObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaLib_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaLib value;
    int convert_status=PyoaFloatAppDef_oaLib_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaFloatAppDef_oaLib::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaLib_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaLib v1;
    PyParamoaFloatAppDef_oaLib v2;
    int convert_status1=PyoaFloatAppDef_oaLib_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaLib_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaLib_Convert(PyObject* ob,PyParamoaFloatAppDef_oaLib* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaLib_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaLib**) ((PyoaFloatAppDef_oaLibObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaLib Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaLib_FromoaFloatAppDef_oaLib(oaFloatAppDef_oaLib** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaLib* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaLib_Type.tp_alloc(&PyoaFloatAppDef_oaLib_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaLibObject* self = (PyoaFloatAppDef_oaLibObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaLib_FromoaFloatAppDef_oaLib(oaFloatAppDef_oaLib* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaLib_Type.tp_alloc(&PyoaFloatAppDef_oaLib_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaLibObject* self = (PyoaFloatAppDef_oaLibObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLib_get_doc[] = 
"Class: oaFloatAppDef_oaLib, Function: get\n"
"  Paramegers: (oaLib)\n"
"    Calls: oaFloat get(const oaLib* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaLib,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaLib_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLib data;
    int convert_status=PyoaFloatAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLibObject* self=(PyoaFloatAppDef_oaLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLib p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLib_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLib_getDefault_doc[] = 
"Class: oaFloatAppDef_oaLib, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaLib_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLib data;
    int convert_status=PyoaFloatAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLibObject* self=(PyoaFloatAppDef_oaLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLib_set_doc[] = 
"Class: oaFloatAppDef_oaLib, Function: set\n"
"  Paramegers: (oaLib,oaFloat)\n"
"    Calls: void set(oaLib* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaLib,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaLib_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaLib data;
    int convert_status=PyoaFloatAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaLibObject* self=(PyoaFloatAppDef_oaLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLib p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLib_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLib_isNull_doc[] =
"Class: oaFloatAppDef_oaLib, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaLib_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaLib data;
    int convert_status=PyoaFloatAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaLib_assign_doc[] = 
"Class: oaFloatAppDef_oaLib, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaLib_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaLib data;
  int convert_status=PyoaFloatAppDef_oaLib_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaLib p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaLib_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaLib_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaLib_get,METH_VARARGS,oaFloatAppDef_oaLib_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaLib_getDefault,METH_VARARGS,oaFloatAppDef_oaLib_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaLib_set,METH_VARARGS,oaFloatAppDef_oaLib_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaLib_tp_isNull,METH_VARARGS,oaFloatAppDef_oaLib_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaLib_tp_assign,METH_VARARGS,oaFloatAppDef_oaLib_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLib_doc[] = 
"Class: oaFloatAppDef_oaLib\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaLib)\n"
"    Calls: (const oaFloatAppDef_oaLib&)\n"
"    Signature: oaFloatAppDef_oaLib||cref-oaFloatAppDef_oaLib,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaLib_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaLib",
    sizeof(PyoaFloatAppDef_oaLibObject),
    0,
    (destructor)oaFloatAppDef_oaLib_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaLib_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaLib_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaLib_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaLib_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaLib_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLib_static_find_doc[] = 
"Class: oaFloatAppDef_oaLib, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaLib* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaLib|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaLib* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaLib|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaLib_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaLibp result= (oaFloatAppDef_oaLib::find(p1.Data()));
            return PyoaFloatAppDef_oaLib_FromoaFloatAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLibp result= (oaFloatAppDef_oaLib::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLib_FromoaFloatAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaLib, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaLib_static_get_doc[] = 
"Class: oaFloatAppDef_oaLib, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaLib* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLib|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaLib* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLib|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaLib* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLib|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaLib* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLib|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaLib* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLib|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaLib* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaLib|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaLib_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaLibp result= (oaFloatAppDef_oaLib::get(p1.Data()));
            return PyoaFloatAppDef_oaLib_FromoaFloatAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaLibp result= (oaFloatAppDef_oaLib::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLib_FromoaFloatAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaLibp result= (oaFloatAppDef_oaLib::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaLib_FromoaFloatAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLibp result= (oaFloatAppDef_oaLib::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaLib_FromoaFloatAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLibp result= (oaFloatAppDef_oaLib::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaLib_FromoaFloatAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaLibp result= (oaFloatAppDef_oaLib::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaLib_FromoaFloatAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaLib, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaLib_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaLib_static_find,METH_VARARGS,oaFloatAppDef_oaLib_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaLib_static_get,METH_VARARGS,oaFloatAppDef_oaLib_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaLib_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaLib_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaLib\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaLib",
           (PyObject*)(&PyoaFloatAppDef_oaLib_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaLib\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaLib_Type.tp_dict;
    for(method=oaFloatAppDef_oaLib_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaMarker
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaMarker_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaMarker_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaMarkerObject* self = (PyoaFloatAppDef_oaMarkerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaMarker)
    {
        PyParamoaFloatAppDef_oaMarker p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaMarker_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaMarker, Choices are:\n"
        "    (oaFloatAppDef_oaMarker)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaMarker_tp_dealloc(PyoaFloatAppDef_oaMarkerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaMarker_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaMarker value;
    int convert_status=PyoaFloatAppDef_oaMarker_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaFloatAppDef_oaMarker::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaMarker_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaMarker v1;
    PyParamoaFloatAppDef_oaMarker v2;
    int convert_status1=PyoaFloatAppDef_oaMarker_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaMarker_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaMarker_Convert(PyObject* ob,PyParamoaFloatAppDef_oaMarker* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaMarker_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaMarker**) ((PyoaFloatAppDef_oaMarkerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaMarker Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaMarker_FromoaFloatAppDef_oaMarker(oaFloatAppDef_oaMarker** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaMarker* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaMarker_Type.tp_alloc(&PyoaFloatAppDef_oaMarker_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaMarkerObject* self = (PyoaFloatAppDef_oaMarkerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaMarker_FromoaFloatAppDef_oaMarker(oaFloatAppDef_oaMarker* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaMarker_Type.tp_alloc(&PyoaFloatAppDef_oaMarker_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaMarkerObject* self = (PyoaFloatAppDef_oaMarkerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaMarker_get_doc[] = 
"Class: oaFloatAppDef_oaMarker, Function: get\n"
"  Paramegers: (oaMarker)\n"
"    Calls: oaFloat get(const oaMarker* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaMarker,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaMarker_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaMarker data;
    int convert_status=PyoaFloatAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaMarkerObject* self=(PyoaFloatAppDef_oaMarkerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaMarker p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaMarker_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaMarker_getDefault_doc[] = 
"Class: oaFloatAppDef_oaMarker, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaMarker_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaMarker data;
    int convert_status=PyoaFloatAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaMarkerObject* self=(PyoaFloatAppDef_oaMarkerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaMarker_set_doc[] = 
"Class: oaFloatAppDef_oaMarker, Function: set\n"
"  Paramegers: (oaMarker,oaFloat)\n"
"    Calls: void set(oaMarker* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaMarker,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaMarker_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaMarker data;
    int convert_status=PyoaFloatAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaMarkerObject* self=(PyoaFloatAppDef_oaMarkerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaMarker p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMarker_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaMarker_isNull_doc[] =
"Class: oaFloatAppDef_oaMarker, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaMarker_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaMarker data;
    int convert_status=PyoaFloatAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaMarker_assign_doc[] = 
"Class: oaFloatAppDef_oaMarker, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaMarker_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaMarker data;
  int convert_status=PyoaFloatAppDef_oaMarker_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaMarker p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaMarker_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaMarker_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaMarker_get,METH_VARARGS,oaFloatAppDef_oaMarker_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaMarker_getDefault,METH_VARARGS,oaFloatAppDef_oaMarker_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaMarker_set,METH_VARARGS,oaFloatAppDef_oaMarker_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaMarker_tp_isNull,METH_VARARGS,oaFloatAppDef_oaMarker_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaMarker_tp_assign,METH_VARARGS,oaFloatAppDef_oaMarker_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaMarker_doc[] = 
"Class: oaFloatAppDef_oaMarker\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaMarker)\n"
"    Calls: (const oaFloatAppDef_oaMarker&)\n"
"    Signature: oaFloatAppDef_oaMarker||cref-oaFloatAppDef_oaMarker,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaMarker_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaMarker",
    sizeof(PyoaFloatAppDef_oaMarkerObject),
    0,
    (destructor)oaFloatAppDef_oaMarker_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaMarker_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaMarker_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaMarker_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaMarker_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaMarker_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaMarker_static_find_doc[] = 
"Class: oaFloatAppDef_oaMarker, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaMarker* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaMarker|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaMarker* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaMarker|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaMarker_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaMarkerp result= (oaFloatAppDef_oaMarker::find(p1.Data()));
            return PyoaFloatAppDef_oaMarker_FromoaFloatAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaMarkerp result= (oaFloatAppDef_oaMarker::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaMarker_FromoaFloatAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaMarker, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaMarker_static_get_doc[] = 
"Class: oaFloatAppDef_oaMarker, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaMarker* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaMarker|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaMarker* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaMarker|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaMarker* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaMarker|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaMarker* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaMarker|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaMarker* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaMarker|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaMarker* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaMarker|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaMarker_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaMarkerp result= (oaFloatAppDef_oaMarker::get(p1.Data()));
            return PyoaFloatAppDef_oaMarker_FromoaFloatAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaMarkerp result= (oaFloatAppDef_oaMarker::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaMarker_FromoaFloatAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaMarkerp result= (oaFloatAppDef_oaMarker::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaMarker_FromoaFloatAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaMarkerp result= (oaFloatAppDef_oaMarker::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaMarker_FromoaFloatAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaMarkerp result= (oaFloatAppDef_oaMarker::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaMarker_FromoaFloatAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaMarkerp result= (oaFloatAppDef_oaMarker::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaMarker_FromoaFloatAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaMarker, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaMarker_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaMarker_static_find,METH_VARARGS,oaFloatAppDef_oaMarker_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaMarker_static_get,METH_VARARGS,oaFloatAppDef_oaMarker_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaMarker_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaMarker_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaMarker\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaMarker",
           (PyObject*)(&PyoaFloatAppDef_oaMarker_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaMarker\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaMarker_Type.tp_dict;
    for(method=oaFloatAppDef_oaMarker_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModAssignmentObject* self = (PyoaFloatAppDef_oaModAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModAssignment)
    {
        PyParamoaFloatAppDef_oaModAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModAssignment_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModAssignment, Choices are:\n"
        "    (oaFloatAppDef_oaModAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModAssignment_tp_dealloc(PyoaFloatAppDef_oaModAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModAssignment_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModAssignment value;
    int convert_status=PyoaFloatAppDef_oaModAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaModAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModAssignment v1;
    PyParamoaFloatAppDef_oaModAssignment v2;
    int convert_status1=PyoaFloatAppDef_oaModAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModAssignment_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModAssignment_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModAssignment**) ((PyoaFloatAppDef_oaModAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModAssignment_FromoaFloatAppDef_oaModAssignment(oaFloatAppDef_oaModAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModAssignment* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModAssignment_Type.tp_alloc(&PyoaFloatAppDef_oaModAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModAssignmentObject* self = (PyoaFloatAppDef_oaModAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModAssignment_FromoaFloatAppDef_oaModAssignment(oaFloatAppDef_oaModAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModAssignment_Type.tp_alloc(&PyoaFloatAppDef_oaModAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModAssignmentObject* self = (PyoaFloatAppDef_oaModAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModAssignment_get_doc[] = 
"Class: oaFloatAppDef_oaModAssignment, Function: get\n"
"  Paramegers: (oaModAssignment)\n"
"    Calls: oaFloat get(const oaModAssignment* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModAssignment,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModAssignment data;
    int convert_status=PyoaFloatAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModAssignmentObject* self=(PyoaFloatAppDef_oaModAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModAssignment_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModAssignment, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModAssignment data;
    int convert_status=PyoaFloatAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModAssignmentObject* self=(PyoaFloatAppDef_oaModAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModAssignment_set_doc[] = 
"Class: oaFloatAppDef_oaModAssignment, Function: set\n"
"  Paramegers: (oaModAssignment,oaFloat)\n"
"    Calls: void set(oaModAssignment* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModAssignment,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModAssignment data;
    int convert_status=PyoaFloatAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModAssignmentObject* self=(PyoaFloatAppDef_oaModAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModAssignment p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignment_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModAssignment_isNull_doc[] =
"Class: oaFloatAppDef_oaModAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModAssignment data;
    int convert_status=PyoaFloatAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModAssignment_assign_doc[] = 
"Class: oaFloatAppDef_oaModAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModAssignment data;
  int convert_status=PyoaFloatAppDef_oaModAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModAssignment_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModAssignment_get,METH_VARARGS,oaFloatAppDef_oaModAssignment_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModAssignment_getDefault,METH_VARARGS,oaFloatAppDef_oaModAssignment_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModAssignment_set,METH_VARARGS,oaFloatAppDef_oaModAssignment_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModAssignment_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModAssignment_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModAssignment_tp_assign,METH_VARARGS,oaFloatAppDef_oaModAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModAssignment_doc[] = 
"Class: oaFloatAppDef_oaModAssignment\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModAssignment)\n"
"    Calls: (const oaFloatAppDef_oaModAssignment&)\n"
"    Signature: oaFloatAppDef_oaModAssignment||cref-oaFloatAppDef_oaModAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModAssignment",
    sizeof(PyoaFloatAppDef_oaModAssignmentObject),
    0,
    (destructor)oaFloatAppDef_oaModAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModAssignment_static_find_doc[] = 
"Class: oaFloatAppDef_oaModAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModAssignment|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModAssignmentp result= (oaFloatAppDef_oaModAssignment::find(p1.Data()));
            return PyoaFloatAppDef_oaModAssignment_FromoaFloatAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModAssignmentp result= (oaFloatAppDef_oaModAssignment::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModAssignment_FromoaFloatAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModAssignment_static_get_doc[] = 
"Class: oaFloatAppDef_oaModAssignment, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModAssignment* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModAssignment|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModAssignment* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModAssignment|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModAssignment* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModAssignment|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModAssignment* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModAssignmentp result= (oaFloatAppDef_oaModAssignment::get(p1.Data()));
            return PyoaFloatAppDef_oaModAssignment_FromoaFloatAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModAssignmentp result= (oaFloatAppDef_oaModAssignment::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModAssignment_FromoaFloatAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModAssignmentp result= (oaFloatAppDef_oaModAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModAssignment_FromoaFloatAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModAssignmentp result= (oaFloatAppDef_oaModAssignment::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModAssignment_FromoaFloatAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModAssignmentp result= (oaFloatAppDef_oaModAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModAssignment_FromoaFloatAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModAssignmentp result= (oaFloatAppDef_oaModAssignment::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModAssignment_FromoaFloatAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModAssignment, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModAssignment_static_find,METH_VARARGS,oaFloatAppDef_oaModAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModAssignment_static_get,METH_VARARGS,oaFloatAppDef_oaModAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModAssignment",
           (PyObject*)(&PyoaFloatAppDef_oaModAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModAssignment_Type.tp_dict;
    for(method=oaFloatAppDef_oaModAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModBusNetDefObject* self = (PyoaFloatAppDef_oaModBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModBusNetDef)
    {
        PyParamoaFloatAppDef_oaModBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModBusNetDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModBusNetDef, Choices are:\n"
        "    (oaFloatAppDef_oaModBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModBusNetDef_tp_dealloc(PyoaFloatAppDef_oaModBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModBusNetDef value;
    int convert_status=PyoaFloatAppDef_oaModBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaFloatAppDef_oaModBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModBusNetDef v1;
    PyParamoaFloatAppDef_oaModBusNetDef v2;
    int convert_status1=PyoaFloatAppDef_oaModBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModBusNetDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModBusNetDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModBusNetDef**) ((PyoaFloatAppDef_oaModBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModBusNetDef_FromoaFloatAppDef_oaModBusNetDef(oaFloatAppDef_oaModBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModBusNetDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModBusNetDef_Type.tp_alloc(&PyoaFloatAppDef_oaModBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModBusNetDefObject* self = (PyoaFloatAppDef_oaModBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModBusNetDef_FromoaFloatAppDef_oaModBusNetDef(oaFloatAppDef_oaModBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModBusNetDef_Type.tp_alloc(&PyoaFloatAppDef_oaModBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModBusNetDefObject* self = (PyoaFloatAppDef_oaModBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusNetDef_get_doc[] = 
"Class: oaFloatAppDef_oaModBusNetDef, Function: get\n"
"  Paramegers: (oaModBusNetDef)\n"
"    Calls: oaFloat get(const oaModBusNetDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModBusNetDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaModBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModBusNetDefObject* self=(PyoaFloatAppDef_oaModBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusNetDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModBusNetDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModBusNetDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaModBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModBusNetDefObject* self=(PyoaFloatAppDef_oaModBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusNetDef_set_doc[] = 
"Class: oaFloatAppDef_oaModBusNetDef, Function: set\n"
"  Paramegers: (oaModBusNetDef,oaFloat)\n"
"    Calls: void set(oaModBusNetDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModBusNetDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaModBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModBusNetDefObject* self=(PyoaFloatAppDef_oaModBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModBusNetDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusNetDef_isNull_doc[] =
"Class: oaFloatAppDef_oaModBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaModBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModBusNetDef_assign_doc[] = 
"Class: oaFloatAppDef_oaModBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModBusNetDef data;
  int convert_status=PyoaFloatAppDef_oaModBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModBusNetDef_get,METH_VARARGS,oaFloatAppDef_oaModBusNetDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModBusNetDef_getDefault,METH_VARARGS,oaFloatAppDef_oaModBusNetDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModBusNetDef_set,METH_VARARGS,oaFloatAppDef_oaModBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModBusNetDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModBusNetDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaModBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusNetDef_doc[] = 
"Class: oaFloatAppDef_oaModBusNetDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModBusNetDef)\n"
"    Calls: (const oaFloatAppDef_oaModBusNetDef&)\n"
"    Signature: oaFloatAppDef_oaModBusNetDef||cref-oaFloatAppDef_oaModBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModBusNetDef",
    sizeof(PyoaFloatAppDef_oaModBusNetDefObject),
    0,
    (destructor)oaFloatAppDef_oaModBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusNetDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaModBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModBusNetDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModBusNetDefp result= (oaFloatAppDef_oaModBusNetDef::find(p1.Data()));
            return PyoaFloatAppDef_oaModBusNetDef_FromoaFloatAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModBusNetDefp result= (oaFloatAppDef_oaModBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModBusNetDef_FromoaFloatAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusNetDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaModBusNetDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModBusNetDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusNetDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModBusNetDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusNetDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModBusNetDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusNetDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModBusNetDefp result= (oaFloatAppDef_oaModBusNetDef::get(p1.Data()));
            return PyoaFloatAppDef_oaModBusNetDef_FromoaFloatAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModBusNetDefp result= (oaFloatAppDef_oaModBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModBusNetDef_FromoaFloatAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModBusNetDefp result= (oaFloatAppDef_oaModBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModBusNetDef_FromoaFloatAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModBusNetDefp result= (oaFloatAppDef_oaModBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModBusNetDef_FromoaFloatAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModBusNetDefp result= (oaFloatAppDef_oaModBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModBusNetDef_FromoaFloatAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModBusNetDefp result= (oaFloatAppDef_oaModBusNetDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModBusNetDef_FromoaFloatAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModBusNetDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModBusNetDef_static_find,METH_VARARGS,oaFloatAppDef_oaModBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModBusNetDef_static_get,METH_VARARGS,oaFloatAppDef_oaModBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModBusNetDef",
           (PyObject*)(&PyoaFloatAppDef_oaModBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModBusNetDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaModBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModBusTermDefObject* self = (PyoaFloatAppDef_oaModBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModBusTermDef)
    {
        PyParamoaFloatAppDef_oaModBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModBusTermDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModBusTermDef, Choices are:\n"
        "    (oaFloatAppDef_oaModBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModBusTermDef_tp_dealloc(PyoaFloatAppDef_oaModBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModBusTermDef value;
    int convert_status=PyoaFloatAppDef_oaModBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaModBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModBusTermDef v1;
    PyParamoaFloatAppDef_oaModBusTermDef v2;
    int convert_status1=PyoaFloatAppDef_oaModBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModBusTermDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModBusTermDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModBusTermDef**) ((PyoaFloatAppDef_oaModBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModBusTermDef_FromoaFloatAppDef_oaModBusTermDef(oaFloatAppDef_oaModBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModBusTermDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModBusTermDef_Type.tp_alloc(&PyoaFloatAppDef_oaModBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModBusTermDefObject* self = (PyoaFloatAppDef_oaModBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModBusTermDef_FromoaFloatAppDef_oaModBusTermDef(oaFloatAppDef_oaModBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModBusTermDef_Type.tp_alloc(&PyoaFloatAppDef_oaModBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModBusTermDefObject* self = (PyoaFloatAppDef_oaModBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusTermDef_get_doc[] = 
"Class: oaFloatAppDef_oaModBusTermDef, Function: get\n"
"  Paramegers: (oaModBusTermDef)\n"
"    Calls: oaFloat get(const oaModBusTermDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModBusTermDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaModBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModBusTermDefObject* self=(PyoaFloatAppDef_oaModBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusTermDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModBusTermDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModBusTermDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaModBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModBusTermDefObject* self=(PyoaFloatAppDef_oaModBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusTermDef_set_doc[] = 
"Class: oaFloatAppDef_oaModBusTermDef, Function: set\n"
"  Paramegers: (oaModBusTermDef,oaFloat)\n"
"    Calls: void set(oaModBusTermDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModBusTermDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaModBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModBusTermDefObject* self=(PyoaFloatAppDef_oaModBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModBusTermDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusTermDef_isNull_doc[] =
"Class: oaFloatAppDef_oaModBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaModBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModBusTermDef_assign_doc[] = 
"Class: oaFloatAppDef_oaModBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModBusTermDef data;
  int convert_status=PyoaFloatAppDef_oaModBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModBusTermDef_get,METH_VARARGS,oaFloatAppDef_oaModBusTermDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModBusTermDef_getDefault,METH_VARARGS,oaFloatAppDef_oaModBusTermDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModBusTermDef_set,METH_VARARGS,oaFloatAppDef_oaModBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModBusTermDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModBusTermDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaModBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusTermDef_doc[] = 
"Class: oaFloatAppDef_oaModBusTermDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModBusTermDef)\n"
"    Calls: (const oaFloatAppDef_oaModBusTermDef&)\n"
"    Signature: oaFloatAppDef_oaModBusTermDef||cref-oaFloatAppDef_oaModBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModBusTermDef",
    sizeof(PyoaFloatAppDef_oaModBusTermDefObject),
    0,
    (destructor)oaFloatAppDef_oaModBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusTermDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaModBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModBusTermDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModBusTermDefp result= (oaFloatAppDef_oaModBusTermDef::find(p1.Data()));
            return PyoaFloatAppDef_oaModBusTermDef_FromoaFloatAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModBusTermDefp result= (oaFloatAppDef_oaModBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModBusTermDef_FromoaFloatAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModBusTermDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaModBusTermDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModBusTermDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusTermDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModBusTermDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusTermDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModBusTermDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusTermDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModBusTermDefp result= (oaFloatAppDef_oaModBusTermDef::get(p1.Data()));
            return PyoaFloatAppDef_oaModBusTermDef_FromoaFloatAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModBusTermDefp result= (oaFloatAppDef_oaModBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModBusTermDef_FromoaFloatAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModBusTermDefp result= (oaFloatAppDef_oaModBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModBusTermDef_FromoaFloatAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModBusTermDefp result= (oaFloatAppDef_oaModBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModBusTermDef_FromoaFloatAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModBusTermDefp result= (oaFloatAppDef_oaModBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModBusTermDef_FromoaFloatAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModBusTermDefp result= (oaFloatAppDef_oaModBusTermDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModBusTermDef_FromoaFloatAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModBusTermDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModBusTermDef_static_find,METH_VARARGS,oaFloatAppDef_oaModBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModBusTermDef_static_get,METH_VARARGS,oaFloatAppDef_oaModBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModBusTermDef",
           (PyObject*)(&PyoaFloatAppDef_oaModBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModBusTermDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaModBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModConnectDefObject* self = (PyoaFloatAppDef_oaModConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModConnectDef)
    {
        PyParamoaFloatAppDef_oaModConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModConnectDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModConnectDef, Choices are:\n"
        "    (oaFloatAppDef_oaModConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModConnectDef_tp_dealloc(PyoaFloatAppDef_oaModConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModConnectDef value;
    int convert_status=PyoaFloatAppDef_oaModConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaModConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModConnectDef v1;
    PyParamoaFloatAppDef_oaModConnectDef v2;
    int convert_status1=PyoaFloatAppDef_oaModConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModConnectDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModConnectDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModConnectDef**) ((PyoaFloatAppDef_oaModConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModConnectDef_FromoaFloatAppDef_oaModConnectDef(oaFloatAppDef_oaModConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModConnectDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModConnectDef_Type.tp_alloc(&PyoaFloatAppDef_oaModConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModConnectDefObject* self = (PyoaFloatAppDef_oaModConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModConnectDef_FromoaFloatAppDef_oaModConnectDef(oaFloatAppDef_oaModConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModConnectDef_Type.tp_alloc(&PyoaFloatAppDef_oaModConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModConnectDefObject* self = (PyoaFloatAppDef_oaModConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModConnectDef_get_doc[] = 
"Class: oaFloatAppDef_oaModConnectDef, Function: get\n"
"  Paramegers: (oaModConnectDef)\n"
"    Calls: oaFloat get(const oaModConnectDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModConnectDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModConnectDef data;
    int convert_status=PyoaFloatAppDef_oaModConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModConnectDefObject* self=(PyoaFloatAppDef_oaModConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModConnectDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModConnectDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModConnectDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModConnectDef data;
    int convert_status=PyoaFloatAppDef_oaModConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModConnectDefObject* self=(PyoaFloatAppDef_oaModConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModConnectDef_set_doc[] = 
"Class: oaFloatAppDef_oaModConnectDef, Function: set\n"
"  Paramegers: (oaModConnectDef,oaFloat)\n"
"    Calls: void set(oaModConnectDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModConnectDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModConnectDef data;
    int convert_status=PyoaFloatAppDef_oaModConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModConnectDefObject* self=(PyoaFloatAppDef_oaModConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModConnectDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModConnectDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModConnectDef_isNull_doc[] =
"Class: oaFloatAppDef_oaModConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModConnectDef data;
    int convert_status=PyoaFloatAppDef_oaModConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModConnectDef_assign_doc[] = 
"Class: oaFloatAppDef_oaModConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModConnectDef data;
  int convert_status=PyoaFloatAppDef_oaModConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModConnectDef_get,METH_VARARGS,oaFloatAppDef_oaModConnectDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModConnectDef_getDefault,METH_VARARGS,oaFloatAppDef_oaModConnectDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModConnectDef_set,METH_VARARGS,oaFloatAppDef_oaModConnectDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModConnectDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModConnectDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaModConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModConnectDef_doc[] = 
"Class: oaFloatAppDef_oaModConnectDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModConnectDef)\n"
"    Calls: (const oaFloatAppDef_oaModConnectDef&)\n"
"    Signature: oaFloatAppDef_oaModConnectDef||cref-oaFloatAppDef_oaModConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModConnectDef",
    sizeof(PyoaFloatAppDef_oaModConnectDefObject),
    0,
    (destructor)oaFloatAppDef_oaModConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModConnectDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaModConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModConnectDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModConnectDefp result= (oaFloatAppDef_oaModConnectDef::find(p1.Data()));
            return PyoaFloatAppDef_oaModConnectDef_FromoaFloatAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModConnectDefp result= (oaFloatAppDef_oaModConnectDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModConnectDef_FromoaFloatAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModConnectDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaModConnectDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModConnectDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModConnectDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModConnectDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModConnectDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModConnectDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModConnectDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModConnectDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModConnectDefp result= (oaFloatAppDef_oaModConnectDef::get(p1.Data()));
            return PyoaFloatAppDef_oaModConnectDef_FromoaFloatAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModConnectDefp result= (oaFloatAppDef_oaModConnectDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModConnectDef_FromoaFloatAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModConnectDefp result= (oaFloatAppDef_oaModConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModConnectDef_FromoaFloatAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModConnectDefp result= (oaFloatAppDef_oaModConnectDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModConnectDef_FromoaFloatAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModConnectDefp result= (oaFloatAppDef_oaModConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModConnectDef_FromoaFloatAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModConnectDefp result= (oaFloatAppDef_oaModConnectDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModConnectDef_FromoaFloatAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModConnectDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModConnectDef_static_find,METH_VARARGS,oaFloatAppDef_oaModConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModConnectDef_static_get,METH_VARARGS,oaFloatAppDef_oaModConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModConnectDef",
           (PyObject*)(&PyoaFloatAppDef_oaModConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModConnectDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaModConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModInstObject* self = (PyoaFloatAppDef_oaModInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModInst)
    {
        PyParamoaFloatAppDef_oaModInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModInst, Choices are:\n"
        "    (oaFloatAppDef_oaModInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModInst_tp_dealloc(PyoaFloatAppDef_oaModInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModInst_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModInst value;
    int convert_status=PyoaFloatAppDef_oaModInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaFloatAppDef_oaModInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModInst v1;
    PyParamoaFloatAppDef_oaModInst v2;
    int convert_status1=PyoaFloatAppDef_oaModInst_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModInst_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModInst_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModInst**) ((PyoaFloatAppDef_oaModInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModInst_FromoaFloatAppDef_oaModInst(oaFloatAppDef_oaModInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModInst* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModInst_Type.tp_alloc(&PyoaFloatAppDef_oaModInst_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModInstObject* self = (PyoaFloatAppDef_oaModInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModInst_FromoaFloatAppDef_oaModInst(oaFloatAppDef_oaModInst* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModInst_Type.tp_alloc(&PyoaFloatAppDef_oaModInst_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModInstObject* self = (PyoaFloatAppDef_oaModInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInst_get_doc[] = 
"Class: oaFloatAppDef_oaModInst, Function: get\n"
"  Paramegers: (oaModInst)\n"
"    Calls: oaFloat get(const oaModInst* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModInst,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModInst data;
    int convert_status=PyoaFloatAppDef_oaModInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModInstObject* self=(PyoaFloatAppDef_oaModInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInst_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModInst data;
    int convert_status=PyoaFloatAppDef_oaModInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModInstObject* self=(PyoaFloatAppDef_oaModInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInst_set_doc[] = 
"Class: oaFloatAppDef_oaModInst, Function: set\n"
"  Paramegers: (oaModInst,oaFloat)\n"
"    Calls: void set(oaModInst* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModInst,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModInst data;
    int convert_status=PyoaFloatAppDef_oaModInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModInstObject* self=(PyoaFloatAppDef_oaModInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInst p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInst_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInst_isNull_doc[] =
"Class: oaFloatAppDef_oaModInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModInst data;
    int convert_status=PyoaFloatAppDef_oaModInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModInst_assign_doc[] = 
"Class: oaFloatAppDef_oaModInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModInst data;
  int convert_status=PyoaFloatAppDef_oaModInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModInst_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModInst_get,METH_VARARGS,oaFloatAppDef_oaModInst_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModInst_getDefault,METH_VARARGS,oaFloatAppDef_oaModInst_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModInst_set,METH_VARARGS,oaFloatAppDef_oaModInst_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModInst_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModInst_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModInst_tp_assign,METH_VARARGS,oaFloatAppDef_oaModInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInst_doc[] = 
"Class: oaFloatAppDef_oaModInst\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModInst)\n"
"    Calls: (const oaFloatAppDef_oaModInst&)\n"
"    Signature: oaFloatAppDef_oaModInst||cref-oaFloatAppDef_oaModInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModInst",
    sizeof(PyoaFloatAppDef_oaModInstObject),
    0,
    (destructor)oaFloatAppDef_oaModInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModInst_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInst_static_find_doc[] = 
"Class: oaFloatAppDef_oaModInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModInst|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModInstp result= (oaFloatAppDef_oaModInst::find(p1.Data()));
            return PyoaFloatAppDef_oaModInst_FromoaFloatAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstp result= (oaFloatAppDef_oaModInst::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModInst_FromoaFloatAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInst_static_get_doc[] = 
"Class: oaFloatAppDef_oaModInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModInst* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModInst* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModInstp result= (oaFloatAppDef_oaModInst::get(p1.Data()));
            return PyoaFloatAppDef_oaModInst_FromoaFloatAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModInstp result= (oaFloatAppDef_oaModInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModInst_FromoaFloatAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModInstp result= (oaFloatAppDef_oaModInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModInst_FromoaFloatAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstp result= (oaFloatAppDef_oaModInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModInst_FromoaFloatAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstp result= (oaFloatAppDef_oaModInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModInst_FromoaFloatAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstp result= (oaFloatAppDef_oaModInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModInst_FromoaFloatAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModInst_static_find,METH_VARARGS,oaFloatAppDef_oaModInst_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModInst_static_get,METH_VARARGS,oaFloatAppDef_oaModInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModInst_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModInst",
           (PyObject*)(&PyoaFloatAppDef_oaModInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModInst_Type.tp_dict;
    for(method=oaFloatAppDef_oaModInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModInstHeaderObject* self = (PyoaFloatAppDef_oaModInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModInstHeader)
    {
        PyParamoaFloatAppDef_oaModInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModInstHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModInstHeader, Choices are:\n"
        "    (oaFloatAppDef_oaModInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModInstHeader_tp_dealloc(PyoaFloatAppDef_oaModInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModInstHeader value;
    int convert_status=PyoaFloatAppDef_oaModInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaModInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModInstHeader v1;
    PyParamoaFloatAppDef_oaModInstHeader v2;
    int convert_status1=PyoaFloatAppDef_oaModInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModInstHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModInstHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModInstHeader**) ((PyoaFloatAppDef_oaModInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModInstHeader_FromoaFloatAppDef_oaModInstHeader(oaFloatAppDef_oaModInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModInstHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModInstHeader_Type.tp_alloc(&PyoaFloatAppDef_oaModInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModInstHeaderObject* self = (PyoaFloatAppDef_oaModInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModInstHeader_FromoaFloatAppDef_oaModInstHeader(oaFloatAppDef_oaModInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModInstHeader_Type.tp_alloc(&PyoaFloatAppDef_oaModInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModInstHeaderObject* self = (PyoaFloatAppDef_oaModInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstHeader_get_doc[] = 
"Class: oaFloatAppDef_oaModInstHeader, Function: get\n"
"  Paramegers: (oaModInstHeader)\n"
"    Calls: oaFloat get(const oaModInstHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModInstHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModInstHeader data;
    int convert_status=PyoaFloatAppDef_oaModInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModInstHeaderObject* self=(PyoaFloatAppDef_oaModInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModInstHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModInstHeader data;
    int convert_status=PyoaFloatAppDef_oaModInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModInstHeaderObject* self=(PyoaFloatAppDef_oaModInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstHeader_set_doc[] = 
"Class: oaFloatAppDef_oaModInstHeader, Function: set\n"
"  Paramegers: (oaModInstHeader,oaFloat)\n"
"    Calls: void set(oaModInstHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModInstHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModInstHeader data;
    int convert_status=PyoaFloatAppDef_oaModInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModInstHeaderObject* self=(PyoaFloatAppDef_oaModInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInstHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaModInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModInstHeader data;
    int convert_status=PyoaFloatAppDef_oaModInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModInstHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaModInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModInstHeader data;
  int convert_status=PyoaFloatAppDef_oaModInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModInstHeader_get,METH_VARARGS,oaFloatAppDef_oaModInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModInstHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaModInstHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModInstHeader_set,METH_VARARGS,oaFloatAppDef_oaModInstHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModInstHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModInstHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaModInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstHeader_doc[] = 
"Class: oaFloatAppDef_oaModInstHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModInstHeader)\n"
"    Calls: (const oaFloatAppDef_oaModInstHeader&)\n"
"    Signature: oaFloatAppDef_oaModInstHeader||cref-oaFloatAppDef_oaModInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModInstHeader",
    sizeof(PyoaFloatAppDef_oaModInstHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaModInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaModInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModInstHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModInstHeaderp result= (oaFloatAppDef_oaModInstHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaModInstHeader_FromoaFloatAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstHeaderp result= (oaFloatAppDef_oaModInstHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModInstHeader_FromoaFloatAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaModInstHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModInstHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModInstHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModInstHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModInstHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModInstHeaderp result= (oaFloatAppDef_oaModInstHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaModInstHeader_FromoaFloatAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModInstHeaderp result= (oaFloatAppDef_oaModInstHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModInstHeader_FromoaFloatAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModInstHeaderp result= (oaFloatAppDef_oaModInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModInstHeader_FromoaFloatAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstHeaderp result= (oaFloatAppDef_oaModInstHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModInstHeader_FromoaFloatAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstHeaderp result= (oaFloatAppDef_oaModInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModInstHeader_FromoaFloatAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstHeaderp result= (oaFloatAppDef_oaModInstHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModInstHeader_FromoaFloatAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModInstHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModInstHeader_static_find,METH_VARARGS,oaFloatAppDef_oaModInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModInstHeader_static_get,METH_VARARGS,oaFloatAppDef_oaModInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModInstHeader",
           (PyObject*)(&PyoaFloatAppDef_oaModInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModInstHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaModInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

