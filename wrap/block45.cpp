
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_tp_dealloc(PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum v1;
    PyParamoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum*) ((PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_FromoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPostCreate(oaInstPropDisplay* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInstPropDisplay_FromoaInstPropDisplay(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPostModify(oaInstPropDisplay* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInstPropDisplay_FromoaInstPropDisplay(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPreDestroy(oaInstPropDisplay* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInstPropDisplay_FromoaInstPropDisplay(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPreModify(oaInstPropDisplay* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInstPropDisplay_FromoaInstPropDisplay(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaInstPropDisplay)\n"
"    Calls: virtual void onPostCreate(oaInstPropDisplay* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaInstPropDisplay,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaInstPropDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstPropDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaInstPropDisplay,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaInstPropDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaInstPropDisplay,simple-oaShapeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaInstPropDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstPropDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaInstPropDisplay)\n"
"    Calls: virtual void onPreDestroy(oaInstPropDisplay* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaInstPropDisplay,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaInstPropDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstPropDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaInstPropDisplay,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaInstPropDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaInstPropDisplay,simple-oaShapeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaInstPropDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstPropDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum",
    sizeof(PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaInstPropDisplay)\n"
"    Calls: void notifyPostCreateObservers(oaInstPropDisplay* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaInstPropDisplay,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstPropDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstPropDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaInstPropDisplay,oaShapeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaInstPropDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaInstPropDisplay,simple-oaShapeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstPropDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstPropDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaInstPropDisplay)\n"
"    Calls: void notifyPreDestroyObservers(oaInstPropDisplay* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaInstPropDisplay,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstPropDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstPropDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaInstPropDisplay,oaShapeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaInstPropDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaInstPropDisplay,simple-oaShapeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstPropDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstPropDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject* self = (PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInstTerm_oaInstTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum* p=new pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInstTerm_oaInstTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum* p=new pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaInstTerm_oaInstTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaInstTerm_oaInstTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaInstTerm_oaInstTermModTypeEnum v1;
    PyParamoaStdObserver_oaInstTerm_oaInstTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaInstTerm_oaInstTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaInstTerm_oaInstTermModTypeEnum*) ((PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_FromoaStdObserver_oaInstTerm_oaInstTermModTypeEnum(oaStdObserver_oaInstTerm_oaInstTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject* self = (PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaInstTerm_oaInstTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaInstTerm_oaInstTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPostCreate(oaInstTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInstTerm_FromoaInstTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPostModify(oaInstTerm* p1,oaInstTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInstTerm_FromoaInstTerm(p1));
    PyTuple_SetItem(args,1,PyoaInstTermModTypeEnum_FromoaInstTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPreDestroy(oaInstTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInstTerm_FromoaInstTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPreModify(oaInstTerm* p1,oaInstTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInstTerm_FromoaInstTerm(p1));
    PyTuple_SetItem(args,1,PyoaInstTermModTypeEnum_FromoaInstTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaInstTerm)\n"
"    Calls: virtual void onPostCreate(oaInstTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaInstTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaInstTerm,simple-oaInstTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaInstTerm)\n"
"    Calls: virtual void onPreDestroy(oaInstTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaInstTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaInstTerm,simple-oaInstTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaInstTerm_oaInstTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaInstTerm_oaInstTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaInstTerm_oaInstTermModTypeEnum",
    sizeof(PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaInstTerm)\n"
"    Calls: void notifyPostCreateObservers(oaInstTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaInstTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaInstTerm,simple-oaInstTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaInstTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaInstTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaInstTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaInstTerm,simple-oaInstTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInstTerm_oaInstTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaInstTerm_oaInstTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaInstTerm_oaInstTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaInstTerm_oaInstTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaStdObserver_oaInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaInst_oaInstModTypeEnum_FromoaStdObserver_oaInst_oaInstModTypeEnum(oaStdObserver_oaInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInst_oaInstModTypeEnum::pyv_oaStdObserver_oaInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInst_oaInstModTypeEnum::pyv_oaStdObserver_oaInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInst_oaInstModTypeEnum::onPostCreate(oaInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInst_FromoaInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInst_oaInstModTypeEnum::onPostModify(oaInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInst_FromoaInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInst_oaInstModTypeEnum::onPreDestroy(oaInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInst_FromoaInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInst_oaInstModTypeEnum::onPreModify(oaInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInst_FromoaInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaInst)\n"
"    Calls: virtual void onPostCreate(oaInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaInst_oaInstModTypeEnumObject*)ob;

    PyParamoaInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaInst_oaInstModTypeEnumObject*)ob;

    PyParamoaInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaInst)\n"
"    Calls: virtual void onPreDestroy(oaInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaInst_oaInstModTypeEnumObject*)ob;

    PyParamoaInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaInst_oaInstModTypeEnumObject*)ob;

    PyParamoaInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaInst)\n"
"    Calls: void notifyPostCreateObservers(oaInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaInst)\n"
"    Calls: void notifyPreDestroyObservers(oaInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_FromoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPostCreate(oaInt1DTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInt1DTblValue_FromoaInt1DTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPostModify(oaInt1DTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInt1DTblValue_FromoaInt1DTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPreDestroy(oaInt1DTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInt1DTblValue_FromoaInt1DTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPreModify(oaInt1DTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInt1DTblValue_FromoaInt1DTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaInt1DTblValue)\n"
"    Calls: virtual void onPostCreate(oaInt1DTblValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaInt1DTblValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaInt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaInt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaInt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaInt1DTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaInt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaInt1DTblValue)\n"
"    Calls: virtual void onPreDestroy(oaInt1DTblValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaInt1DTblValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaInt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaInt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaInt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaInt1DTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaInt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaInt1DTblValue)\n"
"    Calls: void notifyPostCreateObservers(oaInt1DTblValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaInt1DTblValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaInt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaInt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaInt1DTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaInt1DTblValue)\n"
"    Calls: void notifyPreDestroyObservers(oaInt1DTblValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaInt1DTblValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt1DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt1DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaInt1DTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaInt1DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaInt1DTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt1DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInt1DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_FromoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPostCreate(oaInt2DTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInt2DTblValue_FromoaInt2DTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPostModify(oaInt2DTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInt2DTblValue_FromoaInt2DTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPreDestroy(oaInt2DTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaInt2DTblValue_FromoaInt2DTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPreModify(oaInt2DTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaInt2DTblValue_FromoaInt2DTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaInt2DTblValue)\n"
"    Calls: virtual void onPostCreate(oaInt2DTblValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaInt2DTblValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaInt2DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt2DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaInt2DTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaInt2DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaInt2DTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaInt2DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInt2DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaInt2DTblValue)\n"
"    Calls: virtual void onPreDestroy(oaInt2DTblValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaInt2DTblValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaInt2DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt2DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaInt2DTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaInt2DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaInt2DTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaInt2DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInt2DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaInt2DTblValue)\n"
"    Calls: void notifyPostCreateObservers(oaInt2DTblValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaInt2DTblValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt2DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt2DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaInt2DTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaInt2DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaInt2DTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt2DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInt2DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaInt2DTblValue)\n"
"    Calls: void notifyPreDestroyObservers(oaInt2DTblValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaInt2DTblValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt2DTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt2DTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaInt2DTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaInt2DTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaInt2DTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt2DTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInt2DTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[80];
    sprintf(buffer,"<oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_FromoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPostCreate(oaIntDualIntArrayTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntDualIntArrayTblValue_FromoaIntDualIntArrayTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPostModify(oaIntDualIntArrayTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntDualIntArrayTblValue_FromoaIntDualIntArrayTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPreDestroy(oaIntDualIntArrayTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntDualIntArrayTblValue_FromoaIntDualIntArrayTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPreModify(oaIntDualIntArrayTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntDualIntArrayTblValue_FromoaIntDualIntArrayTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaIntDualIntArrayTblValue)\n"
"    Calls: virtual void onPostCreate(oaIntDualIntArrayTblValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaIntDualIntArrayTblValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntDualIntArrayTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntDualIntArrayTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaIntDualIntArrayTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaIntDualIntArrayTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaIntDualIntArrayTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntDualIntArrayTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntDualIntArrayTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaIntDualIntArrayTblValue)\n"
"    Calls: virtual void onPreDestroy(oaIntDualIntArrayTblValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaIntDualIntArrayTblValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntDualIntArrayTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntDualIntArrayTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaIntDualIntArrayTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaIntDualIntArrayTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaIntDualIntArrayTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntDualIntArrayTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntDualIntArrayTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaIntDualIntArrayTblValue)\n"
"    Calls: void notifyPostCreateObservers(oaIntDualIntArrayTblValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaIntDualIntArrayTblValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntDualIntArrayTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntDualIntArrayTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaIntDualIntArrayTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaIntDualIntArrayTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaIntDualIntArrayTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntDualIntArrayTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntDualIntArrayTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaIntDualIntArrayTblValue)\n"
"    Calls: void notifyPreDestroyObservers(oaIntDualIntArrayTblValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaIntDualIntArrayTblValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntDualIntArrayTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntDualIntArrayTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaIntDualIntArrayTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaIntDualIntArrayTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaIntDualIntArrayTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntDualIntArrayTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntDualIntArrayTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[71];
    sprintf(buffer,"<oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_FromoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPostCreate(oaIntFltTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntFltTblValue_FromoaIntFltTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPostModify(oaIntFltTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntFltTblValue_FromoaIntFltTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPreDestroy(oaIntFltTblValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntFltTblValue_FromoaIntFltTblValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPreModify(oaIntFltTblValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntFltTblValue_FromoaIntFltTblValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaIntFltTblValue)\n"
"    Calls: virtual void onPostCreate(oaIntFltTblValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaIntFltTblValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntFltTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntFltTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaIntFltTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaIntFltTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaIntFltTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntFltTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntFltTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaIntFltTblValue)\n"
"    Calls: virtual void onPreDestroy(oaIntFltTblValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaIntFltTblValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntFltTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntFltTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaIntFltTblValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaIntFltTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaIntFltTblValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntFltTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntFltTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaIntFltTblValue)\n"
"    Calls: void notifyPostCreateObservers(oaIntFltTblValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaIntFltTblValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntFltTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntFltTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaIntFltTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaIntFltTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaIntFltTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntFltTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntFltTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaIntFltTblValue)\n"
"    Calls: void notifyPreDestroyObservers(oaIntFltTblValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaIntFltTblValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntFltTblValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntFltTblValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaIntFltTblValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaIntFltTblValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaIntFltTblValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntFltTblValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntFltTblValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaIntProp_oaPropModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntProp_oaPropModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntProp_oaPropModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaIntProp_oaPropModTypeEnum_tp_dealloc(PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaIntProp_oaPropModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaIntProp_oaPropModTypeEnum value;
    int convert_status=PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaStdObserver_oaIntProp_oaPropModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaIntProp_oaPropModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaIntProp_oaPropModTypeEnum v1;
    PyParamoaStdObserver_oaIntProp_oaPropModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaIntProp_oaPropModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaIntProp_oaPropModTypeEnum*) ((PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaIntProp_oaPropModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaIntProp_oaPropModTypeEnum_FromoaStdObserver_oaIntProp_oaPropModTypeEnum(oaStdObserver_oaIntProp_oaPropModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum::pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaIntProp_oaPropModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum::pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaIntProp_oaPropModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum::onPostCreate(oaIntProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntProp_oaPropModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntProp_FromoaIntProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntProp_oaPropModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum::onPostModify(oaIntProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntProp_oaPropModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntProp_FromoaIntProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntProp_oaPropModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum::onPreDestroy(oaIntProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntProp_oaPropModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntProp_FromoaIntProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntProp_oaPropModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntProp_oaPropModTypeEnum::onPreModify(oaIntProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntProp_oaPropModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntProp_FromoaIntProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntProp_oaPropModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntProp_oaPropModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaIntProp)\n"
"    Calls: virtual void onPostCreate(oaIntProp* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaIntProp,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject*)ob;

    PyParamoaIntProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntProp_oaPropModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntProp_oaPropModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaIntProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaIntProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaIntProp,simple-oaPropModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject*)ob;

    PyParamoaIntProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntProp_oaPropModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntProp_oaPropModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaIntProp)\n"
"    Calls: virtual void onPreDestroy(oaIntProp* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaIntProp,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject*)ob;

    PyParamoaIntProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntProp_oaPropModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntProp_oaPropModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaIntProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaIntProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaIntProp,simple-oaPropModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject*)ob;

    PyParamoaIntProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntProp_oaPropModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaIntProp_oaPropModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaIntProp_oaPropModTypeEnum data;
  int convert_status=PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaIntProp_oaPropModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaIntProp_oaPropModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaIntProp_oaPropModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaIntProp_oaPropModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaIntProp_oaPropModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaIntProp_oaPropModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaIntProp_oaPropModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaIntProp_oaPropModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaIntProp_oaPropModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaIntProp_oaPropModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaIntProp_oaPropModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaIntProp_oaPropModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntProp_oaPropModTypeEnum_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaIntProp_oaPropModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaIntProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaIntProp_oaPropModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaIntProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaIntProp_oaPropModTypeEnum",
    sizeof(PyoaStdObserver_oaIntProp_oaPropModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaIntProp_oaPropModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaIntProp_oaPropModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaIntProp_oaPropModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaIntProp_oaPropModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaIntProp_oaPropModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaIntProp_oaPropModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntProp_oaPropModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaIntProp_oaPropModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaIntProp)\n"
"    Calls: void notifyPostCreateObservers(oaIntProp* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaIntProp,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntProp_oaPropModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaIntProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaIntProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaIntProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntProp_oaPropModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaIntProp)\n"
"    Calls: void notifyPreDestroyObservers(oaIntProp* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaIntProp,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntProp_oaPropModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntProp_oaPropModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaIntProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaIntProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaIntProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntProp_oaPropModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaIntProp_oaPropModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaIntProp_oaPropModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaIntProp_oaPropModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaIntProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaIntProp_oaPropModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaIntProp_oaPropModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaIntProp_oaPropModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaIntProp_oaPropModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaIntProp_oaPropModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaIntProp_oaPropModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntRangeProp_oaPropModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntRangeProp_oaPropModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_tp_dealloc(PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaIntRangeProp_oaPropModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaIntRangeProp_oaPropModTypeEnum value;
    int convert_status=PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaIntRangeProp_oaPropModTypeEnum v1;
    PyParamoaStdObserver_oaIntRangeProp_oaPropModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaIntRangeProp_oaPropModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaIntRangeProp_oaPropModTypeEnum*) ((PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_FromoaStdObserver_oaIntRangeProp_oaPropModTypeEnum(oaStdObserver_oaIntRangeProp_oaPropModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaIntRangeProp_oaPropModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaIntRangeProp_oaPropModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPostCreate(oaIntRangeProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntRangeProp_FromoaIntRangeProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPostModify(oaIntRangeProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntRangeProp_FromoaIntRangeProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPreDestroy(oaIntRangeProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntRangeProp_FromoaIntRangeProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPreModify(oaIntRangeProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntRangeProp_FromoaIntRangeProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaIntRangeProp)\n"
"    Calls: virtual void onPostCreate(oaIntRangeProp* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaIntRangeProp,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaIntRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaIntRangeProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaIntRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaIntRangeProp,simple-oaPropModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaIntRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaIntRangeProp)\n"
"    Calls: virtual void onPreDestroy(oaIntRangeProp* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaIntRangeProp,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaIntRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaIntRangeProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaIntRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaIntRangeProp,simple-oaPropModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntRangeProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject*)ob;

    PyParamoaIntRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaIntRangeProp_oaPropModTypeEnum data;
  int convert_status=PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaIntRangeProp_oaPropModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaIntRangeProp_oaPropModTypeEnum",
    sizeof(PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaIntRangeProp)\n"
"    Calls: void notifyPostCreateObservers(oaIntRangeProp* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaIntRangeProp,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaIntRangeProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaIntRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaIntRangeProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaIntRangeProp)\n"
"    Calls: void notifyPreDestroyObservers(oaIntRangeProp* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaIntRangeProp,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntRangeProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntRangeProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaIntRangeProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaIntRangeProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaIntRangeProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntRangeProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntRangeProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntRangeProp_oaPropModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaIntRangeProp_oaPropModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaIntRangeProp_oaPropModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaIntRangeProp_oaPropModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntRangeValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntRangeValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaIntRangeValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaIntRangeValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaIntRangeValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaIntRangeValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaIntRangeValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaIntRangeValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_FromoaStdObserver_oaIntRangeValue_oaValueModTypeEnum(oaStdObserver_oaIntRangeValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaIntRangeValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaIntRangeValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPostCreate(oaIntRangeValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntRangeValue_FromoaIntRangeValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPostModify(oaIntRangeValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntRangeValue_FromoaIntRangeValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPreDestroy(oaIntRangeValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntRangeValue_FromoaIntRangeValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPreModify(oaIntRangeValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntRangeValue_FromoaIntRangeValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaIntRangeValue)\n"
"    Calls: virtual void onPostCreate(oaIntRangeValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaIntRangeValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntRangeValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntRangeValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntRangeValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaIntRangeValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaIntRangeValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaIntRangeValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntRangeValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntRangeValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntRangeValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaIntRangeValue)\n"
"    Calls: virtual void onPreDestroy(oaIntRangeValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaIntRangeValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntRangeValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntRangeValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntRangeValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaIntRangeValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaIntRangeValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaIntRangeValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntRangeValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntRangeValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntRangeValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaIntRangeValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaIntRangeValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaIntRangeValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaIntRangeValue)\n"
"    Calls: void notifyPostCreateObservers(oaIntRangeValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaIntRangeValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntRangeValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntRangeValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaIntRangeValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaIntRangeValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaIntRangeValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntRangeValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntRangeValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaIntRangeValue)\n"
"    Calls: void notifyPreDestroyObservers(oaIntRangeValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaIntRangeValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntRangeValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntRangeValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaIntRangeValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaIntRangeValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaIntRangeValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntRangeValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntRangeValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntRangeValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaIntRangeValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaIntRangeValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaIntRangeValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaIntValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaIntValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaIntValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaIntValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaIntValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[65];
    sprintf(buffer,"<oaStdObserver_oaIntValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaIntValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaIntValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaIntValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaIntValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaIntValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaIntValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaIntValue_oaValueModTypeEnum_FromoaStdObserver_oaIntValue_oaValueModTypeEnum(oaStdObserver_oaIntValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum::pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaIntValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum::pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaIntValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum::onPostCreate(oaIntValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntValue_FromoaIntValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum::onPostModify(oaIntValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntValue_FromoaIntValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum::onPreDestroy(oaIntValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaIntValue_FromoaIntValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaIntValue_oaValueModTypeEnum::onPreModify(oaIntValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaIntValue_FromoaIntValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaIntValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaIntValue)\n"
"    Calls: virtual void onPostCreate(oaIntValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaIntValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaIntValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaIntValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaIntValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaIntValue)\n"
"    Calls: virtual void onPreDestroy(oaIntValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaIntValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaIntValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaIntValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaIntValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaIntValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject*)ob;

    PyParamoaIntValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaIntValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaIntValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaIntValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaIntValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaIntValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaIntValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaIntValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaIntValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaIntValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaIntValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaIntValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaIntValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaIntValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaIntValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaIntValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaIntValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaIntValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaIntValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaIntValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaIntValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaIntValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaIntValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaIntValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaIntValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaIntValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaIntValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaIntValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaIntValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaIntValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaIntValue)\n"
"    Calls: void notifyPostCreateObservers(oaIntValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaIntValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaIntValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaIntValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaIntValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaIntValue)\n"
"    Calls: void notifyPreDestroyObservers(oaIntValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaIntValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaIntValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaIntValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaIntValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaIntValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaIntValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaIntValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaIntValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaIntValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaIntValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaIntValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaIntValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaIntValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaIntValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaIntValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaIntValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaIntValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaIntValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject* self = (PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum* p=new pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum* p=new pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_tp_dealloc(PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum value;
    int convert_status=PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum v1;
    PyParamoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum*) ((PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_FromoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject* self = (PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPostCreate(oaLPPHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLPPHeader_FromoaLPPHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPostModify(oaLPPHeader* p1,oaLPPHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLPPHeader_FromoaLPPHeader(p1));
    PyTuple_SetItem(args,1,PyoaLPPHeaderModTypeEnum_FromoaLPPHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPreDestroy(oaLPPHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLPPHeader_FromoaLPPHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPreModify(oaLPPHeader* p1,oaLPPHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLPPHeader_FromoaLPPHeader(p1));
    PyTuple_SetItem(args,1,PyoaLPPHeaderModTypeEnum_FromoaLPPHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaLPPHeader)\n"
"    Calls: virtual void onPostCreate(oaLPPHeader* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaLPPHeader,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject* self=(PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject*)ob;

    PyParamoaLPPHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLPPHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaLPPHeader,oaLPPHeaderModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaLPPHeader* object,oaLPPHeaderModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaLPPHeader,simple-oaLPPHeaderModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject* self=(PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject*)ob;

    PyParamoaLPPHeader p1;
    PyParamoaLPPHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLPPHeader_Convert,&p1,
          &PyoaLPPHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaLPPHeader)\n"
"    Calls: virtual void onPreDestroy(oaLPPHeader* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaLPPHeader,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject* self=(PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject*)ob;

    PyParamoaLPPHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLPPHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaLPPHeader,oaLPPHeaderModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaLPPHeader* object,oaLPPHeaderModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaLPPHeader,simple-oaLPPHeaderModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject* self=(PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject*)ob;

    PyParamoaLPPHeader p1;
    PyParamoaLPPHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLPPHeader_Convert,&p1,
          &PyoaLPPHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum data;
  int convert_status=PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum",
    sizeof(PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaLPPHeader)\n"
"    Calls: void notifyPostCreateObservers(oaLPPHeader* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaLPPHeader,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLPPHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLPPHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaLPPHeader,oaLPPHeaderModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaLPPHeader* object,oaLPPHeaderModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaLPPHeader,simple-oaLPPHeaderModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLPPHeader p1;
    PyParamoaLPPHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLPPHeader_Convert,&p1,
          &PyoaLPPHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaLPPHeader)\n"
"    Calls: void notifyPreDestroyObservers(oaLPPHeader* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaLPPHeader,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLPPHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLPPHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaLPPHeader,oaLPPHeaderModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaLPPHeader* object,oaLPPHeaderModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaLPPHeader,simple-oaLPPHeaderModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLPPHeader p1;
    PyParamoaLPPHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLPPHeader_Convert,&p1,
          &PyoaLPPHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject* self = (PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum* p=new pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum* p=new pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_tp_dealloc(PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum value;
    int convert_status=PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[73];
    sprintf(buffer,"<oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum v1;
    PyParamoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum*) ((PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_FromoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject* self = (PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPostCreate(oaLayerBlockage* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLayerBlockage_FromoaLayerBlockage(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPostModify(oaLayerBlockage* p1,oaBlockageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLayerBlockage_FromoaLayerBlockage(p1));
    PyTuple_SetItem(args,1,PyoaBlockageModTypeEnum_FromoaBlockageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPreDestroy(oaLayerBlockage* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLayerBlockage_FromoaLayerBlockage(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPreModify(oaLayerBlockage* p1,oaBlockageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLayerBlockage_FromoaLayerBlockage(p1));
    PyTuple_SetItem(args,1,PyoaBlockageModTypeEnum_FromoaBlockageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaLayerBlockage)\n"
"    Calls: virtual void onPostCreate(oaLayerBlockage* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaLayerBlockage,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaLayerBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaLayerBlockage,oaBlockageModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaLayerBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaLayerBlockage,simple-oaBlockageModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaLayerBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaLayerBlockage)\n"
"    Calls: virtual void onPreDestroy(oaLayerBlockage* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaLayerBlockage,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaLayerBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaLayerBlockage,oaBlockageModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaLayerBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaLayerBlockage,simple-oaBlockageModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaLayerBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum data;
  int convert_status=PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum",
    sizeof(PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaLayerBlockage)\n"
"    Calls: void notifyPostCreateObservers(oaLayerBlockage* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaLayerBlockage,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaLayerBlockage,oaBlockageModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaLayerBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaLayerBlockage,simple-oaBlockageModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaLayerBlockage)\n"
"    Calls: void notifyPreDestroyObservers(oaLayerBlockage* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaLayerBlockage,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaLayerBlockage,oaBlockageModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaLayerBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaLayerBlockage,simple-oaBlockageModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject* self = (PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum* p=new pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum* p=new pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_tp_dealloc(PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum value;
    int convert_status=PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum v1;
    PyParamoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum*) ((PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_FromoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject* self = (PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPostCreate(oaLayerHalo* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLayerHalo_FromoaLayerHalo(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPostModify(oaLayerHalo* p1,oaBlockageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLayerHalo_FromoaLayerHalo(p1));
    PyTuple_SetItem(args,1,PyoaBlockageModTypeEnum_FromoaBlockageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPreDestroy(oaLayerHalo* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLayerHalo_FromoaLayerHalo(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPreModify(oaLayerHalo* p1,oaBlockageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLayerHalo_FromoaLayerHalo(p1));
    PyTuple_SetItem(args,1,PyoaBlockageModTypeEnum_FromoaBlockageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaLayerHalo)\n"
"    Calls: virtual void onPostCreate(oaLayerHalo* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaLayerHalo,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject*)ob;

    PyParamoaLayerHalo p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerHalo_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaLayerHalo,oaBlockageModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaLayerHalo* object,oaBlockageModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaLayerHalo,simple-oaBlockageModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject*)ob;

    PyParamoaLayerHalo p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerHalo_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaLayerHalo)\n"
"    Calls: virtual void onPreDestroy(oaLayerHalo* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaLayerHalo,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject*)ob;

    PyParamoaLayerHalo p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerHalo_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaLayerHalo,oaBlockageModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaLayerHalo* object,oaBlockageModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaLayerHalo,simple-oaBlockageModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject*)ob;

    PyParamoaLayerHalo p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerHalo_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum data;
  int convert_status=PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum",
    sizeof(PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaLayerHalo)\n"
"    Calls: void notifyPostCreateObservers(oaLayerHalo* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaLayerHalo,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerHalo p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerHalo_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaLayerHalo,oaBlockageModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaLayerHalo* object,oaBlockageModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaLayerHalo,simple-oaBlockageModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerHalo p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerHalo_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaLayerHalo)\n"
"    Calls: void notifyPreDestroyObservers(oaLayerHalo* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaLayerHalo,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerHalo p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerHalo_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaLayerHalo,oaBlockageModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaLayerHalo* object,oaBlockageModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaLayerHalo,simple-oaBlockageModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerHalo p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerHalo_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject* self = (PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum* p=new pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum* p=new pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_tp_dealloc(PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum value;
    int convert_status=PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[74];
    sprintf(buffer,"<oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum v1;
    PyParamoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum*) ((PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_FromoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject* self = (PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPostCreate(oaLayerHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLayerHeader_FromoaLayerHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPostModify(oaLayerHeader* p1,oaLayerHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLayerHeader_FromoaLayerHeader(p1));
    PyTuple_SetItem(args,1,PyoaLayerHeaderModTypeEnum_FromoaLayerHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPreDestroy(oaLayerHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLayerHeader_FromoaLayerHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPreModify(oaLayerHeader* p1,oaLayerHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLayerHeader_FromoaLayerHeader(p1));
    PyTuple_SetItem(args,1,PyoaLayerHeaderModTypeEnum_FromoaLayerHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaLayerHeader)\n"
"    Calls: virtual void onPostCreate(oaLayerHeader* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaLayerHeader,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject* self=(PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject*)ob;

    PyParamoaLayerHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaLayerHeader,oaLayerHeaderModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaLayerHeader* object,oaLayerHeaderModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaLayerHeader,simple-oaLayerHeaderModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject* self=(PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject*)ob;

    PyParamoaLayerHeader p1;
    PyParamoaLayerHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerHeader_Convert,&p1,
          &PyoaLayerHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaLayerHeader)\n"
"    Calls: virtual void onPreDestroy(oaLayerHeader* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaLayerHeader,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject* self=(PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject*)ob;

    PyParamoaLayerHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaLayerHeader,oaLayerHeaderModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaLayerHeader* object,oaLayerHeaderModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaLayerHeader,simple-oaLayerHeaderModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject* self=(PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject*)ob;

    PyParamoaLayerHeader p1;
    PyParamoaLayerHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerHeader_Convert,&p1,
          &PyoaLayerHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum data;
  int convert_status=PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum",
    sizeof(PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaLayerHeader)\n"
"    Calls: void notifyPostCreateObservers(oaLayerHeader* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaLayerHeader,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaLayerHeader,oaLayerHeaderModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaLayerHeader* object,oaLayerHeaderModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaLayerHeader,simple-oaLayerHeaderModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerHeader p1;
    PyParamoaLayerHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerHeader_Convert,&p1,
          &PyoaLayerHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaLayerHeader)\n"
"    Calls: void notifyPreDestroyObservers(oaLayerHeader* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaLayerHeader,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaLayerHeader,oaLayerHeaderModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaLayerHeader* object,oaLayerHeaderModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaLayerHeader,simple-oaLayerHeaderModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerHeader p1;
    PyParamoaLayerHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayerHeader_Convert,&p1,
          &PyoaLayerHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaLayer_oaLayerModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject* self = (PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLayer_oaLayerModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum* p=new pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLayer_oaLayerModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum* p=new pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaLayer_oaLayerModTypeEnum_tp_dealloc(PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaLayer_oaLayerModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaLayer_oaLayerModTypeEnum value;
    int convert_status=PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[62];
    sprintf(buffer,"<oaStdObserver_oaLayer_oaLayerModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaLayer_oaLayerModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaLayer_oaLayerModTypeEnum v1;
    PyParamoaStdObserver_oaLayer_oaLayerModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaLayer_oaLayerModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaLayer_oaLayerModTypeEnum*) ((PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaLayer_oaLayerModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaLayer_oaLayerModTypeEnum_FromoaStdObserver_oaLayer_oaLayerModTypeEnum(oaStdObserver_oaLayer_oaLayerModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject* self = (PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum::pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaLayer_oaLayerModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum::pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaLayer_oaLayerModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum::onPostCreate(oaLayer* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayer_oaLayerModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLayer_FromoaLayer(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayer_oaLayerModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum::onPostModify(oaLayer* p1,oaLayerModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayer_oaLayerModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLayer_FromoaLayer(p1));
    PyTuple_SetItem(args,1,PyoaLayerModTypeEnum_FromoaLayerModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayer_oaLayerModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum::onPreDestroy(oaLayer* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayer_oaLayerModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLayer_FromoaLayer(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayer_oaLayerModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLayer_oaLayerModTypeEnum::onPreModify(oaLayer* p1,oaLayerModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayer_oaLayerModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLayer_FromoaLayer(p1));
    PyTuple_SetItem(args,1,PyoaLayerModTypeEnum_FromoaLayerModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLayer_oaLayerModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayer_oaLayerModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaLayer)\n"
"    Calls: virtual void onPostCreate(oaLayer* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaLayer,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayer_oaLayerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject* self=(PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject*)ob;

    PyParamoaLayer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayer_oaLayerModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayer_oaLayerModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaLayer,oaLayerModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaLayer* object,oaLayerModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaLayer,simple-oaLayerModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayer_oaLayerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject* self=(PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject*)ob;

    PyParamoaLayer p1;
    PyParamoaLayerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayer_Convert,&p1,
          &PyoaLayerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayer_oaLayerModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayer_oaLayerModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaLayer)\n"
"    Calls: virtual void onPreDestroy(oaLayer* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaLayer,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayer_oaLayerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject* self=(PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject*)ob;

    PyParamoaLayer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayer_oaLayerModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayer_oaLayerModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaLayer,oaLayerModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaLayer* object,oaLayerModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaLayer,simple-oaLayerModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLayer_oaLayerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject* self=(PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject*)ob;

    PyParamoaLayer p1;
    PyParamoaLayerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayer_Convert,&p1,
          &PyoaLayerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLayer_oaLayerModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaLayer_oaLayerModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaLayer_oaLayerModTypeEnum data;
  int convert_status=PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaLayer_oaLayerModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaLayer_oaLayerModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaLayer_oaLayerModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaLayer_oaLayerModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaLayer_oaLayerModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaLayer_oaLayerModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaLayer_oaLayerModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaLayer_oaLayerModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaLayer_oaLayerModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaLayer_oaLayerModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaLayer_oaLayerModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaLayer_oaLayerModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayer_oaLayerModTypeEnum_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaLayer_oaLayerModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaLayer_oaLayerModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaLayer_oaLayerModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaLayer_oaLayerModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaLayer_oaLayerModTypeEnum",
    sizeof(PyoaStdObserver_oaLayer_oaLayerModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaLayer_oaLayerModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaLayer_oaLayerModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaLayer_oaLayerModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaLayer_oaLayerModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaLayer_oaLayerModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaLayer_oaLayerModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLayer_oaLayerModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaLayer_oaLayerModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaLayer)\n"
"    Calls: void notifyPostCreateObservers(oaLayer* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaLayer,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayer_oaLayerModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaLayer,oaLayerModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaLayer* object,oaLayerModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaLayer,simple-oaLayerModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayer p1;
    PyParamoaLayerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayer_Convert,&p1,
          &PyoaLayerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayer_oaLayerModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaLayer)\n"
"    Calls: void notifyPreDestroyObservers(oaLayer* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaLayer,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayer_oaLayerModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaLayer_oaLayerModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaLayer,oaLayerModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaLayer* object,oaLayerModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaLayer,simple-oaLayerModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayer p1;
    PyParamoaLayerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLayer_Convert,&p1,
          &PyoaLayerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLayer_oaLayerModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaLayer_oaLayerModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaLayer_oaLayerModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaLayer_oaLayerModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaLayer_oaLayerModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaLayer_oaLayerModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaLayer_oaLayerModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaLayer_oaLayerModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaLayer_oaLayerModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaLayer_oaLayerModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaLayer_oaLayerModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaLine_oaShapeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaLine_oaShapeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaLine_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaLine_oaShapeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLine_oaShapeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaLine_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaLine_oaShapeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLine_oaShapeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaLine_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaLine_oaShapeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaLine_oaShapeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaLine_oaShapeModTypeEnum_tp_dealloc(PyoaStdObserver_oaLine_oaShapeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaLine_oaShapeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaLine_oaShapeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaLine_oaShapeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[61];
    sprintf(buffer,"<oaStdObserver_oaLine_oaShapeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaLine_oaShapeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaLine_oaShapeModTypeEnum v1;
    PyParamoaStdObserver_oaLine_oaShapeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaLine_oaShapeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaLine_oaShapeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaLine_oaShapeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaLine_oaShapeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaLine_oaShapeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaLine_oaShapeModTypeEnum*) ((PyoaStdObserver_oaLine_oaShapeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaLine_oaShapeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaLine_oaShapeModTypeEnum_FromoaStdObserver_oaLine_oaShapeModTypeEnum(oaStdObserver_oaLine_oaShapeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaLine_oaShapeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaLine_oaShapeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaLine_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaLine_oaShapeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLine_oaShapeModTypeEnum::pyv_oaStdObserver_oaLine_oaShapeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaLine_oaShapeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLine_oaShapeModTypeEnum::pyv_oaStdObserver_oaLine_oaShapeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaLine_oaShapeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLine_oaShapeModTypeEnum::onPostCreate(oaLine* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLine_oaShapeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLine_FromoaLine(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLine_oaShapeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLine_oaShapeModTypeEnum::onPostModify(oaLine* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLine_oaShapeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLine_FromoaLine(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLine_oaShapeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLine_oaShapeModTypeEnum::onPreDestroy(oaLine* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLine_oaShapeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLine_FromoaLine(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLine_oaShapeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLine_oaShapeModTypeEnum::onPreModify(oaLine* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLine_oaShapeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLine_FromoaLine(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLine_oaShapeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLine_oaShapeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaLine)\n"
"    Calls: virtual void onPostCreate(oaLine* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaLine,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLine_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLine_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLine_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaLine_oaShapeModTypeEnumObject*)ob;

    PyParamoaLine p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLine_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLine_oaShapeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLine_oaShapeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaLine,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaLine* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaLine,simple-oaShapeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLine_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLine_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLine_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaLine_oaShapeModTypeEnumObject*)ob;

    PyParamoaLine p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLine_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLine_oaShapeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLine_oaShapeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaLine)\n"
"    Calls: virtual void onPreDestroy(oaLine* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaLine,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLine_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLine_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLine_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaLine_oaShapeModTypeEnumObject*)ob;

    PyParamoaLine p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLine_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLine_oaShapeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLine_oaShapeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaLine,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaLine* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaLine,simple-oaShapeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLine_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLine_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLine_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaLine_oaShapeModTypeEnumObject*)ob;

    PyParamoaLine p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLine_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLine_oaShapeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaLine_oaShapeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaLine_oaShapeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaLine_oaShapeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaLine_oaShapeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaLine_oaShapeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaLine_oaShapeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaLine_oaShapeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaLine_oaShapeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaLine_oaShapeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaLine_oaShapeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaLine_oaShapeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaLine_oaShapeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaLine_oaShapeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaLine_oaShapeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaLine_oaShapeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaLine_oaShapeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLine_oaShapeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaLine_oaShapeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaLine_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaLine_oaShapeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaLine_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaLine_oaShapeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaLine_oaShapeModTypeEnum",
    sizeof(PyoaStdObserver_oaLine_oaShapeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaLine_oaShapeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaLine_oaShapeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaLine_oaShapeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaLine_oaShapeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaLine_oaShapeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaLine_oaShapeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLine_oaShapeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaLine_oaShapeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaLine)\n"
"    Calls: void notifyPostCreateObservers(oaLine* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaLine,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLine p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLine_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLine_oaShapeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaLine,oaShapeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaLine* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaLine,simple-oaShapeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLine p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLine_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLine_oaShapeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaLine)\n"
"    Calls: void notifyPreDestroyObservers(oaLine* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaLine,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLine p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLine_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLine_oaShapeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaLine_oaShapeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaLine,oaShapeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaLine* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaLine,simple-oaShapeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLine p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLine_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLine_oaShapeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaLine_oaShapeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaLine_oaShapeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaLine_oaShapeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaLine_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaLine_oaShapeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaLine_oaShapeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaLine_oaShapeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaLine_oaShapeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaLine_oaShapeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaLine_oaShapeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaLine_oaShapeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaLine_oaShapeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject* self = (PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum* p=new pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum* p=new pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_tp_dealloc(PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum value;
    int convert_status=PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[71];
    sprintf(buffer,"<oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum v1;
    PyParamoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum*) ((PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_FromoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject* self = (PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPostCreate(oaLumpedElmore* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLumpedElmore_FromoaLumpedElmore(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPostModify(oaLumpedElmore* p1,oaReducedModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLumpedElmore_FromoaLumpedElmore(p1));
    PyTuple_SetItem(args,1,PyoaReducedModTypeEnum_FromoaReducedModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPreDestroy(oaLumpedElmore* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaLumpedElmore_FromoaLumpedElmore(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPreModify(oaLumpedElmore* p1,oaReducedModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaLumpedElmore_FromoaLumpedElmore(p1));
    PyTuple_SetItem(args,1,PyoaReducedModTypeEnum_FromoaReducedModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaLumpedElmore)\n"
"    Calls: virtual void onPostCreate(oaLumpedElmore* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaLumpedElmore,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject* self=(PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject*)ob;

    PyParamoaLumpedElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLumpedElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaLumpedElmore,oaReducedModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaLumpedElmore* object,oaReducedModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaLumpedElmore,simple-oaReducedModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject* self=(PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject*)ob;

    PyParamoaLumpedElmore p1;
    PyParamoaReducedModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLumpedElmore_Convert,&p1,
          &PyoaReducedModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaLumpedElmore)\n"
"    Calls: virtual void onPreDestroy(oaLumpedElmore* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaLumpedElmore,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject* self=(PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject*)ob;

    PyParamoaLumpedElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLumpedElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaLumpedElmore,oaReducedModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaLumpedElmore* object,oaReducedModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaLumpedElmore,simple-oaReducedModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum data;
    int convert_status=PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject* self=(PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject*)ob;

    PyParamoaLumpedElmore p1;
    PyParamoaReducedModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLumpedElmore_Convert,&p1,
          &PyoaReducedModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum data;
  int convert_status=PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum",
    sizeof(PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaLumpedElmore)\n"
"    Calls: void notifyPostCreateObservers(oaLumpedElmore* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaLumpedElmore,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLumpedElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLumpedElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaLumpedElmore,oaReducedModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaLumpedElmore* object,oaReducedModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaLumpedElmore,simple-oaReducedModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLumpedElmore p1;
    PyParamoaReducedModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLumpedElmore_Convert,&p1,
          &PyoaReducedModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaLumpedElmore)\n"
"    Calls: void notifyPreDestroyObservers(oaLumpedElmore* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaLumpedElmore,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLumpedElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLumpedElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaLumpedElmore,oaReducedModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaLumpedElmore* object,oaReducedModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaLumpedElmore,simple-oaReducedModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLumpedElmore p1;
    PyParamoaReducedModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLumpedElmore_Convert,&p1,
          &PyoaReducedModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject* self = (PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaMarker_oaMarkerModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum* p=new pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaMarker_oaMarkerModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum* p=new pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaMarker_oaMarkerModTypeEnum_tp_dealloc(PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaMarker_oaMarkerModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaMarker_oaMarkerModTypeEnum value;
    int convert_status=PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaMarker_oaMarkerModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaMarker_oaMarkerModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaMarker_oaMarkerModTypeEnum v1;
    PyParamoaStdObserver_oaMarker_oaMarkerModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaMarker_oaMarkerModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaMarker_oaMarkerModTypeEnum*) ((PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaMarker_oaMarkerModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_FromoaStdObserver_oaMarker_oaMarkerModTypeEnum(oaStdObserver_oaMarker_oaMarkerModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject* self = (PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum::pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaMarker_oaMarkerModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum::pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaMarker_oaMarkerModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPostCreate(oaMarker* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaMarker_FromoaMarker(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPostModify(oaMarker* p1,oaMarkerModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaMarker_FromoaMarker(p1));
    PyTuple_SetItem(args,1,PyoaMarkerModTypeEnum_FromoaMarkerModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPreDestroy(oaMarker* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaMarker_FromoaMarker(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPreModify(oaMarker* p1,oaMarkerModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaMarker_FromoaMarker(p1));
    PyTuple_SetItem(args,1,PyoaMarkerModTypeEnum_FromoaMarkerModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaMarker)\n"
"    Calls: virtual void onPostCreate(oaMarker* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaMarker,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaMarker_oaMarkerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject* self=(PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject*)ob;

    PyParamoaMarker p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaMarker_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaMarker,oaMarkerModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaMarker* object,oaMarkerModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaMarker,simple-oaMarkerModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaMarker_oaMarkerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject* self=(PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject*)ob;

    PyParamoaMarker p1;
    PyParamoaMarkerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMarker_Convert,&p1,
          &PyoaMarkerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaMarker)\n"
"    Calls: virtual void onPreDestroy(oaMarker* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaMarker,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaMarker_oaMarkerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject* self=(PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject*)ob;

    PyParamoaMarker p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaMarker_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaMarker,oaMarkerModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaMarker* object,oaMarkerModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaMarker,simple-oaMarkerModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaMarker_oaMarkerModTypeEnum data;
    int convert_status=PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject* self=(PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject*)ob;

    PyParamoaMarker p1;
    PyParamoaMarkerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMarker_Convert,&p1,
          &PyoaMarkerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaMarker_oaMarkerModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaMarker_oaMarkerModTypeEnum data;
  int convert_status=PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaMarker_oaMarkerModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaMarker_oaMarkerModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaMarker_oaMarkerModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaMarker_oaMarkerModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaMarker_oaMarkerModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaMarker_oaMarkerModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaMarker_oaMarkerModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaMarker_oaMarkerModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaMarker_oaMarkerModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaMarker_oaMarkerModTypeEnum",
    sizeof(PyoaStdObserver_oaMarker_oaMarkerModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaMarker_oaMarkerModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaMarker_oaMarkerModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaMarker_oaMarkerModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaMarker_oaMarkerModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaMarker_oaMarkerModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaMarker_oaMarkerModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaMarker_oaMarkerModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaMarker)\n"
"    Calls: void notifyPostCreateObservers(oaMarker* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaMarker,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaMarker p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaMarker_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaMarker_oaMarkerModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaMarker,oaMarkerModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaMarker* object,oaMarkerModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaMarker,simple-oaMarkerModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaMarker p1;
    PyParamoaMarkerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMarker_Convert,&p1,
          &PyoaMarkerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaMarker_oaMarkerModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaMarker)\n"
"    Calls: void notifyPreDestroyObservers(oaMarker* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaMarker,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaMarker p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaMarker_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaMarker_oaMarkerModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaMarker_oaMarkerModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaMarker,oaMarkerModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaMarker* object,oaMarkerModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaMarker,simple-oaMarkerModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaMarker p1;
    PyParamoaMarkerModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMarker_Convert,&p1,
          &PyoaMarkerModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaMarker_oaMarkerModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaMarker_oaMarkerModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaMarker_oaMarkerModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaMarker_oaMarkerModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaMarker_oaMarkerModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaMarker_oaMarkerModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaMarker_oaMarkerModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_tp_dealloc(PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[81];
    sprintf(buffer,"<oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum v1;
    PyParamoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum*) ((PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_FromoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPostCreate(oaModAssignAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModAssignAssignment_FromoaModAssignAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPostModify(oaModAssignAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModAssignAssignment_FromoaModAssignAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy(oaModAssignAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModAssignAssignment_FromoaModAssignAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPreModify(oaModAssignAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModAssignAssignment_FromoaModAssignAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModAssignAssignment)\n"
"    Calls: virtual void onPostCreate(oaModAssignAssignment* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModAssignAssignment,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModAssignAssignment)\n"
"    Calls: virtual void onPreDestroy(oaModAssignAssignment* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModAssignAssignment,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum",
    sizeof(PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModAssignAssignment)\n"
"    Calls: void notifyPostCreateObservers(oaModAssignAssignment* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModAssignAssignment,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModAssignAssignment)\n"
"    Calls: void notifyPreDestroyObservers(oaModAssignAssignment* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModAssignAssignment,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_tp_dealloc(PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[76];
    sprintf(buffer,"<oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum v1;
    PyParamoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum*) ((PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_FromoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPostCreate(oaModAssignValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModAssignValue_FromoaModAssignValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPostModify(oaModAssignValue* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModAssignValue_FromoaModAssignValue(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPreDestroy(oaModAssignValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModAssignValue_FromoaModAssignValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPreModify(oaModAssignValue* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModAssignValue_FromoaModAssignValue(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModAssignValue)\n"
"    Calls: virtual void onPostCreate(oaModAssignValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModAssignValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModAssignValue)\n"
"    Calls: virtual void onPreDestroy(oaModAssignValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModAssignValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum",
    sizeof(PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModAssignValue)\n"
"    Calls: void notifyPostCreateObservers(oaModAssignValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModAssignValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModAssignValue)\n"
"    Calls: void notifyPreDestroyObservers(oaModAssignValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModAssignValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_tp_dealloc(PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum v1;
    PyParamoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum*) ((PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_FromoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPostCreate(oaModAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModAssignment_FromoaModAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPostModify(oaModAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModAssignment_FromoaModAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPreDestroy(oaModAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModAssignment_FromoaModAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPreModify(oaModAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModAssignment_FromoaModAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModAssignment)\n"
"    Calls: virtual void onPostCreate(oaModAssignment* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModAssignment,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModAssignment)\n"
"    Calls: virtual void onPreDestroy(oaModAssignment* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModAssignment,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaModAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum",
    sizeof(PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModAssignment)\n"
"    Calls: void notifyPostCreateObservers(oaModAssignment* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModAssignment,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModAssignment)\n"
"    Calls: void notifyPreDestroyObservers(oaModAssignment* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModAssignment,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBitInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBitInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBitInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBitInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBitInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaModBitInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBitInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBitInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModBitInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBitInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBitInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBitInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_FromoaStdObserver_oaModBitInst_oaInstModTypeEnum(oaStdObserver_oaModBitInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBitInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBitInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPostCreate(oaModBitInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBitInst_FromoaModBitInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPostModify(oaModBitInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBitInst_FromoaModBitInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPreDestroy(oaModBitInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBitInst_FromoaModBitInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPreModify(oaModBitInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBitInst_FromoaModBitInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBitInst)\n"
"    Calls: virtual void onPostCreate(oaModBitInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBitInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBitInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBitInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBitInst)\n"
"    Calls: virtual void onPreDestroy(oaModBitInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBitInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBitInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBitInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBitInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBitInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBitInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBitInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBitInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBitInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBitInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBitInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBitInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBitInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBitInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModBitInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBitInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBitInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBitInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBitInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBitInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBitInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBitInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBitInst)\n"
"    Calls: void notifyPostCreateObservers(oaModBitInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBitInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBitInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBitInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBitInst)\n"
"    Calls: void notifyPreDestroyObservers(oaModBitInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBitInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBitInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBitInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBitInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBitInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBitInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBitInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBitInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBitInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBitNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBitNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBitNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBitNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBitNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaModBitNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBitNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBitNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaModBitNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBitNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBitNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBitNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_FromoaStdObserver_oaModBitNet_oaNetModTypeEnum(oaStdObserver_oaModBitNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum::pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBitNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum::pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBitNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPostCreate(oaModBitNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBitNet_FromoaModBitNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPostModify(oaModBitNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBitNet_FromoaModBitNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPreDestroy(oaModBitNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBitNet_FromoaModBitNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPreModify(oaModBitNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBitNet_FromoaModBitNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBitNet)\n"
"    Calls: virtual void onPostCreate(oaModBitNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBitNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBitNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBitNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBitNet)\n"
"    Calls: virtual void onPreDestroy(oaModBitNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBitNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBitNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBitNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBitNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBitNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBitNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBitNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBitNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBitNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBitNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBitNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBitNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBitNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBitNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaModBitNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBitNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBitNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBitNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBitNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBitNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBitNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBitNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBitNet)\n"
"    Calls: void notifyPostCreateObservers(oaModBitNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBitNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBitNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBitNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBitNet)\n"
"    Calls: void notifyPreDestroyObservers(oaModBitNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBitNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBitNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBitNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBitNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBitNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBitNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBitNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBitNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBitNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBitTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBitTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBitTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBitTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaModBitTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBitTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaModBitTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBitTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBitTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_FromoaStdObserver_oaModBitTerm_oaTermModTypeEnum(oaStdObserver_oaModBitTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBitTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBitTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPostCreate(oaModBitTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBitTerm_FromoaModBitTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPostModify(oaModBitTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBitTerm_FromoaModBitTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPreDestroy(oaModBitTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBitTerm_FromoaModBitTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPreModify(oaModBitTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBitTerm_FromoaModBitTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBitTerm)\n"
"    Calls: virtual void onPostCreate(oaModBitTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBitTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBitTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBitTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBitTerm)\n"
"    Calls: virtual void onPreDestroy(oaModBitTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBitTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBitTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBitTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBitTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBitTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBitTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBitTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBitTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBitTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBitTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBitTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBitTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBitTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBitTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaModBitTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBitTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBitTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBitTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBitTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBitTerm)\n"
"    Calls: void notifyPostCreateObservers(oaModBitTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBitTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBitTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBitTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBitTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaModBitTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBitTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBitTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBitTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBitTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBitTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBitTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBitTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBitTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBitTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBitTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBundleNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBundleNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBundleNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBundleNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[67];
    sprintf(buffer,"<oaStdObserver_oaModBundleNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBundleNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaModBundleNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBundleNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBundleNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_FromoaStdObserver_oaModBundleNet_oaNetModTypeEnum(oaStdObserver_oaModBundleNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum::pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBundleNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum::pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBundleNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPostCreate(oaModBundleNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBundleNet_FromoaModBundleNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPostModify(oaModBundleNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBundleNet_FromoaModBundleNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPreDestroy(oaModBundleNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBundleNet_FromoaModBundleNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPreModify(oaModBundleNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBundleNet_FromoaModBundleNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBundleNet)\n"
"    Calls: virtual void onPostCreate(oaModBundleNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBundleNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBundleNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBundleNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBundleNet)\n"
"    Calls: virtual void onPreDestroy(oaModBundleNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBundleNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBundleNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBundleNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBundleNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBundleNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBundleNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBundleNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBundleNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBundleNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBundleNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBundleNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBundleNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBundleNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBundleNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaModBundleNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBundleNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBundleNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBundleNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBundleNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBundleNet)\n"
"    Calls: void notifyPostCreateObservers(oaModBundleNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBundleNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBundleNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBundleNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBundleNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBundleNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBundleNet)\n"
"    Calls: void notifyPreDestroyObservers(oaModBundleNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBundleNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBundleNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBundleNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBundleNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBundleNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBundleNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBundleNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBundleNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBundleNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBundleNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBundleNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBundleTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBundleTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBundleTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBundleTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBundleTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaModBundleTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBundleTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBundleTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_FromoaStdObserver_oaModBundleTerm_oaTermModTypeEnum(oaStdObserver_oaModBundleTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBundleTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBundleTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPostCreate(oaModBundleTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBundleTerm_FromoaModBundleTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPostModify(oaModBundleTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBundleTerm_FromoaModBundleTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPreDestroy(oaModBundleTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBundleTerm_FromoaModBundleTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPreModify(oaModBundleTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBundleTerm_FromoaModBundleTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBundleTerm)\n"
"    Calls: virtual void onPostCreate(oaModBundleTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBundleTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBundleTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBundleTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBundleTerm)\n"
"    Calls: virtual void onPreDestroy(oaModBundleTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBundleTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBundleTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBundleTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBundleTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBundleTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBundleTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBundleTerm)\n"
"    Calls: void notifyPostCreateObservers(oaModBundleTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBundleTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBundleTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBundleTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBundleTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaModBundleTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBundleTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBundleTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBundleTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBundleTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBundleTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBundleTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBundleTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusNetBit_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusNetBit_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBusNetBit_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBusNetBit_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[67];
    sprintf(buffer,"<oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBusNetBit_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaModBusNetBit_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBusNetBit_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBusNetBit_oaNetModTypeEnum*) ((PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_FromoaStdObserver_oaModBusNetBit_oaNetModTypeEnum(oaStdObserver_oaModBusNetBit_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBusNetBit_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBusNetBit_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPostCreate(oaModBusNetBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusNetBit_FromoaModBusNetBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPostModify(oaModBusNetBit* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusNetBit_FromoaModBusNetBit(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPreDestroy(oaModBusNetBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusNetBit_FromoaModBusNetBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPreModify(oaModBusNetBit* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusNetBit_FromoaModBusNetBit(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBusNetBit)\n"
"    Calls: virtual void onPostCreate(oaModBusNetBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBusNetBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaModBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBusNetBit,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBusNetBit,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaModBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBusNetBit)\n"
"    Calls: virtual void onPreDestroy(oaModBusNetBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBusNetBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaModBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBusNetBit,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBusNetBit,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaModBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBusNetBit_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBusNetBit_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBusNetBit_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBusNetBit)\n"
"    Calls: void notifyPostCreateObservers(oaModBusNetBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBusNetBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBusNetBit,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBusNetBit,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBusNetBit)\n"
"    Calls: void notifyPreDestroyObservers(oaModBusNetBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBusNetBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBusNetBit,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBusNetBit,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNetBit_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBusNetBit_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBusNetBit_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBusNetBit_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject* self = (PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum* p=new pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum* p=new pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[73];
    sprintf(buffer,"<oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum v1;
    PyParamoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum*) ((PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_FromoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject* self = (PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPostCreate(oaModBusNetDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusNetDef_FromoaModBusNetDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPostModify(oaModBusNetDef* p1,oaBusNetDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusNetDef_FromoaModBusNetDef(p1));
    PyTuple_SetItem(args,1,PyoaBusNetDefModTypeEnum_FromoaBusNetDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy(oaModBusNetDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusNetDef_FromoaModBusNetDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPreModify(oaModBusNetDef* p1,oaBusNetDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusNetDef_FromoaModBusNetDef(p1));
    PyTuple_SetItem(args,1,PyoaBusNetDefModTypeEnum_FromoaBusNetDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBusNetDef)\n"
"    Calls: virtual void onPostCreate(oaModBusNetDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBusNetDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaModBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaModBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBusNetDef)\n"
"    Calls: virtual void onPreDestroy(oaModBusNetDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBusNetDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaModBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaModBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum",
    sizeof(PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBusNetDef)\n"
"    Calls: void notifyPostCreateObservers(oaModBusNetDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBusNetDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBusNetDef)\n"
"    Calls: void notifyPreDestroyObservers(oaModBusNetDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBusNetDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBusNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBusNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBusNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaModBusNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBusNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBusNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaModBusNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBusNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBusNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBusNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_FromoaStdObserver_oaModBusNet_oaNetModTypeEnum(oaStdObserver_oaModBusNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum::pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBusNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum::pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBusNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPostCreate(oaModBusNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusNet_FromoaModBusNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPostModify(oaModBusNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusNet_FromoaModBusNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPreDestroy(oaModBusNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusNet_FromoaModBusNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPreModify(oaModBusNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusNet_FromoaModBusNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBusNet)\n"
"    Calls: virtual void onPostCreate(oaModBusNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBusNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBusNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBusNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBusNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBusNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBusNet)\n"
"    Calls: virtual void onPreDestroy(oaModBusNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBusNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBusNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBusNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBusNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModBusNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBusNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBusNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBusNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBusNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBusNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBusNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBusNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBusNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBusNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBusNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBusNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaModBusNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBusNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBusNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBusNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBusNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBusNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBusNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBusNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBusNet)\n"
"    Calls: void notifyPostCreateObservers(oaModBusNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBusNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBusNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBusNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBusNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBusNet)\n"
"    Calls: void notifyPreDestroyObservers(oaModBusNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBusNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBusNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBusNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBusNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBusNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBusNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBusNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBusNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBusNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBusNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusTermBit_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusTermBit_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBusTermBit_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBusTermBit_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBusTermBit_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaModBusTermBit_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBusTermBit_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBusTermBit_oaTermModTypeEnum*) ((PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_FromoaStdObserver_oaModBusTermBit_oaTermModTypeEnum(oaStdObserver_oaModBusTermBit_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBusTermBit_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBusTermBit_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPostCreate(oaModBusTermBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusTermBit_FromoaModBusTermBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPostModify(oaModBusTermBit* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusTermBit_FromoaModBusTermBit(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPreDestroy(oaModBusTermBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusTermBit_FromoaModBusTermBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPreModify(oaModBusTermBit* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusTermBit_FromoaModBusTermBit(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBusTermBit)\n"
"    Calls: virtual void onPostCreate(oaModBusTermBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBusTermBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaModBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBusTermBit,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBusTermBit,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaModBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBusTermBit)\n"
"    Calls: virtual void onPreDestroy(oaModBusTermBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBusTermBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaModBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBusTermBit,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBusTermBit,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaModBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBusTermBit_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBusTermBit_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBusTermBit_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBusTermBit)\n"
"    Calls: void notifyPostCreateObservers(oaModBusTermBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBusTermBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBusTermBit,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBusTermBit,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBusTermBit)\n"
"    Calls: void notifyPreDestroyObservers(oaModBusTermBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBusTermBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBusTermBit,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBusTermBit,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTermBit_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBusTermBit_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBusTermBit_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBusTermBit_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject* self = (PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum* p=new pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum* p=new pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum v1;
    PyParamoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum*) ((PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_FromoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject* self = (PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPostCreate(oaModBusTermDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusTermDef_FromoaModBusTermDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPostModify(oaModBusTermDef* p1,oaBusTermDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusTermDef_FromoaModBusTermDef(p1));
    PyTuple_SetItem(args,1,PyoaBusTermDefModTypeEnum_FromoaBusTermDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy(oaModBusTermDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusTermDef_FromoaModBusTermDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPreModify(oaModBusTermDef* p1,oaBusTermDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusTermDef_FromoaModBusTermDef(p1));
    PyTuple_SetItem(args,1,PyoaBusTermDefModTypeEnum_FromoaBusTermDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBusTermDef)\n"
"    Calls: virtual void onPostCreate(oaModBusTermDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBusTermDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaModBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaModBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBusTermDef)\n"
"    Calls: virtual void onPreDestroy(oaModBusTermDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBusTermDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaModBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaModBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum",
    sizeof(PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBusTermDef)\n"
"    Calls: void notifyPostCreateObservers(oaModBusTermDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBusTermDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBusTermDef)\n"
"    Calls: void notifyPreDestroyObservers(oaModBusTermDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBusTermDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModBusTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModBusTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModBusTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaModBusTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModBusTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaModBusTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModBusTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModBusTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_FromoaStdObserver_oaModBusTerm_oaTermModTypeEnum(oaStdObserver_oaModBusTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModBusTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModBusTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPostCreate(oaModBusTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusTerm_FromoaModBusTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPostModify(oaModBusTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusTerm_FromoaModBusTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPreDestroy(oaModBusTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModBusTerm_FromoaModBusTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPreModify(oaModBusTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModBusTerm_FromoaModBusTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModBusTerm)\n"
"    Calls: virtual void onPostCreate(oaModBusTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModBusTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModBusTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModBusTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModBusTerm)\n"
"    Calls: virtual void onPreDestroy(oaModBusTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModBusTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModBusTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModBusTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModBusTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModBusTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModBusTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModBusTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModBusTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModBusTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModBusTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModBusTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModBusTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModBusTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModBusTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaModBusTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModBusTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModBusTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModBusTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModBusTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModBusTerm)\n"
"    Calls: void notifyPostCreateObservers(oaModBusTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModBusTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModBusTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModBusTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModBusTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaModBusTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModBusTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModBusTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModBusTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModBusTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModBusTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModBusTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModBusTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModBusTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModBusTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModBusTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum v1;
    PyParamoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum*) ((PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_FromoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPostCreate(oaModConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModConnectDef_FromoaModConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPostModify(oaModConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModConnectDef_FromoaModConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPreDestroy(oaModConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModConnectDef_FromoaModConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPreModify(oaModConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModConnectDef_FromoaModConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModConnectDef)\n"
"    Calls: virtual void onPostCreate(oaModConnectDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModConnectDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModConnectDef)\n"
"    Calls: virtual void onPreDestroy(oaModConnectDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModConnectDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum",
    sizeof(PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModConnectDef)\n"
"    Calls: void notifyPostCreateObservers(oaModConnectDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModConnectDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModConnectDef)\n"
"    Calls: void notifyPreDestroyObservers(oaModConnectDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModConnectDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModDesignInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModDesignInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModDesignInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModDesignInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaModDesignInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModDesignInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModDesignInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModDesignInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModDesignInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_FromoaStdObserver_oaModDesignInst_oaInstModTypeEnum(oaStdObserver_oaModDesignInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModDesignInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModDesignInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPostCreate(oaModDesignInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModDesignInst_FromoaModDesignInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPostModify(oaModDesignInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModDesignInst_FromoaModDesignInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPreDestroy(oaModDesignInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModDesignInst_FromoaModDesignInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPreModify(oaModDesignInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModDesignInst_FromoaModDesignInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModDesignInst)\n"
"    Calls: virtual void onPostCreate(oaModDesignInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModDesignInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModDesignInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModDesignInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModDesignInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModDesignInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModDesignInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModDesignInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModDesignInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModDesignInst)\n"
"    Calls: virtual void onPreDestroy(oaModDesignInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModDesignInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModDesignInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModDesignInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModDesignInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModDesignInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModDesignInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModDesignInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModDesignInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModDesignInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModDesignInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModDesignInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModDesignInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModDesignInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModDesignInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModDesignInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModDesignInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModDesignInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModDesignInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModDesignInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModDesignInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModDesignInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModDesignInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModDesignInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModDesignInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModDesignInst)\n"
"    Calls: void notifyPostCreateObservers(oaModDesignInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModDesignInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModDesignInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModDesignInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModDesignInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModDesignInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModDesignInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModDesignInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModDesignInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModDesignInst)\n"
"    Calls: void notifyPreDestroyObservers(oaModDesignInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModDesignInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModDesignInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModDesignInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModDesignInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModDesignInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModDesignInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModDesignInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModDesignInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModDesignInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModDesignInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModDesignInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModDesignInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModDesignInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModDesignInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModDesignInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject* self = (PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum* p=new pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum* p=new pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_tp_dealloc(PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum v1;
    PyParamoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum*) ((PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_FromoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject* self = (PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPostCreate(oaModInstHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModInstHeader_FromoaModInstHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPostModify(oaModInstHeader* p1,oaInstHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModInstHeader_FromoaModInstHeader(p1));
    PyTuple_SetItem(args,1,PyoaInstHeaderModTypeEnum_FromoaInstHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPreDestroy(oaModInstHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModInstHeader_FromoaModInstHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPreModify(oaModInstHeader* p1,oaInstHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModInstHeader_FromoaModInstHeader(p1));
    PyTuple_SetItem(args,1,PyoaInstHeaderModTypeEnum_FromoaInstHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModInstHeader)\n"
"    Calls: virtual void onPostCreate(oaModInstHeader* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModInstHeader,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaModInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaModInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModInstHeader)\n"
"    Calls: virtual void onPreDestroy(oaModInstHeader* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModInstHeader,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaModInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaModInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum",
    sizeof(PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModInstHeader)\n"
"    Calls: void notifyPostCreateObservers(oaModInstHeader* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModInstHeader,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModInstHeader)\n"
"    Calls: void notifyPreDestroyObservers(oaModInstHeader* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModInstHeader,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject* self = (PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum* p=new pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum* p=new pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[71];
    sprintf(buffer,"<oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum v1;
    PyParamoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum*) ((PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_FromoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject* self = (PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPostCreate(oaModInstTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModInstTerm_FromoaModInstTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPostModify(oaModInstTerm* p1,oaInstTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModInstTerm_FromoaModInstTerm(p1));
    PyTuple_SetItem(args,1,PyoaInstTermModTypeEnum_FromoaInstTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPreDestroy(oaModInstTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModInstTerm_FromoaModInstTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPreModify(oaModInstTerm* p1,oaInstTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModInstTerm_FromoaModInstTerm(p1));
    PyTuple_SetItem(args,1,PyoaInstTermModTypeEnum_FromoaInstTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModInstTerm)\n"
"    Calls: virtual void onPostCreate(oaModInstTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModInstTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaModInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModInstTerm,simple-oaInstTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaModInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModInstTerm)\n"
"    Calls: virtual void onPreDestroy(oaModInstTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModInstTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaModInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModInstTerm,simple-oaInstTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaModInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum",
    sizeof(PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModInstTerm)\n"
"    Calls: void notifyPostCreateObservers(oaModInstTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModInstTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModInstTerm,simple-oaInstTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModInstTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaModInstTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModInstTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModInstTerm,simple-oaInstTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaStdObserver_oaModInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaModInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModInst_oaInstModTypeEnum_FromoaStdObserver_oaModInst_oaInstModTypeEnum(oaStdObserver_oaModInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInst_oaInstModTypeEnum::onPostCreate(oaModInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModInst_FromoaModInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInst_oaInstModTypeEnum::onPostModify(oaModInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModInst_FromoaModInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInst_oaInstModTypeEnum::onPreDestroy(oaModInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModInst_FromoaModInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModInst_oaInstModTypeEnum::onPreModify(oaModInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModInst_FromoaModInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModInst)\n"
"    Calls: virtual void onPostCreate(oaModInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModInst)\n"
"    Calls: virtual void onPreDestroy(oaModInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModInst)\n"
"    Calls: void notifyPostCreateObservers(oaModInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModInst)\n"
"    Calls: void notifyPreDestroyObservers(oaModInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_FromoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPostCreate(oaModModuleBitInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleBitInst_FromoaModModuleBitInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPostModify(oaModModuleBitInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleBitInst_FromoaModModuleBitInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPreDestroy(oaModModuleBitInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleBitInst_FromoaModModuleBitInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPreModify(oaModModuleBitInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleBitInst_FromoaModModuleBitInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModModuleBitInst)\n"
"    Calls: virtual void onPostCreate(oaModModuleBitInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModModuleBitInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModModuleBitInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModModuleBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModModuleBitInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModModuleBitInst)\n"
"    Calls: virtual void onPreDestroy(oaModModuleBitInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModModuleBitInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModModuleBitInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModModuleBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModModuleBitInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModModuleBitInst)\n"
"    Calls: void notifyPostCreateObservers(oaModModuleBitInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModModuleBitInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModModuleBitInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModModuleBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModModuleBitInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModModuleBitInst)\n"
"    Calls: void notifyPreDestroyObservers(oaModModuleBitInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModModuleBitInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModModuleBitInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModModuleBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModModuleBitInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self = (PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum* p=new pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum* p=new pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_dealloc(PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[87];
    sprintf(buffer,"<oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum v1;
    PyParamoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum*) ((PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_FromoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self = (PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostCreate(oaModModuleInstHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleInstHeader_FromoaModModuleInstHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostModify(oaModModuleInstHeader* p1,oaModuleInstHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleInstHeader_FromoaModModuleInstHeader(p1));
    PyTuple_SetItem(args,1,PyoaModuleInstHeaderModTypeEnum_FromoaModuleInstHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreDestroy(oaModModuleInstHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleInstHeader_FromoaModModuleInstHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreModify(oaModModuleInstHeader* p1,oaModuleInstHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleInstHeader_FromoaModModuleInstHeader(p1));
    PyTuple_SetItem(args,1,PyoaModuleInstHeaderModTypeEnum_FromoaModuleInstHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModModuleInstHeader)\n"
"    Calls: virtual void onPostCreate(oaModModuleInstHeader* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModModuleInstHeader,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)ob;

    PyParamoaModModuleInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModModuleInstHeader,oaModuleInstHeaderModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModModuleInstHeader* object,oaModuleInstHeaderModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModModuleInstHeader,simple-oaModuleInstHeaderModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)ob;

    PyParamoaModModuleInstHeader p1;
    PyParamoaModuleInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInstHeader_Convert,&p1,
          &PyoaModuleInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModModuleInstHeader)\n"
"    Calls: virtual void onPreDestroy(oaModModuleInstHeader* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModModuleInstHeader,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)ob;

    PyParamoaModModuleInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModModuleInstHeader,oaModuleInstHeaderModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModModuleInstHeader* object,oaModuleInstHeaderModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModModuleInstHeader,simple-oaModuleInstHeaderModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)ob;

    PyParamoaModModuleInstHeader p1;
    PyParamoaModuleInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInstHeader_Convert,&p1,
          &PyoaModuleInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum",
    sizeof(PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModModuleInstHeader)\n"
"    Calls: void notifyPostCreateObservers(oaModModuleInstHeader* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModModuleInstHeader,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModModuleInstHeader,oaModuleInstHeaderModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModModuleInstHeader* object,oaModuleInstHeaderModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModModuleInstHeader,simple-oaModuleInstHeaderModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleInstHeader p1;
    PyParamoaModuleInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInstHeader_Convert,&p1,
          &PyoaModuleInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModModuleInstHeader)\n"
"    Calls: void notifyPreDestroyObservers(oaModModuleInstHeader* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModModuleInstHeader,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModModuleInstHeader,oaModuleInstHeaderModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModModuleInstHeader* object,oaModuleInstHeaderModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModModuleInstHeader,simple-oaModuleInstHeaderModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleInstHeader p1;
    PyParamoaModuleInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInstHeader_Convert,&p1,
          &PyoaModuleInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModModuleInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModModuleInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaModModuleInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModModuleInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModModuleInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModModuleInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModModuleInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_FromoaStdObserver_oaModModuleInst_oaInstModTypeEnum(oaStdObserver_oaModModuleInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModModuleInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModModuleInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPostCreate(oaModModuleInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleInst_FromoaModModuleInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPostModify(oaModModuleInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleInst_FromoaModModuleInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPreDestroy(oaModModuleInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleInst_FromoaModModuleInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPreModify(oaModModuleInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleInst_FromoaModModuleInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModModuleInst)\n"
"    Calls: virtual void onPostCreate(oaModModuleInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModModuleInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModModuleInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModModuleInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModModuleInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModModuleInst)\n"
"    Calls: virtual void onPreDestroy(oaModModuleInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModModuleInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModModuleInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModModuleInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModModuleInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModModuleInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModModuleInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModModuleInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModModuleInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModModuleInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModModuleInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModModuleInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModModuleInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModModuleInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModModuleInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModModuleInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModModuleInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModModuleInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModModuleInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModModuleInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModModuleInst)\n"
"    Calls: void notifyPostCreateObservers(oaModModuleInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModModuleInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModModuleInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModModuleInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModModuleInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModModuleInst)\n"
"    Calls: void notifyPreDestroyObservers(oaModModuleInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModModuleInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModModuleInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModModuleInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModModuleInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModModuleInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModModuleInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModModuleInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModModuleInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModModuleInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_FromoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPostCreate(oaModModuleScalarInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleScalarInst_FromoaModModuleScalarInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPostModify(oaModModuleScalarInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleScalarInst_FromoaModModuleScalarInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPreDestroy(oaModModuleScalarInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleScalarInst_FromoaModModuleScalarInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPreModify(oaModModuleScalarInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleScalarInst_FromoaModModuleScalarInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModModuleScalarInst)\n"
"    Calls: virtual void onPostCreate(oaModModuleScalarInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModModuleScalarInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModModuleScalarInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModModuleScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModModuleScalarInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModModuleScalarInst)\n"
"    Calls: virtual void onPreDestroy(oaModModuleScalarInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModModuleScalarInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModModuleScalarInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModModuleScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModModuleScalarInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModModuleScalarInst)\n"
"    Calls: void notifyPostCreateObservers(oaModModuleScalarInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModModuleScalarInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModModuleScalarInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModModuleScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModModuleScalarInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModModuleScalarInst)\n"
"    Calls: void notifyPreDestroyObservers(oaModModuleScalarInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModModuleScalarInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModModuleScalarInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModModuleScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModModuleScalarInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[78];
    sprintf(buffer,"<oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum*) ((PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_FromoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPostCreate(oaModModuleVectorInstBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleVectorInstBit_FromoaModModuleVectorInstBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPostModify(oaModModuleVectorInstBit* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleVectorInstBit_FromoaModModuleVectorInstBit(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPreDestroy(oaModModuleVectorInstBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleVectorInstBit_FromoaModModuleVectorInstBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPreModify(oaModModuleVectorInstBit* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleVectorInstBit_FromoaModModuleVectorInstBit(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModModuleVectorInstBit)\n"
"    Calls: virtual void onPostCreate(oaModModuleVectorInstBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModModuleVectorInstBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModModuleVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModModuleVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModModuleVectorInstBit,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModModuleVectorInstBit)\n"
"    Calls: virtual void onPreDestroy(oaModModuleVectorInstBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModModuleVectorInstBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModModuleVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModModuleVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModModuleVectorInstBit,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModModuleVectorInstBit)\n"
"    Calls: void notifyPostCreateObservers(oaModModuleVectorInstBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModModuleVectorInstBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModModuleVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModModuleVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModModuleVectorInstBit,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModModuleVectorInstBit)\n"
"    Calls: void notifyPreDestroyObservers(oaModModuleVectorInstBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModModuleVectorInstBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModModuleVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModModuleVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModModuleVectorInstBit,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_FromoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPostCreate(oaModModuleVectorInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleVectorInst_FromoaModModuleVectorInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPostModify(oaModModuleVectorInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleVectorInst_FromoaModModuleVectorInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPreDestroy(oaModModuleVectorInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModModuleVectorInst_FromoaModModuleVectorInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPreModify(oaModModuleVectorInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModModuleVectorInst_FromoaModModuleVectorInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModModuleVectorInst)\n"
"    Calls: virtual void onPostCreate(oaModModuleVectorInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModModuleVectorInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModModuleVectorInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModModuleVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModModuleVectorInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModModuleVectorInst)\n"
"    Calls: virtual void onPreDestroy(oaModModuleVectorInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModModuleVectorInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModModuleVectorInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModModuleVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModModuleVectorInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModModuleVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModModuleVectorInst)\n"
"    Calls: void notifyPostCreateObservers(oaModModuleVectorInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModModuleVectorInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModModuleVectorInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModModuleVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModModuleVectorInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModModuleVectorInst)\n"
"    Calls: void notifyPreDestroyObservers(oaModModuleVectorInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModModuleVectorInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModModuleVectorInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModModuleVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModModuleVectorInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModModuleVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[78];
    sprintf(buffer,"<oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum v1;
    PyParamoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum*) ((PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_FromoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPostCreate(oaModNetConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModNetConnectDef_FromoaModNetConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPostModify(oaModNetConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModNetConnectDef_FromoaModNetConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy(oaModNetConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModNetConnectDef_FromoaModNetConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPreModify(oaModNetConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModNetConnectDef_FromoaModNetConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModNetConnectDef)\n"
"    Calls: virtual void onPostCreate(oaModNetConnectDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModNetConnectDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModNetConnectDef)\n"
"    Calls: virtual void onPreDestroy(oaModNetConnectDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModNetConnectDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum",
    sizeof(PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModNetConnectDef)\n"
"    Calls: void notifyPostCreateObservers(oaModNetConnectDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModNetConnectDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModNetConnectDef)\n"
"    Calls: void notifyPreDestroyObservers(oaModNetConnectDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModNetConnectDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaModNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[61];
    sprintf(buffer,"<oaStdObserver_oaModNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaModNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaModNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModNet_oaNetModTypeEnum_FromoaStdObserver_oaModNet_oaNetModTypeEnum(oaStdObserver_oaModNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModNet_oaNetModTypeEnum::pyv_oaStdObserver_oaModNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModNet_oaNetModTypeEnum::pyv_oaStdObserver_oaModNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModNet_oaNetModTypeEnum::onPostCreate(oaModNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModNet_FromoaModNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModNet_oaNetModTypeEnum::onPostModify(oaModNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModNet_FromoaModNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModNet_oaNetModTypeEnum::onPreDestroy(oaModNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModNet_FromoaModNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModNet_oaNetModTypeEnum::onPreModify(oaModNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModNet_FromoaModNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModNet)\n"
"    Calls: virtual void onPostCreate(oaModNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModNet)\n"
"    Calls: virtual void onPreDestroy(oaModNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaModNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModNet)\n"
"    Calls: void notifyPostCreateObservers(oaModNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModNet)\n"
"    Calls: void notifyPreDestroyObservers(oaModNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModScalarInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModScalarInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModScalarInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModScalarInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaModScalarInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModScalarInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModScalarInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModScalarInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModScalarInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_FromoaStdObserver_oaModScalarInst_oaInstModTypeEnum(oaStdObserver_oaModScalarInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModScalarInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModScalarInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPostCreate(oaModScalarInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModScalarInst_FromoaModScalarInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPostModify(oaModScalarInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModScalarInst_FromoaModScalarInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPreDestroy(oaModScalarInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModScalarInst_FromoaModScalarInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPreModify(oaModScalarInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModScalarInst_FromoaModScalarInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModScalarInst)\n"
"    Calls: virtual void onPostCreate(oaModScalarInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModScalarInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModScalarInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModScalarInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModScalarInst)\n"
"    Calls: virtual void onPreDestroy(oaModScalarInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModScalarInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModScalarInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModScalarInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModScalarInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModScalarInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModScalarInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModScalarInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModScalarInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModScalarInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModScalarInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModScalarInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModScalarInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModScalarInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModScalarInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModScalarInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModScalarInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModScalarInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModScalarInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModScalarInst)\n"
"    Calls: void notifyPostCreateObservers(oaModScalarInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModScalarInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModScalarInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModScalarInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModScalarInst)\n"
"    Calls: void notifyPreDestroyObservers(oaModScalarInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModScalarInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModScalarInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModScalarInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModScalarInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModScalarInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModScalarInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModScalarInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModScalarInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModScalarInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModScalarNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModScalarNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModScalarNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModScalarNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[67];
    sprintf(buffer,"<oaStdObserver_oaModScalarNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModScalarNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaModScalarNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModScalarNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModScalarNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_FromoaStdObserver_oaModScalarNet_oaNetModTypeEnum(oaStdObserver_oaModScalarNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum::pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModScalarNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum::pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModScalarNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPostCreate(oaModScalarNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModScalarNet_FromoaModScalarNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPostModify(oaModScalarNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModScalarNet_FromoaModScalarNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPreDestroy(oaModScalarNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModScalarNet_FromoaModScalarNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPreModify(oaModScalarNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModScalarNet_FromoaModScalarNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModScalarNet)\n"
"    Calls: virtual void onPostCreate(oaModScalarNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModScalarNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModScalarNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModScalarNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModScalarNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModScalarNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModScalarNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModScalarNet)\n"
"    Calls: virtual void onPreDestroy(oaModScalarNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModScalarNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModScalarNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModScalarNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModScalarNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModScalarNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject*)ob;

    PyParamoaModScalarNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModScalarNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModScalarNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModScalarNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModScalarNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModScalarNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModScalarNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModScalarNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModScalarNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModScalarNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModScalarNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaModScalarNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModScalarNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModScalarNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModScalarNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModScalarNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModScalarNet)\n"
"    Calls: void notifyPostCreateObservers(oaModScalarNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModScalarNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModScalarNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModScalarNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModScalarNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModScalarNet)\n"
"    Calls: void notifyPreDestroyObservers(oaModScalarNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModScalarNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModScalarNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModScalarNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModScalarNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModScalarNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModScalarNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModScalarNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModScalarNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModScalarNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModScalarNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModScalarNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModScalarTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModScalarTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModScalarTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModScalarTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModScalarTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaModScalarTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModScalarTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModScalarTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_FromoaStdObserver_oaModScalarTerm_oaTermModTypeEnum(oaStdObserver_oaModScalarTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModScalarTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModScalarTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPostCreate(oaModScalarTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModScalarTerm_FromoaModScalarTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPostModify(oaModScalarTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModScalarTerm_FromoaModScalarTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPreDestroy(oaModScalarTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModScalarTerm_FromoaModScalarTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPreModify(oaModScalarTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModScalarTerm_FromoaModScalarTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModScalarTerm)\n"
"    Calls: virtual void onPostCreate(oaModScalarTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModScalarTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModScalarTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModScalarTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModScalarTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModScalarTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModScalarTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModScalarTerm)\n"
"    Calls: virtual void onPreDestroy(oaModScalarTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModScalarTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModScalarTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModScalarTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModScalarTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModScalarTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModScalarTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModScalarTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModScalarTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModScalarTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModScalarTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModScalarTerm)\n"
"    Calls: void notifyPostCreateObservers(oaModScalarTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModScalarTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModScalarTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModScalarTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModScalarTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModScalarTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaModScalarTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModScalarTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModScalarTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModScalarTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModScalarTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModScalarTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModScalarTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModScalarTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModScalarTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModScalarTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModScalarTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModScalarTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[79];
    sprintf(buffer,"<oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum v1;
    PyParamoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum*) ((PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_FromoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPostCreate(oaModTermConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModTermConnectDef_FromoaModTermConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPostModify(oaModTermConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModTermConnectDef_FromoaModTermConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPreDestroy(oaModTermConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModTermConnectDef_FromoaModTermConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPreModify(oaModTermConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModTermConnectDef_FromoaModTermConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModTermConnectDef)\n"
"    Calls: virtual void onPostCreate(oaModTermConnectDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModTermConnectDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModTermConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModTermConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModTermConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModTermConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModTermConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModTermConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTermConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModTermConnectDef)\n"
"    Calls: virtual void onPreDestroy(oaModTermConnectDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModTermConnectDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModTermConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModTermConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModTermConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModTermConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModTermConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaModTermConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTermConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum",
    sizeof(PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModTermConnectDef)\n"
"    Calls: void notifyPostCreateObservers(oaModTermConnectDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModTermConnectDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModTermConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModTermConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModTermConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModTermConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModTermConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModTermConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTermConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModTermConnectDef)\n"
"    Calls: void notifyPreDestroyObservers(oaModTermConnectDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModTermConnectDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModTermConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModTermConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModTermConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModTermConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModTermConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModTermConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTermConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

