
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaLib
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaLib_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaLib_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaLibObject* self = (PyoaDataAppDef_oaLibObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaLib)
    {
        PyParamoaDataAppDef_oaLib p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaLib_Convert,&p1)) {
            PyoaDataAppDef_oaLibObject* cself=((PyoaDataAppDef_oaLibObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaLib, Choices are:\n"
        "    (oaDataAppDef_oaLib)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaLib_tp_dealloc(PyoaDataAppDef_oaLibObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaLib_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaLib value;
    int convert_status=PyoaDataAppDef_oaLib_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaDataAppDef_oaLib::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaLib_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaLib v1;
    PyParamoaDataAppDef_oaLib v2;
    int convert_status1=PyoaDataAppDef_oaLib_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaLib_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaLib_Convert(PyObject* ob,PyParamoaDataAppDef_oaLib* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaLib_Check(ob)) {
        result->SetData( (oaDataAppDef_oaLib**) ((PyoaDataAppDef_oaLibObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaLib Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaLib_FromoaDataAppDef_oaLib(oaDataAppDef_oaLib** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaLib* data=*value;
        PyObject* bself = PyoaDataAppDef_oaLib_Type.tp_alloc(&PyoaDataAppDef_oaLib_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaLibObject* self = (PyoaDataAppDef_oaLibObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaLib_FromoaDataAppDef_oaLib(oaDataAppDef_oaLib* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaLib_Type.tp_alloc(&PyoaDataAppDef_oaLib_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaLibObject* self = (PyoaDataAppDef_oaLibObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaLib_get_doc[] = 
"Class: oaDataAppDef_oaLib, Function: get\n"
"  Paramegers: (oaLib,[oaByte])\n"
"    Calls: void get(const oaLib* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaLib,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaLib_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaLib data;
    int convert_status=PyoaDataAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaLibObject* self=(PyoaDataAppDef_oaLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLib p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLib_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaLib_getDefault_doc[] = 
"Class: oaDataAppDef_oaLib, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaLib_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaLib data;
    int convert_status=PyoaDataAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaLibObject* self=(PyoaDataAppDef_oaLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaLib_getSize_doc[] = 
"Class: oaDataAppDef_oaLib, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaLib_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaLib data;
    int convert_status=PyoaDataAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaLibObject* self=(PyoaDataAppDef_oaLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaLib_set_doc[] = 
"Class: oaDataAppDef_oaLib, Function: set\n"
"  Paramegers: (oaLib,[oaByte])\n"
"    Calls: void set(oaLib* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaLib,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaLib_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaLib data;
    int convert_status=PyoaDataAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaLibObject* self=(PyoaDataAppDef_oaLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLib p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaLib_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaLib_isNull_doc[] =
"Class: oaDataAppDef_oaLib, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaLib_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaLib data;
    int convert_status=PyoaDataAppDef_oaLib_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaLib_assign_doc[] = 
"Class: oaDataAppDef_oaLib, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaLib_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaLib data;
  int convert_status=PyoaDataAppDef_oaLib_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaLib p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaLib_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaLib_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaLib_get,METH_VARARGS,oaDataAppDef_oaLib_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaLib_getDefault,METH_VARARGS,oaDataAppDef_oaLib_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaLib_getSize,METH_VARARGS,oaDataAppDef_oaLib_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaLib_set,METH_VARARGS,oaDataAppDef_oaLib_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaLib_tp_isNull,METH_VARARGS,oaDataAppDef_oaLib_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaLib_tp_assign,METH_VARARGS,oaDataAppDef_oaLib_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaLib_doc[] = 
"Class: oaDataAppDef_oaLib\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaLib)\n"
"    Calls: (const oaDataAppDef_oaLib&)\n"
"    Signature: oaDataAppDef_oaLib||cref-oaDataAppDef_oaLib,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaLib_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaLib",
    sizeof(PyoaDataAppDef_oaLibObject),
    0,
    (destructor)oaDataAppDef_oaLib_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaLib_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaLib_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaLib_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaLib_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaLib_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaLib_static_find_doc[] = 
"Class: oaDataAppDef_oaLib, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaLib* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaLib|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaLib* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaLib|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaLib_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaLibp result= (oaDataAppDef_oaLib::find(p1.Data()));
            return PyoaDataAppDef_oaLib_FromoaDataAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaLibp result= (oaDataAppDef_oaLib::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaLib_FromoaDataAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaLib, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaLib_static_get_doc[] = 
"Class: oaDataAppDef_oaLib, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaLib* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaLib|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaLib* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaLib|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaLib_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaLibp result= (oaDataAppDef_oaLib::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaLib_FromoaDataAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaLibp result= (oaDataAppDef_oaLib::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaLib_FromoaDataAppDef_oaLib(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaLib, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaLib_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaLib_static_find,METH_VARARGS,oaDataAppDef_oaLib_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaLib_static_get,METH_VARARGS,oaDataAppDef_oaLib_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaLib_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaLib_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaLib\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaLib",
           (PyObject*)(&PyoaDataAppDef_oaLib_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaLib\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaLib_Type.tp_dict;
    for(method=oaDataAppDef_oaLib_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaMarker
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaMarker_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaMarker_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaMarkerObject* self = (PyoaDataAppDef_oaMarkerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaMarker)
    {
        PyParamoaDataAppDef_oaMarker p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaMarker_Convert,&p1)) {
            PyoaDataAppDef_oaMarkerObject* cself=((PyoaDataAppDef_oaMarkerObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaMarker, Choices are:\n"
        "    (oaDataAppDef_oaMarker)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaMarker_tp_dealloc(PyoaDataAppDef_oaMarkerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaMarker_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaMarker value;
    int convert_status=PyoaDataAppDef_oaMarker_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaDataAppDef_oaMarker::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaMarker_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaMarker v1;
    PyParamoaDataAppDef_oaMarker v2;
    int convert_status1=PyoaDataAppDef_oaMarker_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaMarker_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaMarker_Convert(PyObject* ob,PyParamoaDataAppDef_oaMarker* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaMarker_Check(ob)) {
        result->SetData( (oaDataAppDef_oaMarker**) ((PyoaDataAppDef_oaMarkerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaMarker Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaMarker_FromoaDataAppDef_oaMarker(oaDataAppDef_oaMarker** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaMarker* data=*value;
        PyObject* bself = PyoaDataAppDef_oaMarker_Type.tp_alloc(&PyoaDataAppDef_oaMarker_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaMarkerObject* self = (PyoaDataAppDef_oaMarkerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaMarker_FromoaDataAppDef_oaMarker(oaDataAppDef_oaMarker* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaMarker_Type.tp_alloc(&PyoaDataAppDef_oaMarker_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaMarkerObject* self = (PyoaDataAppDef_oaMarkerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaMarker_get_doc[] = 
"Class: oaDataAppDef_oaMarker, Function: get\n"
"  Paramegers: (oaMarker,[oaByte])\n"
"    Calls: void get(const oaMarker* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaMarker,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaMarker_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaMarker data;
    int convert_status=PyoaDataAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaMarkerObject* self=(PyoaDataAppDef_oaMarkerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaMarker p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMarker_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaMarker_getDefault_doc[] = 
"Class: oaDataAppDef_oaMarker, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaMarker_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaMarker data;
    int convert_status=PyoaDataAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaMarkerObject* self=(PyoaDataAppDef_oaMarkerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaMarker_getSize_doc[] = 
"Class: oaDataAppDef_oaMarker, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaMarker_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaMarker data;
    int convert_status=PyoaDataAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaMarkerObject* self=(PyoaDataAppDef_oaMarkerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaMarker_set_doc[] = 
"Class: oaDataAppDef_oaMarker, Function: set\n"
"  Paramegers: (oaMarker,[oaByte])\n"
"    Calls: void set(oaMarker* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaMarker,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaMarker_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaMarker data;
    int convert_status=PyoaDataAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaMarkerObject* self=(PyoaDataAppDef_oaMarkerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaMarker p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMarker_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaMarker_isNull_doc[] =
"Class: oaDataAppDef_oaMarker, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaMarker_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaMarker data;
    int convert_status=PyoaDataAppDef_oaMarker_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaMarker_assign_doc[] = 
"Class: oaDataAppDef_oaMarker, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaMarker_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaMarker data;
  int convert_status=PyoaDataAppDef_oaMarker_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaMarker p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaMarker_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaMarker_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaMarker_get,METH_VARARGS,oaDataAppDef_oaMarker_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaMarker_getDefault,METH_VARARGS,oaDataAppDef_oaMarker_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaMarker_getSize,METH_VARARGS,oaDataAppDef_oaMarker_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaMarker_set,METH_VARARGS,oaDataAppDef_oaMarker_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaMarker_tp_isNull,METH_VARARGS,oaDataAppDef_oaMarker_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaMarker_tp_assign,METH_VARARGS,oaDataAppDef_oaMarker_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaMarker_doc[] = 
"Class: oaDataAppDef_oaMarker\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaMarker)\n"
"    Calls: (const oaDataAppDef_oaMarker&)\n"
"    Signature: oaDataAppDef_oaMarker||cref-oaDataAppDef_oaMarker,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaMarker_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaMarker",
    sizeof(PyoaDataAppDef_oaMarkerObject),
    0,
    (destructor)oaDataAppDef_oaMarker_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaMarker_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaMarker_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaMarker_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaMarker_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaMarker_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaMarker_static_find_doc[] = 
"Class: oaDataAppDef_oaMarker, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaMarker* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaMarker|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaMarker* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaMarker|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaMarker_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaMarkerp result= (oaDataAppDef_oaMarker::find(p1.Data()));
            return PyoaDataAppDef_oaMarker_FromoaDataAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaMarkerp result= (oaDataAppDef_oaMarker::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaMarker_FromoaDataAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaMarker, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaMarker_static_get_doc[] = 
"Class: oaDataAppDef_oaMarker, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaMarker* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaMarker|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaMarker* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaMarker|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaMarker_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaMarkerp result= (oaDataAppDef_oaMarker::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaMarker_FromoaDataAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaMarkerp result= (oaDataAppDef_oaMarker::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaMarker_FromoaDataAppDef_oaMarker(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaMarker, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaMarker_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaMarker_static_find,METH_VARARGS,oaDataAppDef_oaMarker_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaMarker_static_get,METH_VARARGS,oaDataAppDef_oaMarker_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaMarker_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaMarker_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaMarker\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaMarker",
           (PyObject*)(&PyoaDataAppDef_oaMarker_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaMarker\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaMarker_Type.tp_dict;
    for(method=oaDataAppDef_oaMarker_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModAssignmentObject* self = (PyoaDataAppDef_oaModAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModAssignment)
    {
        PyParamoaDataAppDef_oaModAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModAssignment_Convert,&p1)) {
            PyoaDataAppDef_oaModAssignmentObject* cself=((PyoaDataAppDef_oaModAssignmentObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModAssignment, Choices are:\n"
        "    (oaDataAppDef_oaModAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModAssignment_tp_dealloc(PyoaDataAppDef_oaModAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModAssignment_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModAssignment value;
    int convert_status=PyoaDataAppDef_oaModAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDataAppDef_oaModAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModAssignment v1;
    PyParamoaDataAppDef_oaModAssignment v2;
    int convert_status1=PyoaDataAppDef_oaModAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModAssignment_Convert(PyObject* ob,PyParamoaDataAppDef_oaModAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModAssignment_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModAssignment**) ((PyoaDataAppDef_oaModAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModAssignment_FromoaDataAppDef_oaModAssignment(oaDataAppDef_oaModAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModAssignment* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModAssignment_Type.tp_alloc(&PyoaDataAppDef_oaModAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModAssignmentObject* self = (PyoaDataAppDef_oaModAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModAssignment_FromoaDataAppDef_oaModAssignment(oaDataAppDef_oaModAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModAssignment_Type.tp_alloc(&PyoaDataAppDef_oaModAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModAssignmentObject* self = (PyoaDataAppDef_oaModAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModAssignment_get_doc[] = 
"Class: oaDataAppDef_oaModAssignment, Function: get\n"
"  Paramegers: (oaModAssignment,[oaByte])\n"
"    Calls: void get(const oaModAssignment* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModAssignment,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModAssignment data;
    int convert_status=PyoaDataAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModAssignmentObject* self=(PyoaDataAppDef_oaModAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModAssignment p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignment_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModAssignment_getDefault_doc[] = 
"Class: oaDataAppDef_oaModAssignment, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModAssignment data;
    int convert_status=PyoaDataAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModAssignmentObject* self=(PyoaDataAppDef_oaModAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModAssignment_getSize_doc[] = 
"Class: oaDataAppDef_oaModAssignment, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModAssignment_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModAssignment data;
    int convert_status=PyoaDataAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModAssignmentObject* self=(PyoaDataAppDef_oaModAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModAssignment_set_doc[] = 
"Class: oaDataAppDef_oaModAssignment, Function: set\n"
"  Paramegers: (oaModAssignment,[oaByte])\n"
"    Calls: void set(oaModAssignment* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModAssignment,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModAssignment data;
    int convert_status=PyoaDataAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModAssignmentObject* self=(PyoaDataAppDef_oaModAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModAssignment p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModAssignment_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModAssignment_isNull_doc[] =
"Class: oaDataAppDef_oaModAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModAssignment data;
    int convert_status=PyoaDataAppDef_oaModAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModAssignment_assign_doc[] = 
"Class: oaDataAppDef_oaModAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModAssignment data;
  int convert_status=PyoaDataAppDef_oaModAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModAssignment_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModAssignment_get,METH_VARARGS,oaDataAppDef_oaModAssignment_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModAssignment_getDefault,METH_VARARGS,oaDataAppDef_oaModAssignment_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModAssignment_getSize,METH_VARARGS,oaDataAppDef_oaModAssignment_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModAssignment_set,METH_VARARGS,oaDataAppDef_oaModAssignment_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModAssignment_tp_isNull,METH_VARARGS,oaDataAppDef_oaModAssignment_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModAssignment_tp_assign,METH_VARARGS,oaDataAppDef_oaModAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModAssignment_doc[] = 
"Class: oaDataAppDef_oaModAssignment\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModAssignment)\n"
"    Calls: (const oaDataAppDef_oaModAssignment&)\n"
"    Signature: oaDataAppDef_oaModAssignment||cref-oaDataAppDef_oaModAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModAssignment",
    sizeof(PyoaDataAppDef_oaModAssignmentObject),
    0,
    (destructor)oaDataAppDef_oaModAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModAssignment_static_find_doc[] = 
"Class: oaDataAppDef_oaModAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModAssignment|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModAssignmentp result= (oaDataAppDef_oaModAssignment::find(p1.Data()));
            return PyoaDataAppDef_oaModAssignment_FromoaDataAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModAssignmentp result= (oaDataAppDef_oaModAssignment::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModAssignment_FromoaDataAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModAssignment_static_get_doc[] = 
"Class: oaDataAppDef_oaModAssignment, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModAssignment* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModAssignment|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModAssignment* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModAssignmentp result= (oaDataAppDef_oaModAssignment::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModAssignment_FromoaDataAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModAssignmentp result= (oaDataAppDef_oaModAssignment::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModAssignment_FromoaDataAppDef_oaModAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModAssignment, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModAssignment_static_find,METH_VARARGS,oaDataAppDef_oaModAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModAssignment_static_get,METH_VARARGS,oaDataAppDef_oaModAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModAssignment",
           (PyObject*)(&PyoaDataAppDef_oaModAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModAssignment_Type.tp_dict;
    for(method=oaDataAppDef_oaModAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModBusNetDefObject* self = (PyoaDataAppDef_oaModBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModBusNetDef)
    {
        PyParamoaDataAppDef_oaModBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModBusNetDef_Convert,&p1)) {
            PyoaDataAppDef_oaModBusNetDefObject* cself=((PyoaDataAppDef_oaModBusNetDefObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModBusNetDef, Choices are:\n"
        "    (oaDataAppDef_oaModBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModBusNetDef_tp_dealloc(PyoaDataAppDef_oaModBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModBusNetDef value;
    int convert_status=PyoaDataAppDef_oaModBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaDataAppDef_oaModBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModBusNetDef v1;
    PyParamoaDataAppDef_oaModBusNetDef v2;
    int convert_status1=PyoaDataAppDef_oaModBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModBusNetDef_Convert(PyObject* ob,PyParamoaDataAppDef_oaModBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModBusNetDef_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModBusNetDef**) ((PyoaDataAppDef_oaModBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModBusNetDef_FromoaDataAppDef_oaModBusNetDef(oaDataAppDef_oaModBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModBusNetDef* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModBusNetDef_Type.tp_alloc(&PyoaDataAppDef_oaModBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModBusNetDefObject* self = (PyoaDataAppDef_oaModBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModBusNetDef_FromoaDataAppDef_oaModBusNetDef(oaDataAppDef_oaModBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModBusNetDef_Type.tp_alloc(&PyoaDataAppDef_oaModBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModBusNetDefObject* self = (PyoaDataAppDef_oaModBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusNetDef_get_doc[] = 
"Class: oaDataAppDef_oaModBusNetDef, Function: get\n"
"  Paramegers: (oaModBusNetDef,[oaByte])\n"
"    Calls: void get(const oaModBusNetDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModBusNetDef,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModBusNetDef data;
    int convert_status=PyoaDataAppDef_oaModBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModBusNetDefObject* self=(PyoaDataAppDef_oaModBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModBusNetDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusNetDef_getDefault_doc[] = 
"Class: oaDataAppDef_oaModBusNetDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModBusNetDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModBusNetDef data;
    int convert_status=PyoaDataAppDef_oaModBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModBusNetDefObject* self=(PyoaDataAppDef_oaModBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusNetDef_getSize_doc[] = 
"Class: oaDataAppDef_oaModBusNetDef, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModBusNetDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModBusNetDef data;
    int convert_status=PyoaDataAppDef_oaModBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModBusNetDefObject* self=(PyoaDataAppDef_oaModBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusNetDef_set_doc[] = 
"Class: oaDataAppDef_oaModBusNetDef, Function: set\n"
"  Paramegers: (oaModBusNetDef,[oaByte])\n"
"    Calls: void set(oaModBusNetDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModBusNetDef,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModBusNetDef data;
    int convert_status=PyoaDataAppDef_oaModBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModBusNetDefObject* self=(PyoaDataAppDef_oaModBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModBusNetDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusNetDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusNetDef_isNull_doc[] =
"Class: oaDataAppDef_oaModBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModBusNetDef data;
    int convert_status=PyoaDataAppDef_oaModBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModBusNetDef_assign_doc[] = 
"Class: oaDataAppDef_oaModBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModBusNetDef data;
  int convert_status=PyoaDataAppDef_oaModBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModBusNetDef_get,METH_VARARGS,oaDataAppDef_oaModBusNetDef_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModBusNetDef_getDefault,METH_VARARGS,oaDataAppDef_oaModBusNetDef_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModBusNetDef_getSize,METH_VARARGS,oaDataAppDef_oaModBusNetDef_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModBusNetDef_set,METH_VARARGS,oaDataAppDef_oaModBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModBusNetDef_tp_isNull,METH_VARARGS,oaDataAppDef_oaModBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModBusNetDef_tp_assign,METH_VARARGS,oaDataAppDef_oaModBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusNetDef_doc[] = 
"Class: oaDataAppDef_oaModBusNetDef\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModBusNetDef)\n"
"    Calls: (const oaDataAppDef_oaModBusNetDef&)\n"
"    Signature: oaDataAppDef_oaModBusNetDef||cref-oaDataAppDef_oaModBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModBusNetDef",
    sizeof(PyoaDataAppDef_oaModBusNetDefObject),
    0,
    (destructor)oaDataAppDef_oaModBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusNetDef_static_find_doc[] = 
"Class: oaDataAppDef_oaModBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModBusNetDef|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModBusNetDefp result= (oaDataAppDef_oaModBusNetDef::find(p1.Data()));
            return PyoaDataAppDef_oaModBusNetDef_FromoaDataAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModBusNetDefp result= (oaDataAppDef_oaModBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModBusNetDef_FromoaDataAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusNetDef_static_get_doc[] = 
"Class: oaDataAppDef_oaModBusNetDef, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModBusNetDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModBusNetDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModBusNetDefp result= (oaDataAppDef_oaModBusNetDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModBusNetDef_FromoaDataAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModBusNetDefp result= (oaDataAppDef_oaModBusNetDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModBusNetDef_FromoaDataAppDef_oaModBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModBusNetDef, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModBusNetDef_static_find,METH_VARARGS,oaDataAppDef_oaModBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModBusNetDef_static_get,METH_VARARGS,oaDataAppDef_oaModBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModBusNetDef",
           (PyObject*)(&PyoaDataAppDef_oaModBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModBusNetDef_Type.tp_dict;
    for(method=oaDataAppDef_oaModBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModBusTermDefObject* self = (PyoaDataAppDef_oaModBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModBusTermDef)
    {
        PyParamoaDataAppDef_oaModBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModBusTermDef_Convert,&p1)) {
            PyoaDataAppDef_oaModBusTermDefObject* cself=((PyoaDataAppDef_oaModBusTermDefObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModBusTermDef, Choices are:\n"
        "    (oaDataAppDef_oaModBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModBusTermDef_tp_dealloc(PyoaDataAppDef_oaModBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModBusTermDef value;
    int convert_status=PyoaDataAppDef_oaModBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDataAppDef_oaModBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModBusTermDef v1;
    PyParamoaDataAppDef_oaModBusTermDef v2;
    int convert_status1=PyoaDataAppDef_oaModBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModBusTermDef_Convert(PyObject* ob,PyParamoaDataAppDef_oaModBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModBusTermDef_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModBusTermDef**) ((PyoaDataAppDef_oaModBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModBusTermDef_FromoaDataAppDef_oaModBusTermDef(oaDataAppDef_oaModBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModBusTermDef* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModBusTermDef_Type.tp_alloc(&PyoaDataAppDef_oaModBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModBusTermDefObject* self = (PyoaDataAppDef_oaModBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModBusTermDef_FromoaDataAppDef_oaModBusTermDef(oaDataAppDef_oaModBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModBusTermDef_Type.tp_alloc(&PyoaDataAppDef_oaModBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModBusTermDefObject* self = (PyoaDataAppDef_oaModBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusTermDef_get_doc[] = 
"Class: oaDataAppDef_oaModBusTermDef, Function: get\n"
"  Paramegers: (oaModBusTermDef,[oaByte])\n"
"    Calls: void get(const oaModBusTermDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModBusTermDef,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModBusTermDef data;
    int convert_status=PyoaDataAppDef_oaModBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModBusTermDefObject* self=(PyoaDataAppDef_oaModBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModBusTermDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusTermDef_getDefault_doc[] = 
"Class: oaDataAppDef_oaModBusTermDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModBusTermDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModBusTermDef data;
    int convert_status=PyoaDataAppDef_oaModBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModBusTermDefObject* self=(PyoaDataAppDef_oaModBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusTermDef_getSize_doc[] = 
"Class: oaDataAppDef_oaModBusTermDef, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModBusTermDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModBusTermDef data;
    int convert_status=PyoaDataAppDef_oaModBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModBusTermDefObject* self=(PyoaDataAppDef_oaModBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusTermDef_set_doc[] = 
"Class: oaDataAppDef_oaModBusTermDef, Function: set\n"
"  Paramegers: (oaModBusTermDef,[oaByte])\n"
"    Calls: void set(oaModBusTermDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModBusTermDef,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModBusTermDef data;
    int convert_status=PyoaDataAppDef_oaModBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModBusTermDefObject* self=(PyoaDataAppDef_oaModBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModBusTermDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModBusTermDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusTermDef_isNull_doc[] =
"Class: oaDataAppDef_oaModBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModBusTermDef data;
    int convert_status=PyoaDataAppDef_oaModBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModBusTermDef_assign_doc[] = 
"Class: oaDataAppDef_oaModBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModBusTermDef data;
  int convert_status=PyoaDataAppDef_oaModBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModBusTermDef_get,METH_VARARGS,oaDataAppDef_oaModBusTermDef_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModBusTermDef_getDefault,METH_VARARGS,oaDataAppDef_oaModBusTermDef_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModBusTermDef_getSize,METH_VARARGS,oaDataAppDef_oaModBusTermDef_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModBusTermDef_set,METH_VARARGS,oaDataAppDef_oaModBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModBusTermDef_tp_isNull,METH_VARARGS,oaDataAppDef_oaModBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModBusTermDef_tp_assign,METH_VARARGS,oaDataAppDef_oaModBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusTermDef_doc[] = 
"Class: oaDataAppDef_oaModBusTermDef\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModBusTermDef)\n"
"    Calls: (const oaDataAppDef_oaModBusTermDef&)\n"
"    Signature: oaDataAppDef_oaModBusTermDef||cref-oaDataAppDef_oaModBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModBusTermDef",
    sizeof(PyoaDataAppDef_oaModBusTermDefObject),
    0,
    (destructor)oaDataAppDef_oaModBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusTermDef_static_find_doc[] = 
"Class: oaDataAppDef_oaModBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModBusTermDef|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModBusTermDefp result= (oaDataAppDef_oaModBusTermDef::find(p1.Data()));
            return PyoaDataAppDef_oaModBusTermDef_FromoaDataAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModBusTermDefp result= (oaDataAppDef_oaModBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModBusTermDef_FromoaDataAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModBusTermDef_static_get_doc[] = 
"Class: oaDataAppDef_oaModBusTermDef, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModBusTermDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModBusTermDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModBusTermDefp result= (oaDataAppDef_oaModBusTermDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModBusTermDef_FromoaDataAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModBusTermDefp result= (oaDataAppDef_oaModBusTermDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModBusTermDef_FromoaDataAppDef_oaModBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModBusTermDef, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModBusTermDef_static_find,METH_VARARGS,oaDataAppDef_oaModBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModBusTermDef_static_get,METH_VARARGS,oaDataAppDef_oaModBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModBusTermDef",
           (PyObject*)(&PyoaDataAppDef_oaModBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModBusTermDef_Type.tp_dict;
    for(method=oaDataAppDef_oaModBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModConnectDefObject* self = (PyoaDataAppDef_oaModConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModConnectDef)
    {
        PyParamoaDataAppDef_oaModConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModConnectDef_Convert,&p1)) {
            PyoaDataAppDef_oaModConnectDefObject* cself=((PyoaDataAppDef_oaModConnectDefObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModConnectDef, Choices are:\n"
        "    (oaDataAppDef_oaModConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModConnectDef_tp_dealloc(PyoaDataAppDef_oaModConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModConnectDef value;
    int convert_status=PyoaDataAppDef_oaModConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDataAppDef_oaModConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModConnectDef v1;
    PyParamoaDataAppDef_oaModConnectDef v2;
    int convert_status1=PyoaDataAppDef_oaModConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModConnectDef_Convert(PyObject* ob,PyParamoaDataAppDef_oaModConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModConnectDef_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModConnectDef**) ((PyoaDataAppDef_oaModConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModConnectDef_FromoaDataAppDef_oaModConnectDef(oaDataAppDef_oaModConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModConnectDef* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModConnectDef_Type.tp_alloc(&PyoaDataAppDef_oaModConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModConnectDefObject* self = (PyoaDataAppDef_oaModConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModConnectDef_FromoaDataAppDef_oaModConnectDef(oaDataAppDef_oaModConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModConnectDef_Type.tp_alloc(&PyoaDataAppDef_oaModConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModConnectDefObject* self = (PyoaDataAppDef_oaModConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModConnectDef_get_doc[] = 
"Class: oaDataAppDef_oaModConnectDef, Function: get\n"
"  Paramegers: (oaModConnectDef,[oaByte])\n"
"    Calls: void get(const oaModConnectDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModConnectDef,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModConnectDef data;
    int convert_status=PyoaDataAppDef_oaModConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModConnectDefObject* self=(PyoaDataAppDef_oaModConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModConnectDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModConnectDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModConnectDef_getDefault_doc[] = 
"Class: oaDataAppDef_oaModConnectDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModConnectDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModConnectDef data;
    int convert_status=PyoaDataAppDef_oaModConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModConnectDefObject* self=(PyoaDataAppDef_oaModConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModConnectDef_getSize_doc[] = 
"Class: oaDataAppDef_oaModConnectDef, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModConnectDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModConnectDef data;
    int convert_status=PyoaDataAppDef_oaModConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModConnectDefObject* self=(PyoaDataAppDef_oaModConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModConnectDef_set_doc[] = 
"Class: oaDataAppDef_oaModConnectDef, Function: set\n"
"  Paramegers: (oaModConnectDef,[oaByte])\n"
"    Calls: void set(oaModConnectDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModConnectDef,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModConnectDef data;
    int convert_status=PyoaDataAppDef_oaModConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModConnectDefObject* self=(PyoaDataAppDef_oaModConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModConnectDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModConnectDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModConnectDef_isNull_doc[] =
"Class: oaDataAppDef_oaModConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModConnectDef data;
    int convert_status=PyoaDataAppDef_oaModConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModConnectDef_assign_doc[] = 
"Class: oaDataAppDef_oaModConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModConnectDef data;
  int convert_status=PyoaDataAppDef_oaModConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModConnectDef_get,METH_VARARGS,oaDataAppDef_oaModConnectDef_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModConnectDef_getDefault,METH_VARARGS,oaDataAppDef_oaModConnectDef_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModConnectDef_getSize,METH_VARARGS,oaDataAppDef_oaModConnectDef_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModConnectDef_set,METH_VARARGS,oaDataAppDef_oaModConnectDef_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModConnectDef_tp_isNull,METH_VARARGS,oaDataAppDef_oaModConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModConnectDef_tp_assign,METH_VARARGS,oaDataAppDef_oaModConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModConnectDef_doc[] = 
"Class: oaDataAppDef_oaModConnectDef\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModConnectDef)\n"
"    Calls: (const oaDataAppDef_oaModConnectDef&)\n"
"    Signature: oaDataAppDef_oaModConnectDef||cref-oaDataAppDef_oaModConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModConnectDef",
    sizeof(PyoaDataAppDef_oaModConnectDefObject),
    0,
    (destructor)oaDataAppDef_oaModConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModConnectDef_static_find_doc[] = 
"Class: oaDataAppDef_oaModConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModConnectDef|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModConnectDefp result= (oaDataAppDef_oaModConnectDef::find(p1.Data()));
            return PyoaDataAppDef_oaModConnectDef_FromoaDataAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModConnectDefp result= (oaDataAppDef_oaModConnectDef::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModConnectDef_FromoaDataAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModConnectDef_static_get_doc[] = 
"Class: oaDataAppDef_oaModConnectDef, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModConnectDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModConnectDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModConnectDefp result= (oaDataAppDef_oaModConnectDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModConnectDef_FromoaDataAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModConnectDefp result= (oaDataAppDef_oaModConnectDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModConnectDef_FromoaDataAppDef_oaModConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModConnectDef, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModConnectDef_static_find,METH_VARARGS,oaDataAppDef_oaModConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModConnectDef_static_get,METH_VARARGS,oaDataAppDef_oaModConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModConnectDef",
           (PyObject*)(&PyoaDataAppDef_oaModConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModConnectDef_Type.tp_dict;
    for(method=oaDataAppDef_oaModConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModInstObject* self = (PyoaDataAppDef_oaModInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModInst)
    {
        PyParamoaDataAppDef_oaModInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModInst_Convert,&p1)) {
            PyoaDataAppDef_oaModInstObject* cself=((PyoaDataAppDef_oaModInstObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModInst, Choices are:\n"
        "    (oaDataAppDef_oaModInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModInst_tp_dealloc(PyoaDataAppDef_oaModInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModInst_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModInst value;
    int convert_status=PyoaDataAppDef_oaModInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDataAppDef_oaModInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModInst v1;
    PyParamoaDataAppDef_oaModInst v2;
    int convert_status1=PyoaDataAppDef_oaModInst_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModInst_Convert(PyObject* ob,PyParamoaDataAppDef_oaModInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModInst_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModInst**) ((PyoaDataAppDef_oaModInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModInst_FromoaDataAppDef_oaModInst(oaDataAppDef_oaModInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModInst* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModInst_Type.tp_alloc(&PyoaDataAppDef_oaModInst_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModInstObject* self = (PyoaDataAppDef_oaModInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModInst_FromoaDataAppDef_oaModInst(oaDataAppDef_oaModInst* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModInst_Type.tp_alloc(&PyoaDataAppDef_oaModInst_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModInstObject* self = (PyoaDataAppDef_oaModInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInst_get_doc[] = 
"Class: oaDataAppDef_oaModInst, Function: get\n"
"  Paramegers: (oaModInst,[oaByte])\n"
"    Calls: void get(const oaModInst* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModInst,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInst data;
    int convert_status=PyoaDataAppDef_oaModInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstObject* self=(PyoaDataAppDef_oaModInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInst_getDefault_doc[] = 
"Class: oaDataAppDef_oaModInst, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInst data;
    int convert_status=PyoaDataAppDef_oaModInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstObject* self=(PyoaDataAppDef_oaModInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInst_getSize_doc[] = 
"Class: oaDataAppDef_oaModInst, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModInst_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInst data;
    int convert_status=PyoaDataAppDef_oaModInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstObject* self=(PyoaDataAppDef_oaModInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInst_set_doc[] = 
"Class: oaDataAppDef_oaModInst, Function: set\n"
"  Paramegers: (oaModInst,[oaByte])\n"
"    Calls: void set(oaModInst* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModInst,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInst data;
    int convert_status=PyoaDataAppDef_oaModInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstObject* self=(PyoaDataAppDef_oaModInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInst_isNull_doc[] =
"Class: oaDataAppDef_oaModInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModInst data;
    int convert_status=PyoaDataAppDef_oaModInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModInst_assign_doc[] = 
"Class: oaDataAppDef_oaModInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModInst data;
  int convert_status=PyoaDataAppDef_oaModInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModInst_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModInst_get,METH_VARARGS,oaDataAppDef_oaModInst_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModInst_getDefault,METH_VARARGS,oaDataAppDef_oaModInst_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModInst_getSize,METH_VARARGS,oaDataAppDef_oaModInst_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModInst_set,METH_VARARGS,oaDataAppDef_oaModInst_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModInst_tp_isNull,METH_VARARGS,oaDataAppDef_oaModInst_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModInst_tp_assign,METH_VARARGS,oaDataAppDef_oaModInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInst_doc[] = 
"Class: oaDataAppDef_oaModInst\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModInst)\n"
"    Calls: (const oaDataAppDef_oaModInst&)\n"
"    Signature: oaDataAppDef_oaModInst||cref-oaDataAppDef_oaModInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModInst",
    sizeof(PyoaDataAppDef_oaModInstObject),
    0,
    (destructor)oaDataAppDef_oaModInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModInst_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInst_static_find_doc[] = 
"Class: oaDataAppDef_oaModInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModInst|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModInstp result= (oaDataAppDef_oaModInst::find(p1.Data()));
            return PyoaDataAppDef_oaModInst_FromoaDataAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModInstp result= (oaDataAppDef_oaModInst::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModInst_FromoaDataAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInst_static_get_doc[] = 
"Class: oaDataAppDef_oaModInst, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModInst* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModInst|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModInst* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModInst|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModInstp result= (oaDataAppDef_oaModInst::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModInst_FromoaDataAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModInstp result= (oaDataAppDef_oaModInst::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModInst_FromoaDataAppDef_oaModInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModInst, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModInst_static_find,METH_VARARGS,oaDataAppDef_oaModInst_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModInst_static_get,METH_VARARGS,oaDataAppDef_oaModInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModInst_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModInst",
           (PyObject*)(&PyoaDataAppDef_oaModInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModInst_Type.tp_dict;
    for(method=oaDataAppDef_oaModInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModInstHeaderObject* self = (PyoaDataAppDef_oaModInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModInstHeader)
    {
        PyParamoaDataAppDef_oaModInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModInstHeader_Convert,&p1)) {
            PyoaDataAppDef_oaModInstHeaderObject* cself=((PyoaDataAppDef_oaModInstHeaderObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModInstHeader, Choices are:\n"
        "    (oaDataAppDef_oaModInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModInstHeader_tp_dealloc(PyoaDataAppDef_oaModInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModInstHeader value;
    int convert_status=PyoaDataAppDef_oaModInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDataAppDef_oaModInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModInstHeader v1;
    PyParamoaDataAppDef_oaModInstHeader v2;
    int convert_status1=PyoaDataAppDef_oaModInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModInstHeader_Convert(PyObject* ob,PyParamoaDataAppDef_oaModInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModInstHeader_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModInstHeader**) ((PyoaDataAppDef_oaModInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModInstHeader_FromoaDataAppDef_oaModInstHeader(oaDataAppDef_oaModInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModInstHeader* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModInstHeader_Type.tp_alloc(&PyoaDataAppDef_oaModInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModInstHeaderObject* self = (PyoaDataAppDef_oaModInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModInstHeader_FromoaDataAppDef_oaModInstHeader(oaDataAppDef_oaModInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModInstHeader_Type.tp_alloc(&PyoaDataAppDef_oaModInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModInstHeaderObject* self = (PyoaDataAppDef_oaModInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstHeader_get_doc[] = 
"Class: oaDataAppDef_oaModInstHeader, Function: get\n"
"  Paramegers: (oaModInstHeader,[oaByte])\n"
"    Calls: void get(const oaModInstHeader* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModInstHeader,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInstHeader data;
    int convert_status=PyoaDataAppDef_oaModInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstHeaderObject* self=(PyoaDataAppDef_oaModInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInstHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstHeader_getDefault_doc[] = 
"Class: oaDataAppDef_oaModInstHeader, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInstHeader data;
    int convert_status=PyoaDataAppDef_oaModInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstHeaderObject* self=(PyoaDataAppDef_oaModInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstHeader_getSize_doc[] = 
"Class: oaDataAppDef_oaModInstHeader, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModInstHeader_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInstHeader data;
    int convert_status=PyoaDataAppDef_oaModInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstHeaderObject* self=(PyoaDataAppDef_oaModInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstHeader_set_doc[] = 
"Class: oaDataAppDef_oaModInstHeader, Function: set\n"
"  Paramegers: (oaModInstHeader,[oaByte])\n"
"    Calls: void set(oaModInstHeader* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModInstHeader,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInstHeader data;
    int convert_status=PyoaDataAppDef_oaModInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstHeaderObject* self=(PyoaDataAppDef_oaModInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInstHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstHeader_isNull_doc[] =
"Class: oaDataAppDef_oaModInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModInstHeader data;
    int convert_status=PyoaDataAppDef_oaModInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModInstHeader_assign_doc[] = 
"Class: oaDataAppDef_oaModInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModInstHeader data;
  int convert_status=PyoaDataAppDef_oaModInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModInstHeader_get,METH_VARARGS,oaDataAppDef_oaModInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModInstHeader_getDefault,METH_VARARGS,oaDataAppDef_oaModInstHeader_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModInstHeader_getSize,METH_VARARGS,oaDataAppDef_oaModInstHeader_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModInstHeader_set,METH_VARARGS,oaDataAppDef_oaModInstHeader_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModInstHeader_tp_isNull,METH_VARARGS,oaDataAppDef_oaModInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModInstHeader_tp_assign,METH_VARARGS,oaDataAppDef_oaModInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstHeader_doc[] = 
"Class: oaDataAppDef_oaModInstHeader\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModInstHeader)\n"
"    Calls: (const oaDataAppDef_oaModInstHeader&)\n"
"    Signature: oaDataAppDef_oaModInstHeader||cref-oaDataAppDef_oaModInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModInstHeader",
    sizeof(PyoaDataAppDef_oaModInstHeaderObject),
    0,
    (destructor)oaDataAppDef_oaModInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstHeader_static_find_doc[] = 
"Class: oaDataAppDef_oaModInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModInstHeader|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModInstHeaderp result= (oaDataAppDef_oaModInstHeader::find(p1.Data()));
            return PyoaDataAppDef_oaModInstHeader_FromoaDataAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModInstHeaderp result= (oaDataAppDef_oaModInstHeader::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModInstHeader_FromoaDataAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstHeader_static_get_doc[] = 
"Class: oaDataAppDef_oaModInstHeader, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModInstHeader* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModInstHeader|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModInstHeaderp result= (oaDataAppDef_oaModInstHeader::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModInstHeader_FromoaDataAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModInstHeaderp result= (oaDataAppDef_oaModInstHeader::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModInstHeader_FromoaDataAppDef_oaModInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModInstHeader, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModInstHeader_static_find,METH_VARARGS,oaDataAppDef_oaModInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModInstHeader_static_get,METH_VARARGS,oaDataAppDef_oaModInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModInstHeader",
           (PyObject*)(&PyoaDataAppDef_oaModInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModInstHeader_Type.tp_dict;
    for(method=oaDataAppDef_oaModInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModInstTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModInstTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModInstTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModInstTermObject* self = (PyoaDataAppDef_oaModInstTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModInstTerm)
    {
        PyParamoaDataAppDef_oaModInstTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModInstTerm_Convert,&p1)) {
            PyoaDataAppDef_oaModInstTermObject* cself=((PyoaDataAppDef_oaModInstTermObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModInstTerm, Choices are:\n"
        "    (oaDataAppDef_oaModInstTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModInstTerm_tp_dealloc(PyoaDataAppDef_oaModInstTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModInstTerm_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModInstTerm value;
    int convert_status=PyoaDataAppDef_oaModInstTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaDataAppDef_oaModInstTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModInstTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModInstTerm v1;
    PyParamoaDataAppDef_oaModInstTerm v2;
    int convert_status1=PyoaDataAppDef_oaModInstTerm_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModInstTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModInstTerm_Convert(PyObject* ob,PyParamoaDataAppDef_oaModInstTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModInstTerm_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModInstTerm**) ((PyoaDataAppDef_oaModInstTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModInstTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModInstTerm_FromoaDataAppDef_oaModInstTerm(oaDataAppDef_oaModInstTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModInstTerm* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModInstTerm_Type.tp_alloc(&PyoaDataAppDef_oaModInstTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModInstTermObject* self = (PyoaDataAppDef_oaModInstTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModInstTerm_FromoaDataAppDef_oaModInstTerm(oaDataAppDef_oaModInstTerm* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModInstTerm_Type.tp_alloc(&PyoaDataAppDef_oaModInstTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModInstTermObject* self = (PyoaDataAppDef_oaModInstTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstTerm_get_doc[] = 
"Class: oaDataAppDef_oaModInstTerm, Function: get\n"
"  Paramegers: (oaModInstTerm,[oaByte])\n"
"    Calls: void get(const oaModInstTerm* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModInstTerm,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModInstTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInstTerm data;
    int convert_status=PyoaDataAppDef_oaModInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstTermObject* self=(PyoaDataAppDef_oaModInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInstTerm p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstTerm_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstTerm_getDefault_doc[] = 
"Class: oaDataAppDef_oaModInstTerm, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModInstTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInstTerm data;
    int convert_status=PyoaDataAppDef_oaModInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstTermObject* self=(PyoaDataAppDef_oaModInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstTerm_getSize_doc[] = 
"Class: oaDataAppDef_oaModInstTerm, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModInstTerm_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInstTerm data;
    int convert_status=PyoaDataAppDef_oaModInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstTermObject* self=(PyoaDataAppDef_oaModInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstTerm_set_doc[] = 
"Class: oaDataAppDef_oaModInstTerm, Function: set\n"
"  Paramegers: (oaModInstTerm,[oaByte])\n"
"    Calls: void set(oaModInstTerm* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModInstTerm,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModInstTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModInstTerm data;
    int convert_status=PyoaDataAppDef_oaModInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModInstTermObject* self=(PyoaDataAppDef_oaModInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInstTerm p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstTerm_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstTerm_isNull_doc[] =
"Class: oaDataAppDef_oaModInstTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModInstTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModInstTerm data;
    int convert_status=PyoaDataAppDef_oaModInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModInstTerm_assign_doc[] = 
"Class: oaDataAppDef_oaModInstTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModInstTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModInstTerm data;
  int convert_status=PyoaDataAppDef_oaModInstTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModInstTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModInstTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModInstTerm_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModInstTerm_get,METH_VARARGS,oaDataAppDef_oaModInstTerm_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModInstTerm_getDefault,METH_VARARGS,oaDataAppDef_oaModInstTerm_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModInstTerm_getSize,METH_VARARGS,oaDataAppDef_oaModInstTerm_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModInstTerm_set,METH_VARARGS,oaDataAppDef_oaModInstTerm_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModInstTerm_tp_isNull,METH_VARARGS,oaDataAppDef_oaModInstTerm_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModInstTerm_tp_assign,METH_VARARGS,oaDataAppDef_oaModInstTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstTerm_doc[] = 
"Class: oaDataAppDef_oaModInstTerm\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModInstTerm)\n"
"    Calls: (const oaDataAppDef_oaModInstTerm&)\n"
"    Signature: oaDataAppDef_oaModInstTerm||cref-oaDataAppDef_oaModInstTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModInstTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModInstTerm",
    sizeof(PyoaDataAppDef_oaModInstTermObject),
    0,
    (destructor)oaDataAppDef_oaModInstTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModInstTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModInstTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModInstTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModInstTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModInstTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstTerm_static_find_doc[] = 
"Class: oaDataAppDef_oaModInstTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModInstTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModInstTerm|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModInstTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModInstTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModInstTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModInstTermp result= (oaDataAppDef_oaModInstTerm::find(p1.Data()));
            return PyoaDataAppDef_oaModInstTerm_FromoaDataAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModInstTermp result= (oaDataAppDef_oaModInstTerm::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModInstTerm_FromoaDataAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModInstTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModInstTerm_static_get_doc[] = 
"Class: oaDataAppDef_oaModInstTerm, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModInstTerm* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModInstTerm|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModInstTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModInstTermp result= (oaDataAppDef_oaModInstTerm::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModInstTerm_FromoaDataAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModInstTermp result= (oaDataAppDef_oaModInstTerm::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModInstTerm_FromoaDataAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModInstTerm, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModInstTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModInstTerm_static_find,METH_VARARGS,oaDataAppDef_oaModInstTerm_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModInstTerm_static_get,METH_VARARGS,oaDataAppDef_oaModInstTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModInstTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModInstTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModInstTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModInstTerm",
           (PyObject*)(&PyoaDataAppDef_oaModInstTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModInstTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModInstTerm_Type.tp_dict;
    for(method=oaDataAppDef_oaModInstTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModModuleInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModModuleInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModModuleInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModModuleInstHeaderObject* self = (PyoaDataAppDef_oaModModuleInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModModuleInstHeader)
    {
        PyParamoaDataAppDef_oaModModuleInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModModuleInstHeader_Convert,&p1)) {
            PyoaDataAppDef_oaModModuleInstHeaderObject* cself=((PyoaDataAppDef_oaModModuleInstHeaderObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModModuleInstHeader, Choices are:\n"
        "    (oaDataAppDef_oaModModuleInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModModuleInstHeader_tp_dealloc(PyoaDataAppDef_oaModModuleInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModModuleInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModModuleInstHeader value;
    int convert_status=PyoaDataAppDef_oaModModuleInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[56];
    sprintf(buffer,"<oaDataAppDef_oaModModuleInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModModuleInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModModuleInstHeader v1;
    PyParamoaDataAppDef_oaModModuleInstHeader v2;
    int convert_status1=PyoaDataAppDef_oaModModuleInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModModuleInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModModuleInstHeader_Convert(PyObject* ob,PyParamoaDataAppDef_oaModModuleInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModModuleInstHeader_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModModuleInstHeader**) ((PyoaDataAppDef_oaModModuleInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModModuleInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModModuleInstHeader_FromoaDataAppDef_oaModModuleInstHeader(oaDataAppDef_oaModModuleInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModModuleInstHeader* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModModuleInstHeader_Type.tp_alloc(&PyoaDataAppDef_oaModModuleInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModModuleInstHeaderObject* self = (PyoaDataAppDef_oaModModuleInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModModuleInstHeader_FromoaDataAppDef_oaModModuleInstHeader(oaDataAppDef_oaModModuleInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModModuleInstHeader_Type.tp_alloc(&PyoaDataAppDef_oaModModuleInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModModuleInstHeaderObject* self = (PyoaDataAppDef_oaModModuleInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModModuleInstHeader_get_doc[] = 
"Class: oaDataAppDef_oaModModuleInstHeader, Function: get\n"
"  Paramegers: (oaModModuleInstHeader,[oaByte])\n"
"    Calls: void get(const oaModModuleInstHeader* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModModuleInstHeader,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModModuleInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModModuleInstHeader data;
    int convert_status=PyoaDataAppDef_oaModModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModModuleInstHeaderObject* self=(PyoaDataAppDef_oaModModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModModuleInstHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInstHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModModuleInstHeader_getDefault_doc[] = 
"Class: oaDataAppDef_oaModModuleInstHeader, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModModuleInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModModuleInstHeader data;
    int convert_status=PyoaDataAppDef_oaModModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModModuleInstHeaderObject* self=(PyoaDataAppDef_oaModModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModModuleInstHeader_getSize_doc[] = 
"Class: oaDataAppDef_oaModModuleInstHeader, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModModuleInstHeader_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModModuleInstHeader data;
    int convert_status=PyoaDataAppDef_oaModModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModModuleInstHeaderObject* self=(PyoaDataAppDef_oaModModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModModuleInstHeader_set_doc[] = 
"Class: oaDataAppDef_oaModModuleInstHeader, Function: set\n"
"  Paramegers: (oaModModuleInstHeader,[oaByte])\n"
"    Calls: void set(oaModModuleInstHeader* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModModuleInstHeader,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModModuleInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModModuleInstHeader data;
    int convert_status=PyoaDataAppDef_oaModModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModModuleInstHeaderObject* self=(PyoaDataAppDef_oaModModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModModuleInstHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInstHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModModuleInstHeader_isNull_doc[] =
"Class: oaDataAppDef_oaModModuleInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModModuleInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModModuleInstHeader data;
    int convert_status=PyoaDataAppDef_oaModModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModModuleInstHeader_assign_doc[] = 
"Class: oaDataAppDef_oaModModuleInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModModuleInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModModuleInstHeader data;
  int convert_status=PyoaDataAppDef_oaModModuleInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModModuleInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModModuleInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModModuleInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModModuleInstHeader_get,METH_VARARGS,oaDataAppDef_oaModModuleInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModModuleInstHeader_getDefault,METH_VARARGS,oaDataAppDef_oaModModuleInstHeader_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModModuleInstHeader_getSize,METH_VARARGS,oaDataAppDef_oaModModuleInstHeader_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModModuleInstHeader_set,METH_VARARGS,oaDataAppDef_oaModModuleInstHeader_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModModuleInstHeader_tp_isNull,METH_VARARGS,oaDataAppDef_oaModModuleInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModModuleInstHeader_tp_assign,METH_VARARGS,oaDataAppDef_oaModModuleInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModModuleInstHeader_doc[] = 
"Class: oaDataAppDef_oaModModuleInstHeader\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModModuleInstHeader)\n"
"    Calls: (const oaDataAppDef_oaModModuleInstHeader&)\n"
"    Signature: oaDataAppDef_oaModModuleInstHeader||cref-oaDataAppDef_oaModModuleInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModModuleInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModModuleInstHeader",
    sizeof(PyoaDataAppDef_oaModModuleInstHeaderObject),
    0,
    (destructor)oaDataAppDef_oaModModuleInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModModuleInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModModuleInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModModuleInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModModuleInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModModuleInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModModuleInstHeader_static_find_doc[] = 
"Class: oaDataAppDef_oaModModuleInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModModuleInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModModuleInstHeader|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModModuleInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModModuleInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModModuleInstHeaderp result= (oaDataAppDef_oaModModuleInstHeader::find(p1.Data()));
            return PyoaDataAppDef_oaModModuleInstHeader_FromoaDataAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModModuleInstHeaderp result= (oaDataAppDef_oaModModuleInstHeader::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModModuleInstHeader_FromoaDataAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModModuleInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModModuleInstHeader_static_get_doc[] = 
"Class: oaDataAppDef_oaModModuleInstHeader, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModModuleInstHeader* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModModuleInstHeader|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModModuleInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModModuleInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModModuleInstHeaderp result= (oaDataAppDef_oaModModuleInstHeader::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModModuleInstHeader_FromoaDataAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModModuleInstHeaderp result= (oaDataAppDef_oaModModuleInstHeader::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModModuleInstHeader_FromoaDataAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModModuleInstHeader, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModModuleInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModModuleInstHeader_static_find,METH_VARARGS,oaDataAppDef_oaModModuleInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModModuleInstHeader_static_get,METH_VARARGS,oaDataAppDef_oaModModuleInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModModuleInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModModuleInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModModuleInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModModuleInstHeader",
           (PyObject*)(&PyoaDataAppDef_oaModModuleInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModModuleInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModModuleInstHeader_Type.tp_dict;
    for(method=oaDataAppDef_oaModModuleInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModNet
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModNet_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModNet_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModNetObject* self = (PyoaDataAppDef_oaModNetObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModNet)
    {
        PyParamoaDataAppDef_oaModNet p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModNet_Convert,&p1)) {
            PyoaDataAppDef_oaModNetObject* cself=((PyoaDataAppDef_oaModNetObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModNet, Choices are:\n"
        "    (oaDataAppDef_oaModNet)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModNet_tp_dealloc(PyoaDataAppDef_oaModNetObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModNet_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModNet value;
    int convert_status=PyoaDataAppDef_oaModNet_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaDataAppDef_oaModNet::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModNet_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModNet v1;
    PyParamoaDataAppDef_oaModNet v2;
    int convert_status1=PyoaDataAppDef_oaModNet_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModNet_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModNet_Convert(PyObject* ob,PyParamoaDataAppDef_oaModNet* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModNet_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModNet**) ((PyoaDataAppDef_oaModNetObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModNet Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModNet_FromoaDataAppDef_oaModNet(oaDataAppDef_oaModNet** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModNet* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModNet_Type.tp_alloc(&PyoaDataAppDef_oaModNet_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModNetObject* self = (PyoaDataAppDef_oaModNetObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModNet_FromoaDataAppDef_oaModNet(oaDataAppDef_oaModNet* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModNet_Type.tp_alloc(&PyoaDataAppDef_oaModNet_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModNetObject* self = (PyoaDataAppDef_oaModNetObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModNet_get_doc[] = 
"Class: oaDataAppDef_oaModNet, Function: get\n"
"  Paramegers: (oaModNet,[oaByte])\n"
"    Calls: void get(const oaModNet* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModNet,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModNet_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModNet data;
    int convert_status=PyoaDataAppDef_oaModNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModNetObject* self=(PyoaDataAppDef_oaModNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModNet p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNet_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModNet_getDefault_doc[] = 
"Class: oaDataAppDef_oaModNet, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModNet_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModNet data;
    int convert_status=PyoaDataAppDef_oaModNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModNetObject* self=(PyoaDataAppDef_oaModNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModNet_getSize_doc[] = 
"Class: oaDataAppDef_oaModNet, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModNet_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModNet data;
    int convert_status=PyoaDataAppDef_oaModNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModNetObject* self=(PyoaDataAppDef_oaModNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModNet_set_doc[] = 
"Class: oaDataAppDef_oaModNet, Function: set\n"
"  Paramegers: (oaModNet,[oaByte])\n"
"    Calls: void set(oaModNet* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModNet,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModNet_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModNet data;
    int convert_status=PyoaDataAppDef_oaModNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModNetObject* self=(PyoaDataAppDef_oaModNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModNet p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNet_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModNet_isNull_doc[] =
"Class: oaDataAppDef_oaModNet, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModNet_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModNet data;
    int convert_status=PyoaDataAppDef_oaModNet_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModNet_assign_doc[] = 
"Class: oaDataAppDef_oaModNet, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModNet_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModNet data;
  int convert_status=PyoaDataAppDef_oaModNet_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModNet p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModNet_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModNet_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModNet_get,METH_VARARGS,oaDataAppDef_oaModNet_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModNet_getDefault,METH_VARARGS,oaDataAppDef_oaModNet_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModNet_getSize,METH_VARARGS,oaDataAppDef_oaModNet_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModNet_set,METH_VARARGS,oaDataAppDef_oaModNet_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModNet_tp_isNull,METH_VARARGS,oaDataAppDef_oaModNet_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModNet_tp_assign,METH_VARARGS,oaDataAppDef_oaModNet_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModNet_doc[] = 
"Class: oaDataAppDef_oaModNet\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModNet)\n"
"    Calls: (const oaDataAppDef_oaModNet&)\n"
"    Signature: oaDataAppDef_oaModNet||cref-oaDataAppDef_oaModNet,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModNet_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModNet",
    sizeof(PyoaDataAppDef_oaModNetObject),
    0,
    (destructor)oaDataAppDef_oaModNet_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModNet_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModNet_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModNet_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModNet_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModNet_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModNet_static_find_doc[] = 
"Class: oaDataAppDef_oaModNet, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModNet* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModNet|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModNet* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModNet|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModNet_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModNetp result= (oaDataAppDef_oaModNet::find(p1.Data()));
            return PyoaDataAppDef_oaModNet_FromoaDataAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModNetp result= (oaDataAppDef_oaModNet::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModNet_FromoaDataAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModNet, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModNet_static_get_doc[] = 
"Class: oaDataAppDef_oaModNet, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModNet* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModNet|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModNet* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModNet|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModNet_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModNetp result= (oaDataAppDef_oaModNet::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModNet_FromoaDataAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModNetp result= (oaDataAppDef_oaModNet::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModNet_FromoaDataAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModNet, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModNet_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModNet_static_find,METH_VARARGS,oaDataAppDef_oaModNet_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModNet_static_get,METH_VARARGS,oaDataAppDef_oaModNet_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModNet_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModNet_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModNet\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModNet",
           (PyObject*)(&PyoaDataAppDef_oaModNet_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModNet\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModNet_Type.tp_dict;
    for(method=oaDataAppDef_oaModNet_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModTermObject* self = (PyoaDataAppDef_oaModTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModTerm)
    {
        PyParamoaDataAppDef_oaModTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModTerm_Convert,&p1)) {
            PyoaDataAppDef_oaModTermObject* cself=((PyoaDataAppDef_oaModTermObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModTerm, Choices are:\n"
        "    (oaDataAppDef_oaModTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModTerm_tp_dealloc(PyoaDataAppDef_oaModTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModTerm_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModTerm value;
    int convert_status=PyoaDataAppDef_oaModTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDataAppDef_oaModTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModTerm v1;
    PyParamoaDataAppDef_oaModTerm v2;
    int convert_status1=PyoaDataAppDef_oaModTerm_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModTerm_Convert(PyObject* ob,PyParamoaDataAppDef_oaModTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModTerm_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModTerm**) ((PyoaDataAppDef_oaModTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModTerm_FromoaDataAppDef_oaModTerm(oaDataAppDef_oaModTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModTerm* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModTerm_Type.tp_alloc(&PyoaDataAppDef_oaModTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModTermObject* self = (PyoaDataAppDef_oaModTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModTerm_FromoaDataAppDef_oaModTerm(oaDataAppDef_oaModTerm* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModTerm_Type.tp_alloc(&PyoaDataAppDef_oaModTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModTermObject* self = (PyoaDataAppDef_oaModTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModTerm_get_doc[] = 
"Class: oaDataAppDef_oaModTerm, Function: get\n"
"  Paramegers: (oaModTerm,[oaByte])\n"
"    Calls: void get(const oaModTerm* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModTerm,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModTerm data;
    int convert_status=PyoaDataAppDef_oaModTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModTermObject* self=(PyoaDataAppDef_oaModTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModTerm p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTerm_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModTerm_getDefault_doc[] = 
"Class: oaDataAppDef_oaModTerm, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModTerm data;
    int convert_status=PyoaDataAppDef_oaModTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModTermObject* self=(PyoaDataAppDef_oaModTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModTerm_getSize_doc[] = 
"Class: oaDataAppDef_oaModTerm, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModTerm_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModTerm data;
    int convert_status=PyoaDataAppDef_oaModTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModTermObject* self=(PyoaDataAppDef_oaModTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModTerm_set_doc[] = 
"Class: oaDataAppDef_oaModTerm, Function: set\n"
"  Paramegers: (oaModTerm,[oaByte])\n"
"    Calls: void set(oaModTerm* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModTerm,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModTerm data;
    int convert_status=PyoaDataAppDef_oaModTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModTermObject* self=(PyoaDataAppDef_oaModTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModTerm p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTerm_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModTerm_isNull_doc[] =
"Class: oaDataAppDef_oaModTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModTerm data;
    int convert_status=PyoaDataAppDef_oaModTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModTerm_assign_doc[] = 
"Class: oaDataAppDef_oaModTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModTerm data;
  int convert_status=PyoaDataAppDef_oaModTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModTerm_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModTerm_get,METH_VARARGS,oaDataAppDef_oaModTerm_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModTerm_getDefault,METH_VARARGS,oaDataAppDef_oaModTerm_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModTerm_getSize,METH_VARARGS,oaDataAppDef_oaModTerm_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModTerm_set,METH_VARARGS,oaDataAppDef_oaModTerm_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModTerm_tp_isNull,METH_VARARGS,oaDataAppDef_oaModTerm_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModTerm_tp_assign,METH_VARARGS,oaDataAppDef_oaModTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModTerm_doc[] = 
"Class: oaDataAppDef_oaModTerm\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModTerm)\n"
"    Calls: (const oaDataAppDef_oaModTerm&)\n"
"    Signature: oaDataAppDef_oaModTerm||cref-oaDataAppDef_oaModTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModTerm",
    sizeof(PyoaDataAppDef_oaModTermObject),
    0,
    (destructor)oaDataAppDef_oaModTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModTerm_static_find_doc[] = 
"Class: oaDataAppDef_oaModTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModTerm|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModTermp result= (oaDataAppDef_oaModTerm::find(p1.Data()));
            return PyoaDataAppDef_oaModTerm_FromoaDataAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModTermp result= (oaDataAppDef_oaModTerm::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModTerm_FromoaDataAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModTerm_static_get_doc[] = 
"Class: oaDataAppDef_oaModTerm, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModTerm* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModTerm|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModTerm* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModTermp result= (oaDataAppDef_oaModTerm::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModTerm_FromoaDataAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModTermp result= (oaDataAppDef_oaModTerm::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModTerm_FromoaDataAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModTerm, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModTerm_static_find,METH_VARARGS,oaDataAppDef_oaModTerm_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModTerm_static_get,METH_VARARGS,oaDataAppDef_oaModTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModTerm",
           (PyObject*)(&PyoaDataAppDef_oaModTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModTerm_Type.tp_dict;
    for(method=oaDataAppDef_oaModTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModVectorInstDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModVectorInstDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModVectorInstDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModVectorInstDefObject* self = (PyoaDataAppDef_oaModVectorInstDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModVectorInstDef)
    {
        PyParamoaDataAppDef_oaModVectorInstDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModVectorInstDef_Convert,&p1)) {
            PyoaDataAppDef_oaModVectorInstDefObject* cself=((PyoaDataAppDef_oaModVectorInstDefObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModVectorInstDef, Choices are:\n"
        "    (oaDataAppDef_oaModVectorInstDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModVectorInstDef_tp_dealloc(PyoaDataAppDef_oaModVectorInstDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModVectorInstDef_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModVectorInstDef value;
    int convert_status=PyoaDataAppDef_oaModVectorInstDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaDataAppDef_oaModVectorInstDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModVectorInstDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModVectorInstDef v1;
    PyParamoaDataAppDef_oaModVectorInstDef v2;
    int convert_status1=PyoaDataAppDef_oaModVectorInstDef_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModVectorInstDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModVectorInstDef_Convert(PyObject* ob,PyParamoaDataAppDef_oaModVectorInstDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModVectorInstDef_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModVectorInstDef**) ((PyoaDataAppDef_oaModVectorInstDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModVectorInstDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModVectorInstDef_FromoaDataAppDef_oaModVectorInstDef(oaDataAppDef_oaModVectorInstDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModVectorInstDef* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModVectorInstDef_Type.tp_alloc(&PyoaDataAppDef_oaModVectorInstDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModVectorInstDefObject* self = (PyoaDataAppDef_oaModVectorInstDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModVectorInstDef_FromoaDataAppDef_oaModVectorInstDef(oaDataAppDef_oaModVectorInstDef* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModVectorInstDef_Type.tp_alloc(&PyoaDataAppDef_oaModVectorInstDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModVectorInstDefObject* self = (PyoaDataAppDef_oaModVectorInstDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModVectorInstDef_get_doc[] = 
"Class: oaDataAppDef_oaModVectorInstDef, Function: get\n"
"  Paramegers: (oaModVectorInstDef,[oaByte])\n"
"    Calls: void get(const oaModVectorInstDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModVectorInstDef,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModVectorInstDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModVectorInstDef data;
    int convert_status=PyoaDataAppDef_oaModVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModVectorInstDefObject* self=(PyoaDataAppDef_oaModVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModVectorInstDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModVectorInstDef_getDefault_doc[] = 
"Class: oaDataAppDef_oaModVectorInstDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModVectorInstDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModVectorInstDef data;
    int convert_status=PyoaDataAppDef_oaModVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModVectorInstDefObject* self=(PyoaDataAppDef_oaModVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModVectorInstDef_getSize_doc[] = 
"Class: oaDataAppDef_oaModVectorInstDef, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModVectorInstDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModVectorInstDef data;
    int convert_status=PyoaDataAppDef_oaModVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModVectorInstDefObject* self=(PyoaDataAppDef_oaModVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModVectorInstDef_set_doc[] = 
"Class: oaDataAppDef_oaModVectorInstDef, Function: set\n"
"  Paramegers: (oaModVectorInstDef,[oaByte])\n"
"    Calls: void set(oaModVectorInstDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModVectorInstDef,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModVectorInstDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModVectorInstDef data;
    int convert_status=PyoaDataAppDef_oaModVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModVectorInstDefObject* self=(PyoaDataAppDef_oaModVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModVectorInstDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModVectorInstDef_isNull_doc[] =
"Class: oaDataAppDef_oaModVectorInstDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModVectorInstDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModVectorInstDef data;
    int convert_status=PyoaDataAppDef_oaModVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModVectorInstDef_assign_doc[] = 
"Class: oaDataAppDef_oaModVectorInstDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModVectorInstDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModVectorInstDef data;
  int convert_status=PyoaDataAppDef_oaModVectorInstDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModVectorInstDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModVectorInstDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModVectorInstDef_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModVectorInstDef_get,METH_VARARGS,oaDataAppDef_oaModVectorInstDef_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModVectorInstDef_getDefault,METH_VARARGS,oaDataAppDef_oaModVectorInstDef_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModVectorInstDef_getSize,METH_VARARGS,oaDataAppDef_oaModVectorInstDef_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModVectorInstDef_set,METH_VARARGS,oaDataAppDef_oaModVectorInstDef_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModVectorInstDef_tp_isNull,METH_VARARGS,oaDataAppDef_oaModVectorInstDef_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModVectorInstDef_tp_assign,METH_VARARGS,oaDataAppDef_oaModVectorInstDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModVectorInstDef_doc[] = 
"Class: oaDataAppDef_oaModVectorInstDef\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModVectorInstDef)\n"
"    Calls: (const oaDataAppDef_oaModVectorInstDef&)\n"
"    Signature: oaDataAppDef_oaModVectorInstDef||cref-oaDataAppDef_oaModVectorInstDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModVectorInstDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModVectorInstDef",
    sizeof(PyoaDataAppDef_oaModVectorInstDefObject),
    0,
    (destructor)oaDataAppDef_oaModVectorInstDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModVectorInstDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModVectorInstDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModVectorInstDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModVectorInstDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModVectorInstDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModVectorInstDef_static_find_doc[] = 
"Class: oaDataAppDef_oaModVectorInstDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModVectorInstDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModVectorInstDef|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModVectorInstDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModVectorInstDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModVectorInstDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModVectorInstDefp result= (oaDataAppDef_oaModVectorInstDef::find(p1.Data()));
            return PyoaDataAppDef_oaModVectorInstDef_FromoaDataAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModVectorInstDefp result= (oaDataAppDef_oaModVectorInstDef::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModVectorInstDef_FromoaDataAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModVectorInstDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModVectorInstDef_static_get_doc[] = 
"Class: oaDataAppDef_oaModVectorInstDef, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModVectorInstDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModVectorInstDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModVectorInstDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModVectorInstDefp result= (oaDataAppDef_oaModVectorInstDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModVectorInstDef_FromoaDataAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModVectorInstDefp result= (oaDataAppDef_oaModVectorInstDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModVectorInstDef_FromoaDataAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModVectorInstDef, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModVectorInstDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModVectorInstDef_static_find,METH_VARARGS,oaDataAppDef_oaModVectorInstDef_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModVectorInstDef_static_get,METH_VARARGS,oaDataAppDef_oaModVectorInstDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModVectorInstDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModVectorInstDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModVectorInstDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModVectorInstDef",
           (PyObject*)(&PyoaDataAppDef_oaModVectorInstDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModVectorInstDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModVectorInstDef_Type.tp_dict;
    for(method=oaDataAppDef_oaModVectorInstDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaModule
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModule_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaModule_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaModuleObject* self = (PyoaDataAppDef_oaModuleObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaModule)
    {
        PyParamoaDataAppDef_oaModule p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaModule_Convert,&p1)) {
            PyoaDataAppDef_oaModuleObject* cself=((PyoaDataAppDef_oaModuleObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaModule, Choices are:\n"
        "    (oaDataAppDef_oaModule)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaModule_tp_dealloc(PyoaDataAppDef_oaModuleObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaModule_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaModule value;
    int convert_status=PyoaDataAppDef_oaModule_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaDataAppDef_oaModule::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaModule_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaModule v1;
    PyParamoaDataAppDef_oaModule v2;
    int convert_status1=PyoaDataAppDef_oaModule_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaModule_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaModule_Convert(PyObject* ob,PyParamoaDataAppDef_oaModule* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaModule_Check(ob)) {
        result->SetData( (oaDataAppDef_oaModule**) ((PyoaDataAppDef_oaModuleObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaModule Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModule_FromoaDataAppDef_oaModule(oaDataAppDef_oaModule** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaModule* data=*value;
        PyObject* bself = PyoaDataAppDef_oaModule_Type.tp_alloc(&PyoaDataAppDef_oaModule_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaModuleObject* self = (PyoaDataAppDef_oaModuleObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaModule_FromoaDataAppDef_oaModule(oaDataAppDef_oaModule* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaModule_Type.tp_alloc(&PyoaDataAppDef_oaModule_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaModuleObject* self = (PyoaDataAppDef_oaModuleObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModule_get_doc[] = 
"Class: oaDataAppDef_oaModule, Function: get\n"
"  Paramegers: (oaModule,[oaByte])\n"
"    Calls: void get(const oaModule* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaModule,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModule_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModule data;
    int convert_status=PyoaDataAppDef_oaModule_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModuleObject* self=(PyoaDataAppDef_oaModuleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModule p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModule_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModule_getDefault_doc[] = 
"Class: oaDataAppDef_oaModule, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaModule_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModule data;
    int convert_status=PyoaDataAppDef_oaModule_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModuleObject* self=(PyoaDataAppDef_oaModuleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModule_getSize_doc[] = 
"Class: oaDataAppDef_oaModule, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaModule_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModule data;
    int convert_status=PyoaDataAppDef_oaModule_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModuleObject* self=(PyoaDataAppDef_oaModuleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModule_set_doc[] = 
"Class: oaDataAppDef_oaModule, Function: set\n"
"  Paramegers: (oaModule,[oaByte])\n"
"    Calls: void set(oaModule* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaModule,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaModule_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaModule data;
    int convert_status=PyoaDataAppDef_oaModule_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaModuleObject* self=(PyoaDataAppDef_oaModuleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModule p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModule_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModule_isNull_doc[] =
"Class: oaDataAppDef_oaModule, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaModule_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaModule data;
    int convert_status=PyoaDataAppDef_oaModule_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaModule_assign_doc[] = 
"Class: oaDataAppDef_oaModule, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaModule_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaModule data;
  int convert_status=PyoaDataAppDef_oaModule_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaModule p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaModule_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaModule_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaModule_get,METH_VARARGS,oaDataAppDef_oaModule_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaModule_getDefault,METH_VARARGS,oaDataAppDef_oaModule_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaModule_getSize,METH_VARARGS,oaDataAppDef_oaModule_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaModule_set,METH_VARARGS,oaDataAppDef_oaModule_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaModule_tp_isNull,METH_VARARGS,oaDataAppDef_oaModule_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaModule_tp_assign,METH_VARARGS,oaDataAppDef_oaModule_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModule_doc[] = 
"Class: oaDataAppDef_oaModule\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaModule)\n"
"    Calls: (const oaDataAppDef_oaModule&)\n"
"    Signature: oaDataAppDef_oaModule||cref-oaDataAppDef_oaModule,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaModule_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaModule",
    sizeof(PyoaDataAppDef_oaModuleObject),
    0,
    (destructor)oaDataAppDef_oaModule_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaModule_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaModule_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaModule_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaModule_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaModule_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaModule_static_find_doc[] = 
"Class: oaDataAppDef_oaModule, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaModule* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaModule|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaModule* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaModule|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaModule_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaModulep result= (oaDataAppDef_oaModule::find(p1.Data()));
            return PyoaDataAppDef_oaModule_FromoaDataAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModulep result= (oaDataAppDef_oaModule::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaModule_FromoaDataAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModule, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaModule_static_get_doc[] = 
"Class: oaDataAppDef_oaModule, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModule* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModule|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaModule* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaModule|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaModule_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaModulep result= (oaDataAppDef_oaModule::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaModule_FromoaDataAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaModulep result= (oaDataAppDef_oaModule::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaModule_FromoaDataAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaModule, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaModule_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaModule_static_find,METH_VARARGS,oaDataAppDef_oaModule_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaModule_static_get,METH_VARARGS,oaDataAppDef_oaModule_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaModule_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaModule_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaModule\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaModule",
           (PyObject*)(&PyoaDataAppDef_oaModule_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaModule\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaModule_Type.tp_dict;
    for(method=oaDataAppDef_oaModule_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaNet
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaNet_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaNet_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaNetObject* self = (PyoaDataAppDef_oaNetObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaNet)
    {
        PyParamoaDataAppDef_oaNet p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaNet_Convert,&p1)) {
            PyoaDataAppDef_oaNetObject* cself=((PyoaDataAppDef_oaNetObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaNet, Choices are:\n"
        "    (oaDataAppDef_oaNet)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaNet_tp_dealloc(PyoaDataAppDef_oaNetObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaNet_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaNet value;
    int convert_status=PyoaDataAppDef_oaNet_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaDataAppDef_oaNet::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaNet_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaNet v1;
    PyParamoaDataAppDef_oaNet v2;
    int convert_status1=PyoaDataAppDef_oaNet_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaNet_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaNet_Convert(PyObject* ob,PyParamoaDataAppDef_oaNet* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaNet_Check(ob)) {
        result->SetData( (oaDataAppDef_oaNet**) ((PyoaDataAppDef_oaNetObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaNet Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaNet_FromoaDataAppDef_oaNet(oaDataAppDef_oaNet** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaNet* data=*value;
        PyObject* bself = PyoaDataAppDef_oaNet_Type.tp_alloc(&PyoaDataAppDef_oaNet_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaNetObject* self = (PyoaDataAppDef_oaNetObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaNet_FromoaDataAppDef_oaNet(oaDataAppDef_oaNet* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaNet_Type.tp_alloc(&PyoaDataAppDef_oaNet_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaNetObject* self = (PyoaDataAppDef_oaNetObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaNet_get_doc[] = 
"Class: oaDataAppDef_oaNet, Function: get\n"
"  Paramegers: (oaNet,[oaByte])\n"
"    Calls: void get(const oaNet* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaNet,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaNet_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaNet data;
    int convert_status=PyoaDataAppDef_oaNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaNetObject* self=(PyoaDataAppDef_oaNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNet p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNet_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaNet_getDefault_doc[] = 
"Class: oaDataAppDef_oaNet, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaNet_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaNet data;
    int convert_status=PyoaDataAppDef_oaNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaNetObject* self=(PyoaDataAppDef_oaNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaNet_getSize_doc[] = 
"Class: oaDataAppDef_oaNet, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaNet_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaNet data;
    int convert_status=PyoaDataAppDef_oaNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaNetObject* self=(PyoaDataAppDef_oaNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaNet_set_doc[] = 
"Class: oaDataAppDef_oaNet, Function: set\n"
"  Paramegers: (oaNet,[oaByte])\n"
"    Calls: void set(oaNet* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaNet,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaNet_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaNet data;
    int convert_status=PyoaDataAppDef_oaNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaNetObject* self=(PyoaDataAppDef_oaNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNet p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNet_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaNet_isNull_doc[] =
"Class: oaDataAppDef_oaNet, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaNet_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaNet data;
    int convert_status=PyoaDataAppDef_oaNet_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaNet_assign_doc[] = 
"Class: oaDataAppDef_oaNet, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaNet_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaNet data;
  int convert_status=PyoaDataAppDef_oaNet_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaNet p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaNet_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaNet_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaNet_get,METH_VARARGS,oaDataAppDef_oaNet_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaNet_getDefault,METH_VARARGS,oaDataAppDef_oaNet_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaNet_getSize,METH_VARARGS,oaDataAppDef_oaNet_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaNet_set,METH_VARARGS,oaDataAppDef_oaNet_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaNet_tp_isNull,METH_VARARGS,oaDataAppDef_oaNet_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaNet_tp_assign,METH_VARARGS,oaDataAppDef_oaNet_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaNet_doc[] = 
"Class: oaDataAppDef_oaNet\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaNet)\n"
"    Calls: (const oaDataAppDef_oaNet&)\n"
"    Signature: oaDataAppDef_oaNet||cref-oaDataAppDef_oaNet,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaNet_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaNet",
    sizeof(PyoaDataAppDef_oaNetObject),
    0,
    (destructor)oaDataAppDef_oaNet_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaNet_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaNet_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaNet_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaNet_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaNet_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaNet_static_find_doc[] = 
"Class: oaDataAppDef_oaNet, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaNet* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaNet|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaNet* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaNet|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaNet_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaNetp result= (oaDataAppDef_oaNet::find(p1.Data()));
            return PyoaDataAppDef_oaNet_FromoaDataAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaNetp result= (oaDataAppDef_oaNet::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaNet_FromoaDataAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaNet, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaNet_static_get_doc[] = 
"Class: oaDataAppDef_oaNet, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaNet* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaNet|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaNet* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaNet|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaNet_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaNetp result= (oaDataAppDef_oaNet::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaNet_FromoaDataAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaNetp result= (oaDataAppDef_oaNet::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaNet_FromoaDataAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaNet, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaNet_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaNet_static_find,METH_VARARGS,oaDataAppDef_oaNet_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaNet_static_get,METH_VARARGS,oaDataAppDef_oaNet_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaNet_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaNet_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaNet\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaNet",
           (PyObject*)(&PyoaDataAppDef_oaNet_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaNet\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaNet_Type.tp_dict;
    for(method=oaDataAppDef_oaNet_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaNode
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaNode_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaNode_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaNodeObject* self = (PyoaDataAppDef_oaNodeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaNode)
    {
        PyParamoaDataAppDef_oaNode p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaNode_Convert,&p1)) {
            PyoaDataAppDef_oaNodeObject* cself=((PyoaDataAppDef_oaNodeObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaNode, Choices are:\n"
        "    (oaDataAppDef_oaNode)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaNode_tp_dealloc(PyoaDataAppDef_oaNodeObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaNode_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaNode value;
    int convert_status=PyoaDataAppDef_oaNode_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaDataAppDef_oaNode::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaNode_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaNode v1;
    PyParamoaDataAppDef_oaNode v2;
    int convert_status1=PyoaDataAppDef_oaNode_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaNode_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaNode_Convert(PyObject* ob,PyParamoaDataAppDef_oaNode* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaNode_Check(ob)) {
        result->SetData( (oaDataAppDef_oaNode**) ((PyoaDataAppDef_oaNodeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaNode Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaNode_FromoaDataAppDef_oaNode(oaDataAppDef_oaNode** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaNode* data=*value;
        PyObject* bself = PyoaDataAppDef_oaNode_Type.tp_alloc(&PyoaDataAppDef_oaNode_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaNodeObject* self = (PyoaDataAppDef_oaNodeObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaNode_FromoaDataAppDef_oaNode(oaDataAppDef_oaNode* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaNode_Type.tp_alloc(&PyoaDataAppDef_oaNode_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaNodeObject* self = (PyoaDataAppDef_oaNodeObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaNode_get_doc[] = 
"Class: oaDataAppDef_oaNode, Function: get\n"
"  Paramegers: (oaNode,[oaByte])\n"
"    Calls: void get(const oaNode* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaNode,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaNode_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaNode data;
    int convert_status=PyoaDataAppDef_oaNode_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaNodeObject* self=(PyoaDataAppDef_oaNodeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNode p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNode_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaNode_getDefault_doc[] = 
"Class: oaDataAppDef_oaNode, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaNode_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaNode data;
    int convert_status=PyoaDataAppDef_oaNode_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaNodeObject* self=(PyoaDataAppDef_oaNodeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaNode_getSize_doc[] = 
"Class: oaDataAppDef_oaNode, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaNode_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaNode data;
    int convert_status=PyoaDataAppDef_oaNode_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaNodeObject* self=(PyoaDataAppDef_oaNodeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaNode_set_doc[] = 
"Class: oaDataAppDef_oaNode, Function: set\n"
"  Paramegers: (oaNode,[oaByte])\n"
"    Calls: void set(oaNode* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaNode,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaNode_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaNode data;
    int convert_status=PyoaDataAppDef_oaNode_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaNodeObject* self=(PyoaDataAppDef_oaNodeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNode p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNode_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaNode_isNull_doc[] =
"Class: oaDataAppDef_oaNode, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaNode_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaNode data;
    int convert_status=PyoaDataAppDef_oaNode_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaNode_assign_doc[] = 
"Class: oaDataAppDef_oaNode, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaNode_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaNode data;
  int convert_status=PyoaDataAppDef_oaNode_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaNode p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaNode_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaNode_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaNode_get,METH_VARARGS,oaDataAppDef_oaNode_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaNode_getDefault,METH_VARARGS,oaDataAppDef_oaNode_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaNode_getSize,METH_VARARGS,oaDataAppDef_oaNode_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaNode_set,METH_VARARGS,oaDataAppDef_oaNode_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaNode_tp_isNull,METH_VARARGS,oaDataAppDef_oaNode_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaNode_tp_assign,METH_VARARGS,oaDataAppDef_oaNode_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaNode_doc[] = 
"Class: oaDataAppDef_oaNode\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaNode)\n"
"    Calls: (const oaDataAppDef_oaNode&)\n"
"    Signature: oaDataAppDef_oaNode||cref-oaDataAppDef_oaNode,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaNode_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaNode",
    sizeof(PyoaDataAppDef_oaNodeObject),
    0,
    (destructor)oaDataAppDef_oaNode_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaNode_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaNode_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaNode_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaNode_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaNode_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaNode_static_find_doc[] = 
"Class: oaDataAppDef_oaNode, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaNode* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaNode|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaNode* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaNode|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaNode_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaNodep result= (oaDataAppDef_oaNode::find(p1.Data()));
            return PyoaDataAppDef_oaNode_FromoaDataAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaNodep result= (oaDataAppDef_oaNode::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaNode_FromoaDataAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaNode, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaNode_static_get_doc[] = 
"Class: oaDataAppDef_oaNode, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaNode* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaNode|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaNode* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaNode|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaNode_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaNodep result= (oaDataAppDef_oaNode::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaNode_FromoaDataAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaNodep result= (oaDataAppDef_oaNode::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaNode_FromoaDataAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaNode, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaNode_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaNode_static_find,METH_VARARGS,oaDataAppDef_oaNode_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaNode_static_get,METH_VARARGS,oaDataAppDef_oaNode_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaNode_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaNode_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaNode\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaNode",
           (PyObject*)(&PyoaDataAppDef_oaNode_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaNode\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaNode_Type.tp_dict;
    for(method=oaDataAppDef_oaNode_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccAssignmentObject* self = (PyoaDataAppDef_oaOccAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccAssignment)
    {
        PyParamoaDataAppDef_oaOccAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccAssignment_Convert,&p1)) {
            PyoaDataAppDef_oaOccAssignmentObject* cself=((PyoaDataAppDef_oaOccAssignmentObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccAssignment, Choices are:\n"
        "    (oaDataAppDef_oaOccAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccAssignment_tp_dealloc(PyoaDataAppDef_oaOccAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccAssignment_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccAssignment value;
    int convert_status=PyoaDataAppDef_oaOccAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDataAppDef_oaOccAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccAssignment v1;
    PyParamoaDataAppDef_oaOccAssignment v2;
    int convert_status1=PyoaDataAppDef_oaOccAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccAssignment_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccAssignment_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccAssignment**) ((PyoaDataAppDef_oaOccAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccAssignment_FromoaDataAppDef_oaOccAssignment(oaDataAppDef_oaOccAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccAssignment* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccAssignment_Type.tp_alloc(&PyoaDataAppDef_oaOccAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccAssignmentObject* self = (PyoaDataAppDef_oaOccAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccAssignment_FromoaDataAppDef_oaOccAssignment(oaDataAppDef_oaOccAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccAssignment_Type.tp_alloc(&PyoaDataAppDef_oaOccAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccAssignmentObject* self = (PyoaDataAppDef_oaOccAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccAssignment_get_doc[] = 
"Class: oaDataAppDef_oaOccAssignment, Function: get\n"
"  Paramegers: (oaOccAssignment,[oaByte])\n"
"    Calls: void get(const oaOccAssignment* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccAssignment,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccAssignment data;
    int convert_status=PyoaDataAppDef_oaOccAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccAssignmentObject* self=(PyoaDataAppDef_oaOccAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccAssignment p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignment_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccAssignment_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccAssignment, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccAssignment data;
    int convert_status=PyoaDataAppDef_oaOccAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccAssignmentObject* self=(PyoaDataAppDef_oaOccAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccAssignment_getSize_doc[] = 
"Class: oaDataAppDef_oaOccAssignment, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccAssignment_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccAssignment data;
    int convert_status=PyoaDataAppDef_oaOccAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccAssignmentObject* self=(PyoaDataAppDef_oaOccAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccAssignment_set_doc[] = 
"Class: oaDataAppDef_oaOccAssignment, Function: set\n"
"  Paramegers: (oaOccAssignment,[oaByte])\n"
"    Calls: void set(oaOccAssignment* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccAssignment,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccAssignment data;
    int convert_status=PyoaDataAppDef_oaOccAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccAssignmentObject* self=(PyoaDataAppDef_oaOccAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccAssignment p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignment_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccAssignment_isNull_doc[] =
"Class: oaDataAppDef_oaOccAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccAssignment data;
    int convert_status=PyoaDataAppDef_oaOccAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccAssignment_assign_doc[] = 
"Class: oaDataAppDef_oaOccAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccAssignment data;
  int convert_status=PyoaDataAppDef_oaOccAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccAssignment_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccAssignment_get,METH_VARARGS,oaDataAppDef_oaOccAssignment_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccAssignment_getDefault,METH_VARARGS,oaDataAppDef_oaOccAssignment_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccAssignment_getSize,METH_VARARGS,oaDataAppDef_oaOccAssignment_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccAssignment_set,METH_VARARGS,oaDataAppDef_oaOccAssignment_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccAssignment_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccAssignment_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccAssignment_tp_assign,METH_VARARGS,oaDataAppDef_oaOccAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccAssignment_doc[] = 
"Class: oaDataAppDef_oaOccAssignment\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccAssignment)\n"
"    Calls: (const oaDataAppDef_oaOccAssignment&)\n"
"    Signature: oaDataAppDef_oaOccAssignment||cref-oaDataAppDef_oaOccAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccAssignment",
    sizeof(PyoaDataAppDef_oaOccAssignmentObject),
    0,
    (destructor)oaDataAppDef_oaOccAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccAssignment_static_find_doc[] = 
"Class: oaDataAppDef_oaOccAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccAssignment|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccAssignmentp result= (oaDataAppDef_oaOccAssignment::find(p1.Data()));
            return PyoaDataAppDef_oaOccAssignment_FromoaDataAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccAssignmentp result= (oaDataAppDef_oaOccAssignment::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccAssignment_FromoaDataAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccAssignment_static_get_doc[] = 
"Class: oaDataAppDef_oaOccAssignment, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccAssignment* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccAssignment|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccAssignment* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccAssignmentp result= (oaDataAppDef_oaOccAssignment::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccAssignment_FromoaDataAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccAssignmentp result= (oaDataAppDef_oaOccAssignment::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccAssignment_FromoaDataAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccAssignment, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccAssignment_static_find,METH_VARARGS,oaDataAppDef_oaOccAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccAssignment_static_get,METH_VARARGS,oaDataAppDef_oaOccAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccAssignment",
           (PyObject*)(&PyoaDataAppDef_oaOccAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccAssignment_Type.tp_dict;
    for(method=oaDataAppDef_oaOccAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccBusNetDefObject* self = (PyoaDataAppDef_oaOccBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccBusNetDef)
    {
        PyParamoaDataAppDef_oaOccBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccBusNetDef_Convert,&p1)) {
            PyoaDataAppDef_oaOccBusNetDefObject* cself=((PyoaDataAppDef_oaOccBusNetDefObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccBusNetDef, Choices are:\n"
        "    (oaDataAppDef_oaOccBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccBusNetDef_tp_dealloc(PyoaDataAppDef_oaOccBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccBusNetDef value;
    int convert_status=PyoaDataAppDef_oaOccBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaDataAppDef_oaOccBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccBusNetDef v1;
    PyParamoaDataAppDef_oaOccBusNetDef v2;
    int convert_status1=PyoaDataAppDef_oaOccBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccBusNetDef_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccBusNetDef_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccBusNetDef**) ((PyoaDataAppDef_oaOccBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccBusNetDef_FromoaDataAppDef_oaOccBusNetDef(oaDataAppDef_oaOccBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccBusNetDef* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccBusNetDef_Type.tp_alloc(&PyoaDataAppDef_oaOccBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccBusNetDefObject* self = (PyoaDataAppDef_oaOccBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccBusNetDef_FromoaDataAppDef_oaOccBusNetDef(oaDataAppDef_oaOccBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccBusNetDef_Type.tp_alloc(&PyoaDataAppDef_oaOccBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccBusNetDefObject* self = (PyoaDataAppDef_oaOccBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusNetDef_get_doc[] = 
"Class: oaDataAppDef_oaOccBusNetDef, Function: get\n"
"  Paramegers: (oaOccBusNetDef,[oaByte])\n"
"    Calls: void get(const oaOccBusNetDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccBusNetDef,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccBusNetDef data;
    int convert_status=PyoaDataAppDef_oaOccBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccBusNetDefObject* self=(PyoaDataAppDef_oaOccBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccBusNetDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusNetDef_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccBusNetDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccBusNetDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccBusNetDef data;
    int convert_status=PyoaDataAppDef_oaOccBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccBusNetDefObject* self=(PyoaDataAppDef_oaOccBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusNetDef_getSize_doc[] = 
"Class: oaDataAppDef_oaOccBusNetDef, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccBusNetDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccBusNetDef data;
    int convert_status=PyoaDataAppDef_oaOccBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccBusNetDefObject* self=(PyoaDataAppDef_oaOccBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusNetDef_set_doc[] = 
"Class: oaDataAppDef_oaOccBusNetDef, Function: set\n"
"  Paramegers: (oaOccBusNetDef,[oaByte])\n"
"    Calls: void set(oaOccBusNetDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccBusNetDef,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccBusNetDef data;
    int convert_status=PyoaDataAppDef_oaOccBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccBusNetDefObject* self=(PyoaDataAppDef_oaOccBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccBusNetDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusNetDef_isNull_doc[] =
"Class: oaDataAppDef_oaOccBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccBusNetDef data;
    int convert_status=PyoaDataAppDef_oaOccBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccBusNetDef_assign_doc[] = 
"Class: oaDataAppDef_oaOccBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccBusNetDef data;
  int convert_status=PyoaDataAppDef_oaOccBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccBusNetDef_get,METH_VARARGS,oaDataAppDef_oaOccBusNetDef_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccBusNetDef_getDefault,METH_VARARGS,oaDataAppDef_oaOccBusNetDef_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccBusNetDef_getSize,METH_VARARGS,oaDataAppDef_oaOccBusNetDef_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccBusNetDef_set,METH_VARARGS,oaDataAppDef_oaOccBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccBusNetDef_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccBusNetDef_tp_assign,METH_VARARGS,oaDataAppDef_oaOccBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusNetDef_doc[] = 
"Class: oaDataAppDef_oaOccBusNetDef\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccBusNetDef)\n"
"    Calls: (const oaDataAppDef_oaOccBusNetDef&)\n"
"    Signature: oaDataAppDef_oaOccBusNetDef||cref-oaDataAppDef_oaOccBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccBusNetDef",
    sizeof(PyoaDataAppDef_oaOccBusNetDefObject),
    0,
    (destructor)oaDataAppDef_oaOccBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusNetDef_static_find_doc[] = 
"Class: oaDataAppDef_oaOccBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccBusNetDef|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccBusNetDefp result= (oaDataAppDef_oaOccBusNetDef::find(p1.Data()));
            return PyoaDataAppDef_oaOccBusNetDef_FromoaDataAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccBusNetDefp result= (oaDataAppDef_oaOccBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccBusNetDef_FromoaDataAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusNetDef_static_get_doc[] = 
"Class: oaDataAppDef_oaOccBusNetDef, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccBusNetDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccBusNetDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccBusNetDefp result= (oaDataAppDef_oaOccBusNetDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccBusNetDef_FromoaDataAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccBusNetDefp result= (oaDataAppDef_oaOccBusNetDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccBusNetDef_FromoaDataAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccBusNetDef, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccBusNetDef_static_find,METH_VARARGS,oaDataAppDef_oaOccBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccBusNetDef_static_get,METH_VARARGS,oaDataAppDef_oaOccBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccBusNetDef",
           (PyObject*)(&PyoaDataAppDef_oaOccBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccBusNetDef_Type.tp_dict;
    for(method=oaDataAppDef_oaOccBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccBusTermDefObject* self = (PyoaDataAppDef_oaOccBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccBusTermDef)
    {
        PyParamoaDataAppDef_oaOccBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccBusTermDef_Convert,&p1)) {
            PyoaDataAppDef_oaOccBusTermDefObject* cself=((PyoaDataAppDef_oaOccBusTermDefObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccBusTermDef, Choices are:\n"
        "    (oaDataAppDef_oaOccBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccBusTermDef_tp_dealloc(PyoaDataAppDef_oaOccBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccBusTermDef value;
    int convert_status=PyoaDataAppDef_oaOccBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDataAppDef_oaOccBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccBusTermDef v1;
    PyParamoaDataAppDef_oaOccBusTermDef v2;
    int convert_status1=PyoaDataAppDef_oaOccBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccBusTermDef_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccBusTermDef_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccBusTermDef**) ((PyoaDataAppDef_oaOccBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccBusTermDef_FromoaDataAppDef_oaOccBusTermDef(oaDataAppDef_oaOccBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccBusTermDef* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccBusTermDef_Type.tp_alloc(&PyoaDataAppDef_oaOccBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccBusTermDefObject* self = (PyoaDataAppDef_oaOccBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccBusTermDef_FromoaDataAppDef_oaOccBusTermDef(oaDataAppDef_oaOccBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccBusTermDef_Type.tp_alloc(&PyoaDataAppDef_oaOccBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccBusTermDefObject* self = (PyoaDataAppDef_oaOccBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusTermDef_get_doc[] = 
"Class: oaDataAppDef_oaOccBusTermDef, Function: get\n"
"  Paramegers: (oaOccBusTermDef,[oaByte])\n"
"    Calls: void get(const oaOccBusTermDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccBusTermDef,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccBusTermDef data;
    int convert_status=PyoaDataAppDef_oaOccBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccBusTermDefObject* self=(PyoaDataAppDef_oaOccBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccBusTermDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusTermDef_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccBusTermDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccBusTermDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccBusTermDef data;
    int convert_status=PyoaDataAppDef_oaOccBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccBusTermDefObject* self=(PyoaDataAppDef_oaOccBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusTermDef_getSize_doc[] = 
"Class: oaDataAppDef_oaOccBusTermDef, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccBusTermDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccBusTermDef data;
    int convert_status=PyoaDataAppDef_oaOccBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccBusTermDefObject* self=(PyoaDataAppDef_oaOccBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusTermDef_set_doc[] = 
"Class: oaDataAppDef_oaOccBusTermDef, Function: set\n"
"  Paramegers: (oaOccBusTermDef,[oaByte])\n"
"    Calls: void set(oaOccBusTermDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccBusTermDef,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccBusTermDef data;
    int convert_status=PyoaDataAppDef_oaOccBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccBusTermDefObject* self=(PyoaDataAppDef_oaOccBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccBusTermDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusTermDef_isNull_doc[] =
"Class: oaDataAppDef_oaOccBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccBusTermDef data;
    int convert_status=PyoaDataAppDef_oaOccBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccBusTermDef_assign_doc[] = 
"Class: oaDataAppDef_oaOccBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccBusTermDef data;
  int convert_status=PyoaDataAppDef_oaOccBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccBusTermDef_get,METH_VARARGS,oaDataAppDef_oaOccBusTermDef_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccBusTermDef_getDefault,METH_VARARGS,oaDataAppDef_oaOccBusTermDef_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccBusTermDef_getSize,METH_VARARGS,oaDataAppDef_oaOccBusTermDef_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccBusTermDef_set,METH_VARARGS,oaDataAppDef_oaOccBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccBusTermDef_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccBusTermDef_tp_assign,METH_VARARGS,oaDataAppDef_oaOccBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusTermDef_doc[] = 
"Class: oaDataAppDef_oaOccBusTermDef\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccBusTermDef)\n"
"    Calls: (const oaDataAppDef_oaOccBusTermDef&)\n"
"    Signature: oaDataAppDef_oaOccBusTermDef||cref-oaDataAppDef_oaOccBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccBusTermDef",
    sizeof(PyoaDataAppDef_oaOccBusTermDefObject),
    0,
    (destructor)oaDataAppDef_oaOccBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusTermDef_static_find_doc[] = 
"Class: oaDataAppDef_oaOccBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccBusTermDef|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccBusTermDefp result= (oaDataAppDef_oaOccBusTermDef::find(p1.Data()));
            return PyoaDataAppDef_oaOccBusTermDef_FromoaDataAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccBusTermDefp result= (oaDataAppDef_oaOccBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccBusTermDef_FromoaDataAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccBusTermDef_static_get_doc[] = 
"Class: oaDataAppDef_oaOccBusTermDef, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccBusTermDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccBusTermDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccBusTermDefp result= (oaDataAppDef_oaOccBusTermDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccBusTermDef_FromoaDataAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccBusTermDefp result= (oaDataAppDef_oaOccBusTermDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccBusTermDef_FromoaDataAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccBusTermDef, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccBusTermDef_static_find,METH_VARARGS,oaDataAppDef_oaOccBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccBusTermDef_static_get,METH_VARARGS,oaDataAppDef_oaOccBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccBusTermDef",
           (PyObject*)(&PyoaDataAppDef_oaOccBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccBusTermDef_Type.tp_dict;
    for(method=oaDataAppDef_oaOccBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccConnectDefObject* self = (PyoaDataAppDef_oaOccConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccConnectDef)
    {
        PyParamoaDataAppDef_oaOccConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccConnectDef_Convert,&p1)) {
            PyoaDataAppDef_oaOccConnectDefObject* cself=((PyoaDataAppDef_oaOccConnectDefObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccConnectDef, Choices are:\n"
        "    (oaDataAppDef_oaOccConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccConnectDef_tp_dealloc(PyoaDataAppDef_oaOccConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccConnectDef value;
    int convert_status=PyoaDataAppDef_oaOccConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDataAppDef_oaOccConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccConnectDef v1;
    PyParamoaDataAppDef_oaOccConnectDef v2;
    int convert_status1=PyoaDataAppDef_oaOccConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccConnectDef_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccConnectDef_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccConnectDef**) ((PyoaDataAppDef_oaOccConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccConnectDef_FromoaDataAppDef_oaOccConnectDef(oaDataAppDef_oaOccConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccConnectDef* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccConnectDef_Type.tp_alloc(&PyoaDataAppDef_oaOccConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccConnectDefObject* self = (PyoaDataAppDef_oaOccConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccConnectDef_FromoaDataAppDef_oaOccConnectDef(oaDataAppDef_oaOccConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccConnectDef_Type.tp_alloc(&PyoaDataAppDef_oaOccConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccConnectDefObject* self = (PyoaDataAppDef_oaOccConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccConnectDef_get_doc[] = 
"Class: oaDataAppDef_oaOccConnectDef, Function: get\n"
"  Paramegers: (oaOccConnectDef,[oaByte])\n"
"    Calls: void get(const oaOccConnectDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccConnectDef,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccConnectDef data;
    int convert_status=PyoaDataAppDef_oaOccConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccConnectDefObject* self=(PyoaDataAppDef_oaOccConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccConnectDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccConnectDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccConnectDef_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccConnectDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccConnectDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccConnectDef data;
    int convert_status=PyoaDataAppDef_oaOccConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccConnectDefObject* self=(PyoaDataAppDef_oaOccConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccConnectDef_getSize_doc[] = 
"Class: oaDataAppDef_oaOccConnectDef, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccConnectDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccConnectDef data;
    int convert_status=PyoaDataAppDef_oaOccConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccConnectDefObject* self=(PyoaDataAppDef_oaOccConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccConnectDef_set_doc[] = 
"Class: oaDataAppDef_oaOccConnectDef, Function: set\n"
"  Paramegers: (oaOccConnectDef,[oaByte])\n"
"    Calls: void set(oaOccConnectDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccConnectDef,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccConnectDef data;
    int convert_status=PyoaDataAppDef_oaOccConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccConnectDefObject* self=(PyoaDataAppDef_oaOccConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccConnectDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccConnectDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccConnectDef_isNull_doc[] =
"Class: oaDataAppDef_oaOccConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccConnectDef data;
    int convert_status=PyoaDataAppDef_oaOccConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccConnectDef_assign_doc[] = 
"Class: oaDataAppDef_oaOccConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccConnectDef data;
  int convert_status=PyoaDataAppDef_oaOccConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccConnectDef_get,METH_VARARGS,oaDataAppDef_oaOccConnectDef_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccConnectDef_getDefault,METH_VARARGS,oaDataAppDef_oaOccConnectDef_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccConnectDef_getSize,METH_VARARGS,oaDataAppDef_oaOccConnectDef_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccConnectDef_set,METH_VARARGS,oaDataAppDef_oaOccConnectDef_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccConnectDef_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccConnectDef_tp_assign,METH_VARARGS,oaDataAppDef_oaOccConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccConnectDef_doc[] = 
"Class: oaDataAppDef_oaOccConnectDef\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccConnectDef)\n"
"    Calls: (const oaDataAppDef_oaOccConnectDef&)\n"
"    Signature: oaDataAppDef_oaOccConnectDef||cref-oaDataAppDef_oaOccConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccConnectDef",
    sizeof(PyoaDataAppDef_oaOccConnectDefObject),
    0,
    (destructor)oaDataAppDef_oaOccConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccConnectDef_static_find_doc[] = 
"Class: oaDataAppDef_oaOccConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccConnectDef|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccConnectDefp result= (oaDataAppDef_oaOccConnectDef::find(p1.Data()));
            return PyoaDataAppDef_oaOccConnectDef_FromoaDataAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccConnectDefp result= (oaDataAppDef_oaOccConnectDef::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccConnectDef_FromoaDataAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccConnectDef_static_get_doc[] = 
"Class: oaDataAppDef_oaOccConnectDef, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccConnectDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccConnectDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccConnectDefp result= (oaDataAppDef_oaOccConnectDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccConnectDef_FromoaDataAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccConnectDefp result= (oaDataAppDef_oaOccConnectDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccConnectDef_FromoaDataAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccConnectDef, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccConnectDef_static_find,METH_VARARGS,oaDataAppDef_oaOccConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccConnectDef_static_get,METH_VARARGS,oaDataAppDef_oaOccConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccConnectDef",
           (PyObject*)(&PyoaDataAppDef_oaOccConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccConnectDef_Type.tp_dict;
    for(method=oaDataAppDef_oaOccConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccInstObject* self = (PyoaDataAppDef_oaOccInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccInst)
    {
        PyParamoaDataAppDef_oaOccInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccInst_Convert,&p1)) {
            PyoaDataAppDef_oaOccInstObject* cself=((PyoaDataAppDef_oaOccInstObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccInst, Choices are:\n"
        "    (oaDataAppDef_oaOccInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccInst_tp_dealloc(PyoaDataAppDef_oaOccInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccInst_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccInst value;
    int convert_status=PyoaDataAppDef_oaOccInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDataAppDef_oaOccInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccInst v1;
    PyParamoaDataAppDef_oaOccInst v2;
    int convert_status1=PyoaDataAppDef_oaOccInst_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccInst_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccInst_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccInst**) ((PyoaDataAppDef_oaOccInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccInst_FromoaDataAppDef_oaOccInst(oaDataAppDef_oaOccInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccInst* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccInst_Type.tp_alloc(&PyoaDataAppDef_oaOccInst_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccInstObject* self = (PyoaDataAppDef_oaOccInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccInst_FromoaDataAppDef_oaOccInst(oaDataAppDef_oaOccInst* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccInst_Type.tp_alloc(&PyoaDataAppDef_oaOccInst_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccInstObject* self = (PyoaDataAppDef_oaOccInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInst_get_doc[] = 
"Class: oaDataAppDef_oaOccInst, Function: get\n"
"  Paramegers: (oaOccInst,[oaByte])\n"
"    Calls: void get(const oaOccInst* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccInst,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInst data;
    int convert_status=PyoaDataAppDef_oaOccInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstObject* self=(PyoaDataAppDef_oaOccInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInst_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccInst, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInst data;
    int convert_status=PyoaDataAppDef_oaOccInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstObject* self=(PyoaDataAppDef_oaOccInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInst_getSize_doc[] = 
"Class: oaDataAppDef_oaOccInst, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccInst_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInst data;
    int convert_status=PyoaDataAppDef_oaOccInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstObject* self=(PyoaDataAppDef_oaOccInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInst_set_doc[] = 
"Class: oaDataAppDef_oaOccInst, Function: set\n"
"  Paramegers: (oaOccInst,[oaByte])\n"
"    Calls: void set(oaOccInst* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccInst,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInst data;
    int convert_status=PyoaDataAppDef_oaOccInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstObject* self=(PyoaDataAppDef_oaOccInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInst_isNull_doc[] =
"Class: oaDataAppDef_oaOccInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccInst data;
    int convert_status=PyoaDataAppDef_oaOccInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccInst_assign_doc[] = 
"Class: oaDataAppDef_oaOccInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccInst data;
  int convert_status=PyoaDataAppDef_oaOccInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccInst_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccInst_get,METH_VARARGS,oaDataAppDef_oaOccInst_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccInst_getDefault,METH_VARARGS,oaDataAppDef_oaOccInst_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccInst_getSize,METH_VARARGS,oaDataAppDef_oaOccInst_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccInst_set,METH_VARARGS,oaDataAppDef_oaOccInst_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccInst_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccInst_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccInst_tp_assign,METH_VARARGS,oaDataAppDef_oaOccInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInst_doc[] = 
"Class: oaDataAppDef_oaOccInst\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccInst)\n"
"    Calls: (const oaDataAppDef_oaOccInst&)\n"
"    Signature: oaDataAppDef_oaOccInst||cref-oaDataAppDef_oaOccInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccInst",
    sizeof(PyoaDataAppDef_oaOccInstObject),
    0,
    (destructor)oaDataAppDef_oaOccInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccInst_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInst_static_find_doc[] = 
"Class: oaDataAppDef_oaOccInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccInst|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccInstp result= (oaDataAppDef_oaOccInst::find(p1.Data()));
            return PyoaDataAppDef_oaOccInst_FromoaDataAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccInstp result= (oaDataAppDef_oaOccInst::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccInst_FromoaDataAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInst_static_get_doc[] = 
"Class: oaDataAppDef_oaOccInst, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccInst* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccInst|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccInst* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccInst|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccInstp result= (oaDataAppDef_oaOccInst::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccInst_FromoaDataAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccInstp result= (oaDataAppDef_oaOccInst::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccInst_FromoaDataAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccInst, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccInst_static_find,METH_VARARGS,oaDataAppDef_oaOccInst_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccInst_static_get,METH_VARARGS,oaDataAppDef_oaOccInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccInst_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccInst",
           (PyObject*)(&PyoaDataAppDef_oaOccInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccInst_Type.tp_dict;
    for(method=oaDataAppDef_oaOccInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccInstHeaderObject* self = (PyoaDataAppDef_oaOccInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccInstHeader)
    {
        PyParamoaDataAppDef_oaOccInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccInstHeader_Convert,&p1)) {
            PyoaDataAppDef_oaOccInstHeaderObject* cself=((PyoaDataAppDef_oaOccInstHeaderObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccInstHeader, Choices are:\n"
        "    (oaDataAppDef_oaOccInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccInstHeader_tp_dealloc(PyoaDataAppDef_oaOccInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccInstHeader value;
    int convert_status=PyoaDataAppDef_oaOccInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDataAppDef_oaOccInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccInstHeader v1;
    PyParamoaDataAppDef_oaOccInstHeader v2;
    int convert_status1=PyoaDataAppDef_oaOccInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccInstHeader_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccInstHeader_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccInstHeader**) ((PyoaDataAppDef_oaOccInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccInstHeader_FromoaDataAppDef_oaOccInstHeader(oaDataAppDef_oaOccInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccInstHeader* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccInstHeader_Type.tp_alloc(&PyoaDataAppDef_oaOccInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccInstHeaderObject* self = (PyoaDataAppDef_oaOccInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccInstHeader_FromoaDataAppDef_oaOccInstHeader(oaDataAppDef_oaOccInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccInstHeader_Type.tp_alloc(&PyoaDataAppDef_oaOccInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccInstHeaderObject* self = (PyoaDataAppDef_oaOccInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstHeader_get_doc[] = 
"Class: oaDataAppDef_oaOccInstHeader, Function: get\n"
"  Paramegers: (oaOccInstHeader,[oaByte])\n"
"    Calls: void get(const oaOccInstHeader* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccInstHeader,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInstHeader data;
    int convert_status=PyoaDataAppDef_oaOccInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstHeaderObject* self=(PyoaDataAppDef_oaOccInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInstHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstHeader_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccInstHeader, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInstHeader data;
    int convert_status=PyoaDataAppDef_oaOccInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstHeaderObject* self=(PyoaDataAppDef_oaOccInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstHeader_getSize_doc[] = 
"Class: oaDataAppDef_oaOccInstHeader, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccInstHeader_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInstHeader data;
    int convert_status=PyoaDataAppDef_oaOccInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstHeaderObject* self=(PyoaDataAppDef_oaOccInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstHeader_set_doc[] = 
"Class: oaDataAppDef_oaOccInstHeader, Function: set\n"
"  Paramegers: (oaOccInstHeader,[oaByte])\n"
"    Calls: void set(oaOccInstHeader* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccInstHeader,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInstHeader data;
    int convert_status=PyoaDataAppDef_oaOccInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstHeaderObject* self=(PyoaDataAppDef_oaOccInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInstHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstHeader_isNull_doc[] =
"Class: oaDataAppDef_oaOccInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccInstHeader data;
    int convert_status=PyoaDataAppDef_oaOccInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccInstHeader_assign_doc[] = 
"Class: oaDataAppDef_oaOccInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccInstHeader data;
  int convert_status=PyoaDataAppDef_oaOccInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccInstHeader_get,METH_VARARGS,oaDataAppDef_oaOccInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccInstHeader_getDefault,METH_VARARGS,oaDataAppDef_oaOccInstHeader_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccInstHeader_getSize,METH_VARARGS,oaDataAppDef_oaOccInstHeader_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccInstHeader_set,METH_VARARGS,oaDataAppDef_oaOccInstHeader_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccInstHeader_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccInstHeader_tp_assign,METH_VARARGS,oaDataAppDef_oaOccInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstHeader_doc[] = 
"Class: oaDataAppDef_oaOccInstHeader\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccInstHeader)\n"
"    Calls: (const oaDataAppDef_oaOccInstHeader&)\n"
"    Signature: oaDataAppDef_oaOccInstHeader||cref-oaDataAppDef_oaOccInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccInstHeader",
    sizeof(PyoaDataAppDef_oaOccInstHeaderObject),
    0,
    (destructor)oaDataAppDef_oaOccInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstHeader_static_find_doc[] = 
"Class: oaDataAppDef_oaOccInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccInstHeader|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccInstHeaderp result= (oaDataAppDef_oaOccInstHeader::find(p1.Data()));
            return PyoaDataAppDef_oaOccInstHeader_FromoaDataAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccInstHeaderp result= (oaDataAppDef_oaOccInstHeader::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccInstHeader_FromoaDataAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstHeader_static_get_doc[] = 
"Class: oaDataAppDef_oaOccInstHeader, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccInstHeader* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccInstHeader|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccInstHeaderp result= (oaDataAppDef_oaOccInstHeader::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccInstHeader_FromoaDataAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccInstHeaderp result= (oaDataAppDef_oaOccInstHeader::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccInstHeader_FromoaDataAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccInstHeader, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccInstHeader_static_find,METH_VARARGS,oaDataAppDef_oaOccInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccInstHeader_static_get,METH_VARARGS,oaDataAppDef_oaOccInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccInstHeader",
           (PyObject*)(&PyoaDataAppDef_oaOccInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccInstHeader_Type.tp_dict;
    for(method=oaDataAppDef_oaOccInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccInstTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccInstTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccInstTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccInstTermObject* self = (PyoaDataAppDef_oaOccInstTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccInstTerm)
    {
        PyParamoaDataAppDef_oaOccInstTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccInstTerm_Convert,&p1)) {
            PyoaDataAppDef_oaOccInstTermObject* cself=((PyoaDataAppDef_oaOccInstTermObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccInstTerm, Choices are:\n"
        "    (oaDataAppDef_oaOccInstTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccInstTerm_tp_dealloc(PyoaDataAppDef_oaOccInstTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccInstTerm_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccInstTerm value;
    int convert_status=PyoaDataAppDef_oaOccInstTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaDataAppDef_oaOccInstTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccInstTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccInstTerm v1;
    PyParamoaDataAppDef_oaOccInstTerm v2;
    int convert_status1=PyoaDataAppDef_oaOccInstTerm_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccInstTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccInstTerm_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccInstTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccInstTerm_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccInstTerm**) ((PyoaDataAppDef_oaOccInstTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccInstTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccInstTerm_FromoaDataAppDef_oaOccInstTerm(oaDataAppDef_oaOccInstTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccInstTerm* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccInstTerm_Type.tp_alloc(&PyoaDataAppDef_oaOccInstTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccInstTermObject* self = (PyoaDataAppDef_oaOccInstTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccInstTerm_FromoaDataAppDef_oaOccInstTerm(oaDataAppDef_oaOccInstTerm* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccInstTerm_Type.tp_alloc(&PyoaDataAppDef_oaOccInstTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccInstTermObject* self = (PyoaDataAppDef_oaOccInstTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstTerm_get_doc[] = 
"Class: oaDataAppDef_oaOccInstTerm, Function: get\n"
"  Paramegers: (oaOccInstTerm,[oaByte])\n"
"    Calls: void get(const oaOccInstTerm* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccInstTerm,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccInstTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInstTerm data;
    int convert_status=PyoaDataAppDef_oaOccInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstTermObject* self=(PyoaDataAppDef_oaOccInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInstTerm p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstTerm_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstTerm_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccInstTerm, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccInstTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInstTerm data;
    int convert_status=PyoaDataAppDef_oaOccInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstTermObject* self=(PyoaDataAppDef_oaOccInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstTerm_getSize_doc[] = 
"Class: oaDataAppDef_oaOccInstTerm, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccInstTerm_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInstTerm data;
    int convert_status=PyoaDataAppDef_oaOccInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstTermObject* self=(PyoaDataAppDef_oaOccInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstTerm_set_doc[] = 
"Class: oaDataAppDef_oaOccInstTerm, Function: set\n"
"  Paramegers: (oaOccInstTerm,[oaByte])\n"
"    Calls: void set(oaOccInstTerm* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccInstTerm,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccInstTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccInstTerm data;
    int convert_status=PyoaDataAppDef_oaOccInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccInstTermObject* self=(PyoaDataAppDef_oaOccInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInstTerm p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstTerm_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstTerm_isNull_doc[] =
"Class: oaDataAppDef_oaOccInstTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccInstTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccInstTerm data;
    int convert_status=PyoaDataAppDef_oaOccInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccInstTerm_assign_doc[] = 
"Class: oaDataAppDef_oaOccInstTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccInstTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccInstTerm data;
  int convert_status=PyoaDataAppDef_oaOccInstTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccInstTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccInstTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccInstTerm_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccInstTerm_get,METH_VARARGS,oaDataAppDef_oaOccInstTerm_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccInstTerm_getDefault,METH_VARARGS,oaDataAppDef_oaOccInstTerm_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccInstTerm_getSize,METH_VARARGS,oaDataAppDef_oaOccInstTerm_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccInstTerm_set,METH_VARARGS,oaDataAppDef_oaOccInstTerm_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccInstTerm_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccInstTerm_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccInstTerm_tp_assign,METH_VARARGS,oaDataAppDef_oaOccInstTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstTerm_doc[] = 
"Class: oaDataAppDef_oaOccInstTerm\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccInstTerm)\n"
"    Calls: (const oaDataAppDef_oaOccInstTerm&)\n"
"    Signature: oaDataAppDef_oaOccInstTerm||cref-oaDataAppDef_oaOccInstTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccInstTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccInstTerm",
    sizeof(PyoaDataAppDef_oaOccInstTermObject),
    0,
    (destructor)oaDataAppDef_oaOccInstTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccInstTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccInstTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccInstTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccInstTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccInstTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstTerm_static_find_doc[] = 
"Class: oaDataAppDef_oaOccInstTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccInstTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccInstTerm|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccInstTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccInstTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccInstTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccInstTermp result= (oaDataAppDef_oaOccInstTerm::find(p1.Data()));
            return PyoaDataAppDef_oaOccInstTerm_FromoaDataAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccInstTermp result= (oaDataAppDef_oaOccInstTerm::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccInstTerm_FromoaDataAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccInstTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccInstTerm_static_get_doc[] = 
"Class: oaDataAppDef_oaOccInstTerm, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccInstTerm* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccInstTerm|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccInstTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccInstTermp result= (oaDataAppDef_oaOccInstTerm::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccInstTerm_FromoaDataAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccInstTermp result= (oaDataAppDef_oaOccInstTerm::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccInstTerm_FromoaDataAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccInstTerm, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccInstTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccInstTerm_static_find,METH_VARARGS,oaDataAppDef_oaOccInstTerm_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccInstTerm_static_get,METH_VARARGS,oaDataAppDef_oaOccInstTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccInstTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccInstTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccInstTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccInstTerm",
           (PyObject*)(&PyoaDataAppDef_oaOccInstTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccInstTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccInstTerm_Type.tp_dict;
    for(method=oaDataAppDef_oaOccInstTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccModuleInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccModuleInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccModuleInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccModuleInstHeaderObject* self = (PyoaDataAppDef_oaOccModuleInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccModuleInstHeader)
    {
        PyParamoaDataAppDef_oaOccModuleInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccModuleInstHeader_Convert,&p1)) {
            PyoaDataAppDef_oaOccModuleInstHeaderObject* cself=((PyoaDataAppDef_oaOccModuleInstHeaderObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccModuleInstHeader, Choices are:\n"
        "    (oaDataAppDef_oaOccModuleInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccModuleInstHeader_tp_dealloc(PyoaDataAppDef_oaOccModuleInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccModuleInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccModuleInstHeader value;
    int convert_status=PyoaDataAppDef_oaOccModuleInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[56];
    sprintf(buffer,"<oaDataAppDef_oaOccModuleInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccModuleInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccModuleInstHeader v1;
    PyParamoaDataAppDef_oaOccModuleInstHeader v2;
    int convert_status1=PyoaDataAppDef_oaOccModuleInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccModuleInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccModuleInstHeader_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccModuleInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccModuleInstHeader_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccModuleInstHeader**) ((PyoaDataAppDef_oaOccModuleInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccModuleInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccModuleInstHeader_FromoaDataAppDef_oaOccModuleInstHeader(oaDataAppDef_oaOccModuleInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccModuleInstHeader* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccModuleInstHeader_Type.tp_alloc(&PyoaDataAppDef_oaOccModuleInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccModuleInstHeaderObject* self = (PyoaDataAppDef_oaOccModuleInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccModuleInstHeader_FromoaDataAppDef_oaOccModuleInstHeader(oaDataAppDef_oaOccModuleInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccModuleInstHeader_Type.tp_alloc(&PyoaDataAppDef_oaOccModuleInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccModuleInstHeaderObject* self = (PyoaDataAppDef_oaOccModuleInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccModuleInstHeader_get_doc[] = 
"Class: oaDataAppDef_oaOccModuleInstHeader, Function: get\n"
"  Paramegers: (oaOccModuleInstHeader,[oaByte])\n"
"    Calls: void get(const oaOccModuleInstHeader* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccModuleInstHeader,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccModuleInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccModuleInstHeader data;
    int convert_status=PyoaDataAppDef_oaOccModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccModuleInstHeaderObject* self=(PyoaDataAppDef_oaOccModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccModuleInstHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInstHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccModuleInstHeader_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccModuleInstHeader, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccModuleInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccModuleInstHeader data;
    int convert_status=PyoaDataAppDef_oaOccModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccModuleInstHeaderObject* self=(PyoaDataAppDef_oaOccModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccModuleInstHeader_getSize_doc[] = 
"Class: oaDataAppDef_oaOccModuleInstHeader, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccModuleInstHeader_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccModuleInstHeader data;
    int convert_status=PyoaDataAppDef_oaOccModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccModuleInstHeaderObject* self=(PyoaDataAppDef_oaOccModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccModuleInstHeader_set_doc[] = 
"Class: oaDataAppDef_oaOccModuleInstHeader, Function: set\n"
"  Paramegers: (oaOccModuleInstHeader,[oaByte])\n"
"    Calls: void set(oaOccModuleInstHeader* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccModuleInstHeader,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccModuleInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccModuleInstHeader data;
    int convert_status=PyoaDataAppDef_oaOccModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccModuleInstHeaderObject* self=(PyoaDataAppDef_oaOccModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccModuleInstHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInstHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccModuleInstHeader_isNull_doc[] =
"Class: oaDataAppDef_oaOccModuleInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccModuleInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccModuleInstHeader data;
    int convert_status=PyoaDataAppDef_oaOccModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccModuleInstHeader_assign_doc[] = 
"Class: oaDataAppDef_oaOccModuleInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccModuleInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccModuleInstHeader data;
  int convert_status=PyoaDataAppDef_oaOccModuleInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccModuleInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccModuleInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccModuleInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccModuleInstHeader_get,METH_VARARGS,oaDataAppDef_oaOccModuleInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccModuleInstHeader_getDefault,METH_VARARGS,oaDataAppDef_oaOccModuleInstHeader_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccModuleInstHeader_getSize,METH_VARARGS,oaDataAppDef_oaOccModuleInstHeader_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccModuleInstHeader_set,METH_VARARGS,oaDataAppDef_oaOccModuleInstHeader_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccModuleInstHeader_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccModuleInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccModuleInstHeader_tp_assign,METH_VARARGS,oaDataAppDef_oaOccModuleInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccModuleInstHeader_doc[] = 
"Class: oaDataAppDef_oaOccModuleInstHeader\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccModuleInstHeader)\n"
"    Calls: (const oaDataAppDef_oaOccModuleInstHeader&)\n"
"    Signature: oaDataAppDef_oaOccModuleInstHeader||cref-oaDataAppDef_oaOccModuleInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccModuleInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccModuleInstHeader",
    sizeof(PyoaDataAppDef_oaOccModuleInstHeaderObject),
    0,
    (destructor)oaDataAppDef_oaOccModuleInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccModuleInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccModuleInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccModuleInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccModuleInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccModuleInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccModuleInstHeader_static_find_doc[] = 
"Class: oaDataAppDef_oaOccModuleInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccModuleInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccModuleInstHeader|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccModuleInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccModuleInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccModuleInstHeaderp result= (oaDataAppDef_oaOccModuleInstHeader::find(p1.Data()));
            return PyoaDataAppDef_oaOccModuleInstHeader_FromoaDataAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccModuleInstHeaderp result= (oaDataAppDef_oaOccModuleInstHeader::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccModuleInstHeader_FromoaDataAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccModuleInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccModuleInstHeader_static_get_doc[] = 
"Class: oaDataAppDef_oaOccModuleInstHeader, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccModuleInstHeader* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccModuleInstHeader|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccModuleInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccModuleInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccModuleInstHeaderp result= (oaDataAppDef_oaOccModuleInstHeader::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccModuleInstHeader_FromoaDataAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccModuleInstHeaderp result= (oaDataAppDef_oaOccModuleInstHeader::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccModuleInstHeader_FromoaDataAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccModuleInstHeader, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccModuleInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccModuleInstHeader_static_find,METH_VARARGS,oaDataAppDef_oaOccModuleInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccModuleInstHeader_static_get,METH_VARARGS,oaDataAppDef_oaOccModuleInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccModuleInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccModuleInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccModuleInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccModuleInstHeader",
           (PyObject*)(&PyoaDataAppDef_oaOccModuleInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccModuleInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccModuleInstHeader_Type.tp_dict;
    for(method=oaDataAppDef_oaOccModuleInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccNet
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccNet_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccNet_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccNetObject* self = (PyoaDataAppDef_oaOccNetObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccNet)
    {
        PyParamoaDataAppDef_oaOccNet p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccNet_Convert,&p1)) {
            PyoaDataAppDef_oaOccNetObject* cself=((PyoaDataAppDef_oaOccNetObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccNet, Choices are:\n"
        "    (oaDataAppDef_oaOccNet)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccNet_tp_dealloc(PyoaDataAppDef_oaOccNetObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccNet_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccNet value;
    int convert_status=PyoaDataAppDef_oaOccNet_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaDataAppDef_oaOccNet::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccNet_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccNet v1;
    PyParamoaDataAppDef_oaOccNet v2;
    int convert_status1=PyoaDataAppDef_oaOccNet_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccNet_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccNet_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccNet* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccNet_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccNet**) ((PyoaDataAppDef_oaOccNetObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccNet Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccNet_FromoaDataAppDef_oaOccNet(oaDataAppDef_oaOccNet** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccNet* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccNet_Type.tp_alloc(&PyoaDataAppDef_oaOccNet_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccNetObject* self = (PyoaDataAppDef_oaOccNetObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccNet_FromoaDataAppDef_oaOccNet(oaDataAppDef_oaOccNet* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccNet_Type.tp_alloc(&PyoaDataAppDef_oaOccNet_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccNetObject* self = (PyoaDataAppDef_oaOccNetObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccNet_get_doc[] = 
"Class: oaDataAppDef_oaOccNet, Function: get\n"
"  Paramegers: (oaOccNet,[oaByte])\n"
"    Calls: void get(const oaOccNet* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccNet,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccNet_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccNet data;
    int convert_status=PyoaDataAppDef_oaOccNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccNetObject* self=(PyoaDataAppDef_oaOccNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccNet p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNet_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccNet_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccNet, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccNet_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccNet data;
    int convert_status=PyoaDataAppDef_oaOccNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccNetObject* self=(PyoaDataAppDef_oaOccNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccNet_getSize_doc[] = 
"Class: oaDataAppDef_oaOccNet, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccNet_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccNet data;
    int convert_status=PyoaDataAppDef_oaOccNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccNetObject* self=(PyoaDataAppDef_oaOccNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccNet_set_doc[] = 
"Class: oaDataAppDef_oaOccNet, Function: set\n"
"  Paramegers: (oaOccNet,[oaByte])\n"
"    Calls: void set(oaOccNet* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccNet,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccNet_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccNet data;
    int convert_status=PyoaDataAppDef_oaOccNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccNetObject* self=(PyoaDataAppDef_oaOccNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccNet p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNet_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccNet_isNull_doc[] =
"Class: oaDataAppDef_oaOccNet, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccNet_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccNet data;
    int convert_status=PyoaDataAppDef_oaOccNet_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccNet_assign_doc[] = 
"Class: oaDataAppDef_oaOccNet, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccNet_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccNet data;
  int convert_status=PyoaDataAppDef_oaOccNet_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccNet p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccNet_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccNet_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccNet_get,METH_VARARGS,oaDataAppDef_oaOccNet_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccNet_getDefault,METH_VARARGS,oaDataAppDef_oaOccNet_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccNet_getSize,METH_VARARGS,oaDataAppDef_oaOccNet_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccNet_set,METH_VARARGS,oaDataAppDef_oaOccNet_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccNet_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccNet_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccNet_tp_assign,METH_VARARGS,oaDataAppDef_oaOccNet_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccNet_doc[] = 
"Class: oaDataAppDef_oaOccNet\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccNet)\n"
"    Calls: (const oaDataAppDef_oaOccNet&)\n"
"    Signature: oaDataAppDef_oaOccNet||cref-oaDataAppDef_oaOccNet,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccNet_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccNet",
    sizeof(PyoaDataAppDef_oaOccNetObject),
    0,
    (destructor)oaDataAppDef_oaOccNet_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccNet_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccNet_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccNet_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccNet_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccNet_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccNet_static_find_doc[] = 
"Class: oaDataAppDef_oaOccNet, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccNet* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccNet|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccNet* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccNet|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccNet_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccNetp result= (oaDataAppDef_oaOccNet::find(p1.Data()));
            return PyoaDataAppDef_oaOccNet_FromoaDataAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccNetp result= (oaDataAppDef_oaOccNet::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccNet_FromoaDataAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccNet, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccNet_static_get_doc[] = 
"Class: oaDataAppDef_oaOccNet, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccNet* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccNet|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccNet* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccNet|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccNet_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccNetp result= (oaDataAppDef_oaOccNet::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccNet_FromoaDataAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccNetp result= (oaDataAppDef_oaOccNet::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccNet_FromoaDataAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccNet, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccNet_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccNet_static_find,METH_VARARGS,oaDataAppDef_oaOccNet_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccNet_static_get,METH_VARARGS,oaDataAppDef_oaOccNet_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccNet_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccNet_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccNet\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccNet",
           (PyObject*)(&PyoaDataAppDef_oaOccNet_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccNet\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccNet_Type.tp_dict;
    for(method=oaDataAppDef_oaOccNet_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccShape
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccShape_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccShape_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccShapeObject* self = (PyoaDataAppDef_oaOccShapeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccShape)
    {
        PyParamoaDataAppDef_oaOccShape p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccShape_Convert,&p1)) {
            PyoaDataAppDef_oaOccShapeObject* cself=((PyoaDataAppDef_oaOccShapeObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccShape, Choices are:\n"
        "    (oaDataAppDef_oaOccShape)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccShape_tp_dealloc(PyoaDataAppDef_oaOccShapeObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccShape_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccShape value;
    int convert_status=PyoaDataAppDef_oaOccShape_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaDataAppDef_oaOccShape::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccShape_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccShape v1;
    PyParamoaDataAppDef_oaOccShape v2;
    int convert_status1=PyoaDataAppDef_oaOccShape_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccShape_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccShape_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccShape* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccShape_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccShape**) ((PyoaDataAppDef_oaOccShapeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccShape Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccShape_FromoaDataAppDef_oaOccShape(oaDataAppDef_oaOccShape** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccShape* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccShape_Type.tp_alloc(&PyoaDataAppDef_oaOccShape_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccShapeObject* self = (PyoaDataAppDef_oaOccShapeObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccShape_FromoaDataAppDef_oaOccShape(oaDataAppDef_oaOccShape* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccShape_Type.tp_alloc(&PyoaDataAppDef_oaOccShape_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccShapeObject* self = (PyoaDataAppDef_oaOccShapeObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccShape_get_doc[] = 
"Class: oaDataAppDef_oaOccShape, Function: get\n"
"  Paramegers: (oaOccShape,[oaByte])\n"
"    Calls: void get(const oaOccShape* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccShape,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccShape_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccShape data;
    int convert_status=PyoaDataAppDef_oaOccShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccShapeObject* self=(PyoaDataAppDef_oaOccShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccShape p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccShape_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccShape_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccShape, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccShape_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccShape data;
    int convert_status=PyoaDataAppDef_oaOccShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccShapeObject* self=(PyoaDataAppDef_oaOccShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccShape_getSize_doc[] = 
"Class: oaDataAppDef_oaOccShape, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccShape_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccShape data;
    int convert_status=PyoaDataAppDef_oaOccShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccShapeObject* self=(PyoaDataAppDef_oaOccShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccShape_set_doc[] = 
"Class: oaDataAppDef_oaOccShape, Function: set\n"
"  Paramegers: (oaOccShape,[oaByte])\n"
"    Calls: void set(oaOccShape* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccShape,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccShape_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccShape data;
    int convert_status=PyoaDataAppDef_oaOccShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccShapeObject* self=(PyoaDataAppDef_oaOccShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccShape p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccShape_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccShape_isNull_doc[] =
"Class: oaDataAppDef_oaOccShape, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccShape_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccShape data;
    int convert_status=PyoaDataAppDef_oaOccShape_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccShape_assign_doc[] = 
"Class: oaDataAppDef_oaOccShape, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccShape_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccShape data;
  int convert_status=PyoaDataAppDef_oaOccShape_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccShape p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccShape_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccShape_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccShape_get,METH_VARARGS,oaDataAppDef_oaOccShape_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccShape_getDefault,METH_VARARGS,oaDataAppDef_oaOccShape_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccShape_getSize,METH_VARARGS,oaDataAppDef_oaOccShape_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccShape_set,METH_VARARGS,oaDataAppDef_oaOccShape_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccShape_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccShape_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccShape_tp_assign,METH_VARARGS,oaDataAppDef_oaOccShape_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccShape_doc[] = 
"Class: oaDataAppDef_oaOccShape\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccShape)\n"
"    Calls: (const oaDataAppDef_oaOccShape&)\n"
"    Signature: oaDataAppDef_oaOccShape||cref-oaDataAppDef_oaOccShape,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccShape_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccShape",
    sizeof(PyoaDataAppDef_oaOccShapeObject),
    0,
    (destructor)oaDataAppDef_oaOccShape_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccShape_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccShape_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccShape_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccShape_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccShape_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccShape_static_find_doc[] = 
"Class: oaDataAppDef_oaOccShape, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccShape* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccShape|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccShape* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccShape|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccShape_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccShapep result= (oaDataAppDef_oaOccShape::find(p1.Data()));
            return PyoaDataAppDef_oaOccShape_FromoaDataAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccShapep result= (oaDataAppDef_oaOccShape::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccShape_FromoaDataAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccShape, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccShape_static_get_doc[] = 
"Class: oaDataAppDef_oaOccShape, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccShape* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccShape|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccShape* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccShape|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccShape_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccShapep result= (oaDataAppDef_oaOccShape::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccShape_FromoaDataAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccShapep result= (oaDataAppDef_oaOccShape::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccShape_FromoaDataAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccShape, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccShape_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccShape_static_find,METH_VARARGS,oaDataAppDef_oaOccShape_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccShape_static_get,METH_VARARGS,oaDataAppDef_oaOccShape_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccShape_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccShape_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccShape\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccShape",
           (PyObject*)(&PyoaDataAppDef_oaOccShape_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccShape\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccShape_Type.tp_dict;
    for(method=oaDataAppDef_oaOccShape_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccTermObject* self = (PyoaDataAppDef_oaOccTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccTerm)
    {
        PyParamoaDataAppDef_oaOccTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccTerm_Convert,&p1)) {
            PyoaDataAppDef_oaOccTermObject* cself=((PyoaDataAppDef_oaOccTermObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccTerm, Choices are:\n"
        "    (oaDataAppDef_oaOccTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccTerm_tp_dealloc(PyoaDataAppDef_oaOccTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccTerm_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccTerm value;
    int convert_status=PyoaDataAppDef_oaOccTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDataAppDef_oaOccTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccTerm v1;
    PyParamoaDataAppDef_oaOccTerm v2;
    int convert_status1=PyoaDataAppDef_oaOccTerm_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccTerm_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccTerm_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccTerm**) ((PyoaDataAppDef_oaOccTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccTerm_FromoaDataAppDef_oaOccTerm(oaDataAppDef_oaOccTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccTerm* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccTerm_Type.tp_alloc(&PyoaDataAppDef_oaOccTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccTermObject* self = (PyoaDataAppDef_oaOccTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccTerm_FromoaDataAppDef_oaOccTerm(oaDataAppDef_oaOccTerm* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccTerm_Type.tp_alloc(&PyoaDataAppDef_oaOccTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccTermObject* self = (PyoaDataAppDef_oaOccTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccTerm_get_doc[] = 
"Class: oaDataAppDef_oaOccTerm, Function: get\n"
"  Paramegers: (oaOccTerm,[oaByte])\n"
"    Calls: void get(const oaOccTerm* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccTerm,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccTerm data;
    int convert_status=PyoaDataAppDef_oaOccTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccTermObject* self=(PyoaDataAppDef_oaOccTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccTerm p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTerm_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccTerm_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccTerm, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccTerm data;
    int convert_status=PyoaDataAppDef_oaOccTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccTermObject* self=(PyoaDataAppDef_oaOccTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccTerm_getSize_doc[] = 
"Class: oaDataAppDef_oaOccTerm, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccTerm_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccTerm data;
    int convert_status=PyoaDataAppDef_oaOccTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccTermObject* self=(PyoaDataAppDef_oaOccTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccTerm_set_doc[] = 
"Class: oaDataAppDef_oaOccTerm, Function: set\n"
"  Paramegers: (oaOccTerm,[oaByte])\n"
"    Calls: void set(oaOccTerm* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccTerm,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccTerm data;
    int convert_status=PyoaDataAppDef_oaOccTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccTermObject* self=(PyoaDataAppDef_oaOccTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccTerm p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTerm_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccTerm_isNull_doc[] =
"Class: oaDataAppDef_oaOccTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccTerm data;
    int convert_status=PyoaDataAppDef_oaOccTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccTerm_assign_doc[] = 
"Class: oaDataAppDef_oaOccTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccTerm data;
  int convert_status=PyoaDataAppDef_oaOccTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccTerm_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccTerm_get,METH_VARARGS,oaDataAppDef_oaOccTerm_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccTerm_getDefault,METH_VARARGS,oaDataAppDef_oaOccTerm_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccTerm_getSize,METH_VARARGS,oaDataAppDef_oaOccTerm_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccTerm_set,METH_VARARGS,oaDataAppDef_oaOccTerm_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccTerm_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccTerm_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccTerm_tp_assign,METH_VARARGS,oaDataAppDef_oaOccTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccTerm_doc[] = 
"Class: oaDataAppDef_oaOccTerm\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccTerm)\n"
"    Calls: (const oaDataAppDef_oaOccTerm&)\n"
"    Signature: oaDataAppDef_oaOccTerm||cref-oaDataAppDef_oaOccTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccTerm",
    sizeof(PyoaDataAppDef_oaOccTermObject),
    0,
    (destructor)oaDataAppDef_oaOccTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccTerm_static_find_doc[] = 
"Class: oaDataAppDef_oaOccTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccTerm|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccTermp result= (oaDataAppDef_oaOccTerm::find(p1.Data()));
            return PyoaDataAppDef_oaOccTerm_FromoaDataAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccTermp result= (oaDataAppDef_oaOccTerm::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccTerm_FromoaDataAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccTerm_static_get_doc[] = 
"Class: oaDataAppDef_oaOccTerm, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccTerm* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccTerm|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccTerm* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccTermp result= (oaDataAppDef_oaOccTerm::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccTerm_FromoaDataAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccTermp result= (oaDataAppDef_oaOccTerm::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccTerm_FromoaDataAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccTerm, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccTerm_static_find,METH_VARARGS,oaDataAppDef_oaOccTerm_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccTerm_static_get,METH_VARARGS,oaDataAppDef_oaOccTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccTerm",
           (PyObject*)(&PyoaDataAppDef_oaOccTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccTerm_Type.tp_dict;
    for(method=oaDataAppDef_oaOccTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccVectorInstDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccVectorInstDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccVectorInstDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccVectorInstDefObject* self = (PyoaDataAppDef_oaOccVectorInstDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccVectorInstDef)
    {
        PyParamoaDataAppDef_oaOccVectorInstDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccVectorInstDef_Convert,&p1)) {
            PyoaDataAppDef_oaOccVectorInstDefObject* cself=((PyoaDataAppDef_oaOccVectorInstDefObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccVectorInstDef, Choices are:\n"
        "    (oaDataAppDef_oaOccVectorInstDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccVectorInstDef_tp_dealloc(PyoaDataAppDef_oaOccVectorInstDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccVectorInstDef_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccVectorInstDef value;
    int convert_status=PyoaDataAppDef_oaOccVectorInstDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaDataAppDef_oaOccVectorInstDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccVectorInstDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccVectorInstDef v1;
    PyParamoaDataAppDef_oaOccVectorInstDef v2;
    int convert_status1=PyoaDataAppDef_oaOccVectorInstDef_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccVectorInstDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccVectorInstDef_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccVectorInstDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccVectorInstDef_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccVectorInstDef**) ((PyoaDataAppDef_oaOccVectorInstDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccVectorInstDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccVectorInstDef_FromoaDataAppDef_oaOccVectorInstDef(oaDataAppDef_oaOccVectorInstDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccVectorInstDef* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccVectorInstDef_Type.tp_alloc(&PyoaDataAppDef_oaOccVectorInstDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccVectorInstDefObject* self = (PyoaDataAppDef_oaOccVectorInstDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccVectorInstDef_FromoaDataAppDef_oaOccVectorInstDef(oaDataAppDef_oaOccVectorInstDef* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccVectorInstDef_Type.tp_alloc(&PyoaDataAppDef_oaOccVectorInstDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccVectorInstDefObject* self = (PyoaDataAppDef_oaOccVectorInstDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccVectorInstDef_get_doc[] = 
"Class: oaDataAppDef_oaOccVectorInstDef, Function: get\n"
"  Paramegers: (oaOccVectorInstDef,[oaByte])\n"
"    Calls: void get(const oaOccVectorInstDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccVectorInstDef,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccVectorInstDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccVectorInstDef data;
    int convert_status=PyoaDataAppDef_oaOccVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccVectorInstDefObject* self=(PyoaDataAppDef_oaOccVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccVectorInstDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccVectorInstDef_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccVectorInstDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccVectorInstDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccVectorInstDef data;
    int convert_status=PyoaDataAppDef_oaOccVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccVectorInstDefObject* self=(PyoaDataAppDef_oaOccVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccVectorInstDef_getSize_doc[] = 
"Class: oaDataAppDef_oaOccVectorInstDef, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccVectorInstDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccVectorInstDef data;
    int convert_status=PyoaDataAppDef_oaOccVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccVectorInstDefObject* self=(PyoaDataAppDef_oaOccVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccVectorInstDef_set_doc[] = 
"Class: oaDataAppDef_oaOccVectorInstDef, Function: set\n"
"  Paramegers: (oaOccVectorInstDef,[oaByte])\n"
"    Calls: void set(oaOccVectorInstDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccVectorInstDef,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccVectorInstDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccVectorInstDef data;
    int convert_status=PyoaDataAppDef_oaOccVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccVectorInstDefObject* self=(PyoaDataAppDef_oaOccVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccVectorInstDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccVectorInstDef_isNull_doc[] =
"Class: oaDataAppDef_oaOccVectorInstDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccVectorInstDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccVectorInstDef data;
    int convert_status=PyoaDataAppDef_oaOccVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccVectorInstDef_assign_doc[] = 
"Class: oaDataAppDef_oaOccVectorInstDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccVectorInstDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccVectorInstDef data;
  int convert_status=PyoaDataAppDef_oaOccVectorInstDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccVectorInstDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccVectorInstDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccVectorInstDef_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccVectorInstDef_get,METH_VARARGS,oaDataAppDef_oaOccVectorInstDef_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccVectorInstDef_getDefault,METH_VARARGS,oaDataAppDef_oaOccVectorInstDef_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccVectorInstDef_getSize,METH_VARARGS,oaDataAppDef_oaOccVectorInstDef_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccVectorInstDef_set,METH_VARARGS,oaDataAppDef_oaOccVectorInstDef_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccVectorInstDef_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccVectorInstDef_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccVectorInstDef_tp_assign,METH_VARARGS,oaDataAppDef_oaOccVectorInstDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccVectorInstDef_doc[] = 
"Class: oaDataAppDef_oaOccVectorInstDef\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccVectorInstDef)\n"
"    Calls: (const oaDataAppDef_oaOccVectorInstDef&)\n"
"    Signature: oaDataAppDef_oaOccVectorInstDef||cref-oaDataAppDef_oaOccVectorInstDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccVectorInstDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccVectorInstDef",
    sizeof(PyoaDataAppDef_oaOccVectorInstDefObject),
    0,
    (destructor)oaDataAppDef_oaOccVectorInstDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccVectorInstDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccVectorInstDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccVectorInstDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccVectorInstDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccVectorInstDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccVectorInstDef_static_find_doc[] = 
"Class: oaDataAppDef_oaOccVectorInstDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccVectorInstDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccVectorInstDef|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccVectorInstDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccVectorInstDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccVectorInstDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccVectorInstDefp result= (oaDataAppDef_oaOccVectorInstDef::find(p1.Data()));
            return PyoaDataAppDef_oaOccVectorInstDef_FromoaDataAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccVectorInstDefp result= (oaDataAppDef_oaOccVectorInstDef::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccVectorInstDef_FromoaDataAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccVectorInstDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccVectorInstDef_static_get_doc[] = 
"Class: oaDataAppDef_oaOccVectorInstDef, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccVectorInstDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccVectorInstDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccVectorInstDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccVectorInstDefp result= (oaDataAppDef_oaOccVectorInstDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccVectorInstDef_FromoaDataAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccVectorInstDefp result= (oaDataAppDef_oaOccVectorInstDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccVectorInstDef_FromoaDataAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccVectorInstDef, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccVectorInstDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccVectorInstDef_static_find,METH_VARARGS,oaDataAppDef_oaOccVectorInstDef_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccVectorInstDef_static_get,METH_VARARGS,oaDataAppDef_oaOccVectorInstDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccVectorInstDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccVectorInstDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccVectorInstDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccVectorInstDef",
           (PyObject*)(&PyoaDataAppDef_oaOccVectorInstDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccVectorInstDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccVectorInstDef_Type.tp_dict;
    for(method=oaDataAppDef_oaOccVectorInstDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOccurrence
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccurrence_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOccurrence_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOccurrenceObject* self = (PyoaDataAppDef_oaOccurrenceObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOccurrence)
    {
        PyParamoaDataAppDef_oaOccurrence p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOccurrence_Convert,&p1)) {
            PyoaDataAppDef_oaOccurrenceObject* cself=((PyoaDataAppDef_oaOccurrenceObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOccurrence, Choices are:\n"
        "    (oaDataAppDef_oaOccurrence)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOccurrence_tp_dealloc(PyoaDataAppDef_oaOccurrenceObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOccurrence_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOccurrence value;
    int convert_status=PyoaDataAppDef_oaOccurrence_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaDataAppDef_oaOccurrence::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOccurrence_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOccurrence v1;
    PyParamoaDataAppDef_oaOccurrence v2;
    int convert_status1=PyoaDataAppDef_oaOccurrence_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOccurrence_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOccurrence_Convert(PyObject* ob,PyParamoaDataAppDef_oaOccurrence* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOccurrence_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOccurrence**) ((PyoaDataAppDef_oaOccurrenceObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOccurrence Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccurrence_FromoaDataAppDef_oaOccurrence(oaDataAppDef_oaOccurrence** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOccurrence* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOccurrence_Type.tp_alloc(&PyoaDataAppDef_oaOccurrence_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOccurrenceObject* self = (PyoaDataAppDef_oaOccurrenceObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOccurrence_FromoaDataAppDef_oaOccurrence(oaDataAppDef_oaOccurrence* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOccurrence_Type.tp_alloc(&PyoaDataAppDef_oaOccurrence_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOccurrenceObject* self = (PyoaDataAppDef_oaOccurrenceObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccurrence_get_doc[] = 
"Class: oaDataAppDef_oaOccurrence, Function: get\n"
"  Paramegers: (oaOccurrence,[oaByte])\n"
"    Calls: void get(const oaOccurrence* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOccurrence,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccurrence_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccurrence data;
    int convert_status=PyoaDataAppDef_oaOccurrence_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccurrenceObject* self=(PyoaDataAppDef_oaOccurrenceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccurrence p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccurrence_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccurrence_getDefault_doc[] = 
"Class: oaDataAppDef_oaOccurrence, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOccurrence_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccurrence data;
    int convert_status=PyoaDataAppDef_oaOccurrence_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccurrenceObject* self=(PyoaDataAppDef_oaOccurrenceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccurrence_getSize_doc[] = 
"Class: oaDataAppDef_oaOccurrence, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOccurrence_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccurrence data;
    int convert_status=PyoaDataAppDef_oaOccurrence_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccurrenceObject* self=(PyoaDataAppDef_oaOccurrenceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccurrence_set_doc[] = 
"Class: oaDataAppDef_oaOccurrence, Function: set\n"
"  Paramegers: (oaOccurrence,[oaByte])\n"
"    Calls: void set(oaOccurrence* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOccurrence,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOccurrence_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOccurrence data;
    int convert_status=PyoaDataAppDef_oaOccurrence_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOccurrenceObject* self=(PyoaDataAppDef_oaOccurrenceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccurrence p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccurrence_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccurrence_isNull_doc[] =
"Class: oaDataAppDef_oaOccurrence, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOccurrence_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOccurrence data;
    int convert_status=PyoaDataAppDef_oaOccurrence_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOccurrence_assign_doc[] = 
"Class: oaDataAppDef_oaOccurrence, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOccurrence_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOccurrence data;
  int convert_status=PyoaDataAppDef_oaOccurrence_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOccurrence p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOccurrence_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOccurrence_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOccurrence_get,METH_VARARGS,oaDataAppDef_oaOccurrence_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOccurrence_getDefault,METH_VARARGS,oaDataAppDef_oaOccurrence_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOccurrence_getSize,METH_VARARGS,oaDataAppDef_oaOccurrence_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOccurrence_set,METH_VARARGS,oaDataAppDef_oaOccurrence_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOccurrence_tp_isNull,METH_VARARGS,oaDataAppDef_oaOccurrence_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOccurrence_tp_assign,METH_VARARGS,oaDataAppDef_oaOccurrence_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccurrence_doc[] = 
"Class: oaDataAppDef_oaOccurrence\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOccurrence)\n"
"    Calls: (const oaDataAppDef_oaOccurrence&)\n"
"    Signature: oaDataAppDef_oaOccurrence||cref-oaDataAppDef_oaOccurrence,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOccurrence_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOccurrence",
    sizeof(PyoaDataAppDef_oaOccurrenceObject),
    0,
    (destructor)oaDataAppDef_oaOccurrence_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOccurrence_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOccurrence_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOccurrence_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOccurrence_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOccurrence_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccurrence_static_find_doc[] = 
"Class: oaDataAppDef_oaOccurrence, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOccurrence* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccurrence|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOccurrence* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOccurrence|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOccurrence_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOccurrencep result= (oaDataAppDef_oaOccurrence::find(p1.Data()));
            return PyoaDataAppDef_oaOccurrence_FromoaDataAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccurrencep result= (oaDataAppDef_oaOccurrence::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOccurrence_FromoaDataAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccurrence, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOccurrence_static_get_doc[] = 
"Class: oaDataAppDef_oaOccurrence, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccurrence* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccurrence|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOccurrence* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOccurrence|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOccurrence_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOccurrencep result= (oaDataAppDef_oaOccurrence::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOccurrence_FromoaDataAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOccurrencep result= (oaDataAppDef_oaOccurrence::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOccurrence_FromoaDataAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOccurrence, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOccurrence_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOccurrence_static_find,METH_VARARGS,oaDataAppDef_oaOccurrence_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOccurrence_static_get,METH_VARARGS,oaDataAppDef_oaOccurrence_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOccurrence_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOccurrence_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOccurrence\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOccurrence",
           (PyObject*)(&PyoaDataAppDef_oaOccurrence_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOccurrence\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOccurrence_Type.tp_dict;
    for(method=oaDataAppDef_oaOccurrence_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaOpPointHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOpPointHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaOpPointHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaOpPointHeaderObject* self = (PyoaDataAppDef_oaOpPointHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaOpPointHeader)
    {
        PyParamoaDataAppDef_oaOpPointHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaOpPointHeader_Convert,&p1)) {
            PyoaDataAppDef_oaOpPointHeaderObject* cself=((PyoaDataAppDef_oaOpPointHeaderObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaOpPointHeader, Choices are:\n"
        "    (oaDataAppDef_oaOpPointHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaOpPointHeader_tp_dealloc(PyoaDataAppDef_oaOpPointHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaOpPointHeader_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaOpPointHeader value;
    int convert_status=PyoaDataAppDef_oaOpPointHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDataAppDef_oaOpPointHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaOpPointHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaOpPointHeader v1;
    PyParamoaDataAppDef_oaOpPointHeader v2;
    int convert_status1=PyoaDataAppDef_oaOpPointHeader_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaOpPointHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaOpPointHeader_Convert(PyObject* ob,PyParamoaDataAppDef_oaOpPointHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaOpPointHeader_Check(ob)) {
        result->SetData( (oaDataAppDef_oaOpPointHeader**) ((PyoaDataAppDef_oaOpPointHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaOpPointHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOpPointHeader_FromoaDataAppDef_oaOpPointHeader(oaDataAppDef_oaOpPointHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaOpPointHeader* data=*value;
        PyObject* bself = PyoaDataAppDef_oaOpPointHeader_Type.tp_alloc(&PyoaDataAppDef_oaOpPointHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaOpPointHeaderObject* self = (PyoaDataAppDef_oaOpPointHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaOpPointHeader_FromoaDataAppDef_oaOpPointHeader(oaDataAppDef_oaOpPointHeader* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaOpPointHeader_Type.tp_alloc(&PyoaDataAppDef_oaOpPointHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaOpPointHeaderObject* self = (PyoaDataAppDef_oaOpPointHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOpPointHeader_get_doc[] = 
"Class: oaDataAppDef_oaOpPointHeader, Function: get\n"
"  Paramegers: (oaOpPointHeader,[oaByte])\n"
"    Calls: void get(const oaOpPointHeader* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaOpPointHeader,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOpPointHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOpPointHeader data;
    int convert_status=PyoaDataAppDef_oaOpPointHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOpPointHeaderObject* self=(PyoaDataAppDef_oaOpPointHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOpPointHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPointHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOpPointHeader_getDefault_doc[] = 
"Class: oaDataAppDef_oaOpPointHeader, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaOpPointHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOpPointHeader data;
    int convert_status=PyoaDataAppDef_oaOpPointHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOpPointHeaderObject* self=(PyoaDataAppDef_oaOpPointHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOpPointHeader_getSize_doc[] = 
"Class: oaDataAppDef_oaOpPointHeader, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaOpPointHeader_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOpPointHeader data;
    int convert_status=PyoaDataAppDef_oaOpPointHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOpPointHeaderObject* self=(PyoaDataAppDef_oaOpPointHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOpPointHeader_set_doc[] = 
"Class: oaDataAppDef_oaOpPointHeader, Function: set\n"
"  Paramegers: (oaOpPointHeader,[oaByte])\n"
"    Calls: void set(oaOpPointHeader* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaOpPointHeader,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaOpPointHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaOpPointHeader data;
    int convert_status=PyoaDataAppDef_oaOpPointHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaOpPointHeaderObject* self=(PyoaDataAppDef_oaOpPointHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOpPointHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPointHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOpPointHeader_isNull_doc[] =
"Class: oaDataAppDef_oaOpPointHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaOpPointHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaOpPointHeader data;
    int convert_status=PyoaDataAppDef_oaOpPointHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaOpPointHeader_assign_doc[] = 
"Class: oaDataAppDef_oaOpPointHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaOpPointHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaOpPointHeader data;
  int convert_status=PyoaDataAppDef_oaOpPointHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaOpPointHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaOpPointHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaOpPointHeader_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaOpPointHeader_get,METH_VARARGS,oaDataAppDef_oaOpPointHeader_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaOpPointHeader_getDefault,METH_VARARGS,oaDataAppDef_oaOpPointHeader_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaOpPointHeader_getSize,METH_VARARGS,oaDataAppDef_oaOpPointHeader_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaOpPointHeader_set,METH_VARARGS,oaDataAppDef_oaOpPointHeader_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaOpPointHeader_tp_isNull,METH_VARARGS,oaDataAppDef_oaOpPointHeader_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaOpPointHeader_tp_assign,METH_VARARGS,oaDataAppDef_oaOpPointHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOpPointHeader_doc[] = 
"Class: oaDataAppDef_oaOpPointHeader\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaOpPointHeader)\n"
"    Calls: (const oaDataAppDef_oaOpPointHeader&)\n"
"    Signature: oaDataAppDef_oaOpPointHeader||cref-oaDataAppDef_oaOpPointHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaOpPointHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaOpPointHeader",
    sizeof(PyoaDataAppDef_oaOpPointHeaderObject),
    0,
    (destructor)oaDataAppDef_oaOpPointHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaOpPointHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaOpPointHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaOpPointHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaOpPointHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaOpPointHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaOpPointHeader_static_find_doc[] = 
"Class: oaDataAppDef_oaOpPointHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaOpPointHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaOpPointHeader|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaOpPointHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaOpPointHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaOpPointHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaOpPointHeaderp result= (oaDataAppDef_oaOpPointHeader::find(p1.Data()));
            return PyoaDataAppDef_oaOpPointHeader_FromoaDataAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOpPointHeaderp result= (oaDataAppDef_oaOpPointHeader::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaOpPointHeader_FromoaDataAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOpPointHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaOpPointHeader_static_get_doc[] = 
"Class: oaDataAppDef_oaOpPointHeader, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOpPointHeader* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOpPointHeader|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaOpPointHeader* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaOpPointHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaOpPointHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaOpPointHeaderp result= (oaDataAppDef_oaOpPointHeader::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaOpPointHeader_FromoaDataAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaOpPointHeaderp result= (oaDataAppDef_oaOpPointHeader::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaOpPointHeader_FromoaDataAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaOpPointHeader, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaOpPointHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaOpPointHeader_static_find,METH_VARARGS,oaDataAppDef_oaOpPointHeader_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaOpPointHeader_static_get,METH_VARARGS,oaDataAppDef_oaOpPointHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaOpPointHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaOpPointHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaOpPointHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaOpPointHeader",
           (PyObject*)(&PyoaDataAppDef_oaOpPointHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaOpPointHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaOpPointHeader_Type.tp_dict;
    for(method=oaDataAppDef_oaOpPointHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaParasiticNetwork
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaParasiticNetwork_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaParasiticNetwork_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaParasiticNetworkObject* self = (PyoaDataAppDef_oaParasiticNetworkObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaParasiticNetwork)
    {
        PyParamoaDataAppDef_oaParasiticNetwork p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaParasiticNetwork_Convert,&p1)) {
            PyoaDataAppDef_oaParasiticNetworkObject* cself=((PyoaDataAppDef_oaParasiticNetworkObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaParasiticNetwork, Choices are:\n"
        "    (oaDataAppDef_oaParasiticNetwork)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaParasiticNetwork_tp_dealloc(PyoaDataAppDef_oaParasiticNetworkObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaParasiticNetwork_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaParasiticNetwork value;
    int convert_status=PyoaDataAppDef_oaParasiticNetwork_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaDataAppDef_oaParasiticNetwork::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaParasiticNetwork_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaParasiticNetwork v1;
    PyParamoaDataAppDef_oaParasiticNetwork v2;
    int convert_status1=PyoaDataAppDef_oaParasiticNetwork_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaParasiticNetwork_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaParasiticNetwork_Convert(PyObject* ob,PyParamoaDataAppDef_oaParasiticNetwork* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaParasiticNetwork_Check(ob)) {
        result->SetData( (oaDataAppDef_oaParasiticNetwork**) ((PyoaDataAppDef_oaParasiticNetworkObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaParasiticNetwork Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaParasiticNetwork_FromoaDataAppDef_oaParasiticNetwork(oaDataAppDef_oaParasiticNetwork** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaParasiticNetwork* data=*value;
        PyObject* bself = PyoaDataAppDef_oaParasiticNetwork_Type.tp_alloc(&PyoaDataAppDef_oaParasiticNetwork_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaParasiticNetworkObject* self = (PyoaDataAppDef_oaParasiticNetworkObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaParasiticNetwork_FromoaDataAppDef_oaParasiticNetwork(oaDataAppDef_oaParasiticNetwork* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaParasiticNetwork_Type.tp_alloc(&PyoaDataAppDef_oaParasiticNetwork_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaParasiticNetworkObject* self = (PyoaDataAppDef_oaParasiticNetworkObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaParasiticNetwork_get_doc[] = 
"Class: oaDataAppDef_oaParasiticNetwork, Function: get\n"
"  Paramegers: (oaParasiticNetwork,[oaByte])\n"
"    Calls: void get(const oaParasiticNetwork* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaParasiticNetwork,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaParasiticNetwork_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaParasiticNetwork data;
    int convert_status=PyoaDataAppDef_oaParasiticNetwork_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaParasiticNetworkObject* self=(PyoaDataAppDef_oaParasiticNetworkObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaParasiticNetwork p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaParasiticNetwork_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaParasiticNetwork_getDefault_doc[] = 
"Class: oaDataAppDef_oaParasiticNetwork, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaParasiticNetwork_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaParasiticNetwork data;
    int convert_status=PyoaDataAppDef_oaParasiticNetwork_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaParasiticNetworkObject* self=(PyoaDataAppDef_oaParasiticNetworkObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaParasiticNetwork_getSize_doc[] = 
"Class: oaDataAppDef_oaParasiticNetwork, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaParasiticNetwork_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaParasiticNetwork data;
    int convert_status=PyoaDataAppDef_oaParasiticNetwork_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaParasiticNetworkObject* self=(PyoaDataAppDef_oaParasiticNetworkObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaParasiticNetwork_set_doc[] = 
"Class: oaDataAppDef_oaParasiticNetwork, Function: set\n"
"  Paramegers: (oaParasiticNetwork,[oaByte])\n"
"    Calls: void set(oaParasiticNetwork* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaParasiticNetwork,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaParasiticNetwork_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaParasiticNetwork data;
    int convert_status=PyoaDataAppDef_oaParasiticNetwork_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaParasiticNetworkObject* self=(PyoaDataAppDef_oaParasiticNetworkObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaParasiticNetwork p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaParasiticNetwork_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaParasiticNetwork_isNull_doc[] =
"Class: oaDataAppDef_oaParasiticNetwork, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaParasiticNetwork_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaParasiticNetwork data;
    int convert_status=PyoaDataAppDef_oaParasiticNetwork_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaParasiticNetwork_assign_doc[] = 
"Class: oaDataAppDef_oaParasiticNetwork, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaParasiticNetwork_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaParasiticNetwork data;
  int convert_status=PyoaDataAppDef_oaParasiticNetwork_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaParasiticNetwork p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaParasiticNetwork_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaParasiticNetwork_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaParasiticNetwork_get,METH_VARARGS,oaDataAppDef_oaParasiticNetwork_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaParasiticNetwork_getDefault,METH_VARARGS,oaDataAppDef_oaParasiticNetwork_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaParasiticNetwork_getSize,METH_VARARGS,oaDataAppDef_oaParasiticNetwork_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaParasiticNetwork_set,METH_VARARGS,oaDataAppDef_oaParasiticNetwork_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaParasiticNetwork_tp_isNull,METH_VARARGS,oaDataAppDef_oaParasiticNetwork_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaParasiticNetwork_tp_assign,METH_VARARGS,oaDataAppDef_oaParasiticNetwork_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaParasiticNetwork_doc[] = 
"Class: oaDataAppDef_oaParasiticNetwork\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaParasiticNetwork)\n"
"    Calls: (const oaDataAppDef_oaParasiticNetwork&)\n"
"    Signature: oaDataAppDef_oaParasiticNetwork||cref-oaDataAppDef_oaParasiticNetwork,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaParasiticNetwork_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaParasiticNetwork",
    sizeof(PyoaDataAppDef_oaParasiticNetworkObject),
    0,
    (destructor)oaDataAppDef_oaParasiticNetwork_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaParasiticNetwork_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaParasiticNetwork_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaParasiticNetwork_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaParasiticNetwork_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaParasiticNetwork_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaParasiticNetwork_static_find_doc[] = 
"Class: oaDataAppDef_oaParasiticNetwork, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaParasiticNetwork* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaParasiticNetwork|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaParasiticNetwork* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaParasiticNetwork|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaParasiticNetwork_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaParasiticNetworkp result= (oaDataAppDef_oaParasiticNetwork::find(p1.Data()));
            return PyoaDataAppDef_oaParasiticNetwork_FromoaDataAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaParasiticNetworkp result= (oaDataAppDef_oaParasiticNetwork::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaParasiticNetwork_FromoaDataAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaParasiticNetwork, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaParasiticNetwork_static_get_doc[] = 
"Class: oaDataAppDef_oaParasiticNetwork, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaParasiticNetwork* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaParasiticNetwork|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaParasiticNetwork* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaParasiticNetwork|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaParasiticNetwork_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaParasiticNetworkp result= (oaDataAppDef_oaParasiticNetwork::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaParasiticNetwork_FromoaDataAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaParasiticNetworkp result= (oaDataAppDef_oaParasiticNetwork::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaParasiticNetwork_FromoaDataAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaParasiticNetwork, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaParasiticNetwork_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaParasiticNetwork_static_find,METH_VARARGS,oaDataAppDef_oaParasiticNetwork_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaParasiticNetwork_static_get,METH_VARARGS,oaDataAppDef_oaParasiticNetwork_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaParasiticNetwork_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaParasiticNetwork_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaParasiticNetwork\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaParasiticNetwork",
           (PyObject*)(&PyoaDataAppDef_oaParasiticNetwork_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaParasiticNetwork\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaParasiticNetwork_Type.tp_dict;
    for(method=oaDataAppDef_oaParasiticNetwork_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaPin
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaPin_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaPin_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaPinObject* self = (PyoaDataAppDef_oaPinObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaPin)
    {
        PyParamoaDataAppDef_oaPin p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaPin_Convert,&p1)) {
            PyoaDataAppDef_oaPinObject* cself=((PyoaDataAppDef_oaPinObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaPin, Choices are:\n"
        "    (oaDataAppDef_oaPin)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaPin_tp_dealloc(PyoaDataAppDef_oaPinObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaPin_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaPin value;
    int convert_status=PyoaDataAppDef_oaPin_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaDataAppDef_oaPin::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaPin_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaPin v1;
    PyParamoaDataAppDef_oaPin v2;
    int convert_status1=PyoaDataAppDef_oaPin_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaPin_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaPin_Convert(PyObject* ob,PyParamoaDataAppDef_oaPin* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaPin_Check(ob)) {
        result->SetData( (oaDataAppDef_oaPin**) ((PyoaDataAppDef_oaPinObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaPin Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaPin_FromoaDataAppDef_oaPin(oaDataAppDef_oaPin** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaPin* data=*value;
        PyObject* bself = PyoaDataAppDef_oaPin_Type.tp_alloc(&PyoaDataAppDef_oaPin_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaPinObject* self = (PyoaDataAppDef_oaPinObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaPin_FromoaDataAppDef_oaPin(oaDataAppDef_oaPin* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaPin_Type.tp_alloc(&PyoaDataAppDef_oaPin_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaPinObject* self = (PyoaDataAppDef_oaPinObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaPin_get_doc[] = 
"Class: oaDataAppDef_oaPin, Function: get\n"
"  Paramegers: (oaPin,[oaByte])\n"
"    Calls: void get(const oaPin* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaPin,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaPin_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPin data;
    int convert_status=PyoaDataAppDef_oaPin_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPinObject* self=(PyoaDataAppDef_oaPinObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPin p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPin_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPin_getDefault_doc[] = 
"Class: oaDataAppDef_oaPin, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaPin_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPin data;
    int convert_status=PyoaDataAppDef_oaPin_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPinObject* self=(PyoaDataAppDef_oaPinObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPin_getSize_doc[] = 
"Class: oaDataAppDef_oaPin, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaPin_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPin data;
    int convert_status=PyoaDataAppDef_oaPin_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPinObject* self=(PyoaDataAppDef_oaPinObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPin_set_doc[] = 
"Class: oaDataAppDef_oaPin, Function: set\n"
"  Paramegers: (oaPin,[oaByte])\n"
"    Calls: void set(oaPin* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaPin,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaPin_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPin data;
    int convert_status=PyoaDataAppDef_oaPin_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPinObject* self=(PyoaDataAppDef_oaPinObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPin p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPin_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPin_isNull_doc[] =
"Class: oaDataAppDef_oaPin, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaPin_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaPin data;
    int convert_status=PyoaDataAppDef_oaPin_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaPin_assign_doc[] = 
"Class: oaDataAppDef_oaPin, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaPin_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaPin data;
  int convert_status=PyoaDataAppDef_oaPin_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaPin p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaPin_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaPin_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaPin_get,METH_VARARGS,oaDataAppDef_oaPin_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaPin_getDefault,METH_VARARGS,oaDataAppDef_oaPin_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaPin_getSize,METH_VARARGS,oaDataAppDef_oaPin_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaPin_set,METH_VARARGS,oaDataAppDef_oaPin_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaPin_tp_isNull,METH_VARARGS,oaDataAppDef_oaPin_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaPin_tp_assign,METH_VARARGS,oaDataAppDef_oaPin_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaPin_doc[] = 
"Class: oaDataAppDef_oaPin\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaPin)\n"
"    Calls: (const oaDataAppDef_oaPin&)\n"
"    Signature: oaDataAppDef_oaPin||cref-oaDataAppDef_oaPin,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaPin_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaPin",
    sizeof(PyoaDataAppDef_oaPinObject),
    0,
    (destructor)oaDataAppDef_oaPin_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaPin_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaPin_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaPin_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaPin_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaPin_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaPin_static_find_doc[] = 
"Class: oaDataAppDef_oaPin, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaPin* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaPin|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaPin* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaPin|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaPin_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaPinp result= (oaDataAppDef_oaPin::find(p1.Data()));
            return PyoaDataAppDef_oaPin_FromoaDataAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaPinp result= (oaDataAppDef_oaPin::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaPin_FromoaDataAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaPin, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPin_static_get_doc[] = 
"Class: oaDataAppDef_oaPin, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaPin* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaPin|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaPin* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaPin|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaPin_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaPinp result= (oaDataAppDef_oaPin::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaPin_FromoaDataAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaPinp result= (oaDataAppDef_oaPin::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaPin_FromoaDataAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaPin, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaPin_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaPin_static_find,METH_VARARGS,oaDataAppDef_oaPin_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaPin_static_get,METH_VARARGS,oaDataAppDef_oaPin_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaPin_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaPin_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaPin\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaPin",
           (PyObject*)(&PyoaDataAppDef_oaPin_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaPin\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaPin_Type.tp_dict;
    for(method=oaDataAppDef_oaPin_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaPoleResidue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaPoleResidue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaPoleResidue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaPoleResidueObject* self = (PyoaDataAppDef_oaPoleResidueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaPoleResidue)
    {
        PyParamoaDataAppDef_oaPoleResidue p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaPoleResidue_Convert,&p1)) {
            PyoaDataAppDef_oaPoleResidueObject* cself=((PyoaDataAppDef_oaPoleResidueObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaPoleResidue, Choices are:\n"
        "    (oaDataAppDef_oaPoleResidue)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaPoleResidue_tp_dealloc(PyoaDataAppDef_oaPoleResidueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaPoleResidue_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaPoleResidue value;
    int convert_status=PyoaDataAppDef_oaPoleResidue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaDataAppDef_oaPoleResidue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaPoleResidue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaPoleResidue v1;
    PyParamoaDataAppDef_oaPoleResidue v2;
    int convert_status1=PyoaDataAppDef_oaPoleResidue_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaPoleResidue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaPoleResidue_Convert(PyObject* ob,PyParamoaDataAppDef_oaPoleResidue* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaPoleResidue_Check(ob)) {
        result->SetData( (oaDataAppDef_oaPoleResidue**) ((PyoaDataAppDef_oaPoleResidueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaPoleResidue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaPoleResidue_FromoaDataAppDef_oaPoleResidue(oaDataAppDef_oaPoleResidue** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaPoleResidue* data=*value;
        PyObject* bself = PyoaDataAppDef_oaPoleResidue_Type.tp_alloc(&PyoaDataAppDef_oaPoleResidue_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaPoleResidueObject* self = (PyoaDataAppDef_oaPoleResidueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaPoleResidue_FromoaDataAppDef_oaPoleResidue(oaDataAppDef_oaPoleResidue* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaPoleResidue_Type.tp_alloc(&PyoaDataAppDef_oaPoleResidue_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaPoleResidueObject* self = (PyoaDataAppDef_oaPoleResidueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaPoleResidue_get_doc[] = 
"Class: oaDataAppDef_oaPoleResidue, Function: get\n"
"  Paramegers: (oaPoleResidue,[oaByte])\n"
"    Calls: void get(const oaPoleResidue* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaPoleResidue,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaPoleResidue_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPoleResidue data;
    int convert_status=PyoaDataAppDef_oaPoleResidue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPoleResidueObject* self=(PyoaDataAppDef_oaPoleResidueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoleResidue p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPoleResidue_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPoleResidue_getDefault_doc[] = 
"Class: oaDataAppDef_oaPoleResidue, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaPoleResidue_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPoleResidue data;
    int convert_status=PyoaDataAppDef_oaPoleResidue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPoleResidueObject* self=(PyoaDataAppDef_oaPoleResidueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPoleResidue_getSize_doc[] = 
"Class: oaDataAppDef_oaPoleResidue, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaPoleResidue_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPoleResidue data;
    int convert_status=PyoaDataAppDef_oaPoleResidue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPoleResidueObject* self=(PyoaDataAppDef_oaPoleResidueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPoleResidue_set_doc[] = 
"Class: oaDataAppDef_oaPoleResidue, Function: set\n"
"  Paramegers: (oaPoleResidue,[oaByte])\n"
"    Calls: void set(oaPoleResidue* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaPoleResidue,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaPoleResidue_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPoleResidue data;
    int convert_status=PyoaDataAppDef_oaPoleResidue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPoleResidueObject* self=(PyoaDataAppDef_oaPoleResidueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoleResidue p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPoleResidue_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPoleResidue_isNull_doc[] =
"Class: oaDataAppDef_oaPoleResidue, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaPoleResidue_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaPoleResidue data;
    int convert_status=PyoaDataAppDef_oaPoleResidue_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaPoleResidue_assign_doc[] = 
"Class: oaDataAppDef_oaPoleResidue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaPoleResidue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaPoleResidue data;
  int convert_status=PyoaDataAppDef_oaPoleResidue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaPoleResidue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaPoleResidue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaPoleResidue_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaPoleResidue_get,METH_VARARGS,oaDataAppDef_oaPoleResidue_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaPoleResidue_getDefault,METH_VARARGS,oaDataAppDef_oaPoleResidue_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaPoleResidue_getSize,METH_VARARGS,oaDataAppDef_oaPoleResidue_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaPoleResidue_set,METH_VARARGS,oaDataAppDef_oaPoleResidue_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaPoleResidue_tp_isNull,METH_VARARGS,oaDataAppDef_oaPoleResidue_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaPoleResidue_tp_assign,METH_VARARGS,oaDataAppDef_oaPoleResidue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaPoleResidue_doc[] = 
"Class: oaDataAppDef_oaPoleResidue\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaPoleResidue)\n"
"    Calls: (const oaDataAppDef_oaPoleResidue&)\n"
"    Signature: oaDataAppDef_oaPoleResidue||cref-oaDataAppDef_oaPoleResidue,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaPoleResidue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaPoleResidue",
    sizeof(PyoaDataAppDef_oaPoleResidueObject),
    0,
    (destructor)oaDataAppDef_oaPoleResidue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaPoleResidue_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaPoleResidue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaPoleResidue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaPoleResidue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaPoleResidue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaPoleResidue_static_find_doc[] = 
"Class: oaDataAppDef_oaPoleResidue, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaPoleResidue* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaPoleResidue|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaPoleResidue* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaPoleResidue|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaPoleResidue_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaPoleResiduep result= (oaDataAppDef_oaPoleResidue::find(p1.Data()));
            return PyoaDataAppDef_oaPoleResidue_FromoaDataAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaPoleResiduep result= (oaDataAppDef_oaPoleResidue::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaPoleResidue_FromoaDataAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaPoleResidue, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPoleResidue_static_get_doc[] = 
"Class: oaDataAppDef_oaPoleResidue, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaPoleResidue* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaPoleResidue|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaPoleResidue* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaPoleResidue|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaPoleResidue_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaPoleResiduep result= (oaDataAppDef_oaPoleResidue::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaPoleResidue_FromoaDataAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaPoleResiduep result= (oaDataAppDef_oaPoleResidue::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaPoleResidue_FromoaDataAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaPoleResidue, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaPoleResidue_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaPoleResidue_static_find,METH_VARARGS,oaDataAppDef_oaPoleResidue_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaPoleResidue_static_get,METH_VARARGS,oaDataAppDef_oaPoleResidue_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaPoleResidue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaPoleResidue_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaPoleResidue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaPoleResidue",
           (PyObject*)(&PyoaDataAppDef_oaPoleResidue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaPoleResidue\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaPoleResidue_Type.tp_dict;
    for(method=oaDataAppDef_oaPoleResidue_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaProp
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaProp_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaProp_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaPropObject* self = (PyoaDataAppDef_oaPropObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaProp)
    {
        PyParamoaDataAppDef_oaProp p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaProp_Convert,&p1)) {
            PyoaDataAppDef_oaPropObject* cself=((PyoaDataAppDef_oaPropObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaProp, Choices are:\n"
        "    (oaDataAppDef_oaProp)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaProp_tp_dealloc(PyoaDataAppDef_oaPropObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaProp_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaProp value;
    int convert_status=PyoaDataAppDef_oaProp_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaDataAppDef_oaProp::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaProp_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaProp v1;
    PyParamoaDataAppDef_oaProp v2;
    int convert_status1=PyoaDataAppDef_oaProp_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaProp_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaProp_Convert(PyObject* ob,PyParamoaDataAppDef_oaProp* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaProp_Check(ob)) {
        result->SetData( (oaDataAppDef_oaProp**) ((PyoaDataAppDef_oaPropObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaProp Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaProp_FromoaDataAppDef_oaProp(oaDataAppDef_oaProp** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaProp* data=*value;
        PyObject* bself = PyoaDataAppDef_oaProp_Type.tp_alloc(&PyoaDataAppDef_oaProp_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaPropObject* self = (PyoaDataAppDef_oaPropObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaProp_FromoaDataAppDef_oaProp(oaDataAppDef_oaProp* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaProp_Type.tp_alloc(&PyoaDataAppDef_oaProp_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaPropObject* self = (PyoaDataAppDef_oaPropObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaProp_get_doc[] = 
"Class: oaDataAppDef_oaProp, Function: get\n"
"  Paramegers: (oaProp,[oaByte])\n"
"    Calls: void get(const oaProp* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaProp,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaProp_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaProp data;
    int convert_status=PyoaDataAppDef_oaProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPropObject* self=(PyoaDataAppDef_oaPropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaProp p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaProp_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaProp_getDefault_doc[] = 
"Class: oaDataAppDef_oaProp, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaProp_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaProp data;
    int convert_status=PyoaDataAppDef_oaProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPropObject* self=(PyoaDataAppDef_oaPropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaProp_getSize_doc[] = 
"Class: oaDataAppDef_oaProp, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaProp_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaProp data;
    int convert_status=PyoaDataAppDef_oaProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPropObject* self=(PyoaDataAppDef_oaPropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaProp_set_doc[] = 
"Class: oaDataAppDef_oaProp, Function: set\n"
"  Paramegers: (oaProp,[oaByte])\n"
"    Calls: void set(oaProp* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaProp,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaProp_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaProp data;
    int convert_status=PyoaDataAppDef_oaProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPropObject* self=(PyoaDataAppDef_oaPropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaProp p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaProp_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaProp_isNull_doc[] =
"Class: oaDataAppDef_oaProp, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaProp_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaProp data;
    int convert_status=PyoaDataAppDef_oaProp_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaProp_assign_doc[] = 
"Class: oaDataAppDef_oaProp, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaProp_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaProp data;
  int convert_status=PyoaDataAppDef_oaProp_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaProp p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaProp_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaProp_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaProp_get,METH_VARARGS,oaDataAppDef_oaProp_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaProp_getDefault,METH_VARARGS,oaDataAppDef_oaProp_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaProp_getSize,METH_VARARGS,oaDataAppDef_oaProp_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaProp_set,METH_VARARGS,oaDataAppDef_oaProp_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaProp_tp_isNull,METH_VARARGS,oaDataAppDef_oaProp_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaProp_tp_assign,METH_VARARGS,oaDataAppDef_oaProp_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaProp_doc[] = 
"Class: oaDataAppDef_oaProp\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaProp)\n"
"    Calls: (const oaDataAppDef_oaProp&)\n"
"    Signature: oaDataAppDef_oaProp||cref-oaDataAppDef_oaProp,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaProp_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaProp",
    sizeof(PyoaDataAppDef_oaPropObject),
    0,
    (destructor)oaDataAppDef_oaProp_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaProp_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaProp_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaProp_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaProp_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaProp_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaProp_static_find_doc[] = 
"Class: oaDataAppDef_oaProp, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaProp* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaProp|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaProp* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaProp|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaProp_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaPropp result= (oaDataAppDef_oaProp::find(p1.Data()));
            return PyoaDataAppDef_oaProp_FromoaDataAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaPropp result= (oaDataAppDef_oaProp::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaProp_FromoaDataAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaProp, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaProp_static_get_doc[] = 
"Class: oaDataAppDef_oaProp, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaProp* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaProp|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaProp* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaProp|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaProp_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaPropp result= (oaDataAppDef_oaProp::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaProp_FromoaDataAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaPropp result= (oaDataAppDef_oaProp::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaProp_FromoaDataAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaProp, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaProp_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaProp_static_find,METH_VARARGS,oaDataAppDef_oaProp_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaProp_static_get,METH_VARARGS,oaDataAppDef_oaProp_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaProp_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaProp_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaProp\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaProp",
           (PyObject*)(&PyoaDataAppDef_oaProp_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaProp\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaProp_Type.tp_dict;
    for(method=oaDataAppDef_oaProp_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaPurpose
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaPurpose_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaPurpose_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaPurposeObject* self = (PyoaDataAppDef_oaPurposeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaPurpose)
    {
        PyParamoaDataAppDef_oaPurpose p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaPurpose_Convert,&p1)) {
            PyoaDataAppDef_oaPurposeObject* cself=((PyoaDataAppDef_oaPurposeObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaPurpose, Choices are:\n"
        "    (oaDataAppDef_oaPurpose)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaPurpose_tp_dealloc(PyoaDataAppDef_oaPurposeObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaPurpose_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaPurpose value;
    int convert_status=PyoaDataAppDef_oaPurpose_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDataAppDef_oaPurpose::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaPurpose_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaPurpose v1;
    PyParamoaDataAppDef_oaPurpose v2;
    int convert_status1=PyoaDataAppDef_oaPurpose_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaPurpose_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaPurpose_Convert(PyObject* ob,PyParamoaDataAppDef_oaPurpose* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaPurpose_Check(ob)) {
        result->SetData( (oaDataAppDef_oaPurpose**) ((PyoaDataAppDef_oaPurposeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaPurpose Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaPurpose_FromoaDataAppDef_oaPurpose(oaDataAppDef_oaPurpose** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaPurpose* data=*value;
        PyObject* bself = PyoaDataAppDef_oaPurpose_Type.tp_alloc(&PyoaDataAppDef_oaPurpose_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaPurposeObject* self = (PyoaDataAppDef_oaPurposeObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaPurpose_FromoaDataAppDef_oaPurpose(oaDataAppDef_oaPurpose* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaPurpose_Type.tp_alloc(&PyoaDataAppDef_oaPurpose_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaPurposeObject* self = (PyoaDataAppDef_oaPurposeObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaPurpose_get_doc[] = 
"Class: oaDataAppDef_oaPurpose, Function: get\n"
"  Paramegers: (oaPurpose,[oaByte])\n"
"    Calls: void get(const oaPurpose* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaPurpose,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaPurpose_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPurpose data;
    int convert_status=PyoaDataAppDef_oaPurpose_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPurposeObject* self=(PyoaDataAppDef_oaPurposeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPurpose p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPurpose_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPurpose_getDefault_doc[] = 
"Class: oaDataAppDef_oaPurpose, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaPurpose_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPurpose data;
    int convert_status=PyoaDataAppDef_oaPurpose_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPurposeObject* self=(PyoaDataAppDef_oaPurposeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPurpose_getSize_doc[] = 
"Class: oaDataAppDef_oaPurpose, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaPurpose_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPurpose data;
    int convert_status=PyoaDataAppDef_oaPurpose_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPurposeObject* self=(PyoaDataAppDef_oaPurposeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPurpose_set_doc[] = 
"Class: oaDataAppDef_oaPurpose, Function: set\n"
"  Paramegers: (oaPurpose,[oaByte])\n"
"    Calls: void set(oaPurpose* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaPurpose,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaPurpose_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaPurpose data;
    int convert_status=PyoaDataAppDef_oaPurpose_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaPurposeObject* self=(PyoaDataAppDef_oaPurposeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPurpose p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPurpose_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPurpose_isNull_doc[] =
"Class: oaDataAppDef_oaPurpose, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaPurpose_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaPurpose data;
    int convert_status=PyoaDataAppDef_oaPurpose_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaPurpose_assign_doc[] = 
"Class: oaDataAppDef_oaPurpose, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaPurpose_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaPurpose data;
  int convert_status=PyoaDataAppDef_oaPurpose_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaPurpose p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaPurpose_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaPurpose_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaPurpose_get,METH_VARARGS,oaDataAppDef_oaPurpose_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaPurpose_getDefault,METH_VARARGS,oaDataAppDef_oaPurpose_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaPurpose_getSize,METH_VARARGS,oaDataAppDef_oaPurpose_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaPurpose_set,METH_VARARGS,oaDataAppDef_oaPurpose_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaPurpose_tp_isNull,METH_VARARGS,oaDataAppDef_oaPurpose_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaPurpose_tp_assign,METH_VARARGS,oaDataAppDef_oaPurpose_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaPurpose_doc[] = 
"Class: oaDataAppDef_oaPurpose\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaPurpose)\n"
"    Calls: (const oaDataAppDef_oaPurpose&)\n"
"    Signature: oaDataAppDef_oaPurpose||cref-oaDataAppDef_oaPurpose,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaPurpose_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaPurpose",
    sizeof(PyoaDataAppDef_oaPurposeObject),
    0,
    (destructor)oaDataAppDef_oaPurpose_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaPurpose_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaPurpose_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaPurpose_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaPurpose_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaPurpose_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaPurpose_static_find_doc[] = 
"Class: oaDataAppDef_oaPurpose, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaPurpose* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaPurpose|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaPurpose* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaPurpose|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaPurpose_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaPurposep result= (oaDataAppDef_oaPurpose::find(p1.Data()));
            return PyoaDataAppDef_oaPurpose_FromoaDataAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaPurposep result= (oaDataAppDef_oaPurpose::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaPurpose_FromoaDataAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaPurpose, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaPurpose_static_get_doc[] = 
"Class: oaDataAppDef_oaPurpose, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaPurpose* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaPurpose|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaPurpose* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaPurpose|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaPurpose_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaPurposep result= (oaDataAppDef_oaPurpose::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaPurpose_FromoaDataAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaPurposep result= (oaDataAppDef_oaPurpose::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaPurpose_FromoaDataAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaPurpose, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaPurpose_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaPurpose_static_find,METH_VARARGS,oaDataAppDef_oaPurpose_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaPurpose_static_get,METH_VARARGS,oaDataAppDef_oaPurpose_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaPurpose_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaPurpose_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaPurpose\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaPurpose",
           (PyObject*)(&PyoaDataAppDef_oaPurpose_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaPurpose\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaPurpose_Type.tp_dict;
    for(method=oaDataAppDef_oaPurpose_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaReducedModel
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaReducedModel_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaReducedModel_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaReducedModelObject* self = (PyoaDataAppDef_oaReducedModelObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaReducedModel)
    {
        PyParamoaDataAppDef_oaReducedModel p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaReducedModel_Convert,&p1)) {
            PyoaDataAppDef_oaReducedModelObject* cself=((PyoaDataAppDef_oaReducedModelObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaReducedModel, Choices are:\n"
        "    (oaDataAppDef_oaReducedModel)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaReducedModel_tp_dealloc(PyoaDataAppDef_oaReducedModelObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaReducedModel_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaReducedModel value;
    int convert_status=PyoaDataAppDef_oaReducedModel_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaDataAppDef_oaReducedModel::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaReducedModel_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaReducedModel v1;
    PyParamoaDataAppDef_oaReducedModel v2;
    int convert_status1=PyoaDataAppDef_oaReducedModel_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaReducedModel_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaReducedModel_Convert(PyObject* ob,PyParamoaDataAppDef_oaReducedModel* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaReducedModel_Check(ob)) {
        result->SetData( (oaDataAppDef_oaReducedModel**) ((PyoaDataAppDef_oaReducedModelObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaReducedModel Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaReducedModel_FromoaDataAppDef_oaReducedModel(oaDataAppDef_oaReducedModel** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaReducedModel* data=*value;
        PyObject* bself = PyoaDataAppDef_oaReducedModel_Type.tp_alloc(&PyoaDataAppDef_oaReducedModel_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaReducedModelObject* self = (PyoaDataAppDef_oaReducedModelObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaReducedModel_FromoaDataAppDef_oaReducedModel(oaDataAppDef_oaReducedModel* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaReducedModel_Type.tp_alloc(&PyoaDataAppDef_oaReducedModel_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaReducedModelObject* self = (PyoaDataAppDef_oaReducedModelObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaReducedModel_get_doc[] = 
"Class: oaDataAppDef_oaReducedModel, Function: get\n"
"  Paramegers: (oaReducedModel,[oaByte])\n"
"    Calls: void get(const oaReducedModel* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaReducedModel,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaReducedModel_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReducedModel data;
    int convert_status=PyoaDataAppDef_oaReducedModel_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReducedModelObject* self=(PyoaDataAppDef_oaReducedModelObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReducedModel p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReducedModel_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReducedModel_getDefault_doc[] = 
"Class: oaDataAppDef_oaReducedModel, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaReducedModel_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReducedModel data;
    int convert_status=PyoaDataAppDef_oaReducedModel_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReducedModelObject* self=(PyoaDataAppDef_oaReducedModelObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReducedModel_getSize_doc[] = 
"Class: oaDataAppDef_oaReducedModel, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaReducedModel_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReducedModel data;
    int convert_status=PyoaDataAppDef_oaReducedModel_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReducedModelObject* self=(PyoaDataAppDef_oaReducedModelObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReducedModel_set_doc[] = 
"Class: oaDataAppDef_oaReducedModel, Function: set\n"
"  Paramegers: (oaReducedModel,[oaByte])\n"
"    Calls: void set(oaReducedModel* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaReducedModel,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaReducedModel_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReducedModel data;
    int convert_status=PyoaDataAppDef_oaReducedModel_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReducedModelObject* self=(PyoaDataAppDef_oaReducedModelObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReducedModel p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReducedModel_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReducedModel_isNull_doc[] =
"Class: oaDataAppDef_oaReducedModel, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaReducedModel_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaReducedModel data;
    int convert_status=PyoaDataAppDef_oaReducedModel_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaReducedModel_assign_doc[] = 
"Class: oaDataAppDef_oaReducedModel, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaReducedModel_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaReducedModel data;
  int convert_status=PyoaDataAppDef_oaReducedModel_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaReducedModel p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaReducedModel_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaReducedModel_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaReducedModel_get,METH_VARARGS,oaDataAppDef_oaReducedModel_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaReducedModel_getDefault,METH_VARARGS,oaDataAppDef_oaReducedModel_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaReducedModel_getSize,METH_VARARGS,oaDataAppDef_oaReducedModel_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaReducedModel_set,METH_VARARGS,oaDataAppDef_oaReducedModel_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaReducedModel_tp_isNull,METH_VARARGS,oaDataAppDef_oaReducedModel_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaReducedModel_tp_assign,METH_VARARGS,oaDataAppDef_oaReducedModel_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaReducedModel_doc[] = 
"Class: oaDataAppDef_oaReducedModel\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaReducedModel)\n"
"    Calls: (const oaDataAppDef_oaReducedModel&)\n"
"    Signature: oaDataAppDef_oaReducedModel||cref-oaDataAppDef_oaReducedModel,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaReducedModel_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaReducedModel",
    sizeof(PyoaDataAppDef_oaReducedModelObject),
    0,
    (destructor)oaDataAppDef_oaReducedModel_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaReducedModel_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaReducedModel_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaReducedModel_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaReducedModel_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaReducedModel_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaReducedModel_static_find_doc[] = 
"Class: oaDataAppDef_oaReducedModel, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaReducedModel* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaReducedModel|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaReducedModel* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaReducedModel|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaReducedModel_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaReducedModelp result= (oaDataAppDef_oaReducedModel::find(p1.Data()));
            return PyoaDataAppDef_oaReducedModel_FromoaDataAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaReducedModelp result= (oaDataAppDef_oaReducedModel::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaReducedModel_FromoaDataAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaReducedModel, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReducedModel_static_get_doc[] = 
"Class: oaDataAppDef_oaReducedModel, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaReducedModel* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaReducedModel|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaReducedModel* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaReducedModel|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaReducedModel_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaReducedModelp result= (oaDataAppDef_oaReducedModel::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaReducedModel_FromoaDataAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaReducedModelp result= (oaDataAppDef_oaReducedModel::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaReducedModel_FromoaDataAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaReducedModel, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaReducedModel_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaReducedModel_static_find,METH_VARARGS,oaDataAppDef_oaReducedModel_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaReducedModel_static_get,METH_VARARGS,oaDataAppDef_oaReducedModel_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaReducedModel_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaReducedModel_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaReducedModel\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaReducedModel",
           (PyObject*)(&PyoaDataAppDef_oaReducedModel_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaReducedModel\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaReducedModel_Type.tp_dict;
    for(method=oaDataAppDef_oaReducedModel_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaReticle
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaReticle_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaReticle_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaReticleObject* self = (PyoaDataAppDef_oaReticleObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaReticle)
    {
        PyParamoaDataAppDef_oaReticle p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaReticle_Convert,&p1)) {
            PyoaDataAppDef_oaReticleObject* cself=((PyoaDataAppDef_oaReticleObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaReticle, Choices are:\n"
        "    (oaDataAppDef_oaReticle)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaReticle_tp_dealloc(PyoaDataAppDef_oaReticleObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaReticle_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaReticle value;
    int convert_status=PyoaDataAppDef_oaReticle_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDataAppDef_oaReticle::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaReticle_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaReticle v1;
    PyParamoaDataAppDef_oaReticle v2;
    int convert_status1=PyoaDataAppDef_oaReticle_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaReticle_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaReticle_Convert(PyObject* ob,PyParamoaDataAppDef_oaReticle* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaReticle_Check(ob)) {
        result->SetData( (oaDataAppDef_oaReticle**) ((PyoaDataAppDef_oaReticleObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaReticle Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaReticle_FromoaDataAppDef_oaReticle(oaDataAppDef_oaReticle** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaReticle* data=*value;
        PyObject* bself = PyoaDataAppDef_oaReticle_Type.tp_alloc(&PyoaDataAppDef_oaReticle_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaReticleObject* self = (PyoaDataAppDef_oaReticleObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaReticle_FromoaDataAppDef_oaReticle(oaDataAppDef_oaReticle* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaReticle_Type.tp_alloc(&PyoaDataAppDef_oaReticle_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaReticleObject* self = (PyoaDataAppDef_oaReticleObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticle_get_doc[] = 
"Class: oaDataAppDef_oaReticle, Function: get\n"
"  Paramegers: (oaReticle,[oaByte])\n"
"    Calls: void get(const oaReticle* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaReticle,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaReticle_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReticle data;
    int convert_status=PyoaDataAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReticleObject* self=(PyoaDataAppDef_oaReticleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticle p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReticle_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticle_getDefault_doc[] = 
"Class: oaDataAppDef_oaReticle, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaReticle_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReticle data;
    int convert_status=PyoaDataAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReticleObject* self=(PyoaDataAppDef_oaReticleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticle_getSize_doc[] = 
"Class: oaDataAppDef_oaReticle, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaReticle_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReticle data;
    int convert_status=PyoaDataAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReticleObject* self=(PyoaDataAppDef_oaReticleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticle_set_doc[] = 
"Class: oaDataAppDef_oaReticle, Function: set\n"
"  Paramegers: (oaReticle,[oaByte])\n"
"    Calls: void set(oaReticle* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaReticle,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaReticle_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReticle data;
    int convert_status=PyoaDataAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReticleObject* self=(PyoaDataAppDef_oaReticleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticle p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReticle_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticle_isNull_doc[] =
"Class: oaDataAppDef_oaReticle, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaReticle_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaReticle data;
    int convert_status=PyoaDataAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaReticle_assign_doc[] = 
"Class: oaDataAppDef_oaReticle, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaReticle_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaReticle data;
  int convert_status=PyoaDataAppDef_oaReticle_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaReticle p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaReticle_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaReticle_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaReticle_get,METH_VARARGS,oaDataAppDef_oaReticle_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaReticle_getDefault,METH_VARARGS,oaDataAppDef_oaReticle_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaReticle_getSize,METH_VARARGS,oaDataAppDef_oaReticle_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaReticle_set,METH_VARARGS,oaDataAppDef_oaReticle_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaReticle_tp_isNull,METH_VARARGS,oaDataAppDef_oaReticle_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaReticle_tp_assign,METH_VARARGS,oaDataAppDef_oaReticle_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticle_doc[] = 
"Class: oaDataAppDef_oaReticle\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaReticle)\n"
"    Calls: (const oaDataAppDef_oaReticle&)\n"
"    Signature: oaDataAppDef_oaReticle||cref-oaDataAppDef_oaReticle,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaReticle_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaReticle",
    sizeof(PyoaDataAppDef_oaReticleObject),
    0,
    (destructor)oaDataAppDef_oaReticle_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaReticle_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaReticle_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaReticle_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaReticle_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaReticle_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticle_static_find_doc[] = 
"Class: oaDataAppDef_oaReticle, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaReticle* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaReticle|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaReticle* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaReticle|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaReticle_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaReticlep result= (oaDataAppDef_oaReticle::find(p1.Data()));
            return PyoaDataAppDef_oaReticle_FromoaDataAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaReticlep result= (oaDataAppDef_oaReticle::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaReticle_FromoaDataAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaReticle, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticle_static_get_doc[] = 
"Class: oaDataAppDef_oaReticle, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaReticle* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaReticle|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaReticle* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaReticle|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaReticle_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaReticlep result= (oaDataAppDef_oaReticle::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaReticle_FromoaDataAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaReticlep result= (oaDataAppDef_oaReticle::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaReticle_FromoaDataAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaReticle, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaReticle_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaReticle_static_find,METH_VARARGS,oaDataAppDef_oaReticle_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaReticle_static_get,METH_VARARGS,oaDataAppDef_oaReticle_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaReticle_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaReticle_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaReticle\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaReticle",
           (PyObject*)(&PyoaDataAppDef_oaReticle_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaReticle\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaReticle_Type.tp_dict;
    for(method=oaDataAppDef_oaReticle_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaReticleRef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaReticleRef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaReticleRef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaReticleRefObject* self = (PyoaDataAppDef_oaReticleRefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaReticleRef)
    {
        PyParamoaDataAppDef_oaReticleRef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaReticleRef_Convert,&p1)) {
            PyoaDataAppDef_oaReticleRefObject* cself=((PyoaDataAppDef_oaReticleRefObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaReticleRef, Choices are:\n"
        "    (oaDataAppDef_oaReticleRef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaReticleRef_tp_dealloc(PyoaDataAppDef_oaReticleRefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaReticleRef_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaReticleRef value;
    int convert_status=PyoaDataAppDef_oaReticleRef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaDataAppDef_oaReticleRef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaReticleRef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaReticleRef v1;
    PyParamoaDataAppDef_oaReticleRef v2;
    int convert_status1=PyoaDataAppDef_oaReticleRef_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaReticleRef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaReticleRef_Convert(PyObject* ob,PyParamoaDataAppDef_oaReticleRef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaReticleRef_Check(ob)) {
        result->SetData( (oaDataAppDef_oaReticleRef**) ((PyoaDataAppDef_oaReticleRefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaReticleRef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaReticleRef_FromoaDataAppDef_oaReticleRef(oaDataAppDef_oaReticleRef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaReticleRef* data=*value;
        PyObject* bself = PyoaDataAppDef_oaReticleRef_Type.tp_alloc(&PyoaDataAppDef_oaReticleRef_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaReticleRefObject* self = (PyoaDataAppDef_oaReticleRefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaReticleRef_FromoaDataAppDef_oaReticleRef(oaDataAppDef_oaReticleRef* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaReticleRef_Type.tp_alloc(&PyoaDataAppDef_oaReticleRef_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaReticleRefObject* self = (PyoaDataAppDef_oaReticleRefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticleRef_get_doc[] = 
"Class: oaDataAppDef_oaReticleRef, Function: get\n"
"  Paramegers: (oaReticleRef,[oaByte])\n"
"    Calls: void get(const oaReticleRef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaReticleRef,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaReticleRef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReticleRef data;
    int convert_status=PyoaDataAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReticleRefObject* self=(PyoaDataAppDef_oaReticleRefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticleRef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReticleRef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticleRef_getDefault_doc[] = 
"Class: oaDataAppDef_oaReticleRef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaReticleRef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReticleRef data;
    int convert_status=PyoaDataAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReticleRefObject* self=(PyoaDataAppDef_oaReticleRefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticleRef_getSize_doc[] = 
"Class: oaDataAppDef_oaReticleRef, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaReticleRef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReticleRef data;
    int convert_status=PyoaDataAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReticleRefObject* self=(PyoaDataAppDef_oaReticleRefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticleRef_set_doc[] = 
"Class: oaDataAppDef_oaReticleRef, Function: set\n"
"  Paramegers: (oaReticleRef,[oaByte])\n"
"    Calls: void set(oaReticleRef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaReticleRef,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaReticleRef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaReticleRef data;
    int convert_status=PyoaDataAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaReticleRefObject* self=(PyoaDataAppDef_oaReticleRefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticleRef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReticleRef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticleRef_isNull_doc[] =
"Class: oaDataAppDef_oaReticleRef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaReticleRef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaReticleRef data;
    int convert_status=PyoaDataAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaReticleRef_assign_doc[] = 
"Class: oaDataAppDef_oaReticleRef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaReticleRef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaReticleRef data;
  int convert_status=PyoaDataAppDef_oaReticleRef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaReticleRef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaReticleRef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaReticleRef_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaReticleRef_get,METH_VARARGS,oaDataAppDef_oaReticleRef_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaReticleRef_getDefault,METH_VARARGS,oaDataAppDef_oaReticleRef_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaReticleRef_getSize,METH_VARARGS,oaDataAppDef_oaReticleRef_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaReticleRef_set,METH_VARARGS,oaDataAppDef_oaReticleRef_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaReticleRef_tp_isNull,METH_VARARGS,oaDataAppDef_oaReticleRef_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaReticleRef_tp_assign,METH_VARARGS,oaDataAppDef_oaReticleRef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticleRef_doc[] = 
"Class: oaDataAppDef_oaReticleRef\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaReticleRef)\n"
"    Calls: (const oaDataAppDef_oaReticleRef&)\n"
"    Signature: oaDataAppDef_oaReticleRef||cref-oaDataAppDef_oaReticleRef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaReticleRef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaReticleRef",
    sizeof(PyoaDataAppDef_oaReticleRefObject),
    0,
    (destructor)oaDataAppDef_oaReticleRef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaReticleRef_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaReticleRef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaReticleRef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaReticleRef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaReticleRef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticleRef_static_find_doc[] = 
"Class: oaDataAppDef_oaReticleRef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaReticleRef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaReticleRef|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaReticleRef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaReticleRef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaReticleRef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaReticleRefp result= (oaDataAppDef_oaReticleRef::find(p1.Data()));
            return PyoaDataAppDef_oaReticleRef_FromoaDataAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaReticleRefp result= (oaDataAppDef_oaReticleRef::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaReticleRef_FromoaDataAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaReticleRef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaReticleRef_static_get_doc[] = 
"Class: oaDataAppDef_oaReticleRef, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaReticleRef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaReticleRef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaReticleRef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaReticleRef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaReticleRef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaReticleRefp result= (oaDataAppDef_oaReticleRef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaReticleRef_FromoaDataAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaReticleRefp result= (oaDataAppDef_oaReticleRef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaReticleRef_FromoaDataAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaReticleRef, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaReticleRef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaReticleRef_static_find,METH_VARARGS,oaDataAppDef_oaReticleRef_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaReticleRef_static_get,METH_VARARGS,oaDataAppDef_oaReticleRef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaReticleRef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaReticleRef_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaReticleRef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaReticleRef",
           (PyObject*)(&PyoaDataAppDef_oaReticleRef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaReticleRef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaReticleRef_Type.tp_dict;
    for(method=oaDataAppDef_oaReticleRef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaRoute
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaRoute_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaRoute_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaRouteObject* self = (PyoaDataAppDef_oaRouteObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaRoute)
    {
        PyParamoaDataAppDef_oaRoute p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaRoute_Convert,&p1)) {
            PyoaDataAppDef_oaRouteObject* cself=((PyoaDataAppDef_oaRouteObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaRoute, Choices are:\n"
        "    (oaDataAppDef_oaRoute)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaRoute_tp_dealloc(PyoaDataAppDef_oaRouteObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaRoute_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaRoute value;
    int convert_status=PyoaDataAppDef_oaRoute_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaDataAppDef_oaRoute::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaRoute_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaRoute v1;
    PyParamoaDataAppDef_oaRoute v2;
    int convert_status1=PyoaDataAppDef_oaRoute_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaRoute_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaRoute_Convert(PyObject* ob,PyParamoaDataAppDef_oaRoute* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaRoute_Check(ob)) {
        result->SetData( (oaDataAppDef_oaRoute**) ((PyoaDataAppDef_oaRouteObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaRoute Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaRoute_FromoaDataAppDef_oaRoute(oaDataAppDef_oaRoute** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaRoute* data=*value;
        PyObject* bself = PyoaDataAppDef_oaRoute_Type.tp_alloc(&PyoaDataAppDef_oaRoute_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaRouteObject* self = (PyoaDataAppDef_oaRouteObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaRoute_FromoaDataAppDef_oaRoute(oaDataAppDef_oaRoute* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaRoute_Type.tp_alloc(&PyoaDataAppDef_oaRoute_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaRouteObject* self = (PyoaDataAppDef_oaRouteObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaRoute_get_doc[] = 
"Class: oaDataAppDef_oaRoute, Function: get\n"
"  Paramegers: (oaRoute,[oaByte])\n"
"    Calls: void get(const oaRoute* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaRoute,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaRoute_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRoute data;
    int convert_status=PyoaDataAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRouteObject* self=(PyoaDataAppDef_oaRouteObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRoute p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRoute_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRoute_getDefault_doc[] = 
"Class: oaDataAppDef_oaRoute, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaRoute_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRoute data;
    int convert_status=PyoaDataAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRouteObject* self=(PyoaDataAppDef_oaRouteObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRoute_getSize_doc[] = 
"Class: oaDataAppDef_oaRoute, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaRoute_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRoute data;
    int convert_status=PyoaDataAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRouteObject* self=(PyoaDataAppDef_oaRouteObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRoute_set_doc[] = 
"Class: oaDataAppDef_oaRoute, Function: set\n"
"  Paramegers: (oaRoute,[oaByte])\n"
"    Calls: void set(oaRoute* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaRoute,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaRoute_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRoute data;
    int convert_status=PyoaDataAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRouteObject* self=(PyoaDataAppDef_oaRouteObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRoute p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRoute_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRoute_isNull_doc[] =
"Class: oaDataAppDef_oaRoute, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaRoute_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaRoute data;
    int convert_status=PyoaDataAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaRoute_assign_doc[] = 
"Class: oaDataAppDef_oaRoute, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaRoute_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaRoute data;
  int convert_status=PyoaDataAppDef_oaRoute_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaRoute p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaRoute_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaRoute_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaRoute_get,METH_VARARGS,oaDataAppDef_oaRoute_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaRoute_getDefault,METH_VARARGS,oaDataAppDef_oaRoute_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaRoute_getSize,METH_VARARGS,oaDataAppDef_oaRoute_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaRoute_set,METH_VARARGS,oaDataAppDef_oaRoute_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaRoute_tp_isNull,METH_VARARGS,oaDataAppDef_oaRoute_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaRoute_tp_assign,METH_VARARGS,oaDataAppDef_oaRoute_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaRoute_doc[] = 
"Class: oaDataAppDef_oaRoute\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaRoute)\n"
"    Calls: (const oaDataAppDef_oaRoute&)\n"
"    Signature: oaDataAppDef_oaRoute||cref-oaDataAppDef_oaRoute,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaRoute_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaRoute",
    sizeof(PyoaDataAppDef_oaRouteObject),
    0,
    (destructor)oaDataAppDef_oaRoute_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaRoute_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaRoute_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaRoute_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaRoute_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaRoute_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaRoute_static_find_doc[] = 
"Class: oaDataAppDef_oaRoute, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaRoute* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaRoute|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaRoute* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaRoute|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaRoute_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaRoutep result= (oaDataAppDef_oaRoute::find(p1.Data()));
            return PyoaDataAppDef_oaRoute_FromoaDataAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaRoutep result= (oaDataAppDef_oaRoute::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaRoute_FromoaDataAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaRoute, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRoute_static_get_doc[] = 
"Class: oaDataAppDef_oaRoute, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaRoute* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaRoute|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaRoute* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaRoute|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaRoute_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaRoutep result= (oaDataAppDef_oaRoute::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaRoute_FromoaDataAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaRoutep result= (oaDataAppDef_oaRoute::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaRoute_FromoaDataAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaRoute, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaRoute_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaRoute_static_find,METH_VARARGS,oaDataAppDef_oaRoute_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaRoute_static_get,METH_VARARGS,oaDataAppDef_oaRoute_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaRoute_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaRoute_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaRoute\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaRoute",
           (PyObject*)(&PyoaDataAppDef_oaRoute_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaRoute\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaRoute_Type.tp_dict;
    for(method=oaDataAppDef_oaRoute_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaRow
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaRow_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaRow_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaRowObject* self = (PyoaDataAppDef_oaRowObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaRow)
    {
        PyParamoaDataAppDef_oaRow p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaRow_Convert,&p1)) {
            PyoaDataAppDef_oaRowObject* cself=((PyoaDataAppDef_oaRowObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaRow, Choices are:\n"
        "    (oaDataAppDef_oaRow)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaRow_tp_dealloc(PyoaDataAppDef_oaRowObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaRow_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaRow value;
    int convert_status=PyoaDataAppDef_oaRow_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaDataAppDef_oaRow::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaRow_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaRow v1;
    PyParamoaDataAppDef_oaRow v2;
    int convert_status1=PyoaDataAppDef_oaRow_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaRow_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaRow_Convert(PyObject* ob,PyParamoaDataAppDef_oaRow* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaRow_Check(ob)) {
        result->SetData( (oaDataAppDef_oaRow**) ((PyoaDataAppDef_oaRowObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaRow Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaRow_FromoaDataAppDef_oaRow(oaDataAppDef_oaRow** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaRow* data=*value;
        PyObject* bself = PyoaDataAppDef_oaRow_Type.tp_alloc(&PyoaDataAppDef_oaRow_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaRowObject* self = (PyoaDataAppDef_oaRowObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaRow_FromoaDataAppDef_oaRow(oaDataAppDef_oaRow* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaRow_Type.tp_alloc(&PyoaDataAppDef_oaRow_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaRowObject* self = (PyoaDataAppDef_oaRowObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaRow_get_doc[] = 
"Class: oaDataAppDef_oaRow, Function: get\n"
"  Paramegers: (oaRow,[oaByte])\n"
"    Calls: void get(const oaRow* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaRow,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaRow_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRow data;
    int convert_status=PyoaDataAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRowObject* self=(PyoaDataAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRow p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRow_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRow_getDefault_doc[] = 
"Class: oaDataAppDef_oaRow, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaRow_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRow data;
    int convert_status=PyoaDataAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRowObject* self=(PyoaDataAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRow_getSize_doc[] = 
"Class: oaDataAppDef_oaRow, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaRow_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRow data;
    int convert_status=PyoaDataAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRowObject* self=(PyoaDataAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRow_set_doc[] = 
"Class: oaDataAppDef_oaRow, Function: set\n"
"  Paramegers: (oaRow,[oaByte])\n"
"    Calls: void set(oaRow* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaRow,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaRow_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRow data;
    int convert_status=PyoaDataAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRowObject* self=(PyoaDataAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRow p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRow_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRow_isNull_doc[] =
"Class: oaDataAppDef_oaRow, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaRow_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaRow data;
    int convert_status=PyoaDataAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaRow_assign_doc[] = 
"Class: oaDataAppDef_oaRow, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaRow_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaRow data;
  int convert_status=PyoaDataAppDef_oaRow_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaRow p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaRow_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaRow_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaRow_get,METH_VARARGS,oaDataAppDef_oaRow_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaRow_getDefault,METH_VARARGS,oaDataAppDef_oaRow_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaRow_getSize,METH_VARARGS,oaDataAppDef_oaRow_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaRow_set,METH_VARARGS,oaDataAppDef_oaRow_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaRow_tp_isNull,METH_VARARGS,oaDataAppDef_oaRow_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaRow_tp_assign,METH_VARARGS,oaDataAppDef_oaRow_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaRow_doc[] = 
"Class: oaDataAppDef_oaRow\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaRow)\n"
"    Calls: (const oaDataAppDef_oaRow&)\n"
"    Signature: oaDataAppDef_oaRow||cref-oaDataAppDef_oaRow,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaRow_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaRow",
    sizeof(PyoaDataAppDef_oaRowObject),
    0,
    (destructor)oaDataAppDef_oaRow_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaRow_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaRow_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaRow_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaRow_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaRow_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaRow_static_find_doc[] = 
"Class: oaDataAppDef_oaRow, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaRow* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaRow|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaRow* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaRow_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaRowp result= (oaDataAppDef_oaRow::find(p1.Data()));
            return PyoaDataAppDef_oaRow_FromoaDataAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaRowp result= (oaDataAppDef_oaRow::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaRow_FromoaDataAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaRow, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRow_static_get_doc[] = 
"Class: oaDataAppDef_oaRow, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaRow* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaRow|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaRow* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaRow_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaRowp result= (oaDataAppDef_oaRow::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaRow_FromoaDataAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaRowp result= (oaDataAppDef_oaRow::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaRow_FromoaDataAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaRow, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaRow_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaRow_static_find,METH_VARARGS,oaDataAppDef_oaRow_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaRow_static_get,METH_VARARGS,oaDataAppDef_oaRow_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaRow_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaRow_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaRow\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaRow",
           (PyObject*)(&PyoaDataAppDef_oaRow_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaRow\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaRow_Type.tp_dict;
    for(method=oaDataAppDef_oaRow_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaRowHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaRowHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaRowHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaRowHeaderObject* self = (PyoaDataAppDef_oaRowHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaRowHeader)
    {
        PyParamoaDataAppDef_oaRowHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaRowHeader_Convert,&p1)) {
            PyoaDataAppDef_oaRowHeaderObject* cself=((PyoaDataAppDef_oaRowHeaderObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaRowHeader, Choices are:\n"
        "    (oaDataAppDef_oaRowHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaRowHeader_tp_dealloc(PyoaDataAppDef_oaRowHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaRowHeader_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaRowHeader value;
    int convert_status=PyoaDataAppDef_oaRowHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaDataAppDef_oaRowHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaRowHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaRowHeader v1;
    PyParamoaDataAppDef_oaRowHeader v2;
    int convert_status1=PyoaDataAppDef_oaRowHeader_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaRowHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaRowHeader_Convert(PyObject* ob,PyParamoaDataAppDef_oaRowHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaRowHeader_Check(ob)) {
        result->SetData( (oaDataAppDef_oaRowHeader**) ((PyoaDataAppDef_oaRowHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaRowHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaRowHeader_FromoaDataAppDef_oaRowHeader(oaDataAppDef_oaRowHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaRowHeader* data=*value;
        PyObject* bself = PyoaDataAppDef_oaRowHeader_Type.tp_alloc(&PyoaDataAppDef_oaRowHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaRowHeaderObject* self = (PyoaDataAppDef_oaRowHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaRowHeader_FromoaDataAppDef_oaRowHeader(oaDataAppDef_oaRowHeader* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaRowHeader_Type.tp_alloc(&PyoaDataAppDef_oaRowHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaRowHeaderObject* self = (PyoaDataAppDef_oaRowHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaRowHeader_get_doc[] = 
"Class: oaDataAppDef_oaRowHeader, Function: get\n"
"  Paramegers: (oaRowHeader,[oaByte])\n"
"    Calls: void get(const oaRowHeader* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaRowHeader,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaRowHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRowHeader data;
    int convert_status=PyoaDataAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRowHeaderObject* self=(PyoaDataAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRowHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRowHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRowHeader_getDefault_doc[] = 
"Class: oaDataAppDef_oaRowHeader, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaRowHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRowHeader data;
    int convert_status=PyoaDataAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRowHeaderObject* self=(PyoaDataAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRowHeader_getSize_doc[] = 
"Class: oaDataAppDef_oaRowHeader, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaRowHeader_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRowHeader data;
    int convert_status=PyoaDataAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRowHeaderObject* self=(PyoaDataAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRowHeader_set_doc[] = 
"Class: oaDataAppDef_oaRowHeader, Function: set\n"
"  Paramegers: (oaRowHeader,[oaByte])\n"
"    Calls: void set(oaRowHeader* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaRowHeader,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaRowHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaRowHeader data;
    int convert_status=PyoaDataAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaRowHeaderObject* self=(PyoaDataAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRowHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRowHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRowHeader_isNull_doc[] =
"Class: oaDataAppDef_oaRowHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaRowHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaRowHeader data;
    int convert_status=PyoaDataAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaRowHeader_assign_doc[] = 
"Class: oaDataAppDef_oaRowHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaRowHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaRowHeader data;
  int convert_status=PyoaDataAppDef_oaRowHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaRowHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaRowHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaRowHeader_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaRowHeader_get,METH_VARARGS,oaDataAppDef_oaRowHeader_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaRowHeader_getDefault,METH_VARARGS,oaDataAppDef_oaRowHeader_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaRowHeader_getSize,METH_VARARGS,oaDataAppDef_oaRowHeader_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaRowHeader_set,METH_VARARGS,oaDataAppDef_oaRowHeader_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaRowHeader_tp_isNull,METH_VARARGS,oaDataAppDef_oaRowHeader_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaRowHeader_tp_assign,METH_VARARGS,oaDataAppDef_oaRowHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaRowHeader_doc[] = 
"Class: oaDataAppDef_oaRowHeader\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaRowHeader)\n"
"    Calls: (const oaDataAppDef_oaRowHeader&)\n"
"    Signature: oaDataAppDef_oaRowHeader||cref-oaDataAppDef_oaRowHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaRowHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaRowHeader",
    sizeof(PyoaDataAppDef_oaRowHeaderObject),
    0,
    (destructor)oaDataAppDef_oaRowHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaRowHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaRowHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaRowHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaRowHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaRowHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaRowHeader_static_find_doc[] = 
"Class: oaDataAppDef_oaRowHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaRowHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaRowHeader|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaRowHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaRowHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaRowHeaderp result= (oaDataAppDef_oaRowHeader::find(p1.Data()));
            return PyoaDataAppDef_oaRowHeader_FromoaDataAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaRowHeaderp result= (oaDataAppDef_oaRowHeader::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaRowHeader_FromoaDataAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaRowHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaRowHeader_static_get_doc[] = 
"Class: oaDataAppDef_oaRowHeader, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaRowHeader* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaRowHeader|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaRowHeader* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaRowHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaRowHeaderp result= (oaDataAppDef_oaRowHeader::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaRowHeader_FromoaDataAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaRowHeaderp result= (oaDataAppDef_oaRowHeader::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaRowHeader_FromoaDataAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaRowHeader, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaRowHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaRowHeader_static_find,METH_VARARGS,oaDataAppDef_oaRowHeader_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaRowHeader_static_get,METH_VARARGS,oaDataAppDef_oaRowHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaRowHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaRowHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaRowHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaRowHeader",
           (PyObject*)(&PyoaDataAppDef_oaRowHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaRowHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaRowHeader_Type.tp_dict;
    for(method=oaDataAppDef_oaRowHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaScanChain
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaScanChain_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaScanChain_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaScanChainObject* self = (PyoaDataAppDef_oaScanChainObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaScanChain)
    {
        PyParamoaDataAppDef_oaScanChain p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaScanChain_Convert,&p1)) {
            PyoaDataAppDef_oaScanChainObject* cself=((PyoaDataAppDef_oaScanChainObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaScanChain, Choices are:\n"
        "    (oaDataAppDef_oaScanChain)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaScanChain_tp_dealloc(PyoaDataAppDef_oaScanChainObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaScanChain_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaScanChain value;
    int convert_status=PyoaDataAppDef_oaScanChain_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaDataAppDef_oaScanChain::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaScanChain_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaScanChain v1;
    PyParamoaDataAppDef_oaScanChain v2;
    int convert_status1=PyoaDataAppDef_oaScanChain_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaScanChain_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaScanChain_Convert(PyObject* ob,PyParamoaDataAppDef_oaScanChain* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaScanChain_Check(ob)) {
        result->SetData( (oaDataAppDef_oaScanChain**) ((PyoaDataAppDef_oaScanChainObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaScanChain Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaScanChain_FromoaDataAppDef_oaScanChain(oaDataAppDef_oaScanChain** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaScanChain* data=*value;
        PyObject* bself = PyoaDataAppDef_oaScanChain_Type.tp_alloc(&PyoaDataAppDef_oaScanChain_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaScanChainObject* self = (PyoaDataAppDef_oaScanChainObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaScanChain_FromoaDataAppDef_oaScanChain(oaDataAppDef_oaScanChain* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaScanChain_Type.tp_alloc(&PyoaDataAppDef_oaScanChain_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaScanChainObject* self = (PyoaDataAppDef_oaScanChainObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChain_get_doc[] = 
"Class: oaDataAppDef_oaScanChain, Function: get\n"
"  Paramegers: (oaScanChain,[oaByte])\n"
"    Calls: void get(const oaScanChain* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaScanChain,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaScanChain_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChain data;
    int convert_status=PyoaDataAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainObject* self=(PyoaDataAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChain p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChain_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChain_getDefault_doc[] = 
"Class: oaDataAppDef_oaScanChain, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaScanChain_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChain data;
    int convert_status=PyoaDataAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainObject* self=(PyoaDataAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChain_getSize_doc[] = 
"Class: oaDataAppDef_oaScanChain, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaScanChain_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChain data;
    int convert_status=PyoaDataAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainObject* self=(PyoaDataAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChain_set_doc[] = 
"Class: oaDataAppDef_oaScanChain, Function: set\n"
"  Paramegers: (oaScanChain,[oaByte])\n"
"    Calls: void set(oaScanChain* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaScanChain,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaScanChain_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChain data;
    int convert_status=PyoaDataAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainObject* self=(PyoaDataAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChain p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChain_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChain_isNull_doc[] =
"Class: oaDataAppDef_oaScanChain, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaScanChain_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaScanChain data;
    int convert_status=PyoaDataAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaScanChain_assign_doc[] = 
"Class: oaDataAppDef_oaScanChain, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaScanChain_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaScanChain data;
  int convert_status=PyoaDataAppDef_oaScanChain_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaScanChain p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaScanChain_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaScanChain_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaScanChain_get,METH_VARARGS,oaDataAppDef_oaScanChain_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaScanChain_getDefault,METH_VARARGS,oaDataAppDef_oaScanChain_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaScanChain_getSize,METH_VARARGS,oaDataAppDef_oaScanChain_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaScanChain_set,METH_VARARGS,oaDataAppDef_oaScanChain_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaScanChain_tp_isNull,METH_VARARGS,oaDataAppDef_oaScanChain_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaScanChain_tp_assign,METH_VARARGS,oaDataAppDef_oaScanChain_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChain_doc[] = 
"Class: oaDataAppDef_oaScanChain\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaScanChain)\n"
"    Calls: (const oaDataAppDef_oaScanChain&)\n"
"    Signature: oaDataAppDef_oaScanChain||cref-oaDataAppDef_oaScanChain,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaScanChain_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaScanChain",
    sizeof(PyoaDataAppDef_oaScanChainObject),
    0,
    (destructor)oaDataAppDef_oaScanChain_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaScanChain_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaScanChain_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaScanChain_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaScanChain_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaScanChain_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChain_static_find_doc[] = 
"Class: oaDataAppDef_oaScanChain, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaScanChain* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaScanChain|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaScanChain* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaScanChain_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaScanChainp result= (oaDataAppDef_oaScanChain::find(p1.Data()));
            return PyoaDataAppDef_oaScanChain_FromoaDataAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaScanChainp result= (oaDataAppDef_oaScanChain::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaScanChain_FromoaDataAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaScanChain, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChain_static_get_doc[] = 
"Class: oaDataAppDef_oaScanChain, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaScanChain* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaScanChain|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaScanChain* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaScanChain_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaScanChainp result= (oaDataAppDef_oaScanChain::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaScanChain_FromoaDataAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaScanChainp result= (oaDataAppDef_oaScanChain::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaScanChain_FromoaDataAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaScanChain, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaScanChain_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaScanChain_static_find,METH_VARARGS,oaDataAppDef_oaScanChain_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaScanChain_static_get,METH_VARARGS,oaDataAppDef_oaScanChain_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaScanChain_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaScanChain_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaScanChain\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaScanChain",
           (PyObject*)(&PyoaDataAppDef_oaScanChain_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaScanChain\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaScanChain_Type.tp_dict;
    for(method=oaDataAppDef_oaScanChain_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaScanChainInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaScanChainInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaScanChainInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaScanChainInstObject* self = (PyoaDataAppDef_oaScanChainInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaScanChainInst)
    {
        PyParamoaDataAppDef_oaScanChainInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaScanChainInst_Convert,&p1)) {
            PyoaDataAppDef_oaScanChainInstObject* cself=((PyoaDataAppDef_oaScanChainInstObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaScanChainInst, Choices are:\n"
        "    (oaDataAppDef_oaScanChainInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaScanChainInst_tp_dealloc(PyoaDataAppDef_oaScanChainInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaScanChainInst_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaScanChainInst value;
    int convert_status=PyoaDataAppDef_oaScanChainInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaDataAppDef_oaScanChainInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaScanChainInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaScanChainInst v1;
    PyParamoaDataAppDef_oaScanChainInst v2;
    int convert_status1=PyoaDataAppDef_oaScanChainInst_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaScanChainInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaScanChainInst_Convert(PyObject* ob,PyParamoaDataAppDef_oaScanChainInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaScanChainInst_Check(ob)) {
        result->SetData( (oaDataAppDef_oaScanChainInst**) ((PyoaDataAppDef_oaScanChainInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaScanChainInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaScanChainInst_FromoaDataAppDef_oaScanChainInst(oaDataAppDef_oaScanChainInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaScanChainInst* data=*value;
        PyObject* bself = PyoaDataAppDef_oaScanChainInst_Type.tp_alloc(&PyoaDataAppDef_oaScanChainInst_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaScanChainInstObject* self = (PyoaDataAppDef_oaScanChainInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaScanChainInst_FromoaDataAppDef_oaScanChainInst(oaDataAppDef_oaScanChainInst* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaScanChainInst_Type.tp_alloc(&PyoaDataAppDef_oaScanChainInst_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaScanChainInstObject* self = (PyoaDataAppDef_oaScanChainInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainInst_get_doc[] = 
"Class: oaDataAppDef_oaScanChainInst, Function: get\n"
"  Paramegers: (oaScanChainInst,[oaByte])\n"
"    Calls: void get(const oaScanChainInst* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaScanChainInst,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaScanChainInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChainInst data;
    int convert_status=PyoaDataAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainInstObject* self=(PyoaDataAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChainInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainInst_getDefault_doc[] = 
"Class: oaDataAppDef_oaScanChainInst, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaScanChainInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChainInst data;
    int convert_status=PyoaDataAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainInstObject* self=(PyoaDataAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainInst_getSize_doc[] = 
"Class: oaDataAppDef_oaScanChainInst, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaScanChainInst_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChainInst data;
    int convert_status=PyoaDataAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainInstObject* self=(PyoaDataAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainInst_set_doc[] = 
"Class: oaDataAppDef_oaScanChainInst, Function: set\n"
"  Paramegers: (oaScanChainInst,[oaByte])\n"
"    Calls: void set(oaScanChainInst* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaScanChainInst,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaScanChainInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChainInst data;
    int convert_status=PyoaDataAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainInstObject* self=(PyoaDataAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChainInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainInst_isNull_doc[] =
"Class: oaDataAppDef_oaScanChainInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaScanChainInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaScanChainInst data;
    int convert_status=PyoaDataAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaScanChainInst_assign_doc[] = 
"Class: oaDataAppDef_oaScanChainInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaScanChainInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaScanChainInst data;
  int convert_status=PyoaDataAppDef_oaScanChainInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaScanChainInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaScanChainInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaScanChainInst_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaScanChainInst_get,METH_VARARGS,oaDataAppDef_oaScanChainInst_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaScanChainInst_getDefault,METH_VARARGS,oaDataAppDef_oaScanChainInst_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaScanChainInst_getSize,METH_VARARGS,oaDataAppDef_oaScanChainInst_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaScanChainInst_set,METH_VARARGS,oaDataAppDef_oaScanChainInst_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaScanChainInst_tp_isNull,METH_VARARGS,oaDataAppDef_oaScanChainInst_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaScanChainInst_tp_assign,METH_VARARGS,oaDataAppDef_oaScanChainInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainInst_doc[] = 
"Class: oaDataAppDef_oaScanChainInst\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaScanChainInst)\n"
"    Calls: (const oaDataAppDef_oaScanChainInst&)\n"
"    Signature: oaDataAppDef_oaScanChainInst||cref-oaDataAppDef_oaScanChainInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaScanChainInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaScanChainInst",
    sizeof(PyoaDataAppDef_oaScanChainInstObject),
    0,
    (destructor)oaDataAppDef_oaScanChainInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaScanChainInst_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaScanChainInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaScanChainInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaScanChainInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaScanChainInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainInst_static_find_doc[] = 
"Class: oaDataAppDef_oaScanChainInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaScanChainInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaScanChainInst|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaScanChainInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaScanChainInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaScanChainInstp result= (oaDataAppDef_oaScanChainInst::find(p1.Data()));
            return PyoaDataAppDef_oaScanChainInst_FromoaDataAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaScanChainInstp result= (oaDataAppDef_oaScanChainInst::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaScanChainInst_FromoaDataAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaScanChainInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainInst_static_get_doc[] = 
"Class: oaDataAppDef_oaScanChainInst, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaScanChainInst* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaScanChainInst|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaScanChainInst* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaScanChainInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaScanChainInstp result= (oaDataAppDef_oaScanChainInst::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaScanChainInst_FromoaDataAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaScanChainInstp result= (oaDataAppDef_oaScanChainInst::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaScanChainInst_FromoaDataAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaScanChainInst, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaScanChainInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaScanChainInst_static_find,METH_VARARGS,oaDataAppDef_oaScanChainInst_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaScanChainInst_static_get,METH_VARARGS,oaDataAppDef_oaScanChainInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaScanChainInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaScanChainInst_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaScanChainInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaScanChainInst",
           (PyObject*)(&PyoaDataAppDef_oaScanChainInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaScanChainInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaScanChainInst_Type.tp_dict;
    for(method=oaDataAppDef_oaScanChainInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaScanChainSet
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaScanChainSet_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaScanChainSet_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaScanChainSetObject* self = (PyoaDataAppDef_oaScanChainSetObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaScanChainSet)
    {
        PyParamoaDataAppDef_oaScanChainSet p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaScanChainSet_Convert,&p1)) {
            PyoaDataAppDef_oaScanChainSetObject* cself=((PyoaDataAppDef_oaScanChainSetObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaScanChainSet, Choices are:\n"
        "    (oaDataAppDef_oaScanChainSet)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaScanChainSet_tp_dealloc(PyoaDataAppDef_oaScanChainSetObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaScanChainSet_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaScanChainSet value;
    int convert_status=PyoaDataAppDef_oaScanChainSet_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaDataAppDef_oaScanChainSet::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaScanChainSet_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaScanChainSet v1;
    PyParamoaDataAppDef_oaScanChainSet v2;
    int convert_status1=PyoaDataAppDef_oaScanChainSet_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaScanChainSet_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaScanChainSet_Convert(PyObject* ob,PyParamoaDataAppDef_oaScanChainSet* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaScanChainSet_Check(ob)) {
        result->SetData( (oaDataAppDef_oaScanChainSet**) ((PyoaDataAppDef_oaScanChainSetObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaScanChainSet Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaScanChainSet_FromoaDataAppDef_oaScanChainSet(oaDataAppDef_oaScanChainSet** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaScanChainSet* data=*value;
        PyObject* bself = PyoaDataAppDef_oaScanChainSet_Type.tp_alloc(&PyoaDataAppDef_oaScanChainSet_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaScanChainSetObject* self = (PyoaDataAppDef_oaScanChainSetObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaScanChainSet_FromoaDataAppDef_oaScanChainSet(oaDataAppDef_oaScanChainSet* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaScanChainSet_Type.tp_alloc(&PyoaDataAppDef_oaScanChainSet_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaScanChainSetObject* self = (PyoaDataAppDef_oaScanChainSetObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainSet_get_doc[] = 
"Class: oaDataAppDef_oaScanChainSet, Function: get\n"
"  Paramegers: (oaScanChainSet,[oaByte])\n"
"    Calls: void get(const oaScanChainSet* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaScanChainSet,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaScanChainSet_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChainSet data;
    int convert_status=PyoaDataAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainSetObject* self=(PyoaDataAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainSet p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChainSet_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainSet_getDefault_doc[] = 
"Class: oaDataAppDef_oaScanChainSet, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaScanChainSet_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChainSet data;
    int convert_status=PyoaDataAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainSetObject* self=(PyoaDataAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainSet_getSize_doc[] = 
"Class: oaDataAppDef_oaScanChainSet, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaScanChainSet_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChainSet data;
    int convert_status=PyoaDataAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainSetObject* self=(PyoaDataAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainSet_set_doc[] = 
"Class: oaDataAppDef_oaScanChainSet, Function: set\n"
"  Paramegers: (oaScanChainSet,[oaByte])\n"
"    Calls: void set(oaScanChainSet* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaScanChainSet,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaScanChainSet_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaScanChainSet data;
    int convert_status=PyoaDataAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaScanChainSetObject* self=(PyoaDataAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainSet p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChainSet_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainSet_isNull_doc[] =
"Class: oaDataAppDef_oaScanChainSet, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaScanChainSet_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaScanChainSet data;
    int convert_status=PyoaDataAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaScanChainSet_assign_doc[] = 
"Class: oaDataAppDef_oaScanChainSet, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaScanChainSet_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaScanChainSet data;
  int convert_status=PyoaDataAppDef_oaScanChainSet_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaScanChainSet p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaScanChainSet_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaScanChainSet_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaScanChainSet_get,METH_VARARGS,oaDataAppDef_oaScanChainSet_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaScanChainSet_getDefault,METH_VARARGS,oaDataAppDef_oaScanChainSet_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaScanChainSet_getSize,METH_VARARGS,oaDataAppDef_oaScanChainSet_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaScanChainSet_set,METH_VARARGS,oaDataAppDef_oaScanChainSet_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaScanChainSet_tp_isNull,METH_VARARGS,oaDataAppDef_oaScanChainSet_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaScanChainSet_tp_assign,METH_VARARGS,oaDataAppDef_oaScanChainSet_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainSet_doc[] = 
"Class: oaDataAppDef_oaScanChainSet\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaScanChainSet)\n"
"    Calls: (const oaDataAppDef_oaScanChainSet&)\n"
"    Signature: oaDataAppDef_oaScanChainSet||cref-oaDataAppDef_oaScanChainSet,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaScanChainSet_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaScanChainSet",
    sizeof(PyoaDataAppDef_oaScanChainSetObject),
    0,
    (destructor)oaDataAppDef_oaScanChainSet_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaScanChainSet_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaScanChainSet_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaScanChainSet_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaScanChainSet_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaScanChainSet_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainSet_static_find_doc[] = 
"Class: oaDataAppDef_oaScanChainSet, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaScanChainSet* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaScanChainSet|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaScanChainSet* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaScanChainSet_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaScanChainSetp result= (oaDataAppDef_oaScanChainSet::find(p1.Data()));
            return PyoaDataAppDef_oaScanChainSet_FromoaDataAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaScanChainSetp result= (oaDataAppDef_oaScanChainSet::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaScanChainSet_FromoaDataAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaScanChainSet, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaScanChainSet_static_get_doc[] = 
"Class: oaDataAppDef_oaScanChainSet, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaScanChainSet* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaScanChainSet|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaScanChainSet* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaScanChainSet_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaScanChainSetp result= (oaDataAppDef_oaScanChainSet::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaScanChainSet_FromoaDataAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaScanChainSetp result= (oaDataAppDef_oaScanChainSet::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaScanChainSet_FromoaDataAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaScanChainSet, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaScanChainSet_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaScanChainSet_static_find,METH_VARARGS,oaDataAppDef_oaScanChainSet_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaScanChainSet_static_get,METH_VARARGS,oaDataAppDef_oaScanChainSet_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaScanChainSet_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaScanChainSet_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaScanChainSet\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaScanChainSet",
           (PyObject*)(&PyoaDataAppDef_oaScanChainSet_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaScanChainSet\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaScanChainSet_Type.tp_dict;
    for(method=oaDataAppDef_oaScanChainSet_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaShape
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaShape_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaShape_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaShapeObject* self = (PyoaDataAppDef_oaShapeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaShape)
    {
        PyParamoaDataAppDef_oaShape p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaShape_Convert,&p1)) {
            PyoaDataAppDef_oaShapeObject* cself=((PyoaDataAppDef_oaShapeObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaShape, Choices are:\n"
        "    (oaDataAppDef_oaShape)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaShape_tp_dealloc(PyoaDataAppDef_oaShapeObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaShape_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaShape value;
    int convert_status=PyoaDataAppDef_oaShape_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaDataAppDef_oaShape::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaShape_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaShape v1;
    PyParamoaDataAppDef_oaShape v2;
    int convert_status1=PyoaDataAppDef_oaShape_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaShape_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaShape_Convert(PyObject* ob,PyParamoaDataAppDef_oaShape* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaShape_Check(ob)) {
        result->SetData( (oaDataAppDef_oaShape**) ((PyoaDataAppDef_oaShapeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaShape Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaShape_FromoaDataAppDef_oaShape(oaDataAppDef_oaShape** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaShape* data=*value;
        PyObject* bself = PyoaDataAppDef_oaShape_Type.tp_alloc(&PyoaDataAppDef_oaShape_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaShapeObject* self = (PyoaDataAppDef_oaShapeObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaShape_FromoaDataAppDef_oaShape(oaDataAppDef_oaShape* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaShape_Type.tp_alloc(&PyoaDataAppDef_oaShape_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaShapeObject* self = (PyoaDataAppDef_oaShapeObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaShape_get_doc[] = 
"Class: oaDataAppDef_oaShape, Function: get\n"
"  Paramegers: (oaShape,[oaByte])\n"
"    Calls: void get(const oaShape* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaShape,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaShape_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaShape data;
    int convert_status=PyoaDataAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaShapeObject* self=(PyoaDataAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaShape p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaShape_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaShape_getDefault_doc[] = 
"Class: oaDataAppDef_oaShape, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaShape_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaShape data;
    int convert_status=PyoaDataAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaShapeObject* self=(PyoaDataAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaShape_getSize_doc[] = 
"Class: oaDataAppDef_oaShape, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaShape_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaShape data;
    int convert_status=PyoaDataAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaShapeObject* self=(PyoaDataAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaShape_set_doc[] = 
"Class: oaDataAppDef_oaShape, Function: set\n"
"  Paramegers: (oaShape,[oaByte])\n"
"    Calls: void set(oaShape* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaShape,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaShape_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaShape data;
    int convert_status=PyoaDataAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaShapeObject* self=(PyoaDataAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaShape p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaShape_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaShape_isNull_doc[] =
"Class: oaDataAppDef_oaShape, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaShape_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaShape data;
    int convert_status=PyoaDataAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaShape_assign_doc[] = 
"Class: oaDataAppDef_oaShape, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaShape_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaShape data;
  int convert_status=PyoaDataAppDef_oaShape_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaShape p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaShape_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaShape_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaShape_get,METH_VARARGS,oaDataAppDef_oaShape_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaShape_getDefault,METH_VARARGS,oaDataAppDef_oaShape_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaShape_getSize,METH_VARARGS,oaDataAppDef_oaShape_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaShape_set,METH_VARARGS,oaDataAppDef_oaShape_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaShape_tp_isNull,METH_VARARGS,oaDataAppDef_oaShape_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaShape_tp_assign,METH_VARARGS,oaDataAppDef_oaShape_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaShape_doc[] = 
"Class: oaDataAppDef_oaShape\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaShape)\n"
"    Calls: (const oaDataAppDef_oaShape&)\n"
"    Signature: oaDataAppDef_oaShape||cref-oaDataAppDef_oaShape,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaShape_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaShape",
    sizeof(PyoaDataAppDef_oaShapeObject),
    0,
    (destructor)oaDataAppDef_oaShape_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaShape_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaShape_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaShape_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaShape_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaShape_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaShape_static_find_doc[] = 
"Class: oaDataAppDef_oaShape, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaShape* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaShape|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaShape* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaShape_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaShapep result= (oaDataAppDef_oaShape::find(p1.Data()));
            return PyoaDataAppDef_oaShape_FromoaDataAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaShapep result= (oaDataAppDef_oaShape::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaShape_FromoaDataAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaShape, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaShape_static_get_doc[] = 
"Class: oaDataAppDef_oaShape, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaShape* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaShape|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaShape* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaShape_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaShapep result= (oaDataAppDef_oaShape::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaShape_FromoaDataAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaShapep result= (oaDataAppDef_oaShape::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaShape_FromoaDataAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaShape, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaShape_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaShape_static_find,METH_VARARGS,oaDataAppDef_oaShape_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaShape_static_get,METH_VARARGS,oaDataAppDef_oaShape_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaShape_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaShape_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaShape\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaShape",
           (PyObject*)(&PyoaDataAppDef_oaShape_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaShape\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaShape_Type.tp_dict;
    for(method=oaDataAppDef_oaShape_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaSiteDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaSiteDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaSiteDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaSiteDefObject* self = (PyoaDataAppDef_oaSiteDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaSiteDef)
    {
        PyParamoaDataAppDef_oaSiteDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaSiteDef_Convert,&p1)) {
            PyoaDataAppDef_oaSiteDefObject* cself=((PyoaDataAppDef_oaSiteDefObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaSiteDef, Choices are:\n"
        "    (oaDataAppDef_oaSiteDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaSiteDef_tp_dealloc(PyoaDataAppDef_oaSiteDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaSiteDef_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaSiteDef value;
    int convert_status=PyoaDataAppDef_oaSiteDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDataAppDef_oaSiteDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaSiteDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaSiteDef v1;
    PyParamoaDataAppDef_oaSiteDef v2;
    int convert_status1=PyoaDataAppDef_oaSiteDef_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaSiteDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaSiteDef_Convert(PyObject* ob,PyParamoaDataAppDef_oaSiteDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaSiteDef_Check(ob)) {
        result->SetData( (oaDataAppDef_oaSiteDef**) ((PyoaDataAppDef_oaSiteDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaSiteDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaSiteDef_FromoaDataAppDef_oaSiteDef(oaDataAppDef_oaSiteDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaSiteDef* data=*value;
        PyObject* bself = PyoaDataAppDef_oaSiteDef_Type.tp_alloc(&PyoaDataAppDef_oaSiteDef_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaSiteDefObject* self = (PyoaDataAppDef_oaSiteDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaSiteDef_FromoaDataAppDef_oaSiteDef(oaDataAppDef_oaSiteDef* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaSiteDef_Type.tp_alloc(&PyoaDataAppDef_oaSiteDef_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaSiteDefObject* self = (PyoaDataAppDef_oaSiteDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaSiteDef_get_doc[] = 
"Class: oaDataAppDef_oaSiteDef, Function: get\n"
"  Paramegers: (oaSiteDef,[oaByte])\n"
"    Calls: void get(const oaSiteDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaSiteDef,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaSiteDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaSiteDef data;
    int convert_status=PyoaDataAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaSiteDefObject* self=(PyoaDataAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSiteDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaSiteDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaSiteDef_getDefault_doc[] = 
"Class: oaDataAppDef_oaSiteDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaSiteDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaSiteDef data;
    int convert_status=PyoaDataAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaSiteDefObject* self=(PyoaDataAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaSiteDef_getSize_doc[] = 
"Class: oaDataAppDef_oaSiteDef, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaSiteDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaSiteDef data;
    int convert_status=PyoaDataAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaSiteDefObject* self=(PyoaDataAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaSiteDef_set_doc[] = 
"Class: oaDataAppDef_oaSiteDef, Function: set\n"
"  Paramegers: (oaSiteDef,[oaByte])\n"
"    Calls: void set(oaSiteDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaSiteDef,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaSiteDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaSiteDef data;
    int convert_status=PyoaDataAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaSiteDefObject* self=(PyoaDataAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSiteDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaSiteDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaSiteDef_isNull_doc[] =
"Class: oaDataAppDef_oaSiteDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaSiteDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaSiteDef data;
    int convert_status=PyoaDataAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaSiteDef_assign_doc[] = 
"Class: oaDataAppDef_oaSiteDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaSiteDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaSiteDef data;
  int convert_status=PyoaDataAppDef_oaSiteDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaSiteDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaSiteDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaSiteDef_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaSiteDef_get,METH_VARARGS,oaDataAppDef_oaSiteDef_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaSiteDef_getDefault,METH_VARARGS,oaDataAppDef_oaSiteDef_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaSiteDef_getSize,METH_VARARGS,oaDataAppDef_oaSiteDef_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaSiteDef_set,METH_VARARGS,oaDataAppDef_oaSiteDef_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaSiteDef_tp_isNull,METH_VARARGS,oaDataAppDef_oaSiteDef_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaSiteDef_tp_assign,METH_VARARGS,oaDataAppDef_oaSiteDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaSiteDef_doc[] = 
"Class: oaDataAppDef_oaSiteDef\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaSiteDef)\n"
"    Calls: (const oaDataAppDef_oaSiteDef&)\n"
"    Signature: oaDataAppDef_oaSiteDef||cref-oaDataAppDef_oaSiteDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaSiteDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaSiteDef",
    sizeof(PyoaDataAppDef_oaSiteDefObject),
    0,
    (destructor)oaDataAppDef_oaSiteDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaSiteDef_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaSiteDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaSiteDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaSiteDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaSiteDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaSiteDef_static_find_doc[] = 
"Class: oaDataAppDef_oaSiteDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaSiteDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaSiteDef|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaSiteDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaSiteDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaSiteDefp result= (oaDataAppDef_oaSiteDef::find(p1.Data()));
            return PyoaDataAppDef_oaSiteDef_FromoaDataAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaSiteDefp result= (oaDataAppDef_oaSiteDef::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaSiteDef_FromoaDataAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaSiteDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaSiteDef_static_get_doc[] = 
"Class: oaDataAppDef_oaSiteDef, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaSiteDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaSiteDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaSiteDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaSiteDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaSiteDefp result= (oaDataAppDef_oaSiteDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaSiteDef_FromoaDataAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaSiteDefp result= (oaDataAppDef_oaSiteDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaSiteDef_FromoaDataAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaSiteDef, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaSiteDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaSiteDef_static_find,METH_VARARGS,oaDataAppDef_oaSiteDef_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaSiteDef_static_get,METH_VARARGS,oaDataAppDef_oaSiteDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaSiteDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaSiteDef_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaSiteDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaSiteDef",
           (PyObject*)(&PyoaDataAppDef_oaSiteDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaSiteDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaSiteDef_Type.tp_dict;
    for(method=oaDataAppDef_oaSiteDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaSteiner
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaSteiner_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaSteiner_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaSteinerObject* self = (PyoaDataAppDef_oaSteinerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaSteiner)
    {
        PyParamoaDataAppDef_oaSteiner p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaSteiner_Convert,&p1)) {
            PyoaDataAppDef_oaSteinerObject* cself=((PyoaDataAppDef_oaSteinerObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaSteiner, Choices are:\n"
        "    (oaDataAppDef_oaSteiner)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaSteiner_tp_dealloc(PyoaDataAppDef_oaSteinerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaSteiner_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaSteiner value;
    int convert_status=PyoaDataAppDef_oaSteiner_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaDataAppDef_oaSteiner::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaSteiner_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaSteiner v1;
    PyParamoaDataAppDef_oaSteiner v2;
    int convert_status1=PyoaDataAppDef_oaSteiner_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaSteiner_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaSteiner_Convert(PyObject* ob,PyParamoaDataAppDef_oaSteiner* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaSteiner_Check(ob)) {
        result->SetData( (oaDataAppDef_oaSteiner**) ((PyoaDataAppDef_oaSteinerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaSteiner Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaSteiner_FromoaDataAppDef_oaSteiner(oaDataAppDef_oaSteiner** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaSteiner* data=*value;
        PyObject* bself = PyoaDataAppDef_oaSteiner_Type.tp_alloc(&PyoaDataAppDef_oaSteiner_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaSteinerObject* self = (PyoaDataAppDef_oaSteinerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaSteiner_FromoaDataAppDef_oaSteiner(oaDataAppDef_oaSteiner* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaSteiner_Type.tp_alloc(&PyoaDataAppDef_oaSteiner_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaSteinerObject* self = (PyoaDataAppDef_oaSteinerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaSteiner_get_doc[] = 
"Class: oaDataAppDef_oaSteiner, Function: get\n"
"  Paramegers: (oaSteiner,[oaByte])\n"
"    Calls: void get(const oaSteiner* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaSteiner,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaSteiner_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaSteiner data;
    int convert_status=PyoaDataAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaSteinerObject* self=(PyoaDataAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSteiner p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaSteiner_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaSteiner_getDefault_doc[] = 
"Class: oaDataAppDef_oaSteiner, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaSteiner_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaSteiner data;
    int convert_status=PyoaDataAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaSteinerObject* self=(PyoaDataAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaSteiner_getSize_doc[] = 
"Class: oaDataAppDef_oaSteiner, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaSteiner_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaSteiner data;
    int convert_status=PyoaDataAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaSteinerObject* self=(PyoaDataAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaSteiner_set_doc[] = 
"Class: oaDataAppDef_oaSteiner, Function: set\n"
"  Paramegers: (oaSteiner,[oaByte])\n"
"    Calls: void set(oaSteiner* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaSteiner,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaSteiner_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaSteiner data;
    int convert_status=PyoaDataAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaSteinerObject* self=(PyoaDataAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSteiner p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaSteiner_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaSteiner_isNull_doc[] =
"Class: oaDataAppDef_oaSteiner, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaSteiner_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaSteiner data;
    int convert_status=PyoaDataAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaSteiner_assign_doc[] = 
"Class: oaDataAppDef_oaSteiner, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaSteiner_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaSteiner data;
  int convert_status=PyoaDataAppDef_oaSteiner_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaSteiner p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaSteiner_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaSteiner_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaSteiner_get,METH_VARARGS,oaDataAppDef_oaSteiner_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaSteiner_getDefault,METH_VARARGS,oaDataAppDef_oaSteiner_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaSteiner_getSize,METH_VARARGS,oaDataAppDef_oaSteiner_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaSteiner_set,METH_VARARGS,oaDataAppDef_oaSteiner_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaSteiner_tp_isNull,METH_VARARGS,oaDataAppDef_oaSteiner_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaSteiner_tp_assign,METH_VARARGS,oaDataAppDef_oaSteiner_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaSteiner_doc[] = 
"Class: oaDataAppDef_oaSteiner\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaSteiner)\n"
"    Calls: (const oaDataAppDef_oaSteiner&)\n"
"    Signature: oaDataAppDef_oaSteiner||cref-oaDataAppDef_oaSteiner,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaSteiner_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaSteiner",
    sizeof(PyoaDataAppDef_oaSteinerObject),
    0,
    (destructor)oaDataAppDef_oaSteiner_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaSteiner_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaSteiner_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaSteiner_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaSteiner_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaSteiner_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaSteiner_static_find_doc[] = 
"Class: oaDataAppDef_oaSteiner, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaSteiner* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaSteiner|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaSteiner* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaSteiner_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaSteinerp result= (oaDataAppDef_oaSteiner::find(p1.Data()));
            return PyoaDataAppDef_oaSteiner_FromoaDataAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaSteinerp result= (oaDataAppDef_oaSteiner::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaSteiner_FromoaDataAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaSteiner, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaSteiner_static_get_doc[] = 
"Class: oaDataAppDef_oaSteiner, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaSteiner* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaSteiner|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaSteiner* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaSteiner_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaSteinerp result= (oaDataAppDef_oaSteiner::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaSteiner_FromoaDataAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaSteinerp result= (oaDataAppDef_oaSteiner::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaSteiner_FromoaDataAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaSteiner, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaSteiner_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaSteiner_static_find,METH_VARARGS,oaDataAppDef_oaSteiner_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaSteiner_static_get,METH_VARARGS,oaDataAppDef_oaSteiner_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaSteiner_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaSteiner_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaSteiner\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaSteiner",
           (PyObject*)(&PyoaDataAppDef_oaSteiner_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaSteiner\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaSteiner_Type.tp_dict;
    for(method=oaDataAppDef_oaSteiner_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaStepperMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaStepperMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaStepperMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaStepperMapObject* self = (PyoaDataAppDef_oaStepperMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaStepperMap)
    {
        PyParamoaDataAppDef_oaStepperMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaStepperMap_Convert,&p1)) {
            PyoaDataAppDef_oaStepperMapObject* cself=((PyoaDataAppDef_oaStepperMapObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaStepperMap, Choices are:\n"
        "    (oaDataAppDef_oaStepperMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaStepperMap_tp_dealloc(PyoaDataAppDef_oaStepperMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaStepperMap_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaStepperMap value;
    int convert_status=PyoaDataAppDef_oaStepperMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaDataAppDef_oaStepperMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaStepperMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaStepperMap v1;
    PyParamoaDataAppDef_oaStepperMap v2;
    int convert_status1=PyoaDataAppDef_oaStepperMap_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaStepperMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaStepperMap_Convert(PyObject* ob,PyParamoaDataAppDef_oaStepperMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaStepperMap_Check(ob)) {
        result->SetData( (oaDataAppDef_oaStepperMap**) ((PyoaDataAppDef_oaStepperMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaStepperMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaStepperMap_FromoaDataAppDef_oaStepperMap(oaDataAppDef_oaStepperMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaStepperMap* data=*value;
        PyObject* bself = PyoaDataAppDef_oaStepperMap_Type.tp_alloc(&PyoaDataAppDef_oaStepperMap_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaStepperMapObject* self = (PyoaDataAppDef_oaStepperMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaStepperMap_FromoaDataAppDef_oaStepperMap(oaDataAppDef_oaStepperMap* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaStepperMap_Type.tp_alloc(&PyoaDataAppDef_oaStepperMap_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaStepperMapObject* self = (PyoaDataAppDef_oaStepperMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaStepperMap_get_doc[] = 
"Class: oaDataAppDef_oaStepperMap, Function: get\n"
"  Paramegers: (oaStepperMap,[oaByte])\n"
"    Calls: void get(const oaStepperMap* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaStepperMap,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaStepperMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaStepperMap data;
    int convert_status=PyoaDataAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaStepperMapObject* self=(PyoaDataAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaStepperMap p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaStepperMap_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaStepperMap_getDefault_doc[] = 
"Class: oaDataAppDef_oaStepperMap, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaStepperMap_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaStepperMap data;
    int convert_status=PyoaDataAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaStepperMapObject* self=(PyoaDataAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaStepperMap_getSize_doc[] = 
"Class: oaDataAppDef_oaStepperMap, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaStepperMap_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaStepperMap data;
    int convert_status=PyoaDataAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaStepperMapObject* self=(PyoaDataAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaStepperMap_set_doc[] = 
"Class: oaDataAppDef_oaStepperMap, Function: set\n"
"  Paramegers: (oaStepperMap,[oaByte])\n"
"    Calls: void set(oaStepperMap* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaStepperMap,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaStepperMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaStepperMap data;
    int convert_status=PyoaDataAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaStepperMapObject* self=(PyoaDataAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaStepperMap p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaStepperMap_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaStepperMap_isNull_doc[] =
"Class: oaDataAppDef_oaStepperMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaStepperMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaStepperMap data;
    int convert_status=PyoaDataAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaStepperMap_assign_doc[] = 
"Class: oaDataAppDef_oaStepperMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaStepperMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaStepperMap data;
  int convert_status=PyoaDataAppDef_oaStepperMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaStepperMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaStepperMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaStepperMap_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaStepperMap_get,METH_VARARGS,oaDataAppDef_oaStepperMap_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaStepperMap_getDefault,METH_VARARGS,oaDataAppDef_oaStepperMap_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaStepperMap_getSize,METH_VARARGS,oaDataAppDef_oaStepperMap_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaStepperMap_set,METH_VARARGS,oaDataAppDef_oaStepperMap_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaStepperMap_tp_isNull,METH_VARARGS,oaDataAppDef_oaStepperMap_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaStepperMap_tp_assign,METH_VARARGS,oaDataAppDef_oaStepperMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaStepperMap_doc[] = 
"Class: oaDataAppDef_oaStepperMap\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaStepperMap)\n"
"    Calls: (const oaDataAppDef_oaStepperMap&)\n"
"    Signature: oaDataAppDef_oaStepperMap||cref-oaDataAppDef_oaStepperMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaStepperMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaStepperMap",
    sizeof(PyoaDataAppDef_oaStepperMapObject),
    0,
    (destructor)oaDataAppDef_oaStepperMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaStepperMap_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaStepperMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaStepperMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaStepperMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaStepperMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaStepperMap_static_find_doc[] = 
"Class: oaDataAppDef_oaStepperMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaStepperMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaStepperMap|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaStepperMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaStepperMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaStepperMapp result= (oaDataAppDef_oaStepperMap::find(p1.Data()));
            return PyoaDataAppDef_oaStepperMap_FromoaDataAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaStepperMapp result= (oaDataAppDef_oaStepperMap::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaStepperMap_FromoaDataAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaStepperMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaStepperMap_static_get_doc[] = 
"Class: oaDataAppDef_oaStepperMap, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaStepperMap* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaStepperMap|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaStepperMap* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaStepperMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaStepperMapp result= (oaDataAppDef_oaStepperMap::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaStepperMap_FromoaDataAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaStepperMapp result= (oaDataAppDef_oaStepperMap::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaStepperMap_FromoaDataAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaStepperMap, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaStepperMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaStepperMap_static_find,METH_VARARGS,oaDataAppDef_oaStepperMap_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaStepperMap_static_get,METH_VARARGS,oaDataAppDef_oaStepperMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaStepperMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaStepperMap_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaStepperMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaStepperMap",
           (PyObject*)(&PyoaDataAppDef_oaStepperMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaStepperMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaStepperMap_Type.tp_dict;
    for(method=oaDataAppDef_oaStepperMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaTech
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaTech_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaTech_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaTechObject* self = (PyoaDataAppDef_oaTechObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaTech)
    {
        PyParamoaDataAppDef_oaTech p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaTech_Convert,&p1)) {
            PyoaDataAppDef_oaTechObject* cself=((PyoaDataAppDef_oaTechObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaTech, Choices are:\n"
        "    (oaDataAppDef_oaTech)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaTech_tp_dealloc(PyoaDataAppDef_oaTechObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaTech_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaTech value;
    int convert_status=PyoaDataAppDef_oaTech_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaDataAppDef_oaTech::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaTech_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaTech v1;
    PyParamoaDataAppDef_oaTech v2;
    int convert_status1=PyoaDataAppDef_oaTech_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaTech_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaTech_Convert(PyObject* ob,PyParamoaDataAppDef_oaTech* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaTech_Check(ob)) {
        result->SetData( (oaDataAppDef_oaTech**) ((PyoaDataAppDef_oaTechObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaTech Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaTech_FromoaDataAppDef_oaTech(oaDataAppDef_oaTech** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaTech* data=*value;
        PyObject* bself = PyoaDataAppDef_oaTech_Type.tp_alloc(&PyoaDataAppDef_oaTech_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaTechObject* self = (PyoaDataAppDef_oaTechObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaTech_FromoaDataAppDef_oaTech(oaDataAppDef_oaTech* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaTech_Type.tp_alloc(&PyoaDataAppDef_oaTech_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaTechObject* self = (PyoaDataAppDef_oaTechObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaTech_get_doc[] = 
"Class: oaDataAppDef_oaTech, Function: get\n"
"  Paramegers: (oaTech,[oaByte])\n"
"    Calls: void get(const oaTech* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaTech,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaTech_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaTech data;
    int convert_status=PyoaDataAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaTechObject* self=(PyoaDataAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTech p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTech_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaTech_getDefault_doc[] = 
"Class: oaDataAppDef_oaTech, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaTech_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaTech data;
    int convert_status=PyoaDataAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaTechObject* self=(PyoaDataAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaTech_getSize_doc[] = 
"Class: oaDataAppDef_oaTech, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaTech_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaTech data;
    int convert_status=PyoaDataAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaTechObject* self=(PyoaDataAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaTech_set_doc[] = 
"Class: oaDataAppDef_oaTech, Function: set\n"
"  Paramegers: (oaTech,[oaByte])\n"
"    Calls: void set(oaTech* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaTech,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaTech_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaTech data;
    int convert_status=PyoaDataAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaTechObject* self=(PyoaDataAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTech p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTech_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaTech_isNull_doc[] =
"Class: oaDataAppDef_oaTech, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaTech_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaTech data;
    int convert_status=PyoaDataAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaTech_assign_doc[] = 
"Class: oaDataAppDef_oaTech, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaTech_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaTech data;
  int convert_status=PyoaDataAppDef_oaTech_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaTech p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaTech_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaTech_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaTech_get,METH_VARARGS,oaDataAppDef_oaTech_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaTech_getDefault,METH_VARARGS,oaDataAppDef_oaTech_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaTech_getSize,METH_VARARGS,oaDataAppDef_oaTech_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaTech_set,METH_VARARGS,oaDataAppDef_oaTech_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaTech_tp_isNull,METH_VARARGS,oaDataAppDef_oaTech_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaTech_tp_assign,METH_VARARGS,oaDataAppDef_oaTech_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaTech_doc[] = 
"Class: oaDataAppDef_oaTech\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaTech)\n"
"    Calls: (const oaDataAppDef_oaTech&)\n"
"    Signature: oaDataAppDef_oaTech||cref-oaDataAppDef_oaTech,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaTech_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaTech",
    sizeof(PyoaDataAppDef_oaTechObject),
    0,
    (destructor)oaDataAppDef_oaTech_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaTech_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaTech_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaTech_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaTech_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaTech_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaTech_static_find_doc[] = 
"Class: oaDataAppDef_oaTech, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaTech* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaTech|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaTech* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaTech_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaTechp result= (oaDataAppDef_oaTech::find(p1.Data()));
            return PyoaDataAppDef_oaTech_FromoaDataAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaTechp result= (oaDataAppDef_oaTech::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaTech_FromoaDataAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaTech, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaTech_static_get_doc[] = 
"Class: oaDataAppDef_oaTech, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaTech* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaTech|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaTech* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaTech_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaTechp result= (oaDataAppDef_oaTech::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaTech_FromoaDataAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaTechp result= (oaDataAppDef_oaTech::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaTech_FromoaDataAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaTech, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaTech_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaTech_static_find,METH_VARARGS,oaDataAppDef_oaTech_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaTech_static_get,METH_VARARGS,oaDataAppDef_oaTech_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaTech_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaTech_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaTech\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaTech",
           (PyObject*)(&PyoaDataAppDef_oaTech_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaTech\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaTech_Type.tp_dict;
    for(method=oaDataAppDef_oaTech_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDataAppDef_oaTechHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaTechHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDataAppDef_oaTechHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaDataAppDef_oaTechHeaderObject* self = (PyoaDataAppDef_oaTechHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaDataAppDef_oaTechHeader)
    {
        PyParamoaDataAppDef_oaTechHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDataAppDef_oaTechHeader_Convert,&p1)) {
            PyoaDataAppDef_oaTechHeaderObject* cself=((PyoaDataAppDef_oaTechHeaderObject*)PyTuple_GetItem(args,0));
            self->data=p1.Data();
            self->value=&(self->data);
            self->size=cself->size;
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDataAppDef_oaTechHeader, Choices are:\n"
        "    (oaDataAppDef_oaTechHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDataAppDef_oaTechHeader_tp_dealloc(PyoaDataAppDef_oaTechHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaDataAppDef_oaTechHeader_tp_repr(PyObject *ob)
{
    PyParamoaDataAppDef_oaTechHeader value;
    int convert_status=PyoaDataAppDef_oaTechHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaDataAppDef_oaTechHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaDataAppDef_oaTechHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDataAppDef_oaTechHeader v1;
    PyParamoaDataAppDef_oaTechHeader v2;
    int convert_status1=PyoaDataAppDef_oaTechHeader_Convert(ob1,&v1);
    int convert_status2=PyoaDataAppDef_oaTechHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaDataAppDef_oaTechHeader_Convert(PyObject* ob,PyParamoaDataAppDef_oaTechHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaDataAppDef_oaTechHeader_Check(ob)) {
        result->SetData( (oaDataAppDef_oaTechHeader**) ((PyoaDataAppDef_oaTechHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaDataAppDef_oaTechHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaTechHeader_FromoaDataAppDef_oaTechHeader(oaDataAppDef_oaTechHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaDataAppDef_oaTechHeader* data=*value;
        PyObject* bself = PyoaDataAppDef_oaTechHeader_Type.tp_alloc(&PyoaDataAppDef_oaTechHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaDataAppDef_oaTechHeaderObject* self = (PyoaDataAppDef_oaTechHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaDataAppDef_oaTechHeader_FromoaDataAppDef_oaTechHeader(oaDataAppDef_oaTechHeader* data)
{
    if (data) {
       PyObject* bself = PyoaDataAppDef_oaTechHeader_Type.tp_alloc(&PyoaDataAppDef_oaTechHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaDataAppDef_oaTechHeaderObject* self = (PyoaDataAppDef_oaTechHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaTechHeader_get_doc[] = 
"Class: oaDataAppDef_oaTechHeader, Function: get\n"
"  Paramegers: (oaTechHeader,[oaByte])\n"
"    Calls: void get(const oaTechHeader* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaTechHeader,ptr-oaByte,\n"
"    This function fills out the given byte array with the value of this data extension. The byte array should be allocated before calling this function.\n"
"    object\n"
"    The object on which to get the value\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaTechHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaTechHeader data;
    int convert_status=PyoaDataAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaTechHeaderObject* self=(PyoaDataAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaTechHeader_getDefault_doc[] = 
"Class: oaDataAppDef_oaTechHeader, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value of this data extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to fill out with the value\n"
;

static PyObject*
oaDataAppDef_oaTechHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaTechHeader data;
    int convert_status=PyoaDataAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaTechHeaderObject* self=(PyoaDataAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getSize()!=p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaTechHeader_getSize_doc[] = 
"Class: oaDataAppDef_oaTechHeader, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize()\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size in bytes of the value for this data extension.\n"
;

static PyObject*
oaDataAppDef_oaTechHeader_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaTechHeader data;
    int convert_status=PyoaDataAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaTechHeaderObject* self=(PyoaDataAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaTechHeader_set_doc[] = 
"Class: oaDataAppDef_oaTechHeader, Function: set\n"
"  Paramegers: (oaTechHeader,[oaByte])\n"
"    Calls: void set(oaTechHeader* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaTechHeader,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    object\n"
"    The object on which to set the value\n"
"    value\n"
"    The value to store on the object\n"
;

static PyObject*
oaDataAppDef_oaTechHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDataAppDef_oaTechHeader data;
    int convert_status=PyoaDataAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaDataAppDef_oaTechHeaderObject* self=(PyoaDataAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize()!=p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number of bytes does not match oaDataAppDef::getSize");
            return NULL;
        }
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaTechHeader_isNull_doc[] =
"Class: oaDataAppDef_oaTechHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaDataAppDef_oaTechHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaDataAppDef_oaTechHeader data;
    int convert_status=PyoaDataAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaDataAppDef_oaTechHeader_assign_doc[] = 
"Class: oaDataAppDef_oaTechHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaDataAppDef_oaTechHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaDataAppDef_oaTechHeader data;
  int convert_status=PyoaDataAppDef_oaTechHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaDataAppDef_oaTechHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDataAppDef_oaTechHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaDataAppDef_oaTechHeader_methodlist[] = {
    {"get",(PyCFunction)oaDataAppDef_oaTechHeader_get,METH_VARARGS,oaDataAppDef_oaTechHeader_get_doc},
    {"getDefault",(PyCFunction)oaDataAppDef_oaTechHeader_getDefault,METH_VARARGS,oaDataAppDef_oaTechHeader_getDefault_doc},
    {"getSize",(PyCFunction)oaDataAppDef_oaTechHeader_getSize,METH_VARARGS,oaDataAppDef_oaTechHeader_getSize_doc},
    {"set",(PyCFunction)oaDataAppDef_oaTechHeader_set,METH_VARARGS,oaDataAppDef_oaTechHeader_set_doc},
    {"isNull",(PyCFunction)oaDataAppDef_oaTechHeader_tp_isNull,METH_VARARGS,oaDataAppDef_oaTechHeader_isNull_doc},
    {"assign",(PyCFunction)oaDataAppDef_oaTechHeader_tp_assign,METH_VARARGS,oaDataAppDef_oaTechHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaTechHeader_doc[] = 
"Class: oaDataAppDef_oaTechHeader\n"
"  The oaDataAppDef class implements an application-specific extension on a specified class of managed objects in a database.\n"
"  A data field is added to each object of the specified dataType when the dataType is created. The default value of the data field is NULL. When an application is created, it can use the new data field for any necessary purpose. This type of extension is useful because it allows an application-defined block of data to be associated with each object.\n"
"  Note: Since the type of data is unknown to OpenAccess, the contents are not byte swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaDataAppDef_oaTechHeader)\n"
"    Calls: (const oaDataAppDef_oaTechHeader&)\n"
"    Signature: oaDataAppDef_oaTechHeader||cref-oaDataAppDef_oaTechHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDataAppDef_oaTechHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDataAppDef_oaTechHeader",
    sizeof(PyoaDataAppDef_oaTechHeaderObject),
    0,
    (destructor)oaDataAppDef_oaTechHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaDataAppDef_oaTechHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaDataAppDef_oaTechHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDataAppDef_oaTechHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaDataAppDef_oaTechHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaDataAppDef_oaTechHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDataAppDef_oaTechHeader_static_find_doc[] = 
"Class: oaDataAppDef_oaTechHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaDataAppDef_oaTechHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaDataAppDef_oaTechHeader|cref-oaString,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaDataAppDef_oaTechHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaDataAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaDataAppDef_oaTechHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaDataAppDef_oaTechHeaderp result= (oaDataAppDef_oaTechHeader::find(p1.Data()));
            return PyoaDataAppDef_oaTechHeader_FromoaDataAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaTechHeaderp result= (oaDataAppDef_oaTechHeader::find(p1.Data(),p2.Data()));
            return PyoaDataAppDef_oaTechHeader_FromoaDataAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaTechHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaDataAppDef_oaTechHeader_static_get_doc[] = 
"Class: oaDataAppDef_oaTechHeader, Function: get\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaTechHeader* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaTechHeader|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize .\n"
"    name\n"
"    The name given to the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaDataAppDef_oaTechHeader* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaDataAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaDataAppDef object, creating a data extension with the specified name and dataSize for the specified type of object.\n"
"    name\n"
"    The name for the oaDataAppDef object\n"
"    dataSize\n"
"    The size of each data object, in bytes\n"
"    defValue\n"
"    The default value for the extension\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaDataAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaDataAppDef_oaTechHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaDataAppDef_oaTechHeaderp result= (oaDataAppDef_oaTechHeader::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaDataAppDef_oaTechHeader_FromoaDataAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaDataAppDef_oaTechHeaderp result= (oaDataAppDef_oaTechHeader::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaDataAppDef_oaTechHeader_FromoaDataAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaDataAppDef_oaTechHeader, function: get, Choices are:\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaDataAppDef_oaTechHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaDataAppDef_oaTechHeader_static_find,METH_VARARGS,oaDataAppDef_oaTechHeader_static_find_doc},
    {"static_get",(PyCFunction)oaDataAppDef_oaTechHeader_static_get,METH_VARARGS,oaDataAppDef_oaTechHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDataAppDef_oaTechHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDataAppDef_oaTechHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaDataAppDef_oaTechHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDataAppDef_oaTechHeader",
           (PyObject*)(&PyoaDataAppDef_oaTechHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDataAppDef_oaTechHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaDataAppDef_oaTechHeader_Type.tp_dict;
    for(method=oaDataAppDef_oaTechHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

