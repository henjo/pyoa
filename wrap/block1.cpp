
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

// ------------------------------------------------------------------
// Utility code for type convertion of low level oa types
// ------------------------------------------------------------------

#include "pyoa_header.h"

typedef oaChar* oaChar_p;
typedef char* char_p;

// -----------------------------------------------------
// Exception
// -----------------------------------------------------
PyObject* PyExec_OpenAccess=NULL;

void PyErr_OpenAccess(const oaException& exc)
{
    PyObject* lst=PyTuple_New(2);
    PyTuple_SetItem(lst,0,PyInt_FromLong(exc.getMsgId()));
    PyTuple_SetItem(lst,1,
                    PyString_FromStringAndSize((char*)(const char*)exc.getMsg(),
                                               exc.getMsg().getLength()));
    PyErr_SetObject(PyExec_OpenAccess,lst);
    Py_XDECREF(lst);
}


// -----------------------------------------------------
// None
// -----------------------------------------------------
int PyNone_Convert(PyObject* obj,void* result)
{
  if (obj == Py_None) return 1;
  return 0;
}
// -----------------------------------------------------
// int
// -----------------------------------------------------
int Pyint_Convert(PyObject* obj,int* result)
{
  long val = PyInt_AsLong(obj);
  if (val==-1 && PyErr_Occurred()) return 0;

  if ( ((long)(int) val) != val) {
    PyErr_SetString(PyExc_TypeError,
                     "value is out of range for int");
    return 0;
  }
  *result=val;
  return 1;
}

PyObject* Pyint_Fromint(int value)
{
  return PyInt_FromLong(value);
}

// -----------------------------------------------------
// char
// -----------------------------------------------------
int Pychar_Convert(PyObject* obj,char* result)
{
  if (PyString_Check(obj)) {
    Pyoa_ssize_t len;
    char* s;
    if (PyString_AsStringAndSize(obj,&s,&len)) return 0;
    if (len!=1) {
      PyErr_SetString(PyExc_TypeError,
                      "string of length 1 required for oaChar");
      return 0;
    }
    *result=s[0];
    return 1;
  }
  if (PyInt_Check(obj)) {
    long val = PyInt_AsLong(obj);
    if (val==-1 && PyErr_Occurred()) return 0;
    char value=char(val);
    if ( ((long)value) != val) {
      PyErr_SetString(PyExc_TypeError,
                     "value is out of range for char");
      return 0;
    }
    *result=value;
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
                     "string of length 1 or int required for oaChar");
  return 0;
}

PyObject* Pychar_Fromchar(char value)
{
  char str[4];
  str[0]=value;
  return PyString_FromStringAndSize(str,1);
}

int Pychar_Array_Convert(PyObject* ob,char_Array* result)
{
  if (PyString_Check(ob)) {
    Pyoa_ssize_t len;
    char* s;
    if (PyString_AsStringAndSize(ob,&s,&len)) return 0;
    result->Init(s,len);
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
                     "string required for char*");
  return 0;
}

PyObject* Pychar_Array_Fromchar_Array(const char_Array& value)
{
  PyObject* result=PyString_FromString((char*)value.data);
  return result;
}

PyObject* Pychar_Array_Fromchar_Array(const char* value,int len,PyObject* lock)
{
  PyObject* result=PyString_FromString((char*)value);
  return result;
}

// -----------------------------------------------------
// charp
// -----------------------------------------------------
int Pycharp_Convert(PyObject* obj,PyParamcharp* result)
{
  if (!PyString_Check(obj)) {
     PyErr_SetString(PyExc_TypeError,
                     "string value required for charp");
  }
  int len=PyString_Size(obj);
  charp data=new char[len+1];
  memcpy(data,PyString_AsString(obj),len);
  data[len]='\0';
  *result=data;
  return 1;
}

PyObject* Pycharp_Fromcharp(charp value)
{
  return PyString_FromString(value);
}

int Pycharp_Array_Convert(PyObject* ob,PyParamcharp_Array* result)
{
  if (PyList_Check(ob)) {
    int len=PyList_Size(ob);
    result->SetLen(len);
    PyParamcharp data;
    for(int i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!Pycharp_Convert(a,&data)) return 0;
      result->SetItem(i,data);
    }
  }
  else if (PyTuple_Check(ob)) {
    int len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamcharp data;
    for(int i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!Pycharp_Convert(a,&data)) return 0;
      result->SetItem(i,data);
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "strings required as all members of charp_Array");
    return 0;
  }
  return 1;
}

PyObject* Pycharp_Array_Fromcharp_Array(const Pycharp_Array& value)
{
  int i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=Pycharp_Fromcharp(value.GetItem(i));
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// -----------------------------------------------------
// oaPythonException
// -----------------------------------------------------
oaPythonException::oaPythonException(const char* _msg)
  : oaException(oaUInt4(oacOSError))
{
  msg="Python Error: ";
  msg+=_msg;
  if (PyErr_Occurred()) {
    PyErr_Print();
  }
}
const oaString& oaPythonException::getFormatString() const
{
  static oaString value("Python Error: %s");
  return value;
}

// -----------------------------------------------------
// ObjectLocks
// -----------------------------------------------------
void PyoaLockObject(PyObject*& lst,PyObject* obj)
{
    if (lst==NULL) {
        lst=PyList_New(0);
    }
    PyList_Append(lst,obj);
}
// -----------------------------------------------------
// ValidateDb
// -----------------------------------------------------
int PyValidateDbObject(oaObject* ob,int param)
{
    if (ob) return 1;
    if (param==0)
        PyErr_SetString(PyExc_TypeError,
               "A Function call is not valid with a Null oaObject");
    else {
        char buffer[80];
        sprintf(buffer,"A NULL oaObject is not allowed for parameter %d",param);
        PyErr_SetString(PyExc_TypeError,buffer);
    }
    return 0;
}
int PyValidateDbObject(oaVCSystem* ob,int param)
{
    if (ob) return 1;
    if (param==0)
        PyErr_SetString(PyExc_TypeError,
               "A Function call is not valid with a Null oaVCSystem");
    else {
        char buffer[80];
        sprintf(buffer,"A NULL oaVCSystem is not allowed for parameter %d",param);
        PyErr_SetString(PyExc_TypeError,buffer);
    }
    return 0;
}
int PyValidateDbObject(oaEvalTextLink* ob,int param)
{
    if (ob) return 1;
    if (param==0)
        PyErr_SetString(PyExc_TypeError,
               "A Function call is not valid with a Null oaEvalTextLink");
    else {
        char buffer[80];
        sprintf(buffer,"A NULL oaEvalTextLink is not allowed for parameter %d",param);
        PyErr_SetString(PyExc_TypeError,buffer);
    }
    return 0;
}
int PyValidateDbObject(oaPcellLink* ob,int param)
{
    if (ob) return 1;
    if (param==0)
        PyErr_SetString(PyExc_TypeError,
               "A Function call is not valid with a Null oaPcellLink");
    else {
        char buffer[80];
        sprintf(buffer,"A NULL oaPcellLink is not allowed for parameter %d",param);
        PyErr_SetString(PyExc_TypeError,buffer);
    }
    return 0;
}
int PyValidateDbObject(oaBuildInfo* ob,int param)
{
    if (ob) return 1;
    if (param==0)
        PyErr_SetString(PyExc_TypeError,
               "A Function call is not valid with a Null oaBuildInfo");
    else {
        char buffer[80];
        sprintf(buffer,"A NULL oaBuildInfo is not allowed for parameter %d",param);
        PyErr_SetString(PyExc_TypeError,buffer);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

// ------------------------------------------------------------------
// Code to Manually implement some wrappers
// ------------------------------------------------------------------

#include "pyoa_header.h"

// -----------------------------------------------------
// Externs
// -----------------------------------------------------
PyObject* openaccess_oaBaseInit(PyObject *self, PyObject *args)
{
  try {
    {
        if (PyArg_ParseTuple(args,"")) {
          oaBaseInit();
          Py_INCREF(Py_None);
          return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt4_Convert,&p1)) {
            oaBaseInit(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        if (PyArg_ParseTuple(args,(char*)"O&O&",
              &PyoaUInt4_Convert,&p1,&PyoaUInt4_Convert,&p2)) {
            oaBaseInit(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaUInt4 p3;
        if (PyArg_ParseTuple(args,(char*)"O&O&O&",
              &PyoaUInt4_Convert,&p1,&PyoaUInt4_Convert,&p2,&PyoaUInt4_Convert,&p3)) {
            oaBaseInit(p1.Data(),p2.Data(),p3.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found: oaBaseInit, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaUInt4)\n"
        "    (oaUInt4,oaUInt4,oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* openaccess_oaTechInit(PyObject *self, PyObject *args)
{
  try {
    {
        if (PyArg_ParseTuple(args,"")) {
          oaTechInit();
          Py_INCREF(Py_None);
          return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt4_Convert,&p1)) {
            oaTechInit(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        if (PyArg_ParseTuple(args,(char*)"O&O&",
              &PyoaUInt4_Convert,&p1,&PyoaUInt4_Convert,&p2)) {
            oaTechInit(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaUInt4 p3;
        if (PyArg_ParseTuple(args,(char*)"O&O&O&",
              &PyoaUInt4_Convert,&p1,&PyoaUInt4_Convert,&p2,&PyoaUInt4_Convert,&p3)) {
            oaTechInit(p1.Data(),p2.Data(),p3.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found: oaTechInit, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaUInt4)\n"
        "    (oaUInt4,oaUInt4,oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* openaccess_oaDesignInit(PyObject *self, PyObject *args)
{
  try {
    {
        if (PyArg_ParseTuple(args,"")) {
          oaDesignInit();
          Py_INCREF(Py_None);
          return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt4_Convert,&p1)) {
            oaDesignInit(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        if (PyArg_ParseTuple(args,(char*)"O&O&",
              &PyoaUInt4_Convert,&p1,&PyoaUInt4_Convert,&p2)) {
            oaDesignInit(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaUInt4 p3;
        if (PyArg_ParseTuple(args,(char*)"O&O&O&",
              &PyoaUInt4_Convert,&p1,&PyoaUInt4_Convert,&p2,&PyoaUInt4_Convert,&p3)) {
            oaDesignInit(p1.Data(),p2.Data(),p3.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found: oaDesignInit, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaUInt4)\n"
        "    (oaUInt4,oaUInt4,oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* openaccess_oaDMInit(PyObject *self, PyObject *args)
{
  try {
    {
        if (PyArg_ParseTuple(args,"")) {
          oaDMInit();
          Py_INCREF(Py_None);
          return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt4_Convert,&p1)) {
            oaDMInit(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        if (PyArg_ParseTuple(args,(char*)"O&O&",
              &PyoaUInt4_Convert,&p1,&PyoaUInt4_Convert,&p2)) {
            oaDMInit(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaUInt4 p3;
        if (PyArg_ParseTuple(args,(char*)"O&O&O&",
              &PyoaUInt4_Convert,&p1,&PyoaUInt4_Convert,&p2,&PyoaUInt4_Convert,&p3)) {
            oaDMInit(p1.Data(),p2.Data(),p3.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found: oaDMInit, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaUInt4)\n"
        "    (oaUInt4,oaUInt4,oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
PyObject* openaccess_oaWaferInit(PyObject* ob, PyObject *args)
{
  try {
    {
        if (PyArg_ParseTuple(args,"")) {
          oaWaferInit();
          Py_INCREF(Py_None);
          return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt4_Convert,&p1)) {
            oaWaferInit(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        if (PyArg_ParseTuple(args,(char*)"O&O&",
              &PyoaUInt4_Convert,&p1,&PyoaUInt4_Convert,&p2)) {
            oaWaferInit(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaUInt4 p3;
        if (PyArg_ParseTuple(args,(char*)"O&O&O&",
              &PyoaUInt4_Convert,&p1,&PyoaUInt4_Convert,&p2,&PyoaUInt4_Convert,&p3)) {
            oaWaferInit(p1.Data(),p2.Data(),p3.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found: oaWaferInit, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaUInt4)\n"
        "    (oaUInt4,oaUInt4,oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static PyObject*
openaccess_oaStartDaemon(PyObject* ob, PyObject *args)
{
  try {
    char* p1;
    if (PyArg_ParseTuple(args,"s",&p1)) {
        oaStartDaemon(p1);
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ==================================================================
// Special Iterators:
//   oaBoolean getNext(oaString)
// ==================================================================
// -----------------------------------------------------
// oaDirIter
// -----------------------------------------------------
PyObject* oaDirIter_iternext(PyObject *self)
{
  try {
    PyParamoaDirIter ob;
    int convert_status=PyoaDirIter_Convert(self,&ob);
    assert(convert_status!=0);
    oaString p1;
    oaBoolean result=ob.DataCall()->getNext(p1);
    if (!result) {
       PyErr_SetObject(PyExc_StopIteration,Py_None);
       return NULL;
    }
    return PyoaString_FromoaString(p1);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaDirIter_getNext(PyObject *self, PyObject *args)
{
  try {
    PyParamoaDirIter ob;
    int convert_status=PyoaDirIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaString p1;
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result=ob.DataCall()->getNext(p1);
        if (result) {
            return PyoaString_FromoaString(p1);
        }
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaDirIter_next(PyObject *self, PyObject *args)
{
  try {
    PyParamoaDirIter ob;
    int convert_status=PyoaDirIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaString p1;
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result=ob.DataCall()->getNext(p1);
        if (result) {
            return PyoaString_FromoaString(p1);
        }
        PyErr_SetObject(PyExc_StopIteration,Py_None);
        return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// -----------------------------------------------------
// oaEnumPropIter
// -----------------------------------------------------
PyObject* oaEnumPropIter_iternext(PyObject *self)
{
  try {
    PyParamoaEnumPropIter ob;
    int convert_status=PyoaEnumPropIter_Convert(self,&ob);
    assert(convert_status!=0);
    oaString p1;
    oaBoolean result=ob.DataCall()->getNext(p1);
    if (!result) {
       PyErr_SetObject(PyExc_StopIteration,Py_None);
       return NULL;
    }
    return PyoaString_FromoaString(p1);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaEnumPropIter_getNext(PyObject *self, PyObject *args)
{
  try {
    PyParamoaEnumPropIter ob;
    int convert_status=PyoaEnumPropIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaString p1;
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result=ob.DataCall()->getNext(p1);
        if (result) {
            return PyoaString_FromoaString(p1);
        }
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaEnumPropIter_next(PyObject *self, PyObject *args)
{
  try {
    PyParamoaEnumPropIter ob;
    int convert_status=PyoaEnumPropIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaString p1;
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result=ob.DataCall()->getNext(p1);
        if (result) {
            return PyoaString_FromoaString(p1);
        }
        PyErr_SetObject(PyExc_StopIteration,Py_None);
        return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ==================================================================
// Special Iterators:
//   oaObject* getNext(oaUInt4)
// ==================================================================
// -----------------------------------------------------
// oaMemNetIter
// -----------------------------------------------------
PyObject* oaMemNetIter_iternext(PyObject *self)
{
  try {
    PyParamoaMemNetIter ob;
    int convert_status=PyoaMemNetIter_Convert(self,&ob);
    assert(convert_status!=0);
    oaUInt4 p1;
    oaNet* result=ob.DataCall()->getNext(p1);
    if (!result) {
       PyErr_SetObject(PyExc_StopIteration,Py_None);
       return NULL;
    }
    PyObject* lst=PyList_New(2);
    PyList_SetItem(lst,0,PyoaNet_FromoaNet(result));
    PyList_SetItem(lst,1,PyoaUInt4_FromoaUInt4(p1));
    return lst;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaMemNetIter_getNext(PyObject *self, PyObject *args)
{
  try {
    PyParamoaMemNetIter ob;
    int convert_status=PyoaMemNetIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaUInt4 p1;
    if (PyArg_ParseTuple(args,"")) {
        oaNet* result=ob.DataCall()->getNext(p1);
        if (result) {
            PyObject* lst=PyList_New(2);
            PyList_SetItem(lst,0,PyoaNet_FromoaNet(result));
            PyList_SetItem(lst,1,PyoaUInt4_FromoaUInt4(p1));
            return lst;
        }
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaMemNetIter_next(PyObject *self, PyObject *args)
{
  try {
    PyParamoaMemNetIter ob;
    int convert_status=PyoaMemNetIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaUInt4 p1;
    if (PyArg_ParseTuple(args,"")) {
        oaNet* result=ob.DataCall()->getNext(p1);
        if (result) {
            PyObject* lst=PyList_New(2);
            PyList_SetItem(lst,0,PyoaNet_FromoaNet(result));
            PyList_SetItem(lst,1,PyoaUInt4_FromoaUInt4(p1));
            return lst;
        }
        PyErr_SetObject(PyExc_StopIteration,Py_None);
        return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// -----------------------------------------------------
// oaModMemNetIter
// -----------------------------------------------------
PyObject* oaModMemNetIter_iternext(PyObject *self)
{
  try {
    PyParamoaModMemNetIter ob;
    int convert_status=PyoaModMemNetIter_Convert(self,&ob);
    assert(convert_status!=0);
    oaUInt4 p1;
    oaModNet* result=ob.DataCall()->getNext(p1);
    if (!result) {
       PyErr_SetObject(PyExc_StopIteration,Py_None);
       return NULL;
    }
    PyObject* lst=PyList_New(2);
    PyList_SetItem(lst,0,PyoaModNet_FromoaModNet(result));
    PyList_SetItem(lst,1,PyoaUInt4_FromoaUInt4(p1));
    return lst;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaModMemNetIter_getNext(PyObject *self, PyObject *args)
{
  try {
    PyParamoaModMemNetIter ob;
    int convert_status=PyoaModMemNetIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaUInt4 p1;
    if (PyArg_ParseTuple(args,"")) {
        oaModNet* result=ob.DataCall()->getNext(p1);
        if (result) {
            PyObject* lst=PyList_New(2);
            PyList_SetItem(lst,0,PyoaModNet_FromoaModNet(result));
            PyList_SetItem(lst,1,PyoaUInt4_FromoaUInt4(p1));
            return lst;
        }
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaModMemNetIter_next(PyObject *self, PyObject *args)
{
  try {
    PyParamoaModMemNetIter ob;
    int convert_status=PyoaModMemNetIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaUInt4 p1;
    if (PyArg_ParseTuple(args,"")) {
        oaModNet* result=ob.DataCall()->getNext(p1);
        if (result) {
            PyObject* lst=PyList_New(2);
            PyList_SetItem(lst,0,PyoaModNet_FromoaModNet(result));
            PyList_SetItem(lst,1,PyoaUInt4_FromoaUInt4(p1));
            return lst;
        }
        PyErr_SetObject(PyExc_StopIteration,Py_None);
        return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// -----------------------------------------------------
// oaOccMemNetIter
// -----------------------------------------------------
PyObject* oaOccMemNetIter_iternext(PyObject *self)
{
  try {
    PyParamoaOccMemNetIter ob;
    int convert_status=PyoaOccMemNetIter_Convert(self,&ob);
    assert(convert_status!=0);
    oaUInt4 p1;
    oaOccNet* result=ob.DataCall()->getNext(p1);
    if (!result) {
       PyErr_SetObject(PyExc_StopIteration,Py_None);
       return NULL;
    }
    PyObject* lst=PyList_New(2);
    PyList_SetItem(lst,0,PyoaOccNet_FromoaOccNet(result));
    PyList_SetItem(lst,1,PyoaUInt4_FromoaUInt4(p1));
    return lst;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaOccMemNetIter_getNext(PyObject *self, PyObject *args)
{
  try {
    PyParamoaOccMemNetIter ob;
    int convert_status=PyoaOccMemNetIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaUInt4 p1;
    if (PyArg_ParseTuple(args,"")) {
        oaOccNet* result=ob.DataCall()->getNext(p1);
        if (result) {
            PyObject* lst=PyList_New(2);
            PyList_SetItem(lst,0,PyoaOccNet_FromoaOccNet(result));
            PyList_SetItem(lst,1,PyoaUInt4_FromoaUInt4(p1));
            return lst;
        }
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaOccMemNetIter_next(PyObject *self, PyObject *args)
{
  try {
    PyParamoaOccMemNetIter ob;
    int convert_status=PyoaOccMemNetIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaUInt4 p1;
    if (PyArg_ParseTuple(args,"")) {
        oaOccNet* result=ob.DataCall()->getNext(p1);
        if (result) {
            PyObject* lst=PyList_New(2);
            PyList_SetItem(lst,0,PyoaOccNet_FromoaOccNet(result));
            PyList_SetItem(lst,1,PyoaUInt4_FromoaUInt4(p1));
            return lst;
        }
        PyErr_SetObject(PyExc_StopIteration,Py_None);
        return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ==================================================================
// Special Iterators:
//   oaObjectRef getNext()
// ==================================================================
// -----------------------------------------------------
// oaDMObjectStatusRefIter
// -----------------------------------------------------
PyObject* oaDMObjectStatusRefIter_iternext(PyObject *self)
{
  try {
    PyParamoaDMObjectStatusRefIter ob;
    int convert_status=PyoaDMObjectStatusRefIter_Convert(self,&ob);
    assert(convert_status!=0);
    oaDMObjectStatusRef result=ob.DataCall()->getNext();
    if (result.getObject()==NULL) {
       PyErr_SetObject(PyExc_StopIteration,Py_None);
       return NULL;
    }
    return PyoaDMObjectStatusRef_FromoaDMObjectStatusRef(new oaDMObjectStatusRef(result));
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaDMObjectStatusRefIter_getNext(PyObject *self, PyObject *args)
{
  try {
    PyParamoaDMObjectStatusRefIter ob;
    int convert_status=PyoaDMObjectStatusRefIter_Convert(self,&ob);
    assert(convert_status!=0);

    if (PyArg_ParseTuple(args,"")) {
        oaDMObjectStatusRef result=ob.DataCall()->getNext();
        if (result.getObject()!=NULL) {
            return PyoaDMObjectStatusRef_FromoaDMObjectStatusRef(new oaDMObjectStatusRef(result));
        }
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaDMObjectStatusRefIter_next(PyObject *self, PyObject *args)
{
  try {
    PyParamoaDMObjectStatusRefIter ob;
    int convert_status=PyoaDMObjectStatusRefIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaString p1;
    if (PyArg_ParseTuple(args,"")) {
        oaDMObjectStatusRef result=ob.DataCall()->getNext();
        if (result.getObject()!=NULL) {
            return PyoaDMObjectStatusRef_FromoaDMObjectStatusRef(new oaDMObjectStatusRef(result));
        }
        PyErr_SetObject(PyExc_StopIteration,Py_None);
        return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// -----------------------------------------------------
// oaDMObjectVersionRefIter
// -----------------------------------------------------
PyObject* oaDMObjectVersionRefIter_iternext(PyObject *self)
{
  try {
    PyParamoaDMObjectVersionRefIter ob;
    int convert_status=PyoaDMObjectVersionRefIter_Convert(self,&ob);
    assert(convert_status!=0);
    oaDMObjectVersionRef result=ob.DataCall()->getNext();
    if (result.getObject()==NULL) {
       PyErr_SetObject(PyExc_StopIteration,Py_None);
       return NULL;
    }
    return PyoaDMObjectVersionRef_FromoaDMObjectVersionRef(new oaDMObjectVersionRef(result));
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaDMObjectVersionRefIter_getNext(PyObject *self, PyObject *args)
{
  try {
    PyParamoaDMObjectVersionRefIter ob;
    int convert_status=PyoaDMObjectVersionRefIter_Convert(self,&ob);
    assert(convert_status!=0);

    if (PyArg_ParseTuple(args,"")) {
        oaDMObjectVersionRef result=ob.DataCall()->getNext();
        if (result.getObject()!=NULL) {
            return PyoaDMObjectVersionRef_FromoaDMObjectVersionRef(new oaDMObjectVersionRef(result));
        }
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaDMObjectVersionRefIter_next(PyObject *self, PyObject *args)
{
  try {
    PyParamoaDMObjectVersionRefIter ob;
    int convert_status=PyoaDMObjectVersionRefIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaString p1;
    if (PyArg_ParseTuple(args,"")) {
        oaDMObjectVersionRef result=ob.DataCall()->getNext();
        if (result.getObject()!=NULL) {
            return PyoaDMObjectVersionRef_FromoaDMObjectVersionRef(new oaDMObjectVersionRef(result));
        }
        PyErr_SetObject(PyExc_StopIteration,Py_None);
        return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// -----------------------------------------------------
// oaVCVersionIter
// -----------------------------------------------------
PyObject* oaVCVersionIter_iternext(PyObject *self)
{
  try {
    PyParamoaVCVersionIter ob;
    int convert_status=PyoaVCVersionIter_Convert(self,&ob);
    assert(convert_status!=0);
    oaVCVersion result=ob.DataCall()->getNext();
    if (result.getRaw()==NULL) {
       PyErr_SetObject(PyExc_StopIteration,Py_None);
       return NULL;
    }
    return PyoaVCVersion_FromoaVCVersion(new oaVCVersion(result));
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaVCVersionIter_getNext(PyObject *self, PyObject *args)
{
  try {
    PyParamoaVCVersionIter ob;
    int convert_status=PyoaVCVersionIter_Convert(self,&ob);
    assert(convert_status!=0);

    if (PyArg_ParseTuple(args,"")) {
        oaVCVersion result=ob.DataCall()->getNext();
        if (result.getRaw()!=NULL) {
            return PyoaVCVersion_FromoaVCVersion(new oaVCVersion(result));
        }
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// -----------------------------------------------------
PyObject* oaVCVersionIter_next(PyObject *self, PyObject *args)
{
  try {
    PyParamoaVCVersionIter ob;
    int convert_status=PyoaVCVersionIter_Convert(self,&ob);
    assert(convert_status!=0);

    oaString p1;
    if (PyArg_ParseTuple(args,"")) {
        oaVCVersion result=ob.DataCall()->getNext();
        if (result.getRaw()!=NULL) {
            return PyoaVCVersion_FromoaVCVersion(new oaVCVersion(result));
        }
        PyErr_SetObject(PyExc_StopIteration,Py_None);
        return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// -----------------------------------------------------
// oaRegionQuery_get_getTopCellView
// -----------------------------------------------------
#if 0
PyObject* oaRegionQuery_getTopCellView(PyObject *self, PyObject *args)
{
  try {
    oaRegionQuery* ob;
    int convert_status=PyoaRegionQuery_Convert(self,&ob);
        assert(convert_status!=0);

    if (PyArg_ParseTuple(args,"")) {
        oaCellView* result;
        result=(oaCellView*) ob->getTopCellView(); // Remove Const
        return PyoaCellView_FromoaCellView(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
#endif

// -----------------------------------------------------
// TBD
PyObject* oaBuildInfo_static_getPackages(PyObject *self, PyObject *args)
{
  Py_INCREF(Py_None);
  return Py_None;
}

// -----------------------------------------------------
// This needs a type cast
PyObject*
oaTech_getAppDefsByDataTypeIter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTech data;
    int convert_status=PyoaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTechObject* self=(PyoaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechDataType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTechDataType_Convert,&p1)) {
        oaIter_oaAppDef* result= new oaIter_oaAppDef(
          // Add required typecast
          (const oaCollection<oaAppDef, oaObject>&)
          (data.DataCall()->getAppDefsByDataType(p1.Data())));
        return PyoaIter_oaAppDef_FromoaIter_oaAppDef(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

// ------------------------------------------------------------------
// Code to Manually implement some wrappers
// ------------------------------------------------------------------

#include "pyoa_header.h"

// -----------------------------------------------------
// pyoaPoint
// -----------------------------------------------------
static PyObject* oaPoint_add(PyObject* ob1,PyObject* ob2)
{
  PyParamoaPoint p1;
  PyParamoaPoint p2;
  int s1=PyoaPoint_Convert(ob1,&p1);
  int s2=PyoaPoint_Convert(ob2,&p2);
  assert(s1!=0);
  assert(s2!=0);
  oaPoint* result=new oaPoint();
  (*result)=(p1.Data())+(p2.Data());
  return PyoaPoint_FromoaPoint(result);
}
// -----------------------------------------------------
static PyObject* oaPoint_sub(PyObject* ob1,PyObject* ob2)
{
  PyParamoaPoint p1;
  PyParamoaPoint p2;
  int s1=PyoaPoint_Convert(ob1,&p1);
  int s2=PyoaPoint_Convert(ob2,&p2);
  assert(s1!=0);
  assert(s2!=0);
  oaPoint* result=new oaPoint();
  (*result)=(p1.Data())-(p2.Data());
  return PyoaPoint_FromoaPoint(result);
}
// -----------------------------------------------------
static PyObject* oaPoint_abs(PyObject* ob)
{
  PyParamoaPoint p;
  int s=PyoaPoint_Convert(ob,&p);
  assert(s!=0);
  oaPoint* result=new oaPoint();
  result->x()=abs(p.Data().x());
  result->y()=abs(p.Data().y());
  return PyoaPoint_FromoaPoint(result);
}
// -----------------------------------------------------
static PyObject* oaPoint_neg(PyObject* ob)
{
  PyParamoaPoint p;
  int s=PyoaPoint_Convert(ob,&p);
  assert(s!=0);
  oaPoint* result=new oaPoint();
  result->x()=-(p.Data().x());
  result->y()=-(p.Data().y());
  return PyoaPoint_FromoaPoint(result);
}
// -----------------------------------------------------
static PyObject* oaPoint_pos(PyObject* ob)
{
  PyParamoaPoint p;
  int s=PyoaPoint_Convert(ob,&p);
  assert(s!=0);
  Py_INCREF(ob);
  return ob;
}
// -----------------------------------------------------
static int oaPoint_nonzero(PyObject* ob)
{
  PyParamoaPoint p;
  int s=PyoaPoint_Convert(ob,&p);
  assert(s!=0);
  return (p.Data().x()!=0 || p.Data().y()!=0)?1:0;
}
// -----------------------------------------------------
static PyObject* oaPoint_iadd(PyObject *ob1,PyObject* ob2)
{
  PyParamoaPoint p1;
  PyParamoaPoint p2;
  int s1=PyoaPoint_Convert(ob1,&p1);
  int s2=PyoaPoint_Convert(ob2,&p2);
  assert(s1!=0);
  assert(s2!=0);
  (p1.Data())+=(p2.Data());
  Py_INCREF(ob1);
  return ob1;
}
// -----------------------------------------------------
static PyObject* oaPoint_isub(PyObject *ob1,PyObject* ob2)
{
  PyParamoaPoint p1;
  PyParamoaPoint p2;
  int s1=PyoaPoint_Convert(ob1,&p1);
  int s2=PyoaPoint_Convert(ob2,&p2);
  assert(s1!=0);
  assert(s2!=0);
  (p1.Data())-=(p2.Data());
  Py_INCREF(ob1);
  return ob1;
}
// -----------------------------------------------------
PyNumberMethods oaPointAsNumber = {
  (binaryfunc)oaPoint_add, /*nb_add*/
  (binaryfunc)oaPoint_sub, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  (unaryfunc)oaPoint_neg, /*nb_negative*/
  (unaryfunc)oaPoint_pos, /*nb_positive*/
  (unaryfunc)oaPoint_abs, /*nb_absolute*/
  (inquiry)oaPoint_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  0, /*nb_coerce*/
  0, /*nb_int*/
  0, /*nb_long*/
  0, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  (binaryfunc)oaPoint_iadd, /*ng_inplace_add*/
  (binaryfunc)oaPoint_isub, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaBoolean
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaBoolean_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaBoolean_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaBooleanObject* self = (PyoaBooleanObject*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaBoolean)
    {
        PyParamoaBoolean p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaBoolean_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaBoolean, Choices are:\n"
        "    ()\n"
        "    (oaBoolean)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaBoolean_dealloc(PyObject* gself)
{
    PyoaBooleanObject* self = (PyoaBooleanObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaBoolean_repr(PyObject *ob)
{
    PyParamoaBoolean value;
    int convert_status=PyoaBoolean_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyInt_FromLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaBoolean_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaBoolean v1;
    PyParamoaBoolean v2;
    int convert_status1=PyoaBoolean_Convert(ob1,&v1);
    int convert_status2=PyoaBoolean_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v1.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaBoolean_Convert(PyObject* ob,PyParamoaBoolean* result)
{
  if (ob == NULL) return 1;
  if (PyoaBoolean_Check(ob)) {
    result->SetData(((PyoaBooleanObject*)ob)->value);
    return 1;
  }
  long val = PyInt_AsLong(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  oaBoolean value=oaBoolean(val);
  if (  ((long) value) != val) {
    PyErr_SetString(PyExc_TypeError,
                     "value is out of range for oaBoolean");
    return 0;
  }
  result->GiveData(new oaBoolean(value));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaBoolean_FromoaBoolean(const oaBoolean& value)
{
  PyObject* gself = PyoaBoolean_Type.tp_alloc(&PyoaBoolean_Type,0);
  if (gself == NULL) return gself;
  PyoaBooleanObject* self = (PyoaBooleanObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaBoolean_FromoaBoolean(oaBoolean* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaBoolean_Type.tp_alloc(&PyoaBoolean_Type,0);
  if (gself == NULL) return gself;
  PyoaBooleanObject* self = (PyoaBooleanObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaBoolean_assign_doc[] =
"Class: oaBoolean, Function: assign\n"
"  Paramegers: (oaBoolean)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaBoolean_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBoolean data;
    int convert_status=PyoaBoolean_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaBoolean_int_doc[] =
"Class: oaBoolean, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaBoolean_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBoolean data;
    int convert_status=PyoaBoolean_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaBoolean_methodlist[] = {
    {"assign",(PyCFunction)oaBoolean_assign,METH_VARARGS,oaBoolean_assign_doc},
    {"int",(PyCFunction)oaBoolean_int,METH_VARARGS,oaBoolean_int_doc},
   {NULL,NULL,0,NULL}
};

// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaBoolean_nonzero(PyObject* ob)
{
  PyParamoaBoolean p;
  int s=PyoaBoolean_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaBoolean_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaBoolean p1;
  int s1=PyoaBoolean_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaBoolean_int(PyObject* ob)
{
  PyParamoaBoolean p;
  int s=PyoaBoolean_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaBoolean_long(PyObject* ob)
{
  PyParamoaBoolean p;
  int s=PyoaBoolean_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaBoolean_float(PyObject* ob)
{
  PyParamoaBoolean p;
  int s=PyoaBoolean_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaBooleanAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaBoolean_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaBoolean_coerce, /*nb_coerce*/
  (unaryfunc)oaBoolean_int, /*nb_int*/
  (unaryfunc)oaBoolean_long, /*nb_long*/
  (unaryfunc)oaBoolean_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaBoolean_doc[] =
"Class: oaBoolean\n"
"  The oaBoolean utility class represents 1 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean()\n"
"    Signature: oaBoolean||\n"
"    This is the default constructor for the oaBoolean class. This constructor creates a zero valued oaBoolean.\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: (const oaBoolean&)\n"
"    Signature: oaBoolean||cref-oaBoolean,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaBoolean_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaBoolean",
    sizeof(PyoaBooleanObject),
    0,
    oaBoolean_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaBoolean_compare,    /* tp_compare */
    oaBoolean_repr,      /* tp_repr */
    &oaBooleanAsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaBoolean_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaBoolean_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaBoolean_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaBoolean_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaBoolean_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaBoolean_Type)<0) {
      printf("** PyType_Ready failed for: oaBoolean\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaBoolean",
           (PyObject*)(&PyoaBoolean_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaBoolean\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaByte
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaByte_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaByte_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaByteObject* self = (PyoaByteObject*)gself;
    self->data = '\0';
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaByte)
    {
        PyParamoaByte p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaByte_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaByte, Choices are:\n"
        "    ()\n"
        "    (oaByte)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaByte_dealloc(PyObject* gself)
{
    PyoaByteObject* self = (PyoaByteObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaByte_str(PyObject *ob)
{
    PyParamoaByte value;
    int convert_status=PyoaByte_Convert(ob,&value);
    assert(convert_status!=0);
    char buffer[4];
    buffer[0]=value.Data();
    return PyString_FromStringAndSize(buffer,1);
}
// ------------------------------------------------------------------
static PyObject*
oaByte_repr(PyObject *ob)
{
    PyObject* str=oaByte_str(ob);
    return PyObject_Repr(str);
}

// ------------------------------------------------------------------
static int
oaByte_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaByte v1;
    PyParamoaByte v2;
    int convert_status1=PyoaByte_Convert(ob1,&v1);
    int convert_status2=PyoaByte_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaByte_Convert(PyObject* ob,PyParamoaByte* result)
{
  if (ob == NULL) return 1;
  if (PyoaByte_Check(ob)) {
    result->SetData(((PyoaByteObject*)ob)->value);
    return 1;
  }
  if (PyString_Check(ob)) {
    Pyoa_ssize_t len;
    char* s;
    if (PyString_AsStringAndSize(ob,&s,&len)) return 0;
    if (len!=1) {
      PyErr_SetString(PyExc_TypeError,
                      "string of length 1 required for oaByte");
      return 0;
    }
    result->GiveData(new oaByte(s[0]));
    return 1;
  }
  if (PyInt_Check(ob)) {
    long val = PyInt_AsLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaByte value=oaByte(val);
    if ( ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                     "value is out of range for oaByte");
      return 0;
    }
    result->GiveData(new oaByte(value));
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaByte Failed");
  return 0;
}

// ------------------------------------------------------------------
PyObject* PyoaByte_FromoaByte(const oaByte& value)
{
  PyObject* gself = PyoaByte_Type.tp_alloc(&PyoaByte_Type,0);
  if (gself == NULL) return gself;
  PyoaByteObject* self = (PyoaByteObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaByte_FromoaByte(oaByte* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaByte_Type.tp_alloc(&PyoaByte_Type,0);
  if (gself == NULL) return gself;
  PyoaByteObject* self = (PyoaByteObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = 0;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaByte_assign_doc[] =
"Class: oaByte, Function: assign\n"
"  Paramegers: (oaByte)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaByte_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaByte data;
    int convert_status=PyoaByte_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaByte p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaByte_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaByte_str_doc[] =
"Class: oaByte, Function: str\n"
"  Paramegers: ()\n"
"    This function returns the current value as a str.\n"
;

static PyObject*
oaByte_str(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaByte data;
    int convert_status=PyoaByte_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      char buffer[4];
      buffer[0]=data.Data();
      buffer[1]='\0';
      return PyString_FromStringAndSize(buffer,1);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaByte_methodlist[] = {
    {"assign",(PyCFunction)oaByte_assign,METH_VARARGS,oaByte_assign_doc},
    {"str",(PyCFunction)oaByte_str,METH_VARARGS,oaByte_str_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaByte_doc[] =
"Class: oaByte\n"
"  The oaByte utility class provides a single byte.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaByte()\n"
"    Signature: oaByte||\n"
"    This is the default constructor for the oaByte class. This constructor creates an empty oaByte.\n"
"  Paramegers: (oaByte)\n"
"    Calls: (const oaByte&)\n"
"    Signature: oaByte||cref-oaByte,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaByte_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaByte",
    sizeof(PyoaByteObject),
    0,
    oaByte_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaByte_compare,    /* tp_compare */
    oaByte_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaByte_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaByte_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaByte_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaByte_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaByte_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaByte_Type)<0) {
      printf("** PyType_Ready failed for: oaByte\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaByte",
           (PyObject*)(&PyoaByte_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaByte\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaByte_Array
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaByte_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaByte_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaByte_ArrayObject* self = (PyoaByte_ArrayObject*)gself;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (int)
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaByte_Array)
    {
        PyParamoaByte_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaByte_Array_Convert,&p1)) {
            self->data=p1;
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaByte_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaByte_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaByte_Array_dealloc(PyObject* gself)
{
    PyoaByte_ArrayObject* self = (PyoaByte_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaByte_Array_str(PyObject *ob)
{
    PyParamoaByte_Array value;
    int convert_status=PyoaByte_Array_Convert(ob,&value);
    assert(convert_status!=0);
    return PyString_FromString((const char*)(value.Data()));
}
// ------------------------------------------------------------------
static PyObject*
oaByte_Array_repr(PyObject *ob)
{
    PyObject* str=oaByte_Array_str(ob);
    PyObject* result=PyObject_Repr(str);
    Py_DECREF(str);
    return result;
}

// ------------------------------------------------------------------
static int
oaByte_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaByte_Array v1;
    PyParamoaByte_Array v2;
    int convert_status1=PyoaByte_Array_Convert(ob1,&v1);
    int convert_status2=PyoaByte_Array_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    return strcmp((const char*)(v1.Data()),
      (const char*)(v2.Data()));
}

// ------------------------------------------------------------------
int
PyoaByte_Array_Convert(PyObject* ob,PyParamoaByte_Array* result)
{
  if (ob == NULL) return 1;
  if (PyoaByte_Array_Check(ob)) {
    PyoaByte_ArrayObject* self=(PyoaByte_ArrayObject*)ob;
    result->SetUse(self->data);
    return 1;
  }
  if (PyString_Check(ob)) {
    Pyoa_ssize_t len;
    char* s;
    if (PyString_AsStringAndSize(ob,&s,&len)) return 0;
    result->SetUse((oaByte*)s,len);
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaByte_Array Failed");
  return 0;
}

// ------------------------------------------------------------------
PyObject* PyoaByte_Array_FromoaByte_Array(const oaByte_Array& value)
{
  PyObject* gself = PyoaByte_Array_Type.tp_alloc(&PyoaByte_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaByte_ArrayObject* self = (PyoaByte_ArrayObject*)gself;
  self->data = value;
  self->value= &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}
// ------------------------------------------------------------------
PyObject* PyoaByte_Array_FromoaByte_Array(const oaByte* value,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaByte_Array_Type.tp_alloc(&PyoaByte_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaByte_ArrayObject* self = (PyoaByte_ArrayObject*)gself;
  self->data.SetLen(len);
  self->data.Copy(value);
  self->value= &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaByte_Array_assign_doc[] =
"Class: oaByte_Array, Function: assign\n"
"  Paramegers: (oaByte_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaByte_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaByte_ArrayObject* self=(PyoaByte_ArrayObject*)ob;
  try {
    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaByte_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaByte_Array_list_doc[] =
"Class: oaByte_Array, Function: str\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaByte_Array_list(PyObject* ob, PyObject *args)
{
  PyoaByte_ArrayObject* self=(PyoaByte_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      int i;
      PyObject* lst=PyList_New(self->data.Len());
      for(i=0;i<self->data.Len();i++) {
        PyObject* ob=PyoaByte_FromoaByte(self->data.Data()[i]);
        PyList_SetItem(lst,i,ob);
      }
      return lst;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaByte_Array_methodlist[] = {
    {"assign",(PyCFunction)oaByte_Array_assign,METH_VARARGS,oaByte_Array_assign_doc},
    {"list",(PyCFunction)oaByte_Array_list,METH_VARARGS,oaByte_Array_list_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
// Sequenct Methods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static PyObject*
oaByte_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaByte_ArrayObject* self=(PyoaByte_ArrayObject*)ob;
  try {
    PyParamoaByte_Array data;
    int convert_status=PyoaByte_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaByte_FromoaByte(data.Data()[index]);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaByte_Array_index_get_length(PyObject* ob)
{
    PyParamoaByte_Array data;
    int convert_status=PyoaByte_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaByte_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaByte_Array data;
    PyParamoaByte dataitem;
    int convert_status=PyoaByte_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaByte_Convert(value,&dataitem)==0) return -1;
    data.Data()[index]=dataitem.Data();
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaByte_Array_doc[] =
"Class: oaByte_Array\n"
"  The oaByte_Array utility class provides an array of bytes.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaByte_Array()\n"
"    Signature: oaByte_Array||\n"
"    This is the default constructor for the oaByte_Array class. This constructor creates an empty oaByte_Array.\n"
"  Paramegers: (oaByte_Array)\n"
"    Calls: (const oaByte_Array&)\n"
"    Signature: oaByte_Array||cref-oaByte_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaByte_Array_as_sequence = {
    (Pyoa_inquiry)oaByte_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaByte_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaByte_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaByte_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaByte_Array",
    sizeof(PyoaByte_ArrayObject),
    0,
    oaByte_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaByte_Array_compare,    /* tp_compare */
    oaByte_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaByte_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaByte_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaByte_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaByte_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaByte_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaByte_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaByte_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaByte_Array\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaByte_Array",
           (PyObject*)(&PyoaByte_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaByte_Array\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaChar
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaChar_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaChar_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaCharObject* self = (PyoaCharObject*)gself;
    self->data = '\0';
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaChar)
    {
        PyParamoaChar p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaChar_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaChar, Choices are:\n"
        "    ()\n"
        "    (oaChar)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaChar_dealloc(PyObject* gself)
{
    PyoaCharObject* self = (PyoaCharObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaChar_str(PyObject *ob)
{
    PyParamoaChar value;
    int convert_status=PyoaChar_Convert(ob,&value);
    assert(convert_status!=0);
    char buffer[4];
    buffer[0]=value.Data();
    return PyString_FromStringAndSize(buffer,1);
}
// ------------------------------------------------------------------
static PyObject*
oaChar_repr(PyObject *ob)
{
    PyObject* str=oaChar_str(ob);
    PyObject* result=PyObject_Repr(str);
    Py_DECREF(str);
    return result;
}

// ------------------------------------------------------------------
static int
oaChar_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaChar v1;
    PyParamoaChar v2;
    int convert_status1=PyoaChar_Convert(ob1,&v1);
    int convert_status2=PyoaChar_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaChar_Convert(PyObject* ob,PyParamoaChar* result)
{
  if (ob == NULL) return 1;
  if (PyoaChar_Check(ob)) {
    result->SetData(((PyoaCharObject*)ob)->value);
    return 1;
  }
  if (PyString_Check(ob)) {
    Pyoa_ssize_t len;
    char* s;
    if (PyString_AsStringAndSize(ob,&s,&len)) return 0;
    if (len!=1) {
      PyErr_SetString(PyExc_TypeError,
                      "string of length 1 required for oaChar");
      return 0;
    }
    result->GiveData(new oaChar(s[0]));
    return 1;
  }
  if (PyInt_Check(ob)) {
    long val = PyInt_AsLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaChar value=oaChar(val);
    if ( ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                     "value is out of range for oaChar");
      return 0;
    }
    result->GiveData(new oaChar(value));
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaChar Failed");
  return 0;
}

// ------------------------------------------------------------------
PyObject* PyoaChar_FromoaChar(const oaChar& value)
{
  PyObject* gself = PyoaChar_Type.tp_alloc(&PyoaChar_Type,0);
  if (gself == NULL) return gself;
  PyoaCharObject* self = (PyoaCharObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaChar_FromoaChar(oaChar* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaByte_Type.tp_alloc(&PyoaByte_Type,0);
  if (gself == NULL) return gself;
  PyoaCharObject* self = (PyoaCharObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = 0;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaChar_assign_doc[] =
"Class: oaChar, Function: assign\n"
"  Paramegers: (oaChar)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaChar_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaChar data;
    int convert_status=PyoaChar_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaChar p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaChar_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaChar_str_doc[] =
"Class: oaChar, Function: str\n"
"  Paramegers: ()\n"
"    This function returns the current value as a str.\n"
;

static PyObject*
oaChar_str(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaChar data;
    int convert_status=PyoaChar_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      char buffer[4];
      buffer[0]=data.Data();
      buffer[1]='\0';
      return PyString_FromStringAndSize(buffer,1);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaChar_methodlist[] = {
    {"assign",(PyCFunction)oaChar_assign,METH_VARARGS,oaChar_assign_doc},
    {"str",(PyCFunction)oaChar_str,METH_VARARGS,oaChar_str_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaChar_doc[] =
"Class: oaChar\n"
"  The oaChar utility class a single char.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaChar()\n"
"    Signature: oaChar||\n"
"    This is the default constructor for the oaChar class. This constructor creates an empty oaChar.\n"
"  Paramegers: (oaChar)\n"
"    Calls: (const oaChar&)\n"
"    Signature: oaChar||cref-oaChar,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaChar_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaChar",
    sizeof(PyoaCharObject),
    0,
    oaChar_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaChar_compare,    /* tp_compare */
    oaChar_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaChar_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaChar_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaChar_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaChar_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaChar_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaChar_Type)<0) {
      printf("** PyType_Ready failed for: oaChar\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaChar",
           (PyObject*)(&PyoaChar_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaChar\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaChar_Array
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaChar_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaChar_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaChar_ArrayObject* self = (PyoaChar_ArrayObject*)gself;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (int)
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaChar_Array)
    {
        PyParamoaChar_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaChar_Array_Convert,&p1)) {
            self->data=p1;
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaChar_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaChar_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaChar_Array_dealloc(PyObject* gself)
{
    PyoaChar_ArrayObject* self = (PyoaChar_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaChar_Array_str(PyObject *ob)
{
    PyParamoaChar_Array value;
    int convert_status=PyoaChar_Array_Convert(ob,&value);
    assert(convert_status!=0);
    return PyString_FromString(value.Data());
}
// ------------------------------------------------------------------
static PyObject*
oaChar_Array_repr(PyObject *ob)
{
    PyObject* str=oaChar_Array_str(ob);
    PyObject* result=PyObject_Repr(str);
    Py_DECREF(str);
    return result;
}

// ------------------------------------------------------------------
static int
oaChar_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaChar_Array v1;
    PyParamoaChar_Array v2;
    int convert_status1=PyoaChar_Array_Convert(ob1,&v1);
    int convert_status2=PyoaChar_Array_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    return strcmp(v1.Data(),v2.Data());
}

// ------------------------------------------------------------------
int
PyoaChar_Array_Convert(PyObject* ob,PyParamoaChar_Array* result)
{
  if (ob == NULL) return 1;
  if (PyoaChar_Array_Check(ob)) {
    PyoaChar_ArrayObject* self=(PyoaChar_ArrayObject*)ob;
    result->SetUse(self->data);
    return 1;
  }
  if (PyString_Check(ob)) {
    Pyoa_ssize_t len;
    char* s;
    if (PyString_AsStringAndSize(ob,&s,&len)) return 0;
    result->SetUse(s,len);
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaChar_Array Failed");
  return 0;
}

// ------------------------------------------------------------------
PyObject* PyoaChar_Array_FromoaChar_Array(const oaChar_Array& value)
{
  PyObject* gself = PyoaChar_Array_Type.tp_alloc(&PyoaChar_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaChar_ArrayObject* self = (PyoaChar_ArrayObject*)gself;
  self->data = value;
  self->value= &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaChar_Array_FromoaChar_Array(const oaChar* value,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaChar_Array_Type.tp_alloc(&PyoaChar_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaChar_ArrayObject* self = (PyoaChar_ArrayObject*)gself;
  self->data.SetLen(strlen(value));
  self->data.Copy(value);
  self->value= &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaChar_Array_assign_doc[] =
"Class: oaChar_Array, Function: assign\n"
"  Paramegers: (oaChar_Array)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaChar_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaChar_ArrayObject* self=(PyoaChar_ArrayObject*)ob;
  try {
    PyParamoaChar_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaChar_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaChar_Array_list_doc[] =
"Class: oaChar_Array, Function: str\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaChar_Array_list(PyObject* ob, PyObject *args)
{
  PyoaChar_ArrayObject* self=(PyoaChar_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      int i;
      PyObject* lst=PyList_New(self->data.Len());
      for(i=0;i<self->data.Len();i++) {
        PyObject* ob=PyoaChar_FromoaChar(self->data.Data()[i]);
        PyList_SetItem(lst,i,ob);
      }
      return lst;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaChar_Array_methodlist[] = {
    {"assign",(PyCFunction)oaChar_Array_assign,METH_VARARGS,oaChar_Array_assign_doc},
    {"list",(PyCFunction)oaChar_Array_list,METH_VARARGS,oaChar_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
// Sequenct Methods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static PyObject*
oaChar_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaChar_ArrayObject* self=(PyoaChar_ArrayObject*)ob;
  try {
    PyParamoaChar_Array data;
    int convert_status=PyoaChar_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaChar_FromoaChar(data.Data()[index]);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaChar_Array_index_get_length(PyObject* ob)
{
    PyParamoaChar_Array data;
    int convert_status=PyoaChar_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaChar_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaChar_Array data;
    PyParamoaChar dataitem;
    int convert_status=PyoaChar_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaChar_Convert(value,&dataitem)==0) return -1;
    data.Data()[index]=dataitem.Data();
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaChar_Array_doc[] =
"Class: oaChar_Array\n"
"  The oaChar_Array utility class provides an array of charaters.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaChar_Array()\n"
"    Signature: oaChar_Array||\n"
"    This is the default constructor for the oaChar_Array class. This constructor creates an empty oaChar_Array.\n"
"  Paramegers: (oaChar_Array)\n"
"    Calls: (const oaChar_Array&)\n"
"    Signature: oaChar_Array||cref-oaChar_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaChar_Array_as_sequence = {
    (Pyoa_inquiry)oaChar_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaChar_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaChar_Array_index_set,      /* sq_ass_item */
};
// ------------------------------------------------------------------
PyTypeObject PyoaChar_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaChar_Array",
    sizeof(PyoaChar_ArrayObject),
    0,
    oaChar_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaChar_Array_compare,    /* tp_compare */
    oaChar_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaChar_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaChar_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaChar_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaChar_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaChar_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaChar_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaChar_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaChar_Array\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaChar_Array",
           (PyObject*)(&PyoaChar_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaChar_Array\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaComplex_oaDouble
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaDouble_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaComplex_oaDouble_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaComplex_oaDoubleObject* self = (PyoaComplex_oaDoubleObject*)gself;
    self->data = oaComplex_oaDouble(0,0);
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaComplex_oaDouble)
    {
        PyParamoaComplex_oaDouble p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaComplex_oaDouble_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaComplex_oaDouble, Choices are:\n"
        "    ()\n"
        "    (oaComplex_oaDouble)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaComplex_oaDouble_dealloc(PyObject* gself)
{
    PyoaComplex_oaDoubleObject* self = (PyoaComplex_oaDoubleObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaDouble_repr(PyObject *ob)
{
    PyParamoaComplex_oaDouble value;
    int convert_status=PyoaComplex_oaDouble_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyComplex_FromDoubles(value.Data().real(),value.Data().imag());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaComplex_oaDouble_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaComplex_oaDouble v1;
    PyParamoaComplex_oaDouble v2;
    int convert_status1=PyoaComplex_oaDouble_Convert(ob1,&v1);
    int convert_status2=PyoaComplex_oaDouble_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data().real()==v2.Data().real() &&
        v1.Data().imag()==v2.Data().imag()) return 0;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaComplex_oaDouble_Convert(PyObject* ob,PyParamoaComplex_oaDouble* result)
{
  if (ob == NULL) return 1;
  if (PyoaComplex_oaDouble_Check(ob)) {
    result->SetData(((PyoaComplex_oaDoubleObject*)ob)->value);
    return 1;
  }
  Py_complex val = PyComplex_AsCComplex(ob);
  if (val.real==-1 && PyErr_Occurred()) return 0;
  result->GiveData(new oaComplex_oaDouble(val.real,val.imag));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaComplex_oaDouble_FromoaComplex_oaDouble(const oaComplex_oaDouble& value)
{
  PyObject* gself = PyoaComplex_oaDouble_Type.tp_alloc(&PyoaComplex_oaDouble_Type,0);
  if (gself == NULL) return gself;
  PyoaComplex_oaDoubleObject* self = (PyoaComplex_oaDoubleObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaComplex_oaDouble_FromoaComplex_oaDouble(oaComplex_oaDouble* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaComplex_oaDouble_Type.tp_alloc(&PyoaComplex_oaDouble_Type,0);
  if (gself == NULL) return gself;
  PyoaComplex_oaDoubleObject* self = (PyoaComplex_oaDoubleObject*)gself;
  self->data = oaComplex_oaDouble(0,0);;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaComplex_oaDouble_assign_doc[] =
"Class: oaComplex_oaDouble, Function: assign\n"
"  Paramegers: (oaComplex_oaDouble)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaComplex_oaDouble_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaComplex_oaDouble data;
    int convert_status=PyoaComplex_oaDouble_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaComplex_oaDouble p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaComplex_oaDouble_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaComplex_oaDouble_complex_doc[] =
"Class: oaComplex_oaDouble, Function: complex\n"
"  Paramegers: ()\n"
"    This function returns the current value as a complex.\n"
;

static PyObject*
oaComplex_oaDouble_complex(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaComplex_oaDouble data;
    int convert_status=PyoaComplex_oaDouble_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyComplex_FromDoubles(data.Data().real(),data.Data().imag());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaComplex_oaDouble_methodlist[] = {
    {"assign",(PyCFunction)oaComplex_oaDouble_assign,METH_VARARGS,oaComplex_oaDouble_assign_doc},
    {"complex",(PyCFunction)oaComplex_oaDouble_complex,METH_VARARGS,oaComplex_oaDouble_complex_doc},
   {NULL,NULL,0,NULL}
};

// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaComplex_oaDouble_nonzero(PyObject* ob)
{
  PyParamoaComplex_oaDouble p;
  int s=PyoaComplex_oaDouble_Convert(ob,&p);
  assert(s!=0);
  return p.Data().real()!=0.0 && p.Data().imag()!=0.0;
}
// -----------------------------------------------------
static int oaComplex_oaDouble_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaComplex_oaDouble p1;
  int s1=PyoaComplex_oaDouble_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyComplex_Check(*ob2)) {
    *ob1 = PyComplex_FromDoubles(p1.Data().real(),p1.Data().imag());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
PyNumberMethods oaComplex_oaDoubleAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaComplex_oaDouble_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaComplex_oaDouble_coerce, /*nb_coerce*/
  0, /*nb_int*/
  0, /*nb_long*/
  0, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaComplex_oaDouble_doc[] =
"Class: oaComplex_oaDouble\n"
"  The oaComplex_oaDouble utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaComplex_oaDouble()\n"
"    Signature: oaComplex_oaDouble||\n"
"    This is the default constructor for the oaComplex_oaDouble class. This constructor creates a zero valued oaComplex_oaDouble.\n"
"  Paramegers: (oaComplex_oaDouble)\n"
"    Calls: (const oaComplex_oaDouble&)\n"
"    Signature: oaComplex_oaDouble||cref-oaComplex_oaDouble,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaComplex_oaDouble_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaComplex_oaDouble",
    sizeof(PyoaComplex_oaDoubleObject),
    0,
    oaComplex_oaDouble_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaComplex_oaDouble_compare,    /* tp_compare */
    oaComplex_oaDouble_repr,      /* tp_repr */
    &oaComplex_oaDoubleAsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaComplex_oaDouble_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaComplex_oaDouble_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaComplex_oaDouble_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaComplex_oaDouble_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaComplex_oaDouble_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaComplex_oaDouble_Type)<0) {
      printf("** PyType_Ready failed for: oaComplex_oaDouble\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaComplex_oaDouble",
           (PyObject*)(&PyoaComplex_oaDouble_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaComplex_oaDouble\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaComplex_oaFloat
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaFloat_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaComplex_oaFloat_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaComplex_oaFloatObject* self = (PyoaComplex_oaFloatObject*)gself;
    self->data = oaComplex_oaFloat(0,0);
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaComplex_oaFloat)
    {
        PyParamoaComplex_oaFloat p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaComplex_oaFloat_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaComplex_oaFloat, Choices are:\n"
        "    ()\n"
        "    (oaComplex_oaFloat)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaComplex_oaFloat_dealloc(PyObject* gself)
{
    PyoaComplex_oaFloatObject* self = (PyoaComplex_oaFloatObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaFloat_repr(PyObject *ob)
{
    PyParamoaComplex_oaFloat value;
    int convert_status=PyoaComplex_oaFloat_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyComplex_FromDoubles(value.Data().real(),value.Data().imag());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaComplex_oaFloat_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaComplex_oaFloat v1;
    PyParamoaComplex_oaFloat v2;
    int convert_status1=PyoaComplex_oaFloat_Convert(ob1,&v1);
    int convert_status2=PyoaComplex_oaFloat_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data().real()==v2.Data().real() &&
        v1.Data().imag()==v2.Data().imag()) return 0;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaComplex_oaFloat_Convert(PyObject* ob,PyParamoaComplex_oaFloat* result)
{
  if (ob == NULL) return 1;
  if (PyoaComplex_oaFloat_Check(ob)) {
    result->SetData(((PyoaComplex_oaFloatObject*)ob)->value);
    return 1;
  }
  Py_complex val = PyComplex_AsCComplex(ob);
  if (val.real==-1 && PyErr_Occurred()) return 0;
  result->GiveData(new oaComplex_oaFloat(val.real,val.imag));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaComplex_oaFloat_FromoaComplex_oaFloat(const oaComplex_oaFloat& value)
{
  PyObject* gself = PyoaComplex_oaFloat_Type.tp_alloc(&PyoaComplex_oaFloat_Type,0);
  if (gself == NULL) return gself;
  PyoaComplex_oaFloatObject* self = (PyoaComplex_oaFloatObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaComplex_oaFloat_FromoaComplex_oaFloat(oaComplex_oaFloat* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaComplex_oaFloat_Type.tp_alloc(&PyoaComplex_oaFloat_Type,0);
  if (gself == NULL) return gself;
  PyoaComplex_oaFloatObject* self = (PyoaComplex_oaFloatObject*)gself;
  self->data = oaComplex_oaFloat(0,0);;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaComplex_oaFloat_assign_doc[] =
"Class: oaComplex_oaFloat, Function: assign\n"
"  Paramegers: (oaComplex_oaFloat)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaComplex_oaFloat_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaComplex_oaFloat data;
    int convert_status=PyoaComplex_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaComplex_oaFloat p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaComplex_oaFloat_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaComplex_oaFloat_complex_doc[] =
"Class: oaComplex_oaFloat, Function: complex\n"
"  Paramegers: ()\n"
"    This function returns the current value as a complex.\n"
;

static PyObject*
oaComplex_oaFloat_complex(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaComplex_oaFloat data;
    int convert_status=PyoaComplex_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyComplex_FromDoubles(data.Data().real(),data.Data().imag());

    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaComplex_oaFloat_methodlist[] = {
    {"assign",(PyCFunction)oaComplex_oaFloat_assign,METH_VARARGS,oaComplex_oaFloat_assign_doc},
    {"complex",(PyCFunction)oaComplex_oaFloat_complex,METH_VARARGS,oaComplex_oaFloat_complex_doc},
   {NULL,NULL,0,NULL}
};

// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaComplex_oaFloat_nonzero(PyObject* ob)
{
  PyParamoaComplex_oaFloat p;
  int s=PyoaComplex_oaFloat_Convert(ob,&p);
  assert(s!=0);
  return p.Data().real()!=0.0 && p.Data().imag()!=0.0;
}
// -----------------------------------------------------
static int oaComplex_oaFloat_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaComplex_oaFloat p1;
  int s1=PyoaComplex_oaFloat_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyComplex_Check(*ob2)) {
    *ob1 = PyComplex_FromDoubles(p1.Data().real(),p1.Data().imag());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
PyNumberMethods oaComplex_oaFloatAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaComplex_oaFloat_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaComplex_oaFloat_coerce, /*nb_coerce*/
  0, /*nb_int*/
  0, /*nb_long*/
  0, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaComplex_oaFloat_doc[] =
"Class: oaComplex_oaFloat\n"
"  The oaComplex_oaFloat utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaComplex_oaFloat()\n"
"    Signature: oaComplex_oaFloat||\n"
"    This is the default constructor for the oaComplex_oaFloat class. This constructor creates a zero valued oaComplex_oaFloat.\n"
"  Paramegers: (oaComplex_oaFloat)\n"
"    Calls: (const oaComplex_oaFloat&)\n"
"    Signature: oaComplex_oaFloat||cref-oaComplex_oaFloat,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaComplex_oaFloat_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaComplex_oaFloat",
    sizeof(PyoaComplex_oaFloatObject),
    0,
    oaComplex_oaFloat_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaComplex_oaFloat_compare,    /* tp_compare */
    oaComplex_oaFloat_repr,      /* tp_repr */
    &oaComplex_oaFloatAsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaComplex_oaFloat_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaComplex_oaFloat_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaComplex_oaFloat_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaComplex_oaFloat_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaComplex_oaFloat_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaComplex_oaFloat_Type)<0) {
      printf("** PyType_Ready failed for: oaComplex_oaFloat\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaComplex_oaFloat",
           (PyObject*)(&PyoaComplex_oaFloat_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaComplex_oaFloat\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDouble
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDouble_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDouble_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaDoubleObject* self = (PyoaDoubleObject*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaDouble)
    {
        PyParamoaDouble p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDouble_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDouble, Choices are:\n"
        "    ()\n"
        "    (oaDouble)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDouble_dealloc(PyObject* gself)
{
    PyoaDoubleObject* self = (PyoaDoubleObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaDouble_repr(PyObject *ob)
{
    PyParamoaDouble value;
    int convert_status=PyoaDouble_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyFloat_FromDouble(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaDouble_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDouble v1;
    PyParamoaDouble v2;
    int convert_status1=PyoaDouble_Convert(ob1,&v1);
    int convert_status2=PyoaDouble_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaDouble_Convert(PyObject* ob,PyParamoaDouble* result)
{
  if (ob == NULL) return 1;
  if (PyoaDouble_Check(ob)) {
    result->SetData(((PyoaDoubleObject*)ob)->value);
    return 1;
  }
  double val = PyFloat_AsDouble(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  result->GiveData(new oaDouble(val));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaDouble_FromoaDouble(const oaDouble& value)
{
  PyObject* gself = PyoaDouble_Type.tp_alloc(&PyoaDouble_Type,0);
  if (gself == NULL) return gself;
  PyoaDoubleObject* self = (PyoaDoubleObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaDouble_FromoaDouble(oaDouble* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaDouble_Type.tp_alloc(&PyoaDouble_Type,0);
  if (gself == NULL) return gself;
  PyoaDoubleObject* self = (PyoaDoubleObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaDouble_assign_doc[] =
"Class: oaDouble, Function: assign\n"
"  Paramegers: (oaDouble)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaDouble_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDouble data;
    int convert_status=PyoaDouble_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaDouble p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDouble_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaDouble_float_doc[] =
"Class: oaDouble, Function: float\n"
"  Paramegers: ()\n"
"    This function returns the current value as a float.\n"
;

static PyObject*
oaDouble_float(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDouble data;
    int convert_status=PyoaDouble_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyFloat_FromDouble(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaDouble_methodlist[] = {
    {"assign",(PyCFunction)oaDouble_assign,METH_VARARGS,oaDouble_assign_doc},
    {"float",(PyCFunction)oaDouble_float,METH_VARARGS,oaDouble_float_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaDouble_nonzero(PyObject* ob)
{
  PyParamoaDouble p;
  int s=PyoaDouble_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0.0;
}
// -----------------------------------------------------
static int oaDouble_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaDouble p1;
  int s1=PyoaDouble_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaDouble_float(PyObject* ob)
{
  PyParamoaDouble p;
  int s=PyoaDouble_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaDoubleAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaDouble_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaDouble_coerce, /*nb_coerce*/
  0, /*nb_int*/
  0, /*nb_long*/
  (unaryfunc)oaDouble_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDouble_doc[] =
"Class: oaDouble\n"
"  The oaDouble utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaDouble()\n"
"    Signature: oaDouble||\n"
"    This is the default constructor for the oaDouble class. This constructor creates a zero valued oaDouble.\n"
"  Paramegers: (oaDouble)\n"
"    Calls: (const oaDouble&)\n"
"    Signature: oaDouble||cref-oaDouble,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDouble_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDouble",
    sizeof(PyoaDoubleObject),
    0,
    oaDouble_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaDouble_compare,    /* tp_compare */
    oaDouble_repr,      /* tp_repr */
    &oaDoubleAsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaDouble_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDouble_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaDouble_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaDouble_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDouble_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDouble_Type)<0) {
      printf("** PyType_Ready failed for: oaDouble\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDouble",
           (PyObject*)(&PyoaDouble_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDouble\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloat
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloat_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloat_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaFloatObject* self = (PyoaFloatObject*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaFloat)
    {
        PyParamoaFloat p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloat_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloat, Choices are:\n"
        "    ()\n"
        "    (oaFloat)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloat_dealloc(PyObject* gself)
{
    PyoaFloatObject* self = (PyoaFloatObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaFloat_repr(PyObject *ob)
{
    PyParamoaFloat value;
    int convert_status=PyoaFloat_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyFloat_FromDouble(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaFloat_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloat v1;
    PyParamoaFloat v2;
    int convert_status1=PyoaFloat_Convert(ob1,&v1);
    int convert_status2=PyoaFloat_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaFloat_Convert(PyObject* ob,PyParamoaFloat* result)
{
  if (ob == NULL) return 1;
  if (PyoaFloat_Check(ob)) {
    result->SetData(((PyoaFloatObject*)ob)->value);
    return 1;
  }
  double val = PyFloat_AsDouble(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  result->GiveData(new oaFloat(val));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaFloat_FromoaFloat(const oaFloat& value)
{
  PyObject* gself = PyoaFloat_Type.tp_alloc(&PyoaFloat_Type,0);
  if (gself == NULL) return gself;
  PyoaFloatObject* self = (PyoaFloatObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaFloat_FromoaFloat(oaFloat* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaFloat_Type.tp_alloc(&PyoaFloat_Type,0);
  if (gself == NULL) return gself;
  PyoaFloatObject* self = (PyoaFloatObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaFloat_assign_doc[] =
"Class: oaFloat, Function: assign\n"
"  Paramegers: (oaFloat)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaFloat_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloat data;
    int convert_status=PyoaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaFloat p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloat_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaFloat_float_doc[] =
"Class: oaFloat, Function: float\n"
"  Paramegers: ()\n"
"    This function returns the current value as a float.\n"
;

static PyObject*
oaFloat_float(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloat data;
    int convert_status=PyoaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyFloat_FromDouble((double)(data.Data()));
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaFloat_methodlist[] = {
    {"assign",(PyCFunction)oaFloat_assign,METH_VARARGS,oaFloat_assign_doc},
    {"float",(PyCFunction)oaFloat_float,METH_VARARGS,oaFloat_float_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaFloat_nonzero(PyObject* ob)
{
  PyParamoaFloat p;
  int s=PyoaFloat_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0.0;
}
// -----------------------------------------------------
static int oaFloat_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaFloat p1;
  int s1=PyoaFloat_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaFloat_float(PyObject* ob)
{
  PyParamoaFloat p;
  int s=PyoaFloat_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaFloatAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaFloat_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaFloat_coerce, /*nb_coerce*/
  0, /*nb_int*/
  0, /*nb_long*/
  (unaryfunc)oaFloat_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloat_doc[] =
"Class: oaFloat\n"
"  The oaFloat utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaFloat()\n"
"    Signature: oaFloat||\n"
"    This is the default constructor for the oaFloat class. This constructor creates a zero valued oaFloat.\n"
"  Paramegers: (oaFloat)\n"
"    Calls: (const oaFloat&)\n"
"    Signature: oaFloat||cref-oaFloat,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloat_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloat",
    sizeof(PyoaFloatObject),
    0,
    oaFloat_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaFloat_compare,    /* tp_compare */
    oaFloat_repr,      /* tp_repr */
    &oaFloatAsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaFloat_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloat_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaFloat_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaFloat_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloat_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloat_Type)<0) {
      printf("** PyType_Ready failed for: oaFloat\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloat",
           (PyObject*)(&PyoaFloat_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloat\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInt1
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInt1_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInt1_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaInt1Object* self = (PyoaInt1Object*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaInt1)
    {
        PyParamoaInt1 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInt1_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInt1, Choices are:\n"
        "    ()\n"
        "    (oaInt1)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInt1_dealloc(PyObject* gself)
{
    PyoaInt1Object* self = (PyoaInt1Object*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaInt1_repr(PyObject *ob)
{
    PyParamoaInt1 value;
    int convert_status=PyoaInt1_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyInt_FromLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaInt1_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInt1 v1;
    PyParamoaInt1 v2;
    int convert_status1=PyoaInt1_Convert(ob1,&v1);
    int convert_status2=PyoaInt1_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaInt1_Convert(PyObject* ob,PyParamoaInt1* result)
{
  if (ob == NULL) return 1;
  if (PyoaInt1_Check(ob)) {
    result->SetData(((PyoaInt1Object*)ob)->value);
    return 1;
  }
  long val = PyInt_AsLong(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  oaInt1 value=oaInt1(val);
  if (  ((long) value) != val) {
    PyErr_SetString(PyExc_TypeError,
                     "value is out of range for oaInt1");
    return 0;
  }
  result->GiveData(new oaInt1(value));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaInt1_FromoaInt1(const oaInt1& value)
{
  PyObject* gself = PyoaInt1_Type.tp_alloc(&PyoaInt1_Type,0);
  if (gself == NULL) return gself;
  PyoaInt1Object* self = (PyoaInt1Object*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt1_FromoaInt1(oaInt1* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaInt1_Type.tp_alloc(&PyoaInt1_Type,0);
  if (gself == NULL) return gself;
  PyoaInt1Object* self = (PyoaInt1Object*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaInt1_assign_doc[] =
"Class: oaInt1, Function: assign\n"
"  Paramegers: (oaInt1)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaInt1_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt1 data;
    int convert_status=PyoaInt1_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaInt1 p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInt1_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaInt1_int_doc[] =
"Class: oaInt1, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaInt1_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt1 data;
    int convert_status=PyoaInt1_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaInt1_methodlist[] = {
    {"assign",(PyCFunction)oaInt1_assign,METH_VARARGS,oaInt1_assign_doc},
    {"int",(PyCFunction)oaInt1_int,METH_VARARGS,oaInt1_int_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaInt1_nonzero(PyObject* ob)
{
  PyParamoaInt1 p;
  int s=PyoaInt1_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaInt1_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaInt1 p1;
  int s1=PyoaInt1_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaInt1_int(PyObject* ob)
{
  PyParamoaInt1 p;
  int s=PyoaInt1_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaInt1_long(PyObject* ob)
{
  PyParamoaInt1 p;
  int s=PyoaInt1_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaInt1_float(PyObject* ob)
{
  PyParamoaInt1 p;
  int s=PyoaInt1_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaInt1AsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaInt1_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaInt1_coerce, /*nb_coerce*/
  (unaryfunc)oaInt1_int, /*nb_int*/
  (unaryfunc)oaInt1_long, /*nb_long*/
  (unaryfunc)oaInt1_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInt1_doc[] =
"Class: oaInt1\n"
"  The oaInt1 utility class represents 1 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaInt1()\n"
"    Signature: oaInt1||\n"
"    This is the default constructor for the oaInt1 class. This constructor creates a zero valued oaInt1.\n"
"  Paramegers: (oaInt1)\n"
"    Calls: (const oaInt1&)\n"
"    Signature: oaInt1||cref-oaInt1,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInt1_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInt1",
    sizeof(PyoaInt1Object),
    0,
    oaInt1_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaInt1_compare,    /* tp_compare */
    oaInt1_repr,      /* tp_repr */
    &oaInt1AsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaInt1_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInt1_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaInt1_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaInt1_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInt1_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInt1_Type)<0) {
      printf("** PyType_Ready failed for: oaInt1\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInt1",
           (PyObject*)(&PyoaInt1_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInt1\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInt2
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInt2_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInt2_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaInt2Object* self = (PyoaInt2Object*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaInt2)
    {
        PyParamoaInt2 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInt2_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInt2, Choices are:\n"
        "    ()\n"
        "    (oaInt2)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInt2_dealloc(PyObject* gself)
{
    PyoaInt2Object* self = (PyoaInt2Object*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaInt2_repr(PyObject *ob)
{
    PyParamoaInt2 value;
    int convert_status=PyoaInt2_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyInt_FromLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaInt2_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInt2 v1;
    PyParamoaInt2 v2;
    int convert_status1=PyoaInt2_Convert(ob1,&v1);
    int convert_status2=PyoaInt2_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaInt2_Convert(PyObject* ob,PyParamoaInt2* result)
{
  if (ob == NULL) return 1;
  if (PyoaInt2_Check(ob)) {
    result->SetData(((PyoaInt2Object*)ob)->value);
    return 1;
  }
  long val = PyInt_AsLong(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  oaInt2 value=oaInt2(val);
  if (  ((long) value) != val) {
    PyErr_SetString(PyExc_TypeError,
                     "value is out of range for oaInt2");
    return 0;
  }
  result->GiveData(new oaInt2(value));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaInt2_FromoaInt2(const oaInt2& value)
{
  PyObject* gself = PyoaInt2_Type.tp_alloc(&PyoaInt2_Type,0);
  if (gself == NULL) return gself;
  PyoaInt2Object* self = (PyoaInt2Object*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt2_FromoaInt2(oaInt2* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaInt2_Type.tp_alloc(&PyoaInt2_Type,0);
  if (gself == NULL) return gself;
  PyoaInt2Object* self = (PyoaInt2Object*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaInt2_assign_doc[] =
"Class: oaInt2, Function: assign\n"
"  Paramegers: (oaInt2)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaInt2_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt2 data;
    int convert_status=PyoaInt2_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaInt2 p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInt2_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaInt2_int_doc[] =
"Class: oaInt2, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaInt2_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt2 data;
    int convert_status=PyoaInt2_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaInt2_methodlist[] = {
    {"assign",(PyCFunction)oaInt2_assign,METH_VARARGS,oaInt2_assign_doc},
    {"int",(PyCFunction)oaInt2_int,METH_VARARGS,oaInt2_int_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaInt2_nonzero(PyObject* ob)
{
  PyParamoaInt2 p;
  int s=PyoaInt2_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaInt2_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaInt2 p1;
  int s1=PyoaInt2_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaInt2_int(PyObject* ob)
{
  PyParamoaInt2 p;
  int s=PyoaInt2_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaInt2_long(PyObject* ob)
{
  PyParamoaInt2 p;
  int s=PyoaInt2_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaInt2_float(PyObject* ob)
{
  PyParamoaInt2 p;
  int s=PyoaInt2_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaInt2AsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaInt2_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaInt2_coerce, /*nb_coerce*/
  (unaryfunc)oaInt2_int, /*nb_int*/
  (unaryfunc)oaInt2_long, /*nb_long*/
  (unaryfunc)oaInt2_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInt2_doc[] =
"Class: oaInt2\n"
"  The oaInt2 utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaInt2()\n"
"    Signature: oaInt2||\n"
"    This is the default constructor for the oaInt2 class. This constructor creates a zero valued oaInt2.\n"
"  Paramegers: (oaInt2)\n"
"    Calls: (const oaInt2&)\n"
"    Signature: oaInt2||cref-oaInt2,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInt2_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInt2",
    sizeof(PyoaInt2Object),
    0,
    oaInt2_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaInt2_compare,    /* tp_compare */
    oaInt2_repr,      /* tp_repr */
    &oaInt2AsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaInt2_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInt2_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaInt2_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaInt2_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInt2_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInt2_Type)<0) {
      printf("** PyType_Ready failed for: oaInt2\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInt2",
           (PyObject*)(&PyoaInt2_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInt2\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInt4
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInt4_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInt4_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaInt4Object* self = (PyoaInt4Object*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaInt4)
    {
        PyParamoaInt4 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInt4_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInt4, Choices are:\n"
        "    ()\n"
        "    (oaInt4)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInt4_dealloc(PyObject* gself)
{
    PyoaInt4Object* self = (PyoaInt4Object*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaInt4_repr(PyObject *ob)
{
    PyParamoaInt4 value;
    int convert_status=PyoaInt4_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyLong_FromLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaInt4_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInt4 v1;
    PyParamoaInt4 v2;
    int convert_status1=PyoaInt4_Convert(ob1,&v1);
    int convert_status2=PyoaInt4_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaInt4_Convert(PyObject* ob,PyParamoaInt4* result)
{
  if (ob == NULL) return 1;
  if (PyoaInt4_Check(ob)) {
    result->SetData(((PyoaInt4Object*)ob)->value);
    return 1;
  }
  if (PyInt_Check(ob)) {
    long val = PyInt_AsLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaInt4 value=oaInt4(val);
    if (  ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                       "value is out of range for oaInt4");
      return 0;
    }
    result->GiveData(new oaInt4(value));
    return 1;
  }
  if (PyLong_Check(ob)) {
    long val = PyLong_AsLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaInt4 value=oaInt4(val);
    if (  ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                       "value is out of range for oaInt4");
      return 0;
    }
    result->GiveData(new oaInt4(value));
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
                  "cann't convert object to oaInt4");
  return 0;
}

// ------------------------------------------------------------------
PyObject* PyoaInt4_FromoaInt4(const oaInt4& value)
{
  PyObject* gself = PyoaInt4_Type.tp_alloc(&PyoaInt4_Type,0);
  if (gself == NULL) return gself;
  PyoaInt4Object* self = (PyoaInt4Object*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt4_FromoaInt4(oaInt4* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaInt4_Type.tp_alloc(&PyoaInt4_Type,0);
  if (gself == NULL) return gself;
  PyoaInt4Object* self = (PyoaInt4Object*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaInt4_assign_doc[] =
"Class: oaInt4, Function: assign\n"
"  Paramegers: (oaInt4)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaInt4_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt4 data;
    int convert_status=PyoaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaInt4 p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInt4_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaInt4_int_doc[] =
"Class: oaInt4, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaInt4_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt4 data;
    int convert_status=PyoaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaInt4_long_doc[] =
"Class: oaInt4, Function: long\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaInt4_long(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt4 data;
    int convert_status=PyoaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyLong_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaInt4_methodlist[] = {
    {"assign",(PyCFunction)oaInt4_assign,METH_VARARGS,oaInt4_assign_doc},
    {"int",(PyCFunction)oaInt4_int,METH_VARARGS,oaInt4_int_doc},
    {"long",(PyCFunction)oaInt4_long,METH_VARARGS,oaInt4_long_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaInt4_nonzero(PyObject* ob)
{
  PyParamoaInt4 p;
  int s=PyoaInt4_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaInt4_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaInt4 p1;
  int s1=PyoaInt4_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaInt4_int(PyObject* ob)
{
  PyParamoaInt4 p;
  int s=PyoaInt4_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaInt4_long(PyObject* ob)
{
  PyParamoaInt4 p;
  int s=PyoaInt4_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaInt4_float(PyObject* ob)
{
  PyParamoaInt4 p;
  int s=PyoaInt4_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaInt4AsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaInt4_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaInt4_coerce, /*nb_coerce*/
  (unaryfunc)oaInt4_int, /*nb_int*/
  (unaryfunc)oaInt4_long, /*nb_long*/
  (unaryfunc)oaInt4_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInt4_doc[] =
"Class: oaInt4\n"
"  The oaInt4 utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaInt4()\n"
"    Signature: oaInt4||\n"
"    This is the default constructor for the oaInt4 class. This constructor creates a zero valued oaInt4.\n"
"  Paramegers: (oaInt4)\n"
"    Calls: (const oaInt4&)\n"
"    Signature: oaInt4||cref-oaInt4,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInt4_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInt4",
    sizeof(PyoaInt4Object),
    0,
    oaInt4_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaInt4_compare,    /* tp_compare */
    oaInt4_repr,      /* tp_repr */
    &oaInt4AsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaInt4_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInt4_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaInt4_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaInt4_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInt4_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInt4_Type)<0) {
      printf("** PyType_Ready failed for: oaInt4\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInt4",
           (PyObject*)(&PyoaInt4_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInt4\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInt8
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInt8_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInt8_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaInt8Object* self = (PyoaInt8Object*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaInt8)
    {
        PyParamoaInt8 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInt8_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInt8, Choices are:\n"
        "    ()\n"
        "    (oaInt8)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInt8_dealloc(PyObject* gself)
{
    PyoaInt8Object* self = (PyoaInt8Object*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaInt8_repr(PyObject *ob)
{
    PyParamoaInt8 value;
    int convert_status=PyoaInt8_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyLong_FromLongLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaInt8_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInt8 v1;
    PyParamoaInt8 v2;
    int convert_status1=PyoaInt8_Convert(ob1,&v1);
    int convert_status2=PyoaInt8_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaInt8_Convert(PyObject* ob,PyParamoaInt8* result)
{
  if (ob == NULL) return 1;
  if (PyoaInt8_Check(ob)) {
    result->SetData(((PyoaInt8Object*)ob)->value);
    return 1;
  }
  PYOA_LONG_LONG val = PyLong_AsLongLong(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  oaInt8 value=oaInt8(val);
  if (  ((PYOA_LONG_LONG) value) != val) {
    PyErr_SetString(PyExc_TypeError,
                     "value is out of range for oaInt8");
    return 0;
  }
  result->GiveData(new oaInt8(value));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaInt8_FromoaInt8(const oaInt8& value)
{
  PyObject* gself = PyoaInt8_Type.tp_alloc(&PyoaInt8_Type,0);
  if (gself == NULL) return gself;
  PyoaInt8Object* self = (PyoaInt8Object*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt8_FromoaInt8(oaInt8* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaInt8_Type.tp_alloc(&PyoaInt8_Type,0);
  if (gself == NULL) return gself;
  PyoaInt8Object* self = (PyoaInt8Object*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaInt8_assign_doc[] =
"Class: oaInt8, Function: assign\n"
"  Paramegers: (oaInt8)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaInt8_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt8 data;
    int convert_status=PyoaInt8_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaInt8 p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInt8_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaInt8_long_doc[] =
"Class: oaInt8, Function: long\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaInt8_long(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInt8 data;
    int convert_status=PyoaInt8_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyLong_FromLongLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaInt8_methodlist[] = {
    {"assign",(PyCFunction)oaInt8_assign,METH_VARARGS,oaInt8_assign_doc},
    {"long",(PyCFunction)oaInt8_long,METH_VARARGS,oaInt8_long_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaInt8_nonzero(PyObject* ob)
{
  PyParamoaInt8 p;
  int s=PyoaInt8_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaInt8_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaInt8 p1;
  int s1=PyoaInt8_Convert(*ob1,&p1);
  if (s1==0) return 1;
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromLongLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaInt8_long(PyObject* ob)
{
  PyParamoaInt8 p;
  int s=PyoaInt8_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLongLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaInt8_float(PyObject* ob)
{
  PyParamoaInt8 p;
  int s=PyoaInt8_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaInt8AsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaInt8_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaInt8_coerce, /*nb_coerce*/
  0, /*nb_int*/
  (unaryfunc)oaInt8_long, /*nb_long*/
  (unaryfunc)oaInt8_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInt8_doc[] =
"Class: oaInt8\n"
"  The oaInt8 utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaInt8()\n"
"    Signature: oaInt8||\n"
"    This is the default constructor for the oaInt8 class. This constructor creates a zero valued oaInt8.\n"
"  Paramegers: (oaInt8)\n"
"    Calls: (const oaInt8&)\n"
"    Signature: oaInt8||cref-oaInt8,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInt8_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInt8",
    sizeof(PyoaInt8Object),
    0,
    oaInt8_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaInt8_compare,    /* tp_compare */
    oaInt8_repr,      /* tp_repr */
    &oaInt8AsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaInt8_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInt8_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaInt8_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaInt8_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInt8_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInt8_Type)<0) {
      printf("** PyType_Ready failed for: oaInt8\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInt8",
           (PyObject*)(&PyoaInt8_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInt8\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaUInt2
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUInt2_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUInt2_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaUInt2Object* self = (PyoaUInt2Object*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt2)
    {
        PyParamoaUInt2 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt2_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUInt2, Choices are:\n"
        "    ()\n"
        "    (oaUInt2)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUInt2_dealloc(PyObject* gself)
{
    PyoaUInt2Object* self = (PyoaUInt2Object*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaUInt2_repr(PyObject *ob)
{
    PyParamoaUInt2 value;
    int convert_status=PyoaUInt2_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyInt_FromLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaUInt2_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUInt2 v1;
    PyParamoaUInt2 v2;
    int convert_status1=PyoaUInt2_Convert(ob1,&v1);
    int convert_status2=PyoaUInt2_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaUInt2_Convert(PyObject* ob,PyParamoaUInt2* result)
{
  if (ob == NULL) return 1;
  if (PyoaUInt2_Check(ob)) {
    result->SetData(((PyoaUInt2Object*)ob)->value);
    return 1;
  }
  long val = PyInt_AsLong(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  oaUInt2 value=oaUInt2(val);
  if (  ((long) value) != val) {
    PyErr_SetString(PyExc_TypeError,
                     "value is out of range for oaUInt2");
    return 0;
  }
  result->GiveData(new oaUInt2(value));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt2_FromoaUInt2(const oaUInt2& value)
{
  PyObject* gself = PyoaUInt2_Type.tp_alloc(&PyoaUInt2_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt2Object* self = (PyoaUInt2Object*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt2_FromoaUInt2(oaUInt2* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaUInt2_Type.tp_alloc(&PyoaUInt2_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt2Object* self = (PyoaUInt2Object*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaUInt2_assign_doc[] =
"Class: oaUInt2, Function: assign\n"
"  Paramegers: (oaUInt2)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaUInt2_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt2 data;
    int convert_status=PyoaUInt2_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaUInt2 p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaUInt2_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaUInt2_int_doc[] =
"Class: oaUInt2, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaUInt2_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt2 data;
    int convert_status=PyoaUInt2_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaUInt2_methodlist[] = {
    {"assign",(PyCFunction)oaUInt2_assign,METH_VARARGS,oaUInt2_assign_doc},
    {"int",(PyCFunction)oaUInt2_int,METH_VARARGS,oaUInt2_int_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaUInt2_nonzero(PyObject* ob)
{
  PyParamoaUInt2 p;
  int s=PyoaUInt2_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaUInt2_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaUInt2 p1;
  int s1=PyoaUInt2_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromUnsignedLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaUInt2_int(PyObject* ob)
{
  PyParamoaUInt2 p;
  int s=PyoaUInt2_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaUInt2_long(PyObject* ob)
{
  PyParamoaUInt2 p;
  int s=PyoaUInt2_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaUInt2_float(PyObject* ob)
{
  PyParamoaUInt2 p;
  int s=PyoaUInt2_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaUInt2AsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaUInt2_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaUInt2_coerce, /*nb_coerce*/
  (unaryfunc)oaUInt2_int, /*nb_int*/
  (unaryfunc)oaUInt2_long, /*nb_long*/
  (unaryfunc)oaUInt2_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUInt2_doc[] =
"Class: oaUInt2\n"
"  The oaUInt2 utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaUInt2()\n"
"    Signature: oaUInt2||\n"
"    This is the default constructor for the oaUInt2 class. This constructor creates a zero valued oaUInt2.\n"
"  Paramegers: (oaUInt2)\n"
"    Calls: (const oaUInt2&)\n"
"    Signature: oaUInt2||cref-oaUInt2,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaUInt2_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUInt2",
    sizeof(PyoaUInt2Object),
    0,
    oaUInt2_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaUInt2_compare,    /* tp_compare */
    oaUInt2_repr,      /* tp_repr */
    &oaUInt2AsNumber,   /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaUInt2_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUInt2_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaUInt2_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaUInt2_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaUInt2_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUInt2_Type)<0) {
      printf("** PyType_Ready failed for: oaUInt2\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaUInt2",
           (PyObject*)(&PyoaUInt2_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUInt2\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaUInt4
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUInt4_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUInt4_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaUInt4Object* self = (PyoaUInt4Object*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt4_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUInt4, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUInt4_dealloc(PyObject* gself)
{
    PyoaUInt4Object* self = (PyoaUInt4Object*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaUInt4_repr(PyObject *ob)
{
    PyParamoaUInt4 value;
    int convert_status=PyoaUInt4_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyLong_FromUnsignedLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaUInt4_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUInt4 v1;
    PyParamoaUInt4 v2;
    int convert_status1=PyoaUInt4_Convert(ob1,&v1);
    int convert_status2=PyoaUInt4_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}


// ------------------------------------------------------------------
int
PyoaUInt4_Convert(PyObject* ob,PyParamoaUInt4* result)
{
  if (ob == NULL) return 1;
  if (PyoaUInt4_Check(ob)) {
    result->SetData(((PyoaUInt4Object*)ob)->value);
    return 1;
  }
  if (PyInt_Check(ob)) {
    unsigned long val = PyInt_AsLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaUInt4 value=oaUInt4(val);
    if (  ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                       "value is out of range for oaUInt4");
      return 0;
    }
    result->GiveData(new oaUInt4(value));
    return 1;
  }
  if (PyLong_Check(ob)) {
    unsigned long val = PyLong_AsUnsignedLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaUInt4 value=oaUInt4(val);
    if (  ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                       "value is out of range for oaUInt4");
      return 0;
    }
    result->GiveData(new oaUInt4(value));
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
                  "cann't convert object to oaUInt4");
  return 0;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt4_FromoaUInt4(const oaUInt4& value)
{
  PyObject* gself = PyoaUInt4_Type.tp_alloc(&PyoaUInt4_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt4Object* self = (PyoaUInt4Object*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt4_FromoaUInt4(oaUInt4* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaUInt4_Type.tp_alloc(&PyoaUInt4_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt4Object* self = (PyoaUInt4Object*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaUInt4_assign_doc[] =
"Class: oaUInt4, Function: assign\n"
"  Paramegers: (oaUInt4)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaUInt4_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt4 data;
    int convert_status=PyoaUInt4_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaUInt4_int_doc[] =
"Class: oaUInt4, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaUInt4_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt4 data;
    int convert_status=PyoaUInt4_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaUInt4_long_doc[] =
"Class: oaUInt4, Function: long\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaUInt4_long(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt4 data;
    int convert_status=PyoaUInt4_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyLong_FromUnsignedLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaUInt4_methodlist[] = {
    {"assign",(PyCFunction)oaUInt4_assign,METH_VARARGS,oaUInt4_assign_doc},
    {"int",(PyCFunction)oaUInt4_int,METH_VARARGS,oaUInt4_int_doc},
    {"long",(PyCFunction)oaUInt4_long,METH_VARARGS,oaUInt4_long_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaUInt4_nonzero(PyObject* ob)
{
  PyParamoaUInt4 p;
  int s=PyoaUInt4_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaUInt4_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaUInt4 p1;
  int s1=PyoaUInt4_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromUnsignedLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaUInt4_int(PyObject* ob)
{
  PyParamoaUInt4 p;
  int s=PyoaUInt4_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaUInt4_long(PyObject* ob)
{
  PyParamoaUInt4 p;
  int s=PyoaUInt4_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromUnsignedLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaUInt4_float(PyObject* ob)
{
  PyParamoaUInt4 p;
  int s=PyoaUInt4_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaUInt4AsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaUInt4_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaUInt4_coerce, /*nb_coerce*/
  (unaryfunc)oaUInt4_int, /*nb_int*/
  (unaryfunc)oaUInt4_long, /*nb_long*/
  (unaryfunc)oaUInt4_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUInt4_doc[] =
"Class: oaUInt4\n"
"  The oaUInt4 utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4()\n"
"    Signature: oaUInt4||\n"
"    This is the default constructor for the oaUInt4 class. This constructor creates a zero valued oaUInt4.\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: (const oaUInt4&)\n"
"    Signature: oaUInt4||cref-oaUInt4,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaUInt4_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUInt4",
    sizeof(PyoaUInt4Object),
    0,
    oaUInt4_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaUInt4_compare,    /* tp_compare */
    oaUInt4_repr,      /* tp_repr */
    &oaUInt4AsNumber,   /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaUInt4_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUInt4_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaUInt4_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaUInt4_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaUInt4_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUInt4_Type)<0) {
      printf("** PyType_Ready failed for: oaUInt4\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaUInt4",
           (PyObject*)(&PyoaUInt4_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUInt4\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaUInt8
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUInt8_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUInt8_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaUInt8Object* self = (PyoaUInt8Object*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt8)
    {
        PyParamoaUInt8 p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt8_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUInt8, Choices are:\n"
        "    ()\n"
        "    (oaUInt8)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUInt8_dealloc(PyObject* gself)
{
    PyoaUInt8Object* self = (PyoaUInt8Object*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaUInt8_repr(PyObject *ob)
{
    PyParamoaUInt8 value;
    int convert_status=PyoaUInt8_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyLong_FromUnsignedLongLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaUInt8_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUInt8 v1;
    PyParamoaUInt8 v2;
    int convert_status1=PyoaUInt8_Convert(ob1,&v1);
    int convert_status2=PyoaUInt8_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaUInt8_Convert(PyObject* ob,PyParamoaUInt8* result)
{
  if (ob == NULL) return 1;
  if (PyoaUInt8_Check(ob)) {
    result->SetData(((PyoaUInt8Object*)ob)->value);
    return 1;
  }
  unsigned PYOA_LONG_LONG val = PyLong_AsUnsignedLongLong(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  oaUInt8 value=oaUInt8(val);
  if (  ((unsigned PYOA_LONG_LONG) value) != val) {
    PyErr_SetString(PyExc_TypeError,
                     "value is out of range for oaUInt8");
    return 0;
  }
  result->GiveData(new oaUInt8(value));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt8_FromoaUInt8(const oaUInt8& value)
{
  PyObject* gself = PyoaUInt8_Type.tp_alloc(&PyoaUInt8_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt8Object* self = (PyoaUInt8Object*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt8_FromoaUInt8(oaUInt8* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaUInt8_Type.tp_alloc(&PyoaUInt8_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt8Object* self = (PyoaUInt8Object*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaUInt8_assign_doc[] =
"Class: oaUInt8, Function: assign\n"
"  Paramegers: (oaUInt8)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaUInt8_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8 data;
    int convert_status=PyoaUInt8_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaUInt8 p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaUInt8_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaUInt8_long_doc[] =
"Class: oaUInt8, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaUInt8_long(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8 data;
    int convert_status=PyoaUInt8_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyLong_FromUnsignedLongLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaUInt8_methodlist[] = {
    {"assign",(PyCFunction)oaUInt8_assign,METH_VARARGS,oaUInt8_assign_doc},
    {"long",(PyCFunction)oaUInt8_long,METH_VARARGS,oaUInt8_long_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaUInt8_nonzero(PyObject* ob)
{
  PyParamoaUInt8 p;
  int s=PyoaUInt8_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaUInt8_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaUInt8 p1;
  int s1=PyoaUInt8_Convert(*ob1,&p1);
  if (s1==0) return 1;
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromUnsignedLongLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaUInt8_long(PyObject* ob)
{
  PyParamoaUInt8 p;
  int s=PyoaUInt8_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromUnsignedLongLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaUInt8_float(PyObject* ob)
{
  PyParamoaUInt8 p;
  int s=PyoaUInt8_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaUInt8AsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaUInt8_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaUInt8_coerce, /*nb_coerce*/
  0, /*nb_int*/
  (unaryfunc)oaUInt8_long, /*nb_long*/
  (unaryfunc)oaUInt8_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUInt8_doc[] =
"Class: oaUInt8\n"
"  The oaUInt8 utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8()\n"
"    Signature: oaUInt8||\n"
"    This is the default constructor for the oaUInt8 class. This constructor creates a zero valued oaUInt8.\n"
"  Paramegers: (oaUInt8)\n"
"    Calls: (const oaUInt8&)\n"
"    Signature: oaUInt8||cref-oaUInt8,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaUInt8_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUInt8",
    sizeof(PyoaUInt8Object),
    0,
    oaUInt8_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaUInt8_compare,    /* tp_compare */
    oaUInt8_repr,      /* tp_repr */
    &oaUInt8AsNumber,   /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaUInt8_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUInt8_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaUInt8_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaUInt8_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaUInt8_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUInt8_Type)<0) {
      printf("** PyType_Ready failed for: oaUInt8\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaUInt8",
           (PyObject*)(&PyoaUInt8_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUInt8\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaCoord = oaInt4
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaCoord_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaCoord_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaCoordObject* self = (PyoaCoordObject*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaCoord)
    {
        PyParamoaCoord p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaCoord_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaCoord, Choices are:\n"
        "    ()\n"
        "    (oaCoord)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaCoord_dealloc(PyObject* gself)
{
    PyoaCoordObject* self = (PyoaCoordObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaCoord_repr(PyObject *ob)
{
    PyParamoaCoord value;
    int convert_status=PyoaCoord_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyLong_FromLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaCoord_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaCoord v1;
    PyParamoaCoord v2;
    int convert_status1=PyoaCoord_Convert(ob1,&v1);
    int convert_status2=PyoaCoord_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaCoord_Convert(PyObject* ob,PyParamoaCoord* result)
{
  if (ob == NULL) return 1;
  if (PyoaCoord_Check(ob)) {
    result->SetData(((PyoaCoordObject*)ob)->value);
    return 1;
  }
  if (PyInt_Check(ob)) {
    long val = PyInt_AsLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaCoord value=oaCoord(val);
    if (  ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                       "value is out of range for oaCoord");
      return 0;
    }
    result->GiveData(new oaCoord(value));
    return 1;
  }
  if (PyLong_Check(ob)) {
    long val = PyLong_AsLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaCoord value=oaCoord(val);
    if (  ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                       "value is out of range for oaCoord");
      return 0;
    }
    result->GiveData(new oaCoord(value));
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
                  "cann't convert object to oaCoord");
  return 0;
}

// ------------------------------------------------------------------
PyObject* PyoaCoord_FromoaCoord(const oaCoord& value)
{
  PyObject* gself = PyoaCoord_Type.tp_alloc(&PyoaCoord_Type,0);
  if (gself == NULL) return gself;
  PyoaCoordObject* self = (PyoaCoordObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaCoord_FromoaCoord(oaCoord* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaCoord_Type.tp_alloc(&PyoaCoord_Type,0);
  if (gself == NULL) return gself;
  PyoaCoordObject* self = (PyoaCoordObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaCoord_assign_doc[] =
"Class: oaCoord, Function: assign\n"
"  Paramegers: (oaCoord)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaCoord_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCoord data;
    int convert_status=PyoaCoord_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaCoord p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaCoord_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaCoord_int_doc[] =
"Class: oaCoord, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaCoord_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCoord data;
    int convert_status=PyoaCoord_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaCoord_long_doc[] =
"Class: oaCoord, Function: long\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaCoord_long(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCoord data;
    int convert_status=PyoaCoord_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyLong_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaCoord_methodlist[] = {
    {"assign",(PyCFunction)oaCoord_assign,METH_VARARGS,oaCoord_assign_doc},
    {"int",(PyCFunction)oaCoord_int,METH_VARARGS,oaCoord_int_doc},
    {"long",(PyCFunction)oaCoord_long,METH_VARARGS,oaCoord_long_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaCoord_nonzero(PyObject* ob)
{
  PyParamoaCoord p;
  int s=PyoaCoord_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaCoord_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaCoord p1;
  int s1=PyoaCoord_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaCoord_int(PyObject* ob)
{
  PyParamoaCoord p;
  int s=PyoaCoord_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaCoord_long(PyObject* ob)
{
  PyParamoaCoord p;
  int s=PyoaCoord_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaCoord_float(PyObject* ob)
{
  PyParamoaCoord p;
  int s=PyoaCoord_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaCoordAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaCoord_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaCoord_coerce, /*nb_coerce*/
  (unaryfunc)oaCoord_int, /*nb_int*/
  (unaryfunc)oaCoord_long, /*nb_long*/
  (unaryfunc)oaCoord_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaCoord_doc[] =
"Class: oaCoord\n"
"  The oaCoord utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaCoord()\n"
"    Signature: oaCoord||\n"
"    This is the default constructor for the oaCoord class. This constructor creates a zero valued oaCoord.\n"
"  Paramegers: (oaCoord)\n"
"    Calls: (const oaCoord&)\n"
"    Signature: oaCoord||cref-oaCoord,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaCoord_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaCoord",
    sizeof(PyoaCoordObject),
    0,
    oaCoord_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaCoord_compare,    /* tp_compare */
    oaCoord_repr,      /* tp_repr */
    &oaCoordAsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaCoord_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaCoord_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaCoord_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaCoord_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaCoord_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaCoord_Type)<0) {
      printf("** PyType_Ready failed for: oaCoord\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaCoord",
           (PyObject*)(&PyoaCoord_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaCoord\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaDist = oaUInt4
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDist_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDist_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaDistObject* self = (PyoaDistObject*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaDist)
    {
        PyParamoaDist p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDist_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDist, Choices are:\n"
        "    ()\n"
        "    (oaDist)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDist_dealloc(PyObject* gself)
{
    PyoaDistObject* self = (PyoaDistObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaDist_repr(PyObject *ob)
{
    PyParamoaDist value;
    int convert_status=PyoaDist_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyLong_FromUnsignedLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaDist_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDist v1;
    PyParamoaDist v2;
    int convert_status1=PyoaDist_Convert(ob1,&v1);
    int convert_status2=PyoaDist_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}


// ------------------------------------------------------------------
int
PyoaDist_Convert(PyObject* ob,PyParamoaDist* result)
{
  if (ob == NULL) return 1;
  if (PyoaDist_Check(ob)) {
    result->SetData(((PyoaDistObject*)ob)->value);
    return 1;
  }
  if (PyInt_Check(ob)) {
    unsigned long val = PyInt_AsLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaDist value=oaDist(val);
    if (  ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                       "value is out of range for oaDist");
      return 0;
    }
    result->GiveData(new oaDist(value));
    return 1;
  }
  if (PyLong_Check(ob)) {
    unsigned long val = PyLong_AsUnsignedLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaDist value=oaDist(val);
    if (  ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                       "value is out of range for oaDist");
      return 0;
    }
    result->GiveData(new oaDist(value));
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
                  "cann't convert object to oaDist");
  return 0;
}

// ------------------------------------------------------------------
PyObject* PyoaDist_FromoaDist(const oaDist& value)
{
  PyObject* gself = PyoaDist_Type.tp_alloc(&PyoaDist_Type,0);
  if (gself == NULL) return gself;
  PyoaDistObject* self = (PyoaDistObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaDist_FromoaDist(oaDist* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaDist_Type.tp_alloc(&PyoaDist_Type,0);
  if (gself == NULL) return gself;
  PyoaDistObject* self = (PyoaDistObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaDist_assign_doc[] =
"Class: oaDist, Function: assign\n"
"  Paramegers: (oaDist)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaDist_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDist data;
    int convert_status=PyoaDist_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaDist p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDist_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaDist_int_doc[] =
"Class: oaDist, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaDist_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDist data;
    int convert_status=PyoaDist_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaDist_long_doc[] =
"Class: oaDist, Function: long\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaDist_long(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDist data;
    int convert_status=PyoaDist_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyLong_FromUnsignedLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaDist_methodlist[] = {
    {"assign",(PyCFunction)oaDist_assign,METH_VARARGS,oaDist_assign_doc},
    {"int",(PyCFunction)oaDist_int,METH_VARARGS,oaDist_int_doc},
    {"long",(PyCFunction)oaDist_long,METH_VARARGS,oaDist_long_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaDist_nonzero(PyObject* ob)
{
  PyParamoaDist p;
  int s=PyoaDist_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaDist_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaDist p1;
  int s1=PyoaDist_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromUnsignedLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaDist_int(PyObject* ob)
{
  PyParamoaDist p;
  int s=PyoaDist_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaDist_long(PyObject* ob)
{
  PyParamoaDist p;
  int s=PyoaDist_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromUnsignedLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaDist_float(PyObject* ob)
{
  PyParamoaDist p;
  int s=PyoaDist_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaDistAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaDist_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaDist_coerce, /*nb_coerce*/
  (unaryfunc)oaDist_int, /*nb_int*/
  (unaryfunc)oaDist_long, /*nb_long*/
  (unaryfunc)oaDist_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaDist_doc[] =
"Class: oaDist\n"
"  The oaDist utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaDist()\n"
"    Signature: oaDist||\n"
"    This is the default constructor for the oaDist class. This constructor creates a zero valued oaDist.\n"
"  Paramegers: (oaDist)\n"
"    Calls: (const oaDist&)\n"
"    Signature: oaDist||cref-oaDist,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaDist_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDist",
    sizeof(PyoaDistObject),
    0,
    oaDist_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaDist_compare,    /* tp_compare */
    oaDist_repr,      /* tp_repr */
    &oaDistAsNumber,   /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaDist_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDist_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaDist_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaDist_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaDist_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDist_Type)<0) {
      printf("** PyType_Ready failed for: oaDist\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaDist",
           (PyObject*)(&PyoaDist_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDist\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaOffset = oaInt4
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaOffset_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaOffset_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaOffsetObject* self = (PyoaOffsetObject*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaOffset)
    {
        PyParamoaOffset p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaOffset_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaOffset, Choices are:\n"
        "    ()\n"
        "    (oaOffset)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaOffset_dealloc(PyObject* gself)
{
    PyoaOffsetObject* self = (PyoaOffsetObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaOffset_repr(PyObject *ob)
{
    PyParamoaOffset value;
    int convert_status=PyoaOffset_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyLong_FromLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaOffset_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaOffset v1;
    PyParamoaOffset v2;
    int convert_status1=PyoaOffset_Convert(ob1,&v1);
    int convert_status2=PyoaOffset_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaOffset_Convert(PyObject* ob,PyParamoaOffset* result)
{
  if (ob == NULL) return 1;
  if (PyoaOffset_Check(ob)) {
    result->SetData(((PyoaOffsetObject*)ob)->value);
    return 1;
  }
  if (PyInt_Check(ob)) {
    long val = PyInt_AsLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaOffset value=oaOffset(val);
    if (  ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                       "value is out of range for oaOffset");
      return 0;
    }
    result->GiveData(new oaOffset(value));
    return 1;
  }
  if (PyLong_Check(ob)) {
    long val = PyLong_AsLong(ob);
    if (val==-1 && PyErr_Occurred()) return 0;
    oaOffset value=oaOffset(val);
    if (  ((long) value) != val) {
      PyErr_SetString(PyExc_TypeError,
                       "value is out of range for oaOffset");
      return 0;
    }
    result->GiveData(new oaOffset(value));
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
                  "cann't convert object to oaOffset");
  return 0;
}

// ------------------------------------------------------------------
PyObject* PyoaOffset_FromoaOffset(const oaOffset& value)
{
  PyObject* gself = PyoaOffset_Type.tp_alloc(&PyoaOffset_Type,0);
  if (gself == NULL) return gself;
  PyoaOffsetObject* self = (PyoaOffsetObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaOffset_FromoaOffset(oaOffset* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaOffset_Type.tp_alloc(&PyoaOffset_Type,0);
  if (gself == NULL) return gself;
  PyoaOffsetObject* self = (PyoaOffsetObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaOffset_assign_doc[] =
"Class: oaOffset, Function: assign\n"
"  Paramegers: (oaOffset)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaOffset_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOffset data;
    int convert_status=PyoaOffset_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaOffset p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaOffset_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaOffset_int_doc[] =
"Class: oaOffset, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaOffset_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOffset data;
    int convert_status=PyoaOffset_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaOffset_long_doc[] =
"Class: oaOffset, Function: long\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaOffset_long(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOffset data;
    int convert_status=PyoaOffset_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyLong_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaOffset_methodlist[] = {
    {"assign",(PyCFunction)oaOffset_assign,METH_VARARGS,oaOffset_assign_doc},
    {"int",(PyCFunction)oaOffset_int,METH_VARARGS,oaOffset_int_doc},
    {"long",(PyCFunction)oaOffset_long,METH_VARARGS,oaOffset_long_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaOffset_nonzero(PyObject* ob)
{
  PyParamoaOffset p;
  int s=PyoaOffset_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaOffset_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaOffset p1;
  int s1=PyoaOffset_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaOffset_int(PyObject* ob)
{
  PyParamoaOffset p;
  int s=PyoaOffset_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaOffset_long(PyObject* ob)
{
  PyParamoaOffset p;
  int s=PyoaOffset_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaOffset_float(PyObject* ob)
{
  PyParamoaOffset p;
  int s=PyoaOffset_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaOffsetAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaOffset_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaOffset_coerce, /*nb_coerce*/
  (unaryfunc)oaOffset_int, /*nb_int*/
  (unaryfunc)oaOffset_long, /*nb_long*/
  (unaryfunc)oaOffset_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaOffset_doc[] =
"Class: oaOffset\n"
"  The oaOffset utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaOffset()\n"
"    Signature: oaOffset||\n"
"    This is the default constructor for the oaOffset class. This constructor creates a zero valued oaOffset.\n"
"  Paramegers: (oaOffset)\n"
"    Calls: (const oaOffset&)\n"
"    Signature: oaOffset||cref-oaOffset,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaOffset_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaOffset",
    sizeof(PyoaOffsetObject),
    0,
    oaOffset_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaOffset_compare,    /* tp_compare */
    oaOffset_repr,      /* tp_repr */
    &oaOffsetAsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaOffset_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaOffset_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaOffset_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaOffset_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaOffset_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaOffset_Type)<0) {
      printf("** PyType_Ready failed for: oaOffset\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaOffset",
           (PyObject*)(&PyoaOffset_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaOffset\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaLayerNum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaLayerNum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaLayerNum_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaLayerNumObject* self = (PyoaLayerNumObject*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaLayerNum)
    {
        PyParamoaLayerNum p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaLayerNum_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaLayerNum, Choices are:\n"
        "    ()\n"
        "    (oaLayerNum)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaLayerNum_dealloc(PyObject* gself)
{
    PyoaLayerNumObject* self = (PyoaLayerNumObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaLayerNum_repr(PyObject *ob)
{
    PyParamoaLayerNum value;
    int convert_status=PyoaLayerNum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyInt_FromLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaLayerNum_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaLayerNum v1;
    PyParamoaLayerNum v2;
    int convert_status1=PyoaLayerNum_Convert(ob1,&v1);
    int convert_status2=PyoaLayerNum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaLayerNum_Convert(PyObject* ob,PyParamoaLayerNum* result)
{
  if (ob == NULL) return 1;
  if (PyoaLayerNum_Check(ob)) {
    result->SetData(((PyoaLayerNumObject*)ob)->value);
    return 1;
  }
  long val = PyInt_AsLong(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  oaLayerNum value=oaLayerNum(val);
  if (  ((long) value) != val) {
    PyErr_SetString(PyExc_TypeError,
                     "value is out of range for oaLayerNum");
    return 0;
  }
  result->GiveData(new oaLayerNum(value));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaLayerNum_FromoaLayerNum(const oaLayerNum& value)
{
  PyObject* gself = PyoaLayerNum_Type.tp_alloc(&PyoaLayerNum_Type,0);
  if (gself == NULL) return gself;
  PyoaLayerNumObject* self = (PyoaLayerNumObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaLayerNum_FromoaLayerNum(oaLayerNum* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaLayerNum_Type.tp_alloc(&PyoaLayerNum_Type,0);
  if (gself == NULL) return gself;
  PyoaLayerNumObject* self = (PyoaLayerNumObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaLayerNum_assign_doc[] =
"Class: oaLayerNum, Function: assign\n"
"  Paramegers: (oaLayerNum)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaLayerNum_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerNum data;
    int convert_status=PyoaLayerNum_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaLayerNum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaLayerNum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaLayerNum_int_doc[] =
"Class: oaLayerNum, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaLayerNum_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayerNum data;
    int convert_status=PyoaLayerNum_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaLayerNum_methodlist[] = {
    {"assign",(PyCFunction)oaLayerNum_assign,METH_VARARGS,oaLayerNum_assign_doc},
    {"int",(PyCFunction)oaLayerNum_int,METH_VARARGS,oaLayerNum_int_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaLayerNum_nonzero(PyObject* ob)
{
  PyParamoaLayerNum p;
  int s=PyoaLayerNum_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaLayerNum_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaLayerNum p1;
  int s1=PyoaLayerNum_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaLayerNum_int(PyObject* ob)
{
  PyParamoaLayerNum p;
  int s=PyoaLayerNum_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaLayerNum_long(PyObject* ob)
{
  PyParamoaLayerNum p;
  int s=PyoaLayerNum_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaLayerNum_float(PyObject* ob)
{
  PyParamoaLayerNum p;
  int s=PyoaLayerNum_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaLayerNumAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaLayerNum_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaLayerNum_coerce, /*nb_coerce*/
  (unaryfunc)oaLayerNum_int, /*nb_int*/
  (unaryfunc)oaLayerNum_long, /*nb_long*/
  (unaryfunc)oaLayerNum_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaLayerNum_doc[] =
"Class: oaLayerNum\n"
"  The oaLayerNum utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaLayerNum()\n"
"    Signature: oaLayerNum||\n"
"    This is the default constructor for the oaLayerNum class. This constructor creates a zero valued oaLayerNum.\n"
"  Paramegers: (oaLayerNum)\n"
"    Calls: (const oaLayerNum&)\n"
"    Signature: oaLayerNum||cref-oaLayerNum,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaLayerNum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaLayerNum",
    sizeof(PyoaLayerNumObject),
    0,
    oaLayerNum_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaLayerNum_compare,    /* tp_compare */
    oaLayerNum_repr,      /* tp_repr */
    &oaLayerNumAsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaLayerNum_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaLayerNum_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaLayerNum_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaLayerNum_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaLayerNum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaLayerNum_Type)<0) {
      printf("** PyType_Ready failed for: oaLayerNum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaLayerNum",
           (PyObject*)(&PyoaLayerNum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaLayerNum\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaPurposeNum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaPurposeNum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaPurposeNum_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaPurposeNumObject* self = (PyoaPurposeNumObject*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaPurposeNum)
    {
        PyParamoaPurposeNum p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaPurposeNum_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaPurposeNum, Choices are:\n"
        "    ()\n"
        "    (oaPurposeNum)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaPurposeNum_dealloc(PyObject* gself)
{
    PyoaPurposeNumObject* self = (PyoaPurposeNumObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaPurposeNum_repr(PyObject *ob)
{
    PyParamoaPurposeNum value;
    int convert_status=PyoaPurposeNum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* ivalue=PyInt_FromLong(value.Data());
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaPurposeNum_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaPurposeNum v1;
    PyParamoaPurposeNum v2;
    int convert_status1=PyoaPurposeNum_Convert(ob1,&v1);
    int convert_status2=PyoaPurposeNum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaPurposeNum_Convert(PyObject* ob,PyParamoaPurposeNum* result)
{
  if (ob == NULL) return 1;
  if (PyoaPurposeNum_Check(ob)) {
    result->SetData(((PyoaPurposeNumObject*)ob)->value);
    return 1;
  }
  long val = PyInt_AsLong(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  oaPurposeNum value=oaPurposeNum(val);
  if (  ((long) value) != val) {
    PyErr_SetString(PyExc_TypeError,
                     "value is out of range for oaPurposeNum");
    return 0;
  }
  result->GiveData(new oaPurposeNum(value));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaPurposeNum_FromoaPurposeNum(const oaPurposeNum& value)
{
  PyObject* gself = PyoaPurposeNum_Type.tp_alloc(&PyoaPurposeNum_Type,0);
  if (gself == NULL) return gself;
  PyoaPurposeNumObject* self = (PyoaPurposeNumObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaPurposeNum_FromoaPurposeNum(oaPurposeNum* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaPurposeNum_Type.tp_alloc(&PyoaPurposeNum_Type,0);
  if (gself == NULL) return gself;
  PyoaPurposeNumObject* self = (PyoaPurposeNumObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaPurposeNum_assign_doc[] =
"Class: oaPurposeNum, Function: assign\n"
"  Paramegers: (oaPurposeNum)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaPurposeNum_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPurposeNum data;
    int convert_status=PyoaPurposeNum_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaPurposeNum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaPurposeNum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaPurposeNum_int_doc[] =
"Class: oaPurposeNum, Function: int\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaPurposeNum_int(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPurposeNum data;
    int convert_status=PyoaPurposeNum_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyInt_FromLong(data.Data());
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaPurposeNum_methodlist[] = {
    {"assign",(PyCFunction)oaPurposeNum_assign,METH_VARARGS,oaPurposeNum_assign_doc},
    {"int",(PyCFunction)oaPurposeNum_int,METH_VARARGS,oaPurposeNum_int_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaPurposeNum_nonzero(PyObject* ob)
{
  PyParamoaPurposeNum p;
  int s=PyoaPurposeNum_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaPurposeNum_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaPurposeNum p1;
  int s1=PyoaPurposeNum_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaPurposeNum_int(PyObject* ob)
{
  PyParamoaPurposeNum p;
  int s=PyoaPurposeNum_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaPurposeNum_long(PyObject* ob)
{
  PyParamoaPurposeNum p;
  int s=PyoaPurposeNum_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaPurposeNum_float(PyObject* ob)
{
  PyParamoaPurposeNum p;
  int s=PyoaPurposeNum_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaPurposeNumAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaPurposeNum_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaPurposeNum_coerce, /*nb_coerce*/
  (unaryfunc)oaPurposeNum_int, /*nb_int*/
  (unaryfunc)oaPurposeNum_long, /*nb_long*/
  (unaryfunc)oaPurposeNum_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaPurposeNum_doc[] =
"Class: oaPurposeNum\n"
"  The oaPurposeNum utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaPurposeNum()\n"
"    Signature: oaPurposeNum||\n"
"    This is the default constructor for the oaPurposeNum class. This constructor creates a zero valued oaPurposeNum.\n"
"  Paramegers: (oaPurposeNum)\n"
"    Calls: (const oaPurposeNum&)\n"
"    Signature: oaPurposeNum||cref-oaPurposeNum,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaPurposeNum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaPurposeNum",
    sizeof(PyoaPurposeNumObject),
    0,
    oaPurposeNum_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaPurposeNum_compare,    /* tp_compare */
    oaPurposeNum_repr,      /* tp_repr */
    &oaPurposeNumAsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaPurposeNum_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaPurposeNum_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaPurposeNum_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaPurposeNum_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaPurposeNum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaPurposeNum_Type)<0) {
      printf("** PyType_Ready failed for: oaPurposeNum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaPurposeNum",
           (PyObject*)(&PyoaPurposeNum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaPurposeNum\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaString
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaString_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaString_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaStringObject* self = (PyoaStringObject*)gself;
    self->data = '\0';
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            self->data = oaString(p1.Data());
            return gself;
        }
    }
    PyErr_Clear();
    // Case: ([char])
    {
        PyParamchar_Array p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pychar_Array_Convert,&p1)) {
            self->data = oaString(p1.Data());
            return gself;
        }
    }
    PyErr_Clear();
    // Case: ([char],oaUInt4)
    {
        PyParamchar_Array p1;
        PyParamoaUInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &Pychar_Array_Convert,&p1,
              &PyoaUInt4_Convert,&p2)) {
            self->data = oaString(p1.Data(),p2.Data());
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaString_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaString, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    ([char])\n"
        "    ([char],oaUInt4)\n"
        "    (oaString)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaString_dealloc(PyObject* gself)
{
    PyoaStringObject* self = (PyoaStringObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaString_str(PyObject *ob)
{
    PyParamoaString value;
    int convert_status=PyoaString_Convert(ob,&value);
    assert(convert_status!=0);
    return PyString_FromString((const char*)(value.Data()));
}
// ------------------------------------------------------------------
static PyObject*
oaString_repr(PyObject *ob)
{
    PyObject* str=oaString_str(ob);
    PyObject* result=PyObject_Repr(str);
    Py_DECREF(str);
    return result;
}

// ------------------------------------------------------------------
static int
oaString_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaString v1;
    PyParamoaString v2;
    int convert_status1=PyoaString_Convert(ob1,&v1);
    int convert_status2=PyoaString_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    return strcmp(v1.Data(),v2.Data());
}

// ------------------------------------------------------------------
int
PyoaString_Convert(PyObject* ob,PyParamoaString* result)
{
  if (ob == NULL) return 1;
  if (PyoaString_Check(ob)) {
    result->SetData(((PyoaStringObject*)ob)->value);
    return 1;
  }
  if (PyString_Check(ob)) {
    Pyoa_ssize_t len;
    char* s;
    if (PyString_AsStringAndSize(ob,&s,&len)) return 0;
    result->GiveData(new oaString(s));
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaString Failed");
  return 0;
}

// ------------------------------------------------------------------
int
PyoaString_ConvertAof(PyObject* ob,PyParamoaString* result)
{
  if (ob == NULL) return 1;
  if (ob==Py_None) {
    result->SetData(NULL);
    return 1;
  }
  if (PyoaString_Check(ob)) {
    result->SetData(((PyoaStringObject*)ob)->value);
    return 1;
  }
  if (PyString_Check(ob)) {
    Pyoa_ssize_t len;
    char* s;
    if (PyString_AsStringAndSize(ob,&s,&len)) return 0;
    result->GiveData(new oaString(s));
    return 1;
  }
  PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaString Failed");
  return 0;
}

// ------------------------------------------------------------------
PyObject* PyoaString_FromoaString(const oaString& value)
{
  PyObject* gself = PyoaString_Type.tp_alloc(&PyoaString_Type,0);
  if (gself == NULL) return gself;
  PyoaStringObject* self = (PyoaStringObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaString_FromoaString(oaString* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaString_Type.tp_alloc(&PyoaString_Type,0);
  if (gself == NULL) return gself;
  PyoaStringObject* self = (PyoaStringObject*)gself;
  //self->data = ; // Default intizialize
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaString_assign_doc[] =
"Class: oaString, Function: assign\n"
"  Paramegers: (oaString)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaString_assign(PyObject* ob, PyObject *args)
{
  PyParamoaString data;
  int convert_status=PyoaString_Convert(ob,&data);
  try {
    PyParamoaString p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaString_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaString_str_doc[] =
"Class: oaString, Function: str\n"
"  Paramegers: ()\n"
"    This function returns the current value as a string.\n"
;

static PyObject*
oaString_str(PyObject* ob, PyObject *args)
{
  PyParamoaString data;
  int convert_status=PyoaString_Convert(ob,&data);
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyString_FromString((const char*)(data.Data()));
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaString_getLength_doc[] =
"Class: oaString, Function: getLength\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getLength() const\n"
"    Signature: getLength|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the length of this string. The value represents the number of characters in this string excluding the trailing NULL character.\n"
;

static PyObject*
oaString_getLength(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString data;
    int convert_status=PyoaString_Convert(ob,&data);
    assert(convert_status!=0);

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getLength());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaString_getSize_doc[] =
"Class: oaString, Function: getSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getSize() const\n"
"    Signature: getSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the size of the space allocated by this oaString.\n"
;

static PyObject*
oaString_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString data;
    int convert_status=PyoaString_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringObject* self=(PyoaStringObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaString_index_doc[] =
"Class: oaString, Function: index\n"
"  Paramegers: (char)\n"
"    Calls: oaUInt4 index(char c) const\n"
"    Signature: index|simple-oaUInt4|simple-char,simple-oaUInt4,\n"
"    This function searches this string and returns an index to the first occurrence of the specified character. If the character is not found, the index to the terminating NULL character is returned. You can specify an optional initial offset into the string. Parameters: c The character to find\n"
"    offset The initial offset into the string\n"
"    Returns: An integer representing the position of the character in this string\n"
"  Paramegers: (char,oaUInt4)\n"
"    Calls: oaUInt4 index(char c,oaUInt4 offset) const\n"
"    Signature: index|simple-oaUInt4|simple-char,simple-oaUInt4,\n"
"    This function searches this string and returns an index to the first occurrence of the specified character. If the character is not found, the index to the terminating NULL character is returned. You can specify an optional initial offset into the string. Parameters: c The character to find\n"
"    offset The initial offset into the string\n"
"    Returns: An integer representing the position of the character in this string\n"
;

static PyObject*
oaString_index(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString data;
    int convert_status=PyoaString_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringObject* self=(PyoaStringObject*)ob;

    // Case: (char)
    {
        PyParamchar p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pychar_Convert,&p1)) {
            oaUInt4 result= (data.DataCall()->index(p1));
            return PyoaUInt4_FromoaUInt4(result);
        }
    }
    PyErr_Clear();
    // Case: (char,oaUInt4)
    {
        PyParamchar p1;
        PyParamoaUInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &Pychar_Convert,&p1,
              &PyoaUInt4_Convert,&p2)) {
            oaUInt4 result= (data.DataCall()->index(p1,p2.Data()));
            return PyoaUInt4_FromoaUInt4(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaString, function: index, Choices are:\n"
        "    (char)\n"
        "    (char,oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaString_isEmpty_doc[] =
"Class: oaString, Function: isEmpty\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isEmpty() const\n"
"    Signature: isEmpty|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this string is empty.\n"
;

static PyObject*
oaString_isEmpty(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString data;
    int convert_status=PyoaString_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringObject* self=(PyoaStringObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isEmpty());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaString_resize_doc[] =
"Class: oaString, Function: resize\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void resize(oaUInt4 size)\n"
"    Signature: resize|void-void|simple-oaUInt4,\n"
"    This function increases the amount of space allocated by this string to newSize .\n"
;

static PyObject*
oaString_resize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString data;
    int convert_status=PyoaString_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringObject* self=(PyoaStringObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->resize(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaString_substr_doc[] =
"Class: oaString, Function: substr\n"
"  Paramegers: (oaString)\n"
"    Calls: oaUInt4 substr(const oaString& sub) const\n"
"    Signature: substr|simple-oaUInt4|cref-oaString,simple-oaUInt4,\n"
"    This function searches this string and returns the index to the first occurrence of the specified substring. If this function does not find the substring, this function returns the index of the terminating NULL value. You can specify an optional initial offset into the string. Parameters: sub The substring to find\n"
"    offset The initial offset into the string\n"
"  Paramegers: (oaString,oaUInt4)\n"
"    Calls: oaUInt4 substr(const oaString& sub,oaUInt4 offset) const\n"
"    Signature: substr|simple-oaUInt4|cref-oaString,simple-oaUInt4,\n"
"    This function searches this string and returns the index to the first occurrence of the specified substring. If this function does not find the substring, this function returns the index of the terminating NULL value. You can specify an optional initial offset into the string. Parameters: sub The substring to find\n"
"    offset The initial offset into the string\n"
;

static PyObject*
oaString_substr(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString data;
    int convert_status=PyoaString_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringObject* self=(PyoaStringObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaUInt4 result= (data.DataCall()->substr(p1.Data()));
            return PyoaUInt4_FromoaUInt4(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaUInt4)
    {
        PyParamoaString p1;
        PyParamoaUInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaUInt4_Convert,&p2)) {
            oaUInt4 result= (data.DataCall()->substr(p1.Data(),p2.Data()));
            return PyoaUInt4_FromoaUInt4(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaString, function: substr, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaString_toInt_doc[] =
"Class: oaString, Function: toInt\n"
"  Paramegers: ()\n"
"    Calls: int toInt() const\n"
"    Signature: toInt|simple-int|\n"
"    BrowseData: 1\n"
"    This function converts the string to an integer. See the system function atoi for details.\n"
"    Returns: Zero if the conversion fails\n"
;

static PyObject*
oaString_toInt(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString data;
    int convert_status=PyoaString_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringObject* self=(PyoaStringObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        int result= (data.DataCall()->toInt());
        return Pyint_Fromint(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaString_toLower_doc[] =
"Class: oaString, Function: toLower\n"
"  Paramegers: ()\n"
"    Calls: void toLower()\n"
"    Signature: toLower|void-void|\n"
"    BrowseData: 0\n"
"    This function converts this string to lowercase.\n"
;

static PyObject*
oaString_toLower(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString data;
    int convert_status=PyoaString_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringObject* self=(PyoaStringObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->toLower();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaString_toUpper_doc[] =
"Class: oaString, Function: toUpper\n"
"  Paramegers: ()\n"
"    Calls: void toUpper()\n"
"    Signature: toUpper|void-void|\n"
"    BrowseData: 0\n"
"    This function converts this string to uppercase.\n"
;

static PyObject*
oaString_toUpper(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString data;
    int convert_status=PyoaString_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStringObject* self=(PyoaStringObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->toUpper();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaString_methodlist[] = {
    {"assign",(PyCFunction)oaString_assign,METH_VARARGS,oaString_assign_doc},
    {"str",(PyCFunction)oaString_str,METH_VARARGS,oaString_str_doc},
    {"getLength",(PyCFunction)oaString_getLength,METH_VARARGS,oaString_getLength_doc},
    {"getSize",(PyCFunction)oaString_getSize,METH_VARARGS,oaString_getSize_doc},
    {"index",(PyCFunction)oaString_index,METH_VARARGS,oaString_index_doc},
    {"isEmpty",(PyCFunction)oaString_isEmpty,METH_VARARGS,oaString_isEmpty_doc},
    {"resize",(PyCFunction)oaString_resize,METH_VARARGS,oaString_resize_doc},
    {"substr",(PyCFunction)oaString_substr,METH_VARARGS,oaString_substr_doc},
    {"toInt",(PyCFunction)oaString_toInt,METH_VARARGS,oaString_toInt_doc},
    {"toLower",(PyCFunction)oaString_toLower,METH_VARARGS,oaString_toLower_doc},
    {"toUpper",(PyCFunction)oaString_toUpper,METH_VARARGS,oaString_toUpper_doc},
   {NULL,NULL,0,NULL}
};
// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaString_doc[] =
"Class: oaString\n"
"  The oaString utility class a single char.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaString()\n"
"    Signature: oaString||\n"
"    This is the default constructor for the oaString class. This constructor creates an empty oaString.\n"
"  Paramegers: (oaString)\n"
"    Calls: (const oaString&)\n"
"    Signature: oaString||cref-oaString,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaString_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaString",
    sizeof(PyoaStringObject),
    0,
    oaString_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaString_compare,    /* tp_compare */
    oaString_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaString_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaString_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaString_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaString_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaString_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaString_Type)<0) {
      printf("** PyType_Ready failed for: oaString\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaString",
           (PyObject*)(&PyoaString_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaString\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"
#include <math.h>

// ==================================================================
// Wrapper Implementation for Class: oaTime
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTime_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTime_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaTimeObject* self = (PyoaTimeObject*)gself;
    self->data = 0;
    self->value = &(self->data);
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    // Case: (oaTime)
    {
        PyParamoaTime p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTime_Convert,&p1)) {
            self->data=p1.Data();
            return gself;
        }
    }
    // Error
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTime, Choices are:\n"
        "    ()\n"
        "    (oaTime)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTime_dealloc(PyObject* gself)
{
    PyoaTimeObject* self = (PyoaTimeObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaTime_repr(PyObject *ob)
{
    PyParamoaTime value;
    int convert_status=PyoaTime_Convert(ob,&value);
    assert(convert_status!=0);
    double dvalue=(double)(value.Data());
    PyObject* ivalue=PyFloat_FromDouble(dvalue);
    PyObject* result=PyObject_Repr(ivalue);
    Py_DECREF(ivalue);
    return result;
}

// ------------------------------------------------------------------
static int
oaTime_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTime v1;
    PyParamoaTime v2;
    int convert_status1=PyoaTime_Convert(ob1,&v1);
    int convert_status2=PyoaTime_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.Data()==v2.Data()) return 0;
    if (v1.Data()>v2.Data()) return 1;
    return -1;
}

// ------------------------------------------------------------------
int
PyoaTime_Convert(PyObject* ob,PyParamoaTime* result)
{
  if (ob == NULL) return 1;
  if (PyoaTime_Check(ob)) {
    result->SetData(((PyoaTimeObject*)ob)->value);
    return 1;
  }
  double val = PyFloat_AsDouble(ob);
  if (val==-1 && PyErr_Occurred()) return 0;
  oaTime value(floor(val));
  result->GiveData(new oaTime(value));
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaTime_FromoaTime(const oaTime& value)
{
  PyObject* gself = PyoaTime_Type.tp_alloc(&PyoaTime_Type,0);
  if (gself == NULL) return gself;
  PyoaTimeObject* self = (PyoaTimeObject*)gself;
  self->data = value;
  self->value = &(self->data);
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaTime_FromoaTime(oaTime* value,int borrow,PyObject* lock)
{
  PyObject* gself = PyoaTime_Type.tp_alloc(&PyoaTime_Type,0);
  if (gself == NULL) return gself;
  PyoaTimeObject* self = (PyoaTimeObject*)gself;
  self->data = 0;
  self->value = value;
  self->borrow = borrow;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaTime_assign_doc[] =
"Class: oaTime, Function: assign\n"
"  Paramegers: (oaTime)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaTime_assign(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTime data;
    int convert_status=PyoaTime_Convert(ob,&data);
    assert(convert_status!=0);
    PyParamoaTime p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTime_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaTime_float_doc[] =
"Class: oaTime, Function: float\n"
"  Paramegers: ()\n"
"    This function returns the current value as an integer.\n"
;

static PyObject*
oaTime_float(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTime data;
    int convert_status=PyoaTime_Convert(ob,&data);
    assert(convert_status!=0);
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyFloat_FromDouble((double)(data.Data()));
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaTime_methodlist[] = {
    {"assign",(PyCFunction)oaTime_assign,METH_VARARGS,oaTime_assign_doc},
    {"float",(PyCFunction)oaTime_float,METH_VARARGS,oaTime_float_doc},
   {NULL,NULL,0,NULL}
};
// -----------------------------------------------------
// Math
// -----------------------------------------------------
static int oaTime_nonzero(PyObject* ob)
{
  PyParamoaTime p;
  int s=PyoaTime_Convert(ob,&p);
  assert(s!=0);
  return p.Data()!=0;
}
// -----------------------------------------------------
static int oaTime_coerce(PyObject** ob1,PyObject** ob2)
{
  PyParamoaTime p1;
  int s1=PyoaTime_Convert(*ob1,&p1);
  if (s1==0) return 1;
  if (PyInt_Check(*ob2)) {
    *ob1 = PyInt_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyLong_Check(*ob2)) {
    *ob1 = PyLong_FromLong(p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  else if (PyFloat_Check(*ob2)) {
    *ob1 = PyFloat_FromDouble((double)p1.Data());
    Py_INCREF(*ob2);
    return 0;
  }
  return 1; /* Can't do it */
}
// -----------------------------------------------------
static PyObject* oaTime_int(PyObject* ob)
{
  PyParamoaTime p;
  int s=PyoaTime_Convert(ob,&p);
  assert(s!=0);
  return PyInt_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaTime_long(PyObject* ob)
{
  PyParamoaTime p;
  int s=PyoaTime_Convert(ob,&p);
  assert(s!=0);
  return PyLong_FromLong(p.Data());
}
// -----------------------------------------------------
static PyObject* oaTime_float(PyObject* ob)
{
  PyParamoaTime p;
  int s=PyoaTime_Convert(ob,&p);
  assert(s!=0);
  return PyFloat_FromDouble((double)p.Data());
}
// -----------------------------------------------------
PyNumberMethods oaTimeAsNumber = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  0, /*nb_divide*/
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  (inquiry)oaTime_nonzero, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  oaTime_coerce, /*nb_coerce*/
  (unaryfunc)oaTime_int, /*nb_int*/
  (unaryfunc)oaTime_long, /*nb_long*/
  (unaryfunc)oaTime_float, /*nb_float*/
  0, /*nb_oct*/
  0, /*nb_hex*/

  0, /*ng_inplace_add*/
  0, /*ng_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  0, /*nb_inplace_divide*/
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/

  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
};

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTime_doc[] =
"Class: oaTime\n"
"  The oaTime utility class represents 2 Byte numbers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaTime()\n"
"    Signature: oaTime||\n"
"    This is the default constructor for the oaTime class. This constructor creates a zero valued oaTime.\n"
"  Paramegers: (oaTime)\n"
"    Calls: (const oaTime&)\n"
"    Signature: oaTime||cref-oaTime,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTime_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTime",
    sizeof(PyoaTimeObject),
    0,
    oaTime_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaTime_compare,    /* tp_compare */
    oaTime_repr,      /* tp_repr */
    &oaTimeAsNumber,    /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaTime_repr,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTime_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaTime_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaTime_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTime_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTime_Type)<0) {
      printf("** PyType_Ready failed for: oaTime\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTime",
           (PyObject*)(&PyoaTime_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTime\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

// ==================================================================
// Main module for: openaccess
// ==================================================================


#include "pyoa_header.h"

static char openaccess_doc[]="openaccess exentions module";

#ifdef WIN32
#define LONG64(x) x##i64
#else
#define LONG64(x) x##LL
#endif


// ------------------------------------------------------------------
//  Function Methods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char openaccess_oaBaseInit_doc[] = 
"Class: openaccess, Function: oaBaseInit\n"
"  Paramegers: ()\n"
"    Calls: void oaBaseInit()\n"
"    Signature: oaBaseInit|void-void|simple-oaUInt4,simple-oaUInt4,simple-oaUInt4,\n"
"    BrowseData: 0\n"
"    oaBaseInit1\n"
"    This function initializes the oaBase package. The oaDesignInit, oaDMInit, and oaTechInit initialization calls automatically include the oaBaseInit initialization call. Applications do not need to call oaBaseInit if they are not using the databases (even if they are using the oaBase classes).\n"
"    This function lets calling functions specify the API revisions and the data model revision that they support. Refer to Initialization Calls and Compatibility for OpenAccess Applications and Data in the Programmers Guide for more information about API revisions and data model revisions.\n"
"    apiMajorRev\n"
"    Specifies the major revision of the OpenAccess shared libraries that were used to compile the application. Typically, this should be set to oacAPIMajorRevNumber to indicate that the application uses the version number from the current version of OpenAccess.\n"
"    apiMinorRev\n"
"    Specifies the minor revision of the OpenAccess shared libraries that were used to compile the application. Typically, this should be set to oacAPIMinorRevNumber to indicate that the application uses the version number from the current version of OpenAccess.\n"
"    dataModelRev\n"
"    Specifies the version of the OpenAccess data model that is supported. Applications should explicitly specify this argument to indicate the OpenAccess features that they support. For information about the OpenAccess features that are available in a particular dataModelRev, refer to the OpenAccess 2.2 Feature List .\n"
"    oacInvalidMajorAPIRev\n"
"    The major revision number of the OpenAccess shared libraries that were used to compile the application does not match the major revision number of the OpenAccess shared libraries that the application is running.\n"
"    oacInvalidAPIRev\n"
"    The minor revision number of the OpenAccess shared libraries that were used to compile the application is higher than the minor revision number of the OpenAccess shared libraries that the application is running.\n"
"    oacInvalidDataModelRev\n"
"    The application revision number passed to this function is higher than the data model supported by the OpenAccess shared libraries that the application is running.\n"
"    oacInconsistentDataModelRev\n"
"    The data model revision numbers among the components of the caller's application are not consistent.\n"
;

extern PyObject* openaccess_oaBaseInit(PyObject *self, PyObject *args);

// ------------------------------------------------------------------
static char openaccess_oaDMInit_doc[] = 
"Class: openaccess, Function: oaDMInit\n"
"  Paramegers: ()\n"
"    Calls: void oaDMInit()\n"
"    Signature: oaDMInit|void-void|simple-oaUInt4,simple-oaUInt4,simple-oaUInt4,\n"
"    BrowseData: 0\n"
"    oaDMInit1\n"
"    This function initializes the DM package.\n"
"    This function lets calling functions specify the API revisions and the data model revision that they support. Refer to Compatibility for OpenAccess Applications and Data in the Programmers Guide for more information about API revisions and data model revisions.\n"
"    apiMajorRev\n"
"    Specifies the major revision of the OpenAccess shared libraries that were used to compile the application. Typically, this should be set to oacAPIMajorRevNumber to indicate that the application uses the version number from the current version of OpenAccess.\n"
"    apiMinorRev\n"
"    Specifies the minor revision of the OpenAccess shared libraries that were used to compile the application. Typically, this should be set to oacAPIMinorRevNumber to indicate that the application uses the version number from the current version of OpenAccess.\n"
"    dataModelRev\n"
"    Specifies the version of the OpenAccess data model that is supported. Applications should explicitly specify this argument to indicate the OpenAccess features that they support. For information about the OpenAccess features that are available in a particular dataModelRev, refer to the OpenAccess 2.2 Feature List .\n"
"    oacInvalidMajorAPIRev\n"
"    The major revision number of the OpenAccess shared libraries that were used to compile the application does not match the major revision number of the OpenAccess shared libraries that the application is running against.\n"
"    oacInvalidAPIRev\n"
"    The minor revision number of the OpenAccess shared libraries that were used to compile the application is higher than the minor revision number of the OpenAccess shared libraries that the application is running against.\n"
"    oacInvalidDataModelRev\n"
"    The application revision number passed to this function is higher than the data model supported by the OpenAccess shared libraries that the application is running against.\n"
"    oacInconsistentDataModelRev\n"
"    The data model revision numbers among the components of the caller's application are not consistent.\n"
;

extern PyObject* openaccess_oaDMInit(PyObject *self, PyObject *args);

// ------------------------------------------------------------------
static char openaccess_oaDesignInit_doc[] = 
"Class: openaccess, Function: oaDesignInit\n"
"  Paramegers: ()\n"
"    Calls: void oaDesignInit()\n"
"    Signature: oaDesignInit|void-void|simple-oaUInt4,simple-oaUInt4,simple-oaUInt4,\n"
"    BrowseData: 0\n"
"    oaDesignInit1\n"
"    This function initializes the oaDesign package. Use this function if your application uses the design database. This function automatically initializes the Tech and DM packages on which it depends.\n"
"    This function lets calling functions specify the API revisions and the data model revision that they support. Refer to Compatibility for OpenAccess Applications and Data in the Programmers Guide for more information about API revisions and data model revisions.\n"
"    apiMajorRev\n"
"    Specifies the major revision of the OpenAccess shared libraries that were used to compile the application. Typically, this should be set to oacAPIMajorRevNumber to indicate that the application uses the version number from the current version of OpenAccess.\n"
"    apiMinorRev\n"
"    Specifies the minor revision of the OpenAccess shared libraries that were used to compile the application. Typically, this should be set to oacAPIMinorRevNumber to indicate that the application uses the version number from the current version of OpenAccess.\n"
"    dataModelRev\n"
"    Specifies the version of the OpenAccess data model that is supported. Applications should explicitly specify this argument to indicate the OpenAccess features that they support. For information about the OpenAccess features that are available in a particular dataModelRev, refer to the OpenAccess 2.2 Feature List .\n"
"    oacInvalidMajorAPIRev\n"
"    The major revision number of the OpenAccess shared libraries that were used to compile the application does not match the major revision number of the OpenAccess shared libraries that the application is running against.\n"
"    oacInvalidAPIRev\n"
"    The minor revision number of the OpenAccess shared libraries that were used to compile the application is higher than the minor revision number of the OpenAccess shared libraries that the application is running against.\n"
"    oacInvalidDataModelRev\n"
"    The application revision number passed to this function is higher than the data model supported by the OpenAccess shared libraries that the application is running against.\n"
"    oacInconsistentDataModelRev\n"
"    The data model revision numbers among the components of the caller's application are not consistent.\n"
;

extern PyObject* openaccess_oaDesignInit(PyObject *self, PyObject *args);

// ------------------------------------------------------------------
static char openaccess_oaIsFloatEqual_doc[] = 
"Class: openaccess, Function: oaIsFloatEqual\n"
"  Paramegers: (oaDouble,oaDouble)\n"
"    Calls: oaBoolean oaIsFloatEqual(oaDouble val1,oaDouble val2)\n"
"    Signature: oaIsFloatEqual|simple-oaBoolean|simple-oaDouble,simple-oaDouble,simple-oaDouble,\n"
"    Function oaIsFloatEqual\n"
"  Paramegers: (oaDouble,oaDouble,oaDouble)\n"
"    Calls: oaBoolean oaIsFloatEqual(oaDouble val1,oaDouble val2,oaDouble relTol)\n"
"    Signature: oaIsFloatEqual|simple-oaBoolean|simple-oaDouble,simple-oaDouble,simple-oaDouble,\n"
"    Function oaIsFloatEqual\n"
;

static PyObject*
openaccess_oaIsFloatEqual(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaDouble,oaDouble)
    {
        PyParamoaDouble p1;
        PyParamoaDouble p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaDouble_Convert,&p1,
              &PyoaDouble_Convert,&p2)) {
            oaBoolean result= (oaIsFloatEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaDouble,oaDouble,oaDouble)
    {
        PyParamoaDouble p1;
        PyParamoaDouble p2;
        PyParamoaDouble p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaDouble_Convert,&p1,
              &PyoaDouble_Convert,&p2,
              &PyoaDouble_Convert,&p3)) {
            oaBoolean result= (oaIsFloatEqual(p1.Data(),p2.Data(),p3.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: openaccess, function: oaIsFloatEqual, Choices are:\n"
        "    (oaDouble,oaDouble)\n"
        "    (oaDouble,oaDouble,oaDouble)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char openaccess_oaIsProcessActive_doc[] = 
"Class: openaccess, Function: oaIsProcessActive\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaBoolean oaIsProcessActive(oaUInt4 pid)\n"
"    Signature: oaIsProcessActive|simple-oaBoolean|simple-oaUInt4,\n"
"    Function oaIsProcessActive\n"
;

static PyObject*
openaccess_oaIsProcessActive(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaBoolean result= (oaIsProcessActive(p1.Data()));
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char openaccess_oaLog2_doc[] = 
"Class: openaccess, Function: oaLog2\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaUInt4 oaLog2(oaUInt4 num)\n"
"    Signature: oaLog2|simple-oaUInt4|simple-oaUInt4,\n"
"    Function oaLog2\n"
;

static PyObject*
openaccess_oaLog2(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaUInt4 result= (oaLog2(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char openaccess_oaRound_doc[] = 
"Class: openaccess, Function: oaRound\n"
"  Paramegers: (oaDouble)\n"
"    Calls: oaInt4 oaRound(oaDouble v)\n"
"    Signature: oaRound|simple-oaInt4|simple-oaDouble,\n"
"    Function oaRound\n"
;

static PyObject*
openaccess_oaRound(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDouble p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDouble_Convert,&p1)) {
        oaInt4 result= (oaRound(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char openaccess_oaRoundUpToPow2_doc[] = 
"Class: openaccess, Function: oaRoundUpToPow2\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaUInt4 oaRoundUpToPow2(oaUInt4 val)\n"
"    Signature: oaRoundUpToPow2|simple-oaUInt4|simple-oaUInt4,\n"
"    Function oaRoundUpToPow2\n"
;

static PyObject*
openaccess_oaRoundUpToPow2(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaUInt4 result= (oaRoundUpToPow2(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char openaccess_oaSleep_doc[] = 
"Class: openaccess, Function: oaSleep\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void oaSleep(oaUInt4 sec)\n"
"    Signature: oaSleep|void-void|simple-oaUInt4,\n"
"    Function oaSleep\n"
;

static PyObject*
openaccess_oaSleep(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaSleep(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char openaccess_oaStartDaemon_doc[] = 
"Class: openaccess, Function: oaStartDaemon\n"
"  Paramegers: ()\n"
"    Calls: void oaStartDaemon()\n"
"    Signature: oaStartDaemon|void-void|cptr-char,\n"
"    BrowseData: 0\n"
"    Function oaStartDaemon\n"
;

extern PyObject* openaccess_oaStartDaemon(PyObject *self, PyObject *args);

// ------------------------------------------------------------------
static char openaccess_oaTechInit_doc[] = 
"Class: openaccess, Function: oaTechInit\n"
"  Paramegers: ()\n"
"    Calls: void oaTechInit()\n"
"    Signature: oaTechInit|void-void|simple-oaUInt4,simple-oaUInt4,simple-oaUInt4,\n"
"    BrowseData: 0\n"
"    oaTechInit1\n"
"    This function initializes the Tech package. It also initializes the DM package on which it depends. If your application only accesses the technology database, use the initialization call oaTechInit.\n"
"    This function lets calling functions specify the API revisions and the data model revision that they support. Refer to Compatibility for OpenAccess Applications and Data in the Programmers Guide for more information about API revisions and data model revisions.\n"
"    apiMajorRev\n"
"    Specifies the major revision of the OpenAccess shared libraries that were used to compile the application. Typically, this should be set to oacAPIMajorRevNumber to indicate that the application uses the version number from the current version of OpenAccess.\n"
"    apiMinorRev\n"
"    Specifies the minor revision of the OpenAccess shared libraries that were used to compile the application. Typically, this should be set to oacAPIMinorRevNumber to indicate that the application uses the version number from the current version of OpenAccess.\n"
"    dataModelRev\n"
"    Specifies the version of the OpenAccess data model that is supported. Applications should explicitly specify this argument to indicate the OpenAccess features that they support. For information about the OpenAccess features that are available in a particular dataModelRev, refer to the OpenAccess 2.2 Feature List .\n"
"    oacInvalidMajorAPIRev\n"
"    The major revision number of the OpenAccess shared libraries that were used to compile the application does not match the major revision number of the OpenAccess shared libraries that the application is running against.\n"
"    oacInvalidAPIRev\n"
"    The minor revision number of the OpenAccess shared libraries that were used to compile the application is higher than the minor revision number of the OpenAccess shared libraries that the application is running against.\n"
"    oacInvalidDataModelRev\n"
"    The application revision number passed to this function is higher than the data model supported by the OpenAccess shared libraries that the application is running against.\n"
"    oacInconsistentDataModelRev\n"
"    The data model revision numbers among the components of the caller's application are not consistent.\n"
;

extern PyObject* openaccess_oaTechInit(PyObject *self, PyObject *args);

// ------------------------------------------------------------------
static char openaccess_oaWaferInit_doc[] = 
"Class: openaccess, Function: oaWaferInit\n"
"  Paramegers: ()\n"
"    Calls: void oaWaferInit()\n"
"    Signature: oaWaferInit|void-void|simple-oaUInt4,simple-oaUInt4,simple-oaUInt4,\n"
"    BrowseData: 0\n"
"    oaWaferInit1\n"
"    This function initializes the oaWafer package. It also initializes the Design package on which it depends. Note that the design package initializes the DM and Tech packages.\n"
"    This function lets calling functions specify the API revisions and the data model revision that they support. Refer to Compatibility for OpenAccess Applications and Data in the Programmers Guide for more information about API revisions and data model revisions.\n"
"    apiMajorRev\n"
"    Specifies the major revision of the OpenAccess shared libraries that were used to compile the application. Typically, this should be set to oacAPIMajorRevNumber to indicate that the application uses the version number from the current version of OpenAccess.\n"
"    apiMinorRev\n"
"    Specifies the minor revision of the OpenAccess shared libraries that were used to compile the application. Typically, this should be set to oacAPIMinorRevNumber to indicate that the application uses the version number from the current version of OpenAccess.\n"
"    dataModelRev\n"
"    Specifies the version of the OpenAccess data model that is supported. Applications should explicitly specify this argument to indicate the OpenAccess features that they support. For information about the OpenAccess features that are available in a particular dataModelRev, refer to the OpenAccess 2.2 Feature List .\n"
"    oacInvalidMajorAPIRev\n"
"    The major revision number of the OpenAccess shared libraries that were used to compile the application does not match the major revision number of the OpenAccess shared libraries that the application is running against.\n"
"    oacInvalidAPIRev\n"
"    The minor revision number of the OpenAccess shared libraries that were used to compile the application is higher than the minor revision number of the OpenAccess shared libraries that the application is running against.\n"
"    oacInvalidDataModelRev\n"
"    The application revision number passed to this function is higher than the data model supported by the OpenAccess shared libraries that the application is running against.\n"
"    oacInconsistentDataModelRev\n"
"    The data model revision numbers among the components of the caller's application are not consistent.\n"
;

extern PyObject* openaccess_oaWaferInit(PyObject *self, PyObject *args);


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef openaccess_methods[] = {
    {"oaBaseInit",(PyCFunction)openaccess_oaBaseInit,METH_VARARGS,openaccess_oaBaseInit_doc},
    {"oaDMInit",(PyCFunction)openaccess_oaDMInit,METH_VARARGS,openaccess_oaDMInit_doc},
    {"oaDesignInit",(PyCFunction)openaccess_oaDesignInit,METH_VARARGS,openaccess_oaDesignInit_doc},
    {"oaIsFloatEqual",(PyCFunction)openaccess_oaIsFloatEqual,METH_VARARGS,openaccess_oaIsFloatEqual_doc},
    {"oaIsProcessActive",(PyCFunction)openaccess_oaIsProcessActive,METH_VARARGS,openaccess_oaIsProcessActive_doc},
    {"oaLog2",(PyCFunction)openaccess_oaLog2,METH_VARARGS,openaccess_oaLog2_doc},
    {"oaRound",(PyCFunction)openaccess_oaRound,METH_VARARGS,openaccess_oaRound_doc},
    {"oaRoundUpToPow2",(PyCFunction)openaccess_oaRoundUpToPow2,METH_VARARGS,openaccess_oaRoundUpToPow2_doc},
    {"oaSleep",(PyCFunction)openaccess_oaSleep,METH_VARARGS,openaccess_oaSleep_doc},
    {"oaStartDaemon",(PyCFunction)openaccess_oaStartDaemon,METH_VARARGS,openaccess_oaStartDaemon_doc},
    {"oaTechInit",(PyCFunction)openaccess_oaTechInit,METH_VARARGS,openaccess_oaTechInit_doc},
    {"oaWaferInit",(PyCFunction)openaccess_oaWaferInit,METH_VARARGS,openaccess_oaWaferInit_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Initialization Function:
// ------------------------------------------------------------------


static void commoninit(PyObject* mod,PyObject* dict)
{

  // Enter Defines in the dictionary
  PyObject* def;
  // OpenAccess Version Defines
  def=PyString_FromString("226.20080327");
  PyDict_SetItemString(dict,"oaVersion",def);
  Py_DECREF(def);
  def=PyString_FromString("226.20080508");
  PyDict_SetItemString(dict,"pyoaVersion",def);
  Py_DECREF(def);


  // OpenAccess Exception
  PyExec_OpenAccess=PyErr_NewException("openaccess.error",NULL,NULL);
  if (PyExec_OpenAccess==NULL) return;
  PyDict_SetItemString(dict,"error",PyExec_OpenAccess);
  PyDict_SetItemString(dict,"oaException",PyExec_OpenAccess);
  Py_DECREF(PyExec_OpenAccess);
  def=PyInt_FromLong(0x0010);
  PyDict_SetItemString(dict,"oacInstTermIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(100);
  PyDict_SetItemString(dict,"oavDefaultGrid",def);
  Py_DECREF(def);
  def=PyInt_FromLong(116);
  PyDict_SetItemString(dict,"oavNumTechMsgIds",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0004);
  PyDict_SetItemString(dict,"oacNetIterBundle",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oavMemberLastInName",def);
  Py_DECREF(def);
  def=PyInt_FromLong(16);
  PyDict_SetItemString(dict,"oavBaseNumDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oavOccIterCrossDesign",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oacGuideIterEndLayer",def);
  Py_DECREF(def);
  def=PyString_FromString("namespace oaCommon {");
  PyDict_SetItemString(dict,"BEGIN_OA_COMMON_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(6);
  PyDict_SetItemString(dict,"oavNumPrefRoutingDirTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0004);
  PyDict_SetItemString(dict,"oacGroupIterModDomain",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffffffffffff));
  PyDict_SetItemString(dict,"oavMax_9Byte_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x001f);
  PyDict_SetItemString(dict,"oacTermIterMask",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0004);
  PyDict_SetItemString(dict,"oacLeft",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumEndStyles",def);
  Py_DECREF(def);
  def=PyInt_FromLong(6);
  PyDict_SetItemString(dict,"oavNumDBTypes",def);
  Py_DECREF(def);
  def=PyFloat_FromDouble(3.14159265358979323846264338);
  PyDict_SetItemString(dict,"M_PI",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x2d);
  PyDict_SetItemString(dict,"oav_7Byte_G_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000010);
  PyDict_SetItemString(dict,"oacVCStatusDeleted",def);
  Py_DECREF(def);
  def=PyString_FromString(":");
  PyDict_SetItemString(dict,"oacInternalBitDelimiter",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacTechValueIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumVCObserverResults",def);
  Py_DECREF(def);
  def=PyFloat_FromDouble(1.57079632679489661923132169);
  PyDict_SetItemString(dict,"M_PI_2",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0x7ffffffffff));
  PyDict_SetItemString(dict,"oavMax_6Byte_U8",def);
  Py_DECREF(def);
  def=PyFloat_FromDouble(0.78539816339744830961566085);
  PyDict_SetItemString(dict,"M_PI_4",def);
  Py_DECREF(def);
  def=PyFloat_FromDouble(0.39269908169872415480783042);
  PyDict_SetItemString(dict,"M_PI_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(11);
  PyDict_SetItemString(dict,"oavNumReservedViewTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumScanChainSetTypes",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffff));
  PyDict_SetItemString(dict,"oavPurposeNumberDrawing",def);
  Py_DECREF(def);
  def=PyInt_FromLong(25);
  PyDict_SetItemString(dict,"oavNumLayerOps",def);
  Py_DECREF(def);
  def=PyInt_FromLong(4);
  PyDict_SetItemString(dict,"oavNumNewDesignDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacAnalysisLibIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0d);
  PyDict_SetItemString(dict,"oav_7Byte_G_Pos",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0x3ffffffffff));
  PyDict_SetItemString(dict,"oavMax_6Byte_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x20);
  PyDict_SetItemString(dict,"oav_1Byte_N_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x10);
  PyDict_SetItemString(dict,"oav_1Byte_N_Neg_4",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffff));
  PyDict_SetItemString(dict,"oacAnyLayerNum",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x04);
  PyDict_SetItemString(dict,"oav_3Byte",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumClusterTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x10);
  PyDict_SetItemString(dict,"oav_9Byte_N_Pos",def);
  Py_DECREF(def);
  def=PyString_FromString("MaxNameLength");
  PyDict_SetItemString(dict,"oacDMSystemMaxNameLengthMetric",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oavMemberFirstInName",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumRowFlipTypes",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffff));
  PyDict_SetItemString(dict,"oavMax_5Byte_U4",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0x7ffffffff));
  PyDict_SetItemString(dict,"oavMax_5Byte_U8",def);
  Py_DECREF(def);
  def=PyString_FromString("#");
  PyDict_SetItemString(dict,"oacInternalHexDelimiter",def);
  Py_DECREF(def);
  def=PyInt_FromLong(10);
  PyDict_SetItemString(dict,"oavNumSigTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(1);
  PyDict_SetItemString(dict,"oacTechObserverVersion2",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0);
  PyDict_SetItemString(dict,"oacTechObserverVersion1",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oacViaIterNetPins",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oavNodeIterConnNodes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(9);
  PyDict_SetItemString(dict,"oavNumSimpleConstraintTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x13);
  PyDict_SetItemString(dict,"oav_2Byte_G_Neg_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x23);
  PyDict_SetItemString(dict,"oav_2Byte_G_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0);
  PyDict_SetItemString(dict,"oavOccTraverseDefault",def);
  Py_DECREF(def);
  def=PyInt_FromLong(7);
  PyDict_SetItemString(dict,"oavNumUserUnitsTypes",def);
  Py_DECREF(def);
  def=PyString_FromString("}");
  PyDict_SetItemString(dict,"END_OA_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0000);
  PyDict_SetItemString(dict,"oacNone",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacLayerIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0000);
  PyDict_SetItemString(dict,"oacViaIterNetOnly",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacShapeIterNetRoutes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0010);
  PyDict_SetItemString(dict,"oacTermIterNotImplicit",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffff));
  PyDict_SetItemString(dict,"oacInvalidDeviceID",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000100);
  PyDict_SetItemString(dict,"oacVCStatusConflict",def);
  Py_DECREF(def);
  def=PyInt_FromLong(21);
  PyDict_SetItemString(dict,"oavNumSessionDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000080);
  PyDict_SetItemString(dict,"oacVCStatusMerged",def);
  Py_DECREF(def);
  def=PyInt_FromLong(24);
  PyDict_SetItemString(dict,"oavNumConstraintParamTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumMarkerDeleteWhenTypes",def);
  Py_DECREF(def);
  def=PyString_FromString(",");
  PyDict_SetItemString(dict,"oacInternalNameDelimiter",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacInstIterSingleBit",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x26);
  PyDict_SetItemString(dict,"oav_4Byte_N_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(7);
  PyDict_SetItemString(dict,"oavNumTermTypeEnums",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x16);
  PyDict_SetItemString(dict,"oav_4Byte_N_Neg_4",def);
  Py_DECREF(def);
  def=PyString_FromString("namespace oaPlugIn {");
  PyDict_SetItemString(dict,"BEGIN_OA_PLUGIN_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x30);
  PyDict_SetItemString(dict,"oav_9Byte_N_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0b);
  PyDict_SetItemString(dict,"oav_6Byte_G_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0);
  PyDict_SetItemString(dict,"oavOccTraversePostOrderShift",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumGroupTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacTechConstraintIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumTextDisplayFormats",def);
  Py_DECREF(def);
  def=PyInt_FromLong(271);
  PyDict_SetItemString(dict,"oavNumObjectTypes",def);
  Py_DECREF(def);
  def=PyString_FromString("2.2x");
  PyDict_SetItemString(dict,"OA_STREAM_NAME",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x23);
  PyDict_SetItemString(dict,"oacProdStreamRevNumber",def);
  Py_DECREF(def);
  def=PyInt_FromLong(189);
  PyDict_SetItemString(dict,"oavNumBaseMsgIds",def);
  Py_DECREF(def);
  def=PyInt_FromLong(14);
  PyDict_SetItemString(dict,"oavNumMaterialTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0e);
  PyDict_SetItemString(dict,"oav_8Byte_N_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumDerivedLayerConnectivityTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x2b);
  PyDict_SetItemString(dict,"oav_6Byte_G_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacOpPointIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00);
  PyDict_SetItemString(dict,"oav_1Byte_N_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumRouteMethods",def);
  Py_DECREF(def);
  def=PyInt_FromLong(8);
  PyDict_SetItemString(dict,"oavNumRangeTypes",def);
  Py_DECREF(def);
  def=PyString_FromString("/");
  PyDict_SetItemString(dict,"oacInternalHierDelimiter",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumNameTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0040);
  PyDict_SetItemString(dict,"oacNetIterGlobal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumSiteDefTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x10);
  PyDict_SetItemString(dict,"oavSignMask4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumExtrapolateTypes",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xfffffff9));
  PyDict_SetItemString(dict,"oavPurposeNumberGapFill",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x2a);
  PyDict_SetItemString(dict,"oav_6Byte_N_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacTechConstraintParamIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacSiteDefIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000004);
  PyDict_SetItemString(dict,"oacVCStatusUpToDate",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumBlockDomainVisibilityTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x08);
  PyDict_SetItemString(dict,"oav_5Byte_N_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumPlacementStatusTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x40000000);
  PyDict_SetItemString(dict,"oavXYTreeNodeIsHorizontal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumRowSpacingTypes",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0x7ffffffffffff));
  PyDict_SetItemString(dict,"oavMax_7Byte_U8",def);
  Py_DECREF(def);
  def=PyString_FromString("SupportsViewFiles");
  PyDict_SetItemString(dict,"oacDMSystemSupportsViewFilesCap",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x7ffffff);
  PyDict_SetItemString(dict,"oavMax_4Byte_U8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x02);
  PyDict_SetItemString(dict,"oav_2Byte",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumRouteStatusTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x21);
  PyDict_SetItemString(dict,"oav_1Byte_G_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacPurposeIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x11);
  PyDict_SetItemString(dict,"oav_1Byte_G_Neg_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(9);
  PyDict_SetItemString(dict,"oavNumBlockageTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumLibAccessEnums",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x20);
  PyDict_SetItemString(dict,"oavSignMask8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0f);
  PyDict_SetItemString(dict,"oav_8Byte_G_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0c);
  PyDict_SetItemString(dict,"oav_7Byte_N_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x007f);
  PyDict_SetItemString(dict,"oacNetIterMask",def);
  Py_DECREF(def);
  def=PyString_FromString("using namespace oaPlugIn;");
  PyDict_SetItemString(dict,"USE_OA_PLUGIN_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0008);
  PyDict_SetItemString(dict,"oacRight",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x03);
  PyDict_SetItemString(dict,"oav_2Byte_G_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0c);
  PyDict_SetItemString(dict,"oav_7Byte",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacTechDerivedLayerParamIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oacShapeIterNetPins",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000008);
  PyDict_SetItemString(dict,"oacVCStatusAdded",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumDesignAttrTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oacTermIterSingleBit",def);
  Py_DECREF(def);
  def=PyInt_FromLong(54);
  PyDict_SetItemString(dict,"oavNumLayerConstraintTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(35);
  PyDict_SetItemString(dict,"oacProdStreamAPIRevNumber",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x3ff);
  PyDict_SetItemString(dict,"oavMax_2Byte_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumViaDirectionTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x7ff);
  PyDict_SetItemString(dict,"oavMax_2Byte_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacViaIterNetRoutes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x12);
  PyDict_SetItemString(dict,"oav_2Byte_N_Neg_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0xfff);
  PyDict_SetItemString(dict,"oavMax_2Byte_U4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(4);
  PyDict_SetItemString(dict,"oavNumWaferUnits",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacViaDefIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x7ff);
  PyDict_SetItemString(dict,"oavMax_2Byte_U8",def);
  Py_DECREF(def);
  def=PyString_FromString("p084");
  PyDict_SetItemString(dict,"OA_BUILD_NAME",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x22);
  PyDict_SetItemString(dict,"oav_2Byte_N_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000020);
  PyDict_SetItemString(dict,"oacVCStatusModified",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oacInstTermIterNotImplicit",def);
  Py_DECREF(def);
  def=PyInt_FromLong(6);
  PyDict_SetItemString(dict,"oavNumDerivedLayerParamTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavOccTraverseImplicitShift",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumSourceTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x07);
  PyDict_SetItemString(dict,"oav_4Byte_G_Pos",def);
  Py_DECREF(def);
  def=PyString_FromString("oaUInt4(-1)");
  PyDict_SetItemString(dict,"oacNegativeOne",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0f);
  PyDict_SetItemString(dict,"oavCodeMaskU4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(4);
  PyDict_SetItemString(dict,"oavNumDomains",def);
  Py_DECREF(def);
  def=PyInt_FromLong(4);
  PyDict_SetItemString(dict,"oavNumNewSessionDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumConnStatusTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacTechConstraintGroupIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0000);
  PyDict_SetItemString(dict,"oacTechIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumNewWaferDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oavOccTraversePostOrder",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x2f);
  PyDict_SetItemString(dict,"oav_8Byte_G_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumClearanceMeasureTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x02);
  PyDict_SetItemString(dict,"oav_2Byte_N_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2000);
  PyDict_SetItemString(dict,"oavTechMsgIdStartValue",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0100);
  PyDict_SetItemString(dict,"oacTermIterEquivNets",def);
  Py_DECREF(def);
  def=PyInt_FromLong(9);
  PyDict_SetItemString(dict,"oavNumMarkerSeverityTypes",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xfffffffe));
  PyDict_SetItemString(dict,"oavPurposeNumberFill",def);
  Py_DECREF(def);
  def=PyString_FromString("/");
  PyDict_SetItemString(dict,"oacPathSeparator",def);
  Py_DECREF(def);
  def=PyInt_FromLong(13);
  PyDict_SetItemString(dict,"oavNumLayerPairConstraintTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(77);
  PyDict_SetItemString(dict,"oavNumDesignDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oacBottom",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x01);
  PyDict_SetItemString(dict,"oav_1Byte_G_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x10);
  PyDict_SetItemString(dict,"oav_9Byte",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumBitOrders",def);
  Py_DECREF(def);
  def=PyInt_FromLong(16);
  PyDict_SetItemString(dict,"oavNumCellTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(6);
  PyDict_SetItemString(dict,"oavNumNetAttrTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1e);
  PyDict_SetItemString(dict,"oavSizeMask8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0e);
  PyDict_SetItemString(dict,"oavSizeMask4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacTechConstraintGroupIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x06);
  PyDict_SetItemString(dict,"oav_4Byte_N_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(9);
  PyDict_SetItemString(dict,"oavMaxPackedWidth",def);
  Py_DECREF(def);
  def=PyInt_FromLong(9);
  PyDict_SetItemString(dict,"oavNumReticleUsageEnums",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0020);
  PyDict_SetItemString(dict,"oacNetIterNotImplicit",def);
  Py_DECREF(def);
  def=PyString_FromString("/");
  PyDict_SetItemString(dict,"oacPathSeparatorChar",def);
  Py_DECREF(def);
  def=PyInt_FromLong(-1);
  PyDict_SetItemString(dict,"oacSocketError",def);
  Py_DECREF(def);
  def=PyInt_FromLong(4000);
  PyDict_SetItemString(dict,"oavWaferMsgIdStartValue",def);
  Py_DECREF(def);
  def=PyInt_FromLong(575);
  PyDict_SetItemString(dict,"oavNumDesignMsgIds",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumNewDMDataTypes",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xfffffffffffffffe));
  PyDict_SetItemString(dict,"oacDeletedLongIndex",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacPurposeIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x31);
  PyDict_SetItemString(dict,"oav_9Byte_G_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0a);
  PyDict_SetItemString(dict,"oav_6Byte",def);
  Py_DECREF(def);
  def=PyString_FromString("}");
  PyDict_SetItemString(dict,"END_OA_UTIL_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacSiteDefIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacAnalysisLibIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumDistanceMeasureTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(15);
  PyDict_SetItemString(dict,"oavNumVCCaps",def);
  Py_DECREF(def);
  def=PyInt_FromLong(1);
  PyDict_SetItemString(dict,"oavOccTraverseDesignsShift",def);
  Py_DECREF(def);
  def=PyString_FromString("0.0001f");
  PyDict_SetItemString(dict,"defRelTol",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacInstTermIterSingleBit",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumLibModes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x05);
  PyDict_SetItemString(dict,"oav_3Byte_G_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x06);
  PyDict_SetItemString(dict,"oav_4Byte",def);
  Py_DECREF(def);
  def=PyInt_FromLong(27);
  PyDict_SetItemString(dict,"oavNumTechDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacGuideIterBeginLayer",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000040);
  PyDict_SetItemString(dict,"oacVCStatusLocked",def);
  Py_DECREF(def);
  def=PyInt_FromLong(100);
  PyDict_SetItemString(dict,"oacBranchStreamNumberOffset",def);
  Py_DECREF(def);
  def=PyString_FromString("MaxCellViews");
  PyDict_SetItemString(dict,"oacDMSystemMaxCellViewsMetric",def);
  Py_DECREF(def);
  def=PyString_FromString("namespace oaUtil {");
  PyDict_SetItemString(dict,"BEGIN_OA_UTIL_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00);
  PyDict_SetItemString(dict,"oav_1Byte",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0008);
  PyDict_SetItemString(dict,"oacGroupIterOccDomain",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumInterpolateTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(6);
  PyDict_SetItemString(dict,"oavNumWaferFeatures",def);
  Py_DECREF(def);
  def=PyInt_FromLong(9);
  PyDict_SetItemString(dict,"oavNumRouteTopologyEnums",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x40000000);
  PyDict_SetItemString(dict,"oavXYTreeNodeSplitHasFailed",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffff));
  PyDict_SetItemString(dict,"oacCMapNoSupplyDemandSet",def);
  Py_DECREF(def);
  def=PyInt_FromLong(107);
  PyDict_SetItemString(dict,"oavNumDMMsgIds",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffffffffffff));
  PyDict_SetItemString(dict,"oacNullLongIndex",def);
  Py_DECREF(def);
  def=PyInt_FromLong(14);
  PyDict_SetItemString(dict,"oavNumDMDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(9);
  PyDict_SetItemString(dict,"oavNumFonts",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumDMLockStatus",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1f);
  PyDict_SetItemString(dict,"oavCodeMaskU8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumGroupDeleteWhenEnums",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oacDataModelRevNumber",def);
  Py_DECREF(def);
  def=PyInt_FromLong(9);
  PyDict_SetItemString(dict,"oavNumTextAligns",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000001);
  PyDict_SetItemString(dict,"oacVCStatusControlled",def);
  Py_DECREF(def);
  def=PyInt_FromLong(8);
  PyDict_SetItemString(dict,"oavNumOrientEnums",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacTermIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(1000);
  PyDict_SetItemString(dict,"oavDesignMsgIdStartValue",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xfffffffb));
  PyDict_SetItemString(dict,"oavPurposeNumberOPCAntiSerif",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumNewLibDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x2);
  PyDict_SetItemString(dict,"oavOccTraverseDesigns",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffff));
  PyDict_SetItemString(dict,"oacInvalidNodeID",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x14);
  PyDict_SetItemString(dict,"oav_3Byte_N_Neg_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0004);
  PyDict_SetItemString(dict,"oacTermIterBundle",def);
  Py_DECREF(def);
  def=PyString_FromString("[");
  PyDict_SetItemString(dict,"oacInternalOpenBus",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x11);
  PyDict_SetItemString(dict,"oav_9Byte_G_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(8);
  PyDict_SetItemString(dict,"oavNumNewTechDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(16);
  PyDict_SetItemString(dict,"oavDesignObjectIterDataSize",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0);
  PyDict_SetItemString(dict,"oacObserverRevision",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacViaSpecIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(7);
  PyDict_SetItemString(dict,"oavNumParamTypes",def);
  Py_DECREF(def);
  def=PyString_FromString("UINT_MAX");
  PyDict_SetItemString(dict,"oacInvalidSocketAddress",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3000);
  PyDict_SetItemString(dict,"oavDMMsgIdStartValue",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumSymmetryTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumLibAccessLevels",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oacGroupIterBlockDomain",def);
  Py_DECREF(def);
  def=PyInt_FromLong(4);
  PyDict_SetItemString(dict,"oavNumAntennaModelEnums",def);
  Py_DECREF(def);
  def=PyString_FromString("}");
  PyDict_SetItemString(dict,"END_OA_COMMON_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(23);
  PyDict_SetItemString(dict,"oavNumWaferDataTypes",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xFFFFFFFF));
  PyDict_SetItemString(dict,"oacVCStatusAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacViaSpecIterLocal",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0x80000000));
  PyDict_SetItemString(dict,"oavXYTreeNodeBBoxIsInvalid",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumDesignViewTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumVCMessageTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0003);
  PyDict_SetItemString(dict,"oacInstIterMask",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xfffffffc));
  PyDict_SetItemString(dict,"oavPurposeNumberOPCSerif",def);
  Py_DECREF(def);
  def=PyInt_FromLong(6);
  PyDict_SetItemString(dict,"oavNumInstAttrTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacLayerIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(4);
  PyDict_SetItemString(dict,"oavNumPinConnectMethodTypes",def);
  Py_DECREF(def);
  def=PyString_FromString("MAXHOSTNAMELEN");
  PyDict_SetItemString(dict,"oacHostNameLength",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x19);
  PyDict_SetItemString(dict,"oav_5Byte_G_Neg_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000200);
  PyDict_SetItemString(dict,"oacVCStatusMissing",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000400);
  PyDict_SetItemString(dict,"oacVCStatusRemote",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x27);
  PyDict_SetItemString(dict,"oav_4Byte_G_Neg_8",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffffffffffff));
  PyDict_SetItemString(dict,"oavMax_9Byte_U8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x00000002);
  PyDict_SetItemString(dict,"oacVCStatusEditable",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x17);
  PyDict_SetItemString(dict,"oav_4Byte_G_Neg_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x29);
  PyDict_SetItemString(dict,"oav_5Byte_G_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x09);
  PyDict_SetItemString(dict,"oav_5Byte_G_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x2c);
  PyDict_SetItemString(dict,"oav_7Byte_N_Neg_8",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0x7ffffffffffffff));
  PyDict_SetItemString(dict,"oavMax_8Byte_U8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0004);
  PyDict_SetItemString(dict,"oacInstUsageJTag",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x7ffffff);
  PyDict_SetItemString(dict,"oavMax_4Byte_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0);
  PyDict_SetItemString(dict,"oavBaseMsgIdStartValue",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacTechConstraintIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x3ffffff);
  PyDict_SetItemString(dict,"oavMax_4Byte_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x2e);
  PyDict_SetItemString(dict,"oav_8Byte_N_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(12);
  PyDict_SetItemString(dict,"oavNumVCOperations",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0010);
  PyDict_SetItemString(dict,"oacNetIterPreferred",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacInstUsageFeedthru",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0013);
  PyDict_SetItemString(dict,"oacInstTermIterMask",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0xfffffff);
  PyDict_SetItemString(dict,"oavMax_4Byte_U4",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffff));
  PyDict_SetItemString(dict,"oacUnsetMaskNumber",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumLayerArrayConstraintTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(14);
  PyDict_SetItemString(dict,"oavNumViaParamTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x24);
  PyDict_SetItemString(dict,"oav_3Byte_N_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x08);
  PyDict_SetItemString(dict,"oav_5Byte",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacNetIterAll",def);
  Py_DECREF(def);
  def=PyString_FromString("Fri Mar 7 00:00:21 2008");
  PyDict_SetItemString(dict,"OA_BUILD_TIME",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x7);
  PyDict_SetItemString(dict,"oavMax_1Byte_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oacInstIterNotImplicit",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x3);
  PyDict_SetItemString(dict,"oavMax_1Byte_8",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffff));
  PyDict_SetItemString(dict,"oacCMapNoCellsDefined",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumFigGroupStatusTypes",def);
  Py_DECREF(def);
  def=PyString_FromString("using namespace oaCommon;");
  PyDict_SetItemString(dict,"USE_OA_COMMON_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0004);
  PyDict_SetItemString(dict,"oacInstTermIterEquivNets",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumRoutePatternTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x04);
  PyDict_SetItemString(dict,"oav_3Byte_N_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacViaDefIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x3fffffff);
  PyDict_SetItemString(dict,"oavXYTreeNodeMidChildMask",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0000);
  PyDict_SetItemString(dict,"oacInstIterAll",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xfffffffe));
  PyDict_SetItemString(dict,"oacDeletedIndex",def);
  Py_DECREF(def);
  def=PyInt_FromLong(16);
  PyDict_SetItemString(dict,"oavNumCategorys",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumVersionComps",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacGroupIterNoDomain",def);
  Py_DECREF(def);
  def=PyInt_FromLong(31);
  PyDict_SetItemString(dict,"oacTechConstraintIterFlagShift",def);
  Py_DECREF(def);
  def=PyInt_FromLong(1);
  PyDict_SetItemString(dict,"oavNumAssignmentAttrTypes",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xfffffff8));
  PyDict_SetItemString(dict,"oavPurposeNumberRedundant",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffff));
  PyDict_SetItemString(dict,"oacNullIndex",def);
  Py_DECREF(def);
  def=PyString_FromString("appObject");
  PyDict_SetItemString(dict,"oavBaseAppObjectDataTypeName",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xfffffffd));
  PyDict_SetItemString(dict,"oavPurposeNumberSlot",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0xf);
  PyDict_SetItemString(dict,"oavMax_1Byte_U4",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xfffffffa));
  PyDict_SetItemString(dict,"oavPurposeNumberAnnotation",def);
  Py_DECREF(def);
  def=PyString_FromString("]");
  PyDict_SetItemString(dict,"oacInternalCloseBus",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x7);
  PyDict_SetItemString(dict,"oavMax_1Byte_U8",def);
  Py_DECREF(def);
  def=PyString_FromString("*");
  PyDict_SetItemString(dict,"oacInternalRepeat",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacTechIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0e);
  PyDict_SetItemString(dict,"oav_8Byte",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0a);
  PyDict_SetItemString(dict,"oav_6Byte_N_Pos",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0000);
  PyDict_SetItemString(dict,"oacShapeIterNetOnly",def);
  Py_DECREF(def);
  def=PyString_FromString("}");
  PyDict_SetItemString(dict,"END_OA_PLUGIN_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x01);
  PyDict_SetItemString(dict,"oavGridMask",def);
  Py_DECREF(def);
  def=PyInt_FromLong(16);
  PyDict_SetItemString(dict,"oavMarkerIterDataSize",def);
  Py_DECREF(def);
  def=PyInt_FromLong(4);
  PyDict_SetItemString(dict,"oavNumPathStyles",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacTechConstraintParamIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0001);
  PyDict_SetItemString(dict,"oacTop",def);
  Py_DECREF(def);
  def=PyString_FromString("UINT_MAX");
  PyDict_SetItemString(dict,"oacInvalidSocket",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x7ffff);
  PyDict_SetItemString(dict,"oavMax_3Byte_U8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0xfffff);
  PyDict_SetItemString(dict,"oavMax_3Byte_U4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x28);
  PyDict_SetItemString(dict,"oav_5Byte_N_Neg_8",def);
  Py_DECREF(def);
  def=PyString_FromString("namespace OpenAccess_4 {");
  PyDict_SetItemString(dict,"BEGIN_OA_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x18);
  PyDict_SetItemString(dict,"oav_5Byte_N_Neg_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(1000);
  PyDict_SetItemString(dict,"oacStreamRevNumberOffset",def);
  Py_DECREF(def);
  def=PyInt_FromLong(1);
  PyDict_SetItemString(dict,"oavNumInstTermAttrTypes",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0x80000000));
  PyDict_SetItemString(dict,"oacTechConstraintIterFlagMask",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1f);
  PyDict_SetItemString(dict,"oavCodeMask4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x3f);
  PyDict_SetItemString(dict,"oavCodeMask8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumSizeOps",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0xffffffff));
  PyDict_SetItemString(dict,"oavMax_5Byte_4",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0x3ffffffff));
  PyDict_SetItemString(dict,"oavMax_5Byte_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(10000);
  PyDict_SetItemString(dict,"oavUtilMsgIdStartValue",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x4);
  PyDict_SetItemString(dict,"oavOccTraverseImplicit",def);
  Py_DECREF(def);
  def=PyInt_FromLong(18);
  PyDict_SetItemString(dict,"oavNumLibDataTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacOpPointIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oacInstUsageSpare",def);
  Py_DECREF(def);
  def=PyInt_FromLong(52);
  PyDict_SetItemString(dict,"oavNumWaferMsgIds",def);
  Py_DECREF(def);
  def=PyString_FromString("PATH_MAX");
  PyDict_SetItemString(dict,"oacMaxProcHostNameLen",def);
  Py_DECREF(def);
  def=PyString_FromString("PATH_MAX");
  PyDict_SetItemString(dict,"oacMaxPathLen",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0002);
  PyDict_SetItemString(dict,"oacNetIterSingleBit",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x15);
  PyDict_SetItemString(dict,"oav_3Byte_G_Neg_4",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0x3ffffffffffffff));
  PyDict_SetItemString(dict,"oavMax_8Byte_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x25);
  PyDict_SetItemString(dict,"oav_3Byte_G_Neg_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumWidthLengthTableTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0000);
  PyDict_SetItemString(dict,"oacInstTermIterAllNotHidden",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0003);
  PyDict_SetItemString(dict,"oacGuideIterBeginAndEndLayers",def);
  Py_DECREF(def);
  def=PyInt_FromLong(279);
  PyDict_SetItemString(dict,"OA_BUILD_NUMBER",def);
  Py_DECREF(def);
  def=PyString_FromString("oaVersionedObserver");
  PyDict_SetItemString(dict,"oaObserver",def);
  Py_DECREF(def);
  def=PyInt_FromLong(8);
  PyDict_SetItemString(dict,"oavNumPurposeTypes",def);
  Py_DECREF(def);
  def=PyLong_FromLongLong(LONG64(0x3ffffffffffff));
  PyDict_SetItemString(dict,"oavMax_7Byte_8",def);
  Py_DECREF(def);
  def=PyString_FromString("PreservesFollowers");
  PyDict_SetItemString(dict,"oacDMSystemPreservesFollowersCap",def);
  Py_DECREF(def);
  def=PyInt_FromLong(4);
  PyDict_SetItemString(dict,"oavNumDataModelModTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumTermAttrTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(4);
  PyDict_SetItemString(dict,"oacAPIMajorRevNumber",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x1);
  PyDict_SetItemString(dict,"oacTechDerivedLayerParamIterLocal",def);
  Py_DECREF(def);
  def=PyInt_FromLong(2);
  PyDict_SetItemString(dict,"oavNumEndpointTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(3);
  PyDict_SetItemString(dict,"oavNumAlignmentTypes",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x3ffff);
  PyDict_SetItemString(dict,"oavMax_3Byte_8",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x23);
  PyDict_SetItemString(dict,"oacAPIMinorRevNumber",def);
  Py_DECREF(def);
  def=PyString_FromString("using namespace OpenAccess_4;");
  PyDict_SetItemString(dict,"USE_OA_NAMESPACE",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x0);
  PyDict_SetItemString(dict,"oacTechValueIterAll",def);
  Py_DECREF(def);
  def=PyInt_FromLong(0x7ffff);
  PyDict_SetItemString(dict,"oavMax_3Byte_4",def);
  Py_DECREF(def);
  def=PyInt_FromLong(5);
  PyDict_SetItemString(dict,"oavNumVCQueryDepths",def);
  Py_DECREF(def);

  // Add all the types to the dictionary
  Pyoa1DLookupTbl_oaFloat_oaFloat_TypeInit(dict);
  Pyoa1DLookupTbl_oaInt4_oaDualIntArray_TypeInit(dict);
  Pyoa1DLookupTbl_oaInt4_oaFloat_TypeInit(dict);
  Pyoa1DLookupTbl_oaInt4_oaInt4_TypeInit(dict);
  Pyoa1DLookupTbl_oaInt8_oaFloat_TypeInit(dict);
  Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_TypeInit(dict);
  Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_TypeInit(dict);
  Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_TypeInit(dict);
  Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_TypeInit(dict);
  PyoaAlignmentType_TypeInit(dict);
  PyoaAlignmentTypeEnum_TypeInit(dict);
  PyoaAnalysisLib_TypeInit(dict);
  PyoaAnalysisLibModTypeEnum_TypeInit(dict);
  PyoaAnalysisOpPoint_TypeInit(dict);
  PyoaAnalysisOpPointModTypeEnum_TypeInit(dict);
  PyoaAnalysisPoint_TypeInit(dict);
  PyoaAnalysisPointArray_TypeInit(dict);
  PyoaAnalysisPointModTypeEnum_TypeInit(dict);
  PyoaAntennaArea_TypeInit(dict);
  PyoaAntennaAreaArray_TypeInit(dict);
  PyoaAntennaData_TypeInit(dict);
  PyoaAntennaModel_TypeInit(dict);
  PyoaAntennaModelEnum_TypeInit(dict);
  PyoaAntennaRatioArrayValue_TypeInit(dict);
  PyoaAntennaRatioValue_TypeInit(dict);
  PyoaAppDef_TypeInit(dict);
  PyoaAppObject_TypeInit(dict);
  PyoaAppObjectCollection_TypeInit(dict);
  PyoaAppObjectDef_TypeInit(dict);
  PyoaAppObjectDefCollection_TypeInit(dict);
  PyoaAppObjectModTypeEnum_TypeInit(dict);
  PyoaAppProp_TypeInit(dict);
  PyoaArc_TypeInit(dict);
  PyoaAreaBlockage_TypeInit(dict);
  PyoaAreaBoundary_TypeInit(dict);
  PyoaAreaHalo_TypeInit(dict);
  PyoaArrayBase_oaAnalysisPoint_TypeInit(dict);
  PyoaArrayBase_oaAntennaArea_TypeInit(dict);
  PyoaArrayBase_oaBox_TypeInit(dict);
  PyoaArrayBase_oaBuildInfo_TypeInit(dict);
  PyoaArrayBase_oaComplex_oaDouble_TypeInit(dict);
  PyoaArrayBase_oaComplex_oaFloat_TypeInit(dict);
  PyoaArrayBase_oaConstraintParam_TypeInit(dict);
  PyoaArrayBase_oaDBType_TypeInit(dict);
  PyoaArrayBase_oaDMAttr_TypeInit(dict);
  PyoaArrayBase_oaDerivedLayerParam_TypeInit(dict);
  PyoaArrayBase_oaDesignObject_TypeInit(dict);
  PyoaArrayBase_oaDualInt_TypeInit(dict);
  PyoaArrayBase_oaFeature_TypeInit(dict);
  PyoaArrayBase_oaFig_TypeInit(dict);
  PyoaArrayBase_oaLayerMap_TypeInit(dict);
  PyoaArrayBase_oaLayerNum_TypeInit(dict);
  PyoaArrayBase_oaLib_TypeInit(dict);
  PyoaArrayBase_oaModTerm_TypeInit(dict);
  PyoaArrayBase_oaObject_TypeInit(dict);
  PyoaArrayBase_oaOccTerm_TypeInit(dict);
  PyoaArrayBase_oaParam_TypeInit(dict);
  PyoaArrayBase_oaPoint_TypeInit(dict);
  PyoaArrayBase_oaSiteRef_TypeInit(dict);
  PyoaArrayBase_oaString_TypeInit(dict);
  PyoaArrayBase_oaTech_TypeInit(dict);
  PyoaArrayBase_oaTechHeader_TypeInit(dict);
  PyoaArrayBase_oaTerm_TypeInit(dict);
  PyoaArrayBase_oaType_TypeInit(dict);
  PyoaArrayBase_oaValue_TypeInit(dict);
  PyoaArrayBase_oaViaDef_TypeInit(dict);
  PyoaArrayInst_TypeInit(dict);
  PyoaArraySiteDef_TypeInit(dict);
  PyoaArray_oaAnalysisPoint_TypeInit(dict);
  PyoaArray_oaAntennaArea_TypeInit(dict);
  PyoaArray_oaBox_TypeInit(dict);
  PyoaArray_oaBuildInfo_TypeInit(dict);
  PyoaArray_oaComplex_oaDouble_TypeInit(dict);
  PyoaArray_oaComplex_oaFloat_TypeInit(dict);
  PyoaArray_oaConstraintParam_TypeInit(dict);
  PyoaArray_oaDBType_TypeInit(dict);
  PyoaArray_oaDMAttr_TypeInit(dict);
  PyoaArray_oaDerivedLayerParam_TypeInit(dict);
  PyoaArray_oaDesignObject_TypeInit(dict);
  PyoaArray_oaDualInt_TypeInit(dict);
  PyoaArray_oaFeature_TypeInit(dict);
  PyoaArray_oaFig_TypeInit(dict);
  PyoaArray_oaLayerMap_TypeInit(dict);
  PyoaArray_oaLayerNum_TypeInit(dict);
  PyoaArray_oaLib_TypeInit(dict);
  PyoaArray_oaModTerm_TypeInit(dict);
  PyoaArray_oaObject_TypeInit(dict);
  PyoaArray_oaOccTerm_TypeInit(dict);
  PyoaArray_oaParam_TypeInit(dict);
  PyoaArray_oaPoint_TypeInit(dict);
  PyoaArray_oaSiteRef_TypeInit(dict);
  PyoaArray_oaString_TypeInit(dict);
  PyoaArray_oaTech_TypeInit(dict);
  PyoaArray_oaTechHeader_TypeInit(dict);
  PyoaArray_oaTerm_TypeInit(dict);
  PyoaArray_oaType_TypeInit(dict);
  PyoaArray_oaValue_TypeInit(dict);
  PyoaArray_oaViaDef_TypeInit(dict);
  PyoaAssignAssignment_TypeInit(dict);
  PyoaAssignValue_TypeInit(dict);
  PyoaAssignedNetSpec_TypeInit(dict);
  PyoaAssignment_TypeInit(dict);
  PyoaAssignmentAttrType_TypeInit(dict);
  PyoaAssignmentAttrTypeEnum_TypeInit(dict);
  PyoaAssignmentDef_TypeInit(dict);
  PyoaAssignmentModTypeEnum_TypeInit(dict);
  PyoaAttrDisplay_TypeInit(dict);
  PyoaAttrType_TypeInit(dict);
  PyoaAvatarModTypeEnum_TypeInit(dict);
  PyoaBaseCollection_TypeInit(dict);
  PyoaBaseDataTypeEnum_TypeInit(dict);
  PyoaBaseIter_TypeInit(dict);
  PyoaBaseMemNetCollection_TypeInit(dict);
  PyoaBaseMemNetIter_TypeInit(dict);
  PyoaBaseMsgIds_TypeInit(dict);
  PyoaBaseObserver_TypeInit(dict);
  PyoaBasePackedData_TypeInit(dict);
  PyoaBitInst_TypeInit(dict);
  PyoaBitNet_TypeInit(dict);
  PyoaBitOrder_TypeInit(dict);
  PyoaBitOrderEnum_TypeInit(dict);
  PyoaBitTerm_TypeInit(dict);
  PyoaBlock_TypeInit(dict);
  PyoaBlockDomainVisibility_TypeInit(dict);
  PyoaBlockDomainVisibilityEnum_TypeInit(dict);
  PyoaBlockModTypeEnum_TypeInit(dict);
  PyoaBlockObject_TypeInit(dict);
  PyoaBlockObjectIter_TypeInit(dict);
  PyoaBlockage_TypeInit(dict);
  PyoaBlockageModTypeEnum_TypeInit(dict);
  PyoaBlockageQuery_TypeInit(dict);
  PyoaBlockageType_TypeInit(dict);
  PyoaBlockageTypeEnum_TypeInit(dict);
  PyoaBooleanAppDef_oaAnalysisOpPoint_TypeInit(dict);
  PyoaBooleanAppDef_oaAnalysisPoint_TypeInit(dict);
  PyoaBooleanAppDef_oaAppObject_TypeInit(dict);
  PyoaBooleanAppDef_oaAssignment_TypeInit(dict);
  PyoaBooleanAppDef_oaBlock_TypeInit(dict);
  PyoaBooleanAppDef_oaBlockage_TypeInit(dict);
  PyoaBooleanAppDef_oaBoundary_TypeInit(dict);
  PyoaBooleanAppDef_oaBusNetDef_TypeInit(dict);
  PyoaBooleanAppDef_oaBusTermDef_TypeInit(dict);
  PyoaBooleanAppDef_oaCMap_TypeInit(dict);
  PyoaBooleanAppDef_oaCell_TypeInit(dict);
  PyoaBooleanAppDef_oaCellView_TypeInit(dict);
  PyoaBooleanAppDef_oaCluster_TypeInit(dict);
  PyoaBooleanAppDef_oaConnectDef_TypeInit(dict);
  PyoaBooleanAppDef_oaConstraint_TypeInit(dict);
  PyoaBooleanAppDef_oaConstraintDef_TypeInit(dict);
  PyoaBooleanAppDef_oaConstraintGroup_TypeInit(dict);
  PyoaBooleanAppDef_oaConstraintGroupHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaConstraintGroupMem_TypeInit(dict);
  PyoaBooleanAppDef_oaConstraintParam_TypeInit(dict);
  PyoaBooleanAppDef_oaConstraintParamDef_TypeInit(dict);
  PyoaBooleanAppDef_oaDMData_TypeInit(dict);
  PyoaBooleanAppDef_oaDMFile_TypeInit(dict);
  PyoaBooleanAppDef_oaDerivedLayerParam_TypeInit(dict);
  PyoaBooleanAppDef_oaDesign_TypeInit(dict);
  PyoaBooleanAppDef_oaDesignInst_TypeInit(dict);
  PyoaBooleanAppDef_oaDevice_TypeInit(dict);
  PyoaBooleanAppDef_oaElmore_TypeInit(dict);
  PyoaBooleanAppDef_oaFigGroup_TypeInit(dict);
  PyoaBooleanAppDef_oaFigGroupMem_TypeInit(dict);
  PyoaBooleanAppDef_oaFrame_TypeInit(dict);
  PyoaBooleanAppDef_oaFrameInst_TypeInit(dict);
  PyoaBooleanAppDef_oaGCellPattern_TypeInit(dict);
  PyoaBooleanAppDef_oaGroup_TypeInit(dict);
  PyoaBooleanAppDef_oaGroupMember_TypeInit(dict);
  PyoaBooleanAppDef_oaGuide_TypeInit(dict);
  PyoaBooleanAppDef_oaImage_TypeInit(dict);
  PyoaBooleanAppDef_oaInst_TypeInit(dict);
  PyoaBooleanAppDef_oaInstHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaInstTerm_TypeInit(dict);
  PyoaBooleanAppDef_oaLPPHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaLayer_TypeInit(dict);
  PyoaBooleanAppDef_oaLayerHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaLib_TypeInit(dict);
  PyoaBooleanAppDef_oaMarker_TypeInit(dict);
  PyoaBooleanAppDef_oaModAssignment_TypeInit(dict);
  PyoaBooleanAppDef_oaModBusNetDef_TypeInit(dict);
  PyoaBooleanAppDef_oaModBusTermDef_TypeInit(dict);
  PyoaBooleanAppDef_oaModConnectDef_TypeInit(dict);
  PyoaBooleanAppDef_oaModInst_TypeInit(dict);
  PyoaBooleanAppDef_oaModInstHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaModInstTerm_TypeInit(dict);
  PyoaBooleanAppDef_oaModModuleInstHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaModNet_TypeInit(dict);
  PyoaBooleanAppDef_oaModTerm_TypeInit(dict);
  PyoaBooleanAppDef_oaModVectorInstDef_TypeInit(dict);
  PyoaBooleanAppDef_oaModule_TypeInit(dict);
  PyoaBooleanAppDef_oaNet_TypeInit(dict);
  PyoaBooleanAppDef_oaNode_TypeInit(dict);
  PyoaBooleanAppDef_oaOccAssignment_TypeInit(dict);
  PyoaBooleanAppDef_oaOccBusNetDef_TypeInit(dict);
  PyoaBooleanAppDef_oaOccBusTermDef_TypeInit(dict);
  PyoaBooleanAppDef_oaOccConnectDef_TypeInit(dict);
  PyoaBooleanAppDef_oaOccInst_TypeInit(dict);
  PyoaBooleanAppDef_oaOccInstHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaOccInstTerm_TypeInit(dict);
  PyoaBooleanAppDef_oaOccModuleInstHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaOccNet_TypeInit(dict);
  PyoaBooleanAppDef_oaOccShape_TypeInit(dict);
  PyoaBooleanAppDef_oaOccTerm_TypeInit(dict);
  PyoaBooleanAppDef_oaOccVectorInstDef_TypeInit(dict);
  PyoaBooleanAppDef_oaOccurrence_TypeInit(dict);
  PyoaBooleanAppDef_oaOpPointHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaParasiticNetwork_TypeInit(dict);
  PyoaBooleanAppDef_oaPin_TypeInit(dict);
  PyoaBooleanAppDef_oaPoleResidue_TypeInit(dict);
  PyoaBooleanAppDef_oaProp_TypeInit(dict);
  PyoaBooleanAppDef_oaPurpose_TypeInit(dict);
  PyoaBooleanAppDef_oaReducedModel_TypeInit(dict);
  PyoaBooleanAppDef_oaReticle_TypeInit(dict);
  PyoaBooleanAppDef_oaReticleRef_TypeInit(dict);
  PyoaBooleanAppDef_oaRoute_TypeInit(dict);
  PyoaBooleanAppDef_oaRow_TypeInit(dict);
  PyoaBooleanAppDef_oaRowHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaScanChain_TypeInit(dict);
  PyoaBooleanAppDef_oaScanChainInst_TypeInit(dict);
  PyoaBooleanAppDef_oaScanChainSet_TypeInit(dict);
  PyoaBooleanAppDef_oaShape_TypeInit(dict);
  PyoaBooleanAppDef_oaSiteDef_TypeInit(dict);
  PyoaBooleanAppDef_oaSteiner_TypeInit(dict);
  PyoaBooleanAppDef_oaStepperMap_TypeInit(dict);
  PyoaBooleanAppDef_oaTech_TypeInit(dict);
  PyoaBooleanAppDef_oaTechHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaTechLayerHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaTechViaDefHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaTerm_TypeInit(dict);
  PyoaBooleanAppDef_oaTrackPattern_TypeInit(dict);
  PyoaBooleanAppDef_oaValue_TypeInit(dict);
  PyoaBooleanAppDef_oaVectorInstDef_TypeInit(dict);
  PyoaBooleanAppDef_oaVia_TypeInit(dict);
  PyoaBooleanAppDef_oaViaDef_TypeInit(dict);
  PyoaBooleanAppDef_oaViaHeader_TypeInit(dict);
  PyoaBooleanAppDef_oaViaSpec_TypeInit(dict);
  PyoaBooleanAppDef_oaView_TypeInit(dict);
  PyoaBooleanAppDef_oaWafer_TypeInit(dict);
  PyoaBooleanAppDef_oaWaferDesc_TypeInit(dict);
  PyoaBooleanAppDef_oaWaferFeature_TypeInit(dict);
  PyoaBooleanProp_TypeInit(dict);
  PyoaBooleanValue_TypeInit(dict);
  PyoaBoundary_TypeInit(dict);
  PyoaBoundaryModTypeEnum_TypeInit(dict);
  PyoaBoundaryQuery_TypeInit(dict);
  PyoaBox_TypeInit(dict);
  PyoaBoxArray_TypeInit(dict);
  PyoaBoxArrayValue_TypeInit(dict);
  PyoaBuildInfo_TypeInit(dict);
  PyoaBuildInfoArray_TypeInit(dict);
  PyoaBundleName_TypeInit(dict);
  PyoaBundleNet_TypeInit(dict);
  PyoaBundleTerm_TypeInit(dict);
  PyoaBusNet_TypeInit(dict);
  PyoaBusNetBit_TypeInit(dict);
  PyoaBusNetDef_TypeInit(dict);
  PyoaBusNetDefModTypeEnum_TypeInit(dict);
  PyoaBusTerm_TypeInit(dict);
  PyoaBusTermBit_TypeInit(dict);
  PyoaBusTermDef_TypeInit(dict);
  PyoaBusTermDefModTypeEnum_TypeInit(dict);
  PyoaCMap_TypeInit(dict);
  PyoaCMapModTypeEnum_TypeInit(dict);
  PyoaCategory_TypeInit(dict);
  PyoaCategoryEnum_TypeInit(dict);
  PyoaCdbaNS_TypeInit(dict);
  PyoaCell_TypeInit(dict);
  PyoaCellDMData_TypeInit(dict);
  PyoaCellModTypeEnum_TypeInit(dict);
  PyoaCellType_TypeInit(dict);
  PyoaCellTypeEnum_TypeInit(dict);
  PyoaCellView_TypeInit(dict);
  PyoaCellViewDMData_TypeInit(dict);
  PyoaCellViewModTypeEnum_TypeInit(dict);
  PyoaClearanceMeasure_TypeInit(dict);
  PyoaClearanceMeasureEnum_TypeInit(dict);
  PyoaCluster_TypeInit(dict);
  PyoaClusterBoundary_TypeInit(dict);
  PyoaClusterModTypeEnum_TypeInit(dict);
  PyoaClusterType_TypeInit(dict);
  PyoaClusterTypeEnum_TypeInit(dict);
  PyoaCollTypeEnum_TypeInit(dict);
  PyoaCollection_oaAnalysisLib_oaTech_TypeInit(dict);
  PyoaCollection_oaAnalysisOpPoint_oaAnalysisPoint_TypeInit(dict);
  PyoaCollection_oaAnalysisOpPoint_oaOpPointHeader_TypeInit(dict);
  PyoaCollection_oaAnalysisPoint_oaDesign_TypeInit(dict);
  PyoaCollection_oaAnalysisPoint_oaParasiticNetwork_TypeInit(dict);
  PyoaCollection_oaAppDef_oaDMData_TypeInit(dict);
  PyoaCollection_oaAppDef_oaDesign_TypeInit(dict);
  PyoaCollection_oaAppDef_oaObject_TypeInit(dict);
  PyoaCollection_oaAppDef_oaSession_TypeInit(dict);
  PyoaCollection_oaAppDef_oaTech_TypeInit(dict);
  PyoaCollection_oaAppObjectDef_oaDMData_TypeInit(dict);
  PyoaCollection_oaAppObjectDef_oaDesign_TypeInit(dict);
  PyoaCollection_oaAppObjectDef_oaSession_TypeInit(dict);
  PyoaCollection_oaAppObjectDef_oaTech_TypeInit(dict);
  PyoaCollection_oaAppObject_oaDMData_TypeInit(dict);
  PyoaCollection_oaAppObject_oaDesign_TypeInit(dict);
  PyoaCollection_oaAppObject_oaTech_TypeInit(dict);
  PyoaCollection_oaAreaBoundary_oaBlock_TypeInit(dict);
  PyoaCollection_oaAssignment_oaBlock_TypeInit(dict);
  PyoaCollection_oaAssignment_oaInst_TypeInit(dict);
  PyoaCollection_oaBitNet_oaBitNet_TypeInit(dict);
  PyoaCollection_oaBitNet_oaNet_TypeInit(dict);
  PyoaCollection_oaBitTerm_oaBitTerm_TypeInit(dict);
  PyoaCollection_oaBlockObject_oaMarker_TypeInit(dict);
  PyoaCollection_oaBlockage_oaBlock_TypeInit(dict);
  PyoaCollection_oaBlockage_oaCluster_TypeInit(dict);
  PyoaCollection_oaBlockage_oaInst_TypeInit(dict);
  PyoaCollection_oaBlockage_oaLayerHeader_TypeInit(dict);
  PyoaCollection_oaBlockage_oaPRBoundary_TypeInit(dict);
  PyoaCollection_oaBusNetBit_oaBusNetDef_TypeInit(dict);
  PyoaCollection_oaBusNetDef_oaBlock_TypeInit(dict);
  PyoaCollection_oaBusNet_oaBusNetDef_TypeInit(dict);
  PyoaCollection_oaBusTermBit_oaBusTermDef_TypeInit(dict);
  PyoaCollection_oaBusTermDef_oaBlock_TypeInit(dict);
  PyoaCollection_oaBusTerm_oaBusTermDef_TypeInit(dict);
  PyoaCollection_oaCellView_oaCell_TypeInit(dict);
  PyoaCollection_oaCellView_oaLib_TypeInit(dict);
  PyoaCollection_oaCellView_oaView_TypeInit(dict);
  PyoaCollection_oaCell_oaLib_TypeInit(dict);
  PyoaCollection_oaClusterBoundary_oaCluster_TypeInit(dict);
  PyoaCollection_oaCluster_oaBlock_TypeInit(dict);
  PyoaCollection_oaCluster_oaCluster_TypeInit(dict);
  PyoaCollection_oaConnectDef_oaBlock_TypeInit(dict);
  PyoaCollection_oaConstraintDef_oaSession_TypeInit(dict);
  PyoaCollection_oaConstraintGroupHeader_oaDesign_TypeInit(dict);
  PyoaCollection_oaConstraintGroupHeader_oaTech_TypeInit(dict);
  PyoaCollection_oaConstraintGroupMem_oaConstraintGroup_TypeInit(dict);
  PyoaCollection_oaConstraintGroupMem_oaConstraintGroupHeader_TypeInit(dict);
  PyoaCollection_oaConstraintGroup_oaDesign_TypeInit(dict);
  PyoaCollection_oaConstraintGroup_oaTech_TypeInit(dict);
  PyoaCollection_oaConstraintParamDef_oaSession_TypeInit(dict);
  PyoaCollection_oaConstraintParam_oaDesign_TypeInit(dict);
  PyoaCollection_oaConstraintParam_oaTech_TypeInit(dict);
  PyoaCollection_oaConstraint_oaConstraintGroup_TypeInit(dict);
  PyoaCollection_oaConstraint_oaDesign_TypeInit(dict);
  PyoaCollection_oaConstraint_oaTech_TypeInit(dict);
  PyoaCollection_oaDMData_oaDMData_TypeInit(dict);
  PyoaCollection_oaDMFile_oaDMContainer_TypeInit(dict);
  PyoaCollection_oaDMFile_oaDMFile_TypeInit(dict);
  PyoaCollection_oaDerivedLayerDef_oaSession_TypeInit(dict);
  PyoaCollection_oaDerivedLayerParamDef_oaSession_TypeInit(dict);
  PyoaCollection_oaDerivedLayerParam_oaTech_TypeInit(dict);
  PyoaCollection_oaDesignInst_oaFrame_TypeInit(dict);
  PyoaCollection_oaDesignInst_oaReticle_TypeInit(dict);
  PyoaCollection_oaDesignObject_oaNode_TypeInit(dict);
  PyoaCollection_oaDesignObject_oaParasiticNetwork_TypeInit(dict);
  PyoaCollection_oaDesign_oaDesign_TypeInit(dict);
  PyoaCollection_oaDevice_oaNode_TypeInit(dict);
  PyoaCollection_oaDevice_oaParasiticNetwork_TypeInit(dict);
  PyoaCollection_oaDevice_oaSubNetwork_TypeInit(dict);
  PyoaCollection_oaElmore_oaLumpedElmore_TypeInit(dict);
  PyoaCollection_oaElmore_oaPiElmore_TypeInit(dict);
  PyoaCollection_oaFigGroupMem_oaFigGroup_TypeInit(dict);
  PyoaCollection_oaFigGroup_oaBlock_TypeInit(dict);
  PyoaCollection_oaFrameInst_oaFrame_TypeInit(dict);
  PyoaCollection_oaFrameInst_oaReticle_TypeInit(dict);
  PyoaCollection_oaFrame_oaWafer_TypeInit(dict);
  PyoaCollection_oaGCellPattern_oaBlock_TypeInit(dict);
  PyoaCollection_oaGroupMember_oaGroup_TypeInit(dict);
  PyoaCollection_oaGroupMember_oaObject_TypeInit(dict);
  PyoaCollection_oaGroup_oaDMData_TypeInit(dict);
  PyoaCollection_oaGroup_oaDesign_TypeInit(dict);
  PyoaCollection_oaGroup_oaLib_TypeInit(dict);
  PyoaCollection_oaGroup_oaObject_TypeInit(dict);
  PyoaCollection_oaGroup_oaTech_TypeInit(dict);
  PyoaCollection_oaGuide_oaBlock_TypeInit(dict);
  PyoaCollection_oaGuide_oaLayerHeader_TypeInit(dict);
  PyoaCollection_oaGuide_oaNet_TypeInit(dict);
  PyoaCollection_oaImage_oaReticle_TypeInit(dict);
  PyoaCollection_oaImage_oaReticleRef_TypeInit(dict);
  PyoaCollection_oaImage_oaWafer_TypeInit(dict);
  PyoaCollection_oaInstHeader_oaBlock_TypeInit(dict);
  PyoaCollection_oaInstHeader_oaDesign_TypeInit(dict);
  PyoaCollection_oaInstHeader_oaInstHeader_TypeInit(dict);
  PyoaCollection_oaInstTerm_oaBlock_TypeInit(dict);
  PyoaCollection_oaInstTerm_oaInst_TypeInit(dict);
  PyoaCollection_oaInstTerm_oaNet_TypeInit(dict);
  PyoaCollection_oaInst_oaBlock_TypeInit(dict);
  PyoaCollection_oaInst_oaCluster_TypeInit(dict);
  PyoaCollection_oaInst_oaInstHeader_TypeInit(dict);
  PyoaCollection_oaLPPHeader_oaBlock_TypeInit(dict);
  PyoaCollection_oaLPPHeader_oaLayerHeader_TypeInit(dict);
  PyoaCollection_oaLayerArrayConstraint_oaConstraintGroup_TypeInit(dict);
  PyoaCollection_oaLayerConstraint_oaConstraintGroup_TypeInit(dict);
  PyoaCollection_oaLayerHeader_oaBlock_TypeInit(dict);
  PyoaCollection_oaLayerPairConstraint_oaConstraintGroup_TypeInit(dict);
  PyoaCollection_oaLayer_oaTech_TypeInit(dict);
  PyoaCollection_oaLibDefListMem_oaLibDefList_TypeInit(dict);
  PyoaCollection_oaLibDefList_oaLibDefList_TypeInit(dict);
  PyoaCollection_oaLib_oaLib_TypeInit(dict);
  PyoaCollection_oaMarker_oaBlock_TypeInit(dict);
  PyoaCollection_oaMarker_oaBlockObject_TypeInit(dict);
  PyoaCollection_oaModAssignment_oaModInst_TypeInit(dict);
  PyoaCollection_oaModAssignment_oaModule_TypeInit(dict);
  PyoaCollection_oaModBitNet_oaModBitNet_TypeInit(dict);
  PyoaCollection_oaModBitNet_oaModNet_TypeInit(dict);
  PyoaCollection_oaModBusNetBit_oaModBusNetDef_TypeInit(dict);
  PyoaCollection_oaModBusNetDef_oaModule_TypeInit(dict);
  PyoaCollection_oaModBusNet_oaModBusNetDef_TypeInit(dict);
  PyoaCollection_oaModBusTermBit_oaModBusTermDef_TypeInit(dict);
  PyoaCollection_oaModBusTermDef_oaModule_TypeInit(dict);
  PyoaCollection_oaModBusTerm_oaModBusTermDef_TypeInit(dict);
  PyoaCollection_oaModConnectDef_oaModule_TypeInit(dict);
  PyoaCollection_oaModDesignInst_oaModInstHeader_TypeInit(dict);
  PyoaCollection_oaModInstHeader_oaDesign_TypeInit(dict);
  PyoaCollection_oaModInstHeader_oaModInstHeader_TypeInit(dict);
  PyoaCollection_oaModInstTerm_oaModInst_TypeInit(dict);
  PyoaCollection_oaModInstTerm_oaModNet_TypeInit(dict);
  PyoaCollection_oaModInstTerm_oaModule_TypeInit(dict);
  PyoaCollection_oaModInst_oaModVectorInstDef_TypeInit(dict);
  PyoaCollection_oaModInst_oaModule_TypeInit(dict);
  PyoaCollection_oaModModuleInstHeader_oaModule_TypeInit(dict);
  PyoaCollection_oaModModuleInst_oaModModuleInstHeader_TypeInit(dict);
  PyoaCollection_oaModNet_oaModBundleNet_TypeInit(dict);
  PyoaCollection_oaModNet_oaModule_TypeInit(dict);
  PyoaCollection_oaModTerm_oaModBundleTerm_TypeInit(dict);
  PyoaCollection_oaModTerm_oaModNet_TypeInit(dict);
  PyoaCollection_oaModTerm_oaModule_TypeInit(dict);
  PyoaCollection_oaModVectorInstDef_oaModule_TypeInit(dict);
  PyoaCollection_oaModule_oaDesign_TypeInit(dict);
  PyoaCollection_oaMutualInductor_oaInductor_TypeInit(dict);
  PyoaCollection_oaNet_oaBlock_TypeInit(dict);
  PyoaCollection_oaNet_oaBundleNet_TypeInit(dict);
  PyoaCollection_oaNode_oaParasiticNetwork_TypeInit(dict);
  PyoaCollection_oaNode_oaStdDevice_TypeInit(dict);
  PyoaCollection_oaNode_oaSubNetwork_TypeInit(dict);
  PyoaCollection_oaOccAssignment_oaOccInst_TypeInit(dict);
  PyoaCollection_oaOccAssignment_oaOccurrence_TypeInit(dict);
  PyoaCollection_oaOccBitNet_oaOccBitNet_TypeInit(dict);
  PyoaCollection_oaOccBitNet_oaOccNet_TypeInit(dict);
  PyoaCollection_oaOccBusNetBit_oaOccBusNetDef_TypeInit(dict);
  PyoaCollection_oaOccBusNetDef_oaOccurrence_TypeInit(dict);
  PyoaCollection_oaOccBusNet_oaOccBusNetDef_TypeInit(dict);
  PyoaCollection_oaOccBusTermBit_oaOccBusTermDef_TypeInit(dict);
  PyoaCollection_oaOccBusTermDef_oaOccurrence_TypeInit(dict);
  PyoaCollection_oaOccBusTerm_oaOccBusTermDef_TypeInit(dict);
  PyoaCollection_oaOccConnectDef_oaOccurrence_TypeInit(dict);
  PyoaCollection_oaOccDesignInst_oaOccInstHeader_TypeInit(dict);
  PyoaCollection_oaOccInstHeader_oaOccInstHeader_TypeInit(dict);
  PyoaCollection_oaOccInstTerm_oaInstTerm_TypeInit(dict);
  PyoaCollection_oaOccInstTerm_oaModInstTerm_TypeInit(dict);
  PyoaCollection_oaOccInstTerm_oaOccInst_TypeInit(dict);
  PyoaCollection_oaOccInstTerm_oaOccNet_TypeInit(dict);
  PyoaCollection_oaOccInstTerm_oaOccurrence_TypeInit(dict);
  PyoaCollection_oaOccInst_oaInst_TypeInit(dict);
  PyoaCollection_oaOccInst_oaModInst_TypeInit(dict);
  PyoaCollection_oaOccInst_oaOccVectorInstDef_TypeInit(dict);
  PyoaCollection_oaOccInst_oaOccurrence_TypeInit(dict);
  PyoaCollection_oaOccModuleInstHeader_oaOccurrence_TypeInit(dict);
  PyoaCollection_oaOccModuleInst_oaOccModuleInstHeader_TypeInit(dict);
  PyoaCollection_oaOccNet_oaModNet_TypeInit(dict);
  PyoaCollection_oaOccNet_oaNet_TypeInit(dict);
  PyoaCollection_oaOccNet_oaOccBundleNet_TypeInit(dict);
  PyoaCollection_oaOccNet_oaOccNet_TypeInit(dict);
  PyoaCollection_oaOccNet_oaOccurrence_TypeInit(dict);
  PyoaCollection_oaOccTerm_oaModTerm_TypeInit(dict);
  PyoaCollection_oaOccTerm_oaOccBundleTerm_TypeInit(dict);
  PyoaCollection_oaOccTerm_oaOccNet_TypeInit(dict);
  PyoaCollection_oaOccTerm_oaOccurrence_TypeInit(dict);
  PyoaCollection_oaOccTerm_oaTerm_TypeInit(dict);
  PyoaCollection_oaOccVectorInstDef_oaOccurrence_TypeInit(dict);
  PyoaCollection_oaOccurrence_oaModule_TypeInit(dict);
  PyoaCollection_oaOpPointHeader_oaOpPoint_TypeInit(dict);
  PyoaCollection_oaOpPoint_oaAnalysisLib_TypeInit(dict);
  PyoaCollection_oaOpPoint_oaTech_TypeInit(dict);
  PyoaCollection_oaParasiticNetwork_oaParasiticNetwork_TypeInit(dict);
  PyoaCollection_oaPinFig_oaPin_TypeInit(dict);
  PyoaCollection_oaPin_oaBlock_TypeInit(dict);
  PyoaCollection_oaPin_oaNet_TypeInit(dict);
  PyoaCollection_oaPin_oaTerm_TypeInit(dict);
  PyoaCollection_oaPoleResidue_oaPiPoleResidue_TypeInit(dict);
  PyoaCollection_oaProp_oaObject_TypeInit(dict);
  PyoaCollection_oaPurpose_oaTech_TypeInit(dict);
  PyoaCollection_oaReticleRef_oaWafer_TypeInit(dict);
  PyoaCollection_oaReticle_oaWafer_TypeInit(dict);
  PyoaCollection_oaRoute_oaBlock_TypeInit(dict);
  PyoaCollection_oaRoute_oaInstTerm_TypeInit(dict);
  PyoaCollection_oaRoute_oaNet_TypeInit(dict);
  PyoaCollection_oaRoute_oaPin_TypeInit(dict);
  PyoaCollection_oaRoute_oaShape_TypeInit(dict);
  PyoaCollection_oaRoute_oaSteiner_TypeInit(dict);
  PyoaCollection_oaRoute_oaTerm_TypeInit(dict);
  PyoaCollection_oaRoute_oaVia_TypeInit(dict);
  PyoaCollection_oaRowHeader_oaBlock_TypeInit(dict);
  PyoaCollection_oaRowHeader_oaSiteDef_TypeInit(dict);
  PyoaCollection_oaRow_oaBlock_TypeInit(dict);
  PyoaCollection_oaRow_oaRowHeader_TypeInit(dict);
  PyoaCollection_oaScanChainInst_oaScanChainSet_TypeInit(dict);
  PyoaCollection_oaScanChainSet_oaScanChain_TypeInit(dict);
  PyoaCollection_oaScanChain_oaBlock_TypeInit(dict);
  PyoaCollection_oaShape_oaBlock_TypeInit(dict);
  PyoaCollection_oaShape_oaLPPHeader_TypeInit(dict);
  PyoaCollection_oaShape_oaNet_TypeInit(dict);
  PyoaCollection_oaSimpleConstraint_oaConstraintGroup_TypeInit(dict);
  PyoaCollection_oaSiteDef_oaTech_TypeInit(dict);
  PyoaCollection_oaSteiner_oaBlock_TypeInit(dict);
  PyoaCollection_oaSteiner_oaLayerHeader_TypeInit(dict);
  PyoaCollection_oaSteiner_oaNet_TypeInit(dict);
  PyoaCollection_oaStepperMap_oaWaferDesc_TypeInit(dict);
  PyoaCollection_oaSubNetwork_oaDevice_TypeInit(dict);
  PyoaCollection_oaSubNetwork_oaNode_TypeInit(dict);
  PyoaCollection_oaSubNetwork_oaParasiticNetwork_TypeInit(dict);
  PyoaCollection_oaTechHeader_oaTech_TypeInit(dict);
  PyoaCollection_oaTechLayerHeader_oaTech_TypeInit(dict);
  PyoaCollection_oaTechViaDefHeader_oaTech_TypeInit(dict);
  PyoaCollection_oaTech_oaTech_TypeInit(dict);
  PyoaCollection_oaTerm_oaBlock_TypeInit(dict);
  PyoaCollection_oaTerm_oaBundleTerm_TypeInit(dict);
  PyoaCollection_oaTerm_oaNet_TypeInit(dict);
  PyoaCollection_oaTrackPattern_oaBlock_TypeInit(dict);
  PyoaCollection_oaValue_oaDesign_TypeInit(dict);
  PyoaCollection_oaValue_oaTech_TypeInit(dict);
  PyoaCollection_oaVectorInstBit_oaVectorInstDef_TypeInit(dict);
  PyoaCollection_oaVectorInstDef_oaBlock_TypeInit(dict);
  PyoaCollection_oaVectorInst_oaVectorInstDef_TypeInit(dict);
  PyoaCollection_oaViaDef_oaTech_TypeInit(dict);
  PyoaCollection_oaViaHeader_oaBlock_TypeInit(dict);
  PyoaCollection_oaViaHeader_oaDesign_TypeInit(dict);
  PyoaCollection_oaViaHeader_oaViaDef_TypeInit(dict);
  PyoaCollection_oaViaHeader_oaViaHeader_TypeInit(dict);
  PyoaCollection_oaViaSpec_oaTech_TypeInit(dict);
  PyoaCollection_oaVia_oaBlock_TypeInit(dict);
  PyoaCollection_oaVia_oaNet_TypeInit(dict);
  PyoaCollection_oaVia_oaViaHeader_TypeInit(dict);
  PyoaCollection_oaViewType_oaSession_TypeInit(dict);
  PyoaCollection_oaView_oaLib_TypeInit(dict);
  PyoaCollection_oaWaferFeature_oaWaferDesc_TypeInit(dict);
  PyoaCollection_oaWafer_oaWafer_TypeInit(dict);
  PyoaComplexArray_oaDouble_TypeInit(dict);
  PyoaComplexArray_oaFloat_TypeInit(dict);
  PyoaConnFig_TypeInit(dict);
  PyoaConnStatus_TypeInit(dict);
  PyoaConnStatusEnum_TypeInit(dict);
  PyoaConnectDef_TypeInit(dict);
  PyoaConnectDefModTypeEnum_TypeInit(dict);
  PyoaConstraint_TypeInit(dict);
  PyoaConstraintCollection_TypeInit(dict);
  PyoaConstraintDef_TypeInit(dict);
  PyoaConstraintGroup_TypeInit(dict);
  PyoaConstraintGroupHeader_TypeInit(dict);
  PyoaConstraintGroupMem_TypeInit(dict);
  PyoaConstraintGroupMemModTypeEnum_TypeInit(dict);
  PyoaConstraintGroupModTypeEnum_TypeInit(dict);
  PyoaConstraintInGroupCollection_TypeInit(dict);
  PyoaConstraintInGroupIter_TypeInit(dict);
  PyoaConstraintModTypeEnum_TypeInit(dict);
  PyoaConstraintParam_TypeInit(dict);
  PyoaConstraintParamArray_TypeInit(dict);
  PyoaConstraintParamDef_TypeInit(dict);
  PyoaConstraintParamModTypeEnum_TypeInit(dict);
  PyoaConstraintParamType_TypeInit(dict);
  PyoaConstraintParamTypeEnum_TypeInit(dict);
  PyoaCoreBoxSpec_TypeInit(dict);
  PyoaCouplingCap_TypeInit(dict);
  PyoaCustomVia_TypeInit(dict);
  PyoaCustomViaDef_TypeInit(dict);
  PyoaCustomViaHeader_TypeInit(dict);
  PyoaDBType_TypeInit(dict);
  PyoaDBTypeEnum_TypeInit(dict);
  PyoaDMAttr_TypeInit(dict);
  PyoaDMAttrArray_TypeInit(dict);
  PyoaDMContainer_TypeInit(dict);
  PyoaDMData_TypeInit(dict);
  PyoaDMDataType_TypeInit(dict);
  PyoaDMDataTypeEnum_TypeInit(dict);
  PyoaDMFile_TypeInit(dict);
  PyoaDMFileModTypeEnum_TypeInit(dict);
  PyoaDMLibModTypeEnum_TypeInit(dict);
  PyoaDMLockStatus_TypeInit(dict);
  PyoaDMLockStatusEnum_TypeInit(dict);
  PyoaDMMsgIds_TypeInit(dict);
  PyoaDMObject_TypeInit(dict);
  PyoaDMObjectIter_TypeInit(dict);
  PyoaDMObjectStatusRef_TypeInit(dict);
  PyoaDMObjectStatusRefIter_TypeInit(dict);
  PyoaDMObjectVersionRef_TypeInit(dict);
  PyoaDMObjectVersionRefIter_TypeInit(dict);
  PyoaDataAppDef_oaAnalysisOpPoint_TypeInit(dict);
  PyoaDataAppDef_oaAnalysisPoint_TypeInit(dict);
  PyoaDataAppDef_oaAppObject_TypeInit(dict);
  PyoaDataAppDef_oaAssignment_TypeInit(dict);
  PyoaDataAppDef_oaBlock_TypeInit(dict);
  PyoaDataAppDef_oaBlockage_TypeInit(dict);
  PyoaDataAppDef_oaBoundary_TypeInit(dict);
  PyoaDataAppDef_oaBusNetDef_TypeInit(dict);
  PyoaDataAppDef_oaBusTermDef_TypeInit(dict);
  PyoaDataAppDef_oaCMap_TypeInit(dict);
  PyoaDataAppDef_oaCell_TypeInit(dict);
  PyoaDataAppDef_oaCellView_TypeInit(dict);
  PyoaDataAppDef_oaCluster_TypeInit(dict);
  PyoaDataAppDef_oaConnectDef_TypeInit(dict);
  PyoaDataAppDef_oaConstraint_TypeInit(dict);
  PyoaDataAppDef_oaConstraintDef_TypeInit(dict);
  PyoaDataAppDef_oaConstraintGroup_TypeInit(dict);
  PyoaDataAppDef_oaConstraintGroupHeader_TypeInit(dict);
  PyoaDataAppDef_oaConstraintGroupMem_TypeInit(dict);
  PyoaDataAppDef_oaConstraintParam_TypeInit(dict);
  PyoaDataAppDef_oaConstraintParamDef_TypeInit(dict);
  PyoaDataAppDef_oaDMData_TypeInit(dict);
  PyoaDataAppDef_oaDMFile_TypeInit(dict);
  PyoaDataAppDef_oaDerivedLayerParam_TypeInit(dict);
  PyoaDataAppDef_oaDesign_TypeInit(dict);
  PyoaDataAppDef_oaDesignInst_TypeInit(dict);
  PyoaDataAppDef_oaDevice_TypeInit(dict);
  PyoaDataAppDef_oaElmore_TypeInit(dict);
  PyoaDataAppDef_oaFigGroup_TypeInit(dict);
  PyoaDataAppDef_oaFigGroupMem_TypeInit(dict);
  PyoaDataAppDef_oaFrame_TypeInit(dict);
  PyoaDataAppDef_oaFrameInst_TypeInit(dict);
  PyoaDataAppDef_oaGCellPattern_TypeInit(dict);
  PyoaDataAppDef_oaGroup_TypeInit(dict);
  PyoaDataAppDef_oaGroupMember_TypeInit(dict);
  PyoaDataAppDef_oaGuide_TypeInit(dict);
  PyoaDataAppDef_oaImage_TypeInit(dict);
  PyoaDataAppDef_oaInst_TypeInit(dict);
  PyoaDataAppDef_oaInstHeader_TypeInit(dict);
  PyoaDataAppDef_oaInstTerm_TypeInit(dict);
  PyoaDataAppDef_oaLPPHeader_TypeInit(dict);
  PyoaDataAppDef_oaLayer_TypeInit(dict);
  PyoaDataAppDef_oaLayerHeader_TypeInit(dict);
  PyoaDataAppDef_oaLib_TypeInit(dict);
  PyoaDataAppDef_oaMarker_TypeInit(dict);
  PyoaDataAppDef_oaModAssignment_TypeInit(dict);
  PyoaDataAppDef_oaModBusNetDef_TypeInit(dict);
  PyoaDataAppDef_oaModBusTermDef_TypeInit(dict);
  PyoaDataAppDef_oaModConnectDef_TypeInit(dict);
  PyoaDataAppDef_oaModInst_TypeInit(dict);
  PyoaDataAppDef_oaModInstHeader_TypeInit(dict);
  PyoaDataAppDef_oaModInstTerm_TypeInit(dict);
  PyoaDataAppDef_oaModModuleInstHeader_TypeInit(dict);
  PyoaDataAppDef_oaModNet_TypeInit(dict);
  PyoaDataAppDef_oaModTerm_TypeInit(dict);
  PyoaDataAppDef_oaModVectorInstDef_TypeInit(dict);
  PyoaDataAppDef_oaModule_TypeInit(dict);
  PyoaDataAppDef_oaNet_TypeInit(dict);
  PyoaDataAppDef_oaNode_TypeInit(dict);
  PyoaDataAppDef_oaOccAssignment_TypeInit(dict);
  PyoaDataAppDef_oaOccBusNetDef_TypeInit(dict);
  PyoaDataAppDef_oaOccBusTermDef_TypeInit(dict);
  PyoaDataAppDef_oaOccConnectDef_TypeInit(dict);
  PyoaDataAppDef_oaOccInst_TypeInit(dict);
  PyoaDataAppDef_oaOccInstHeader_TypeInit(dict);
  PyoaDataAppDef_oaOccInstTerm_TypeInit(dict);
  PyoaDataAppDef_oaOccModuleInstHeader_TypeInit(dict);
  PyoaDataAppDef_oaOccNet_TypeInit(dict);
  PyoaDataAppDef_oaOccShape_TypeInit(dict);
  PyoaDataAppDef_oaOccTerm_TypeInit(dict);
  PyoaDataAppDef_oaOccVectorInstDef_TypeInit(dict);
  PyoaDataAppDef_oaOccurrence_TypeInit(dict);
  PyoaDataAppDef_oaOpPointHeader_TypeInit(dict);
  PyoaDataAppDef_oaParasiticNetwork_TypeInit(dict);
  PyoaDataAppDef_oaPin_TypeInit(dict);
  PyoaDataAppDef_oaPoleResidue_TypeInit(dict);
  PyoaDataAppDef_oaProp_TypeInit(dict);
  PyoaDataAppDef_oaPurpose_TypeInit(dict);
  PyoaDataAppDef_oaReducedModel_TypeInit(dict);
  PyoaDataAppDef_oaReticle_TypeInit(dict);
  PyoaDataAppDef_oaReticleRef_TypeInit(dict);
  PyoaDataAppDef_oaRoute_TypeInit(dict);
  PyoaDataAppDef_oaRow_TypeInit(dict);
  PyoaDataAppDef_oaRowHeader_TypeInit(dict);
  PyoaDataAppDef_oaScanChain_TypeInit(dict);
  PyoaDataAppDef_oaScanChainInst_TypeInit(dict);
  PyoaDataAppDef_oaScanChainSet_TypeInit(dict);
  PyoaDataAppDef_oaShape_TypeInit(dict);
  PyoaDataAppDef_oaSiteDef_TypeInit(dict);
  PyoaDataAppDef_oaSteiner_TypeInit(dict);
  PyoaDataAppDef_oaStepperMap_TypeInit(dict);
  PyoaDataAppDef_oaTech_TypeInit(dict);
  PyoaDataAppDef_oaTechHeader_TypeInit(dict);
  PyoaDataAppDef_oaTechLayerHeader_TypeInit(dict);
  PyoaDataAppDef_oaTechViaDefHeader_TypeInit(dict);
  PyoaDataAppDef_oaTerm_TypeInit(dict);
  PyoaDataAppDef_oaTrackPattern_TypeInit(dict);
  PyoaDataAppDef_oaValue_TypeInit(dict);
  PyoaDataAppDef_oaVectorInstDef_TypeInit(dict);
  PyoaDataAppDef_oaVia_TypeInit(dict);
  PyoaDataAppDef_oaViaDef_TypeInit(dict);
  PyoaDataAppDef_oaViaHeader_TypeInit(dict);
  PyoaDataAppDef_oaViaSpec_TypeInit(dict);
  PyoaDataAppDef_oaView_TypeInit(dict);
  PyoaDataAppDef_oaWafer_TypeInit(dict);
  PyoaDataAppDef_oaWaferDesc_TypeInit(dict);
  PyoaDataAppDef_oaWaferFeature_TypeInit(dict);
  PyoaDataModelModType_TypeInit(dict);
  PyoaDataModelModTypeEnum_TypeInit(dict);
  PyoaDatabaseCollection_TypeInit(dict);
  PyoaDatabaseIter_TypeInit(dict);
  PyoaDefNS_TypeInit(dict);
  PyoaDerivedLayer_TypeInit(dict);
  PyoaDerivedLayerConnectivityType_TypeInit(dict);
  PyoaDerivedLayerConnectivityTypeEnum_TypeInit(dict);
  PyoaDerivedLayerDef_TypeInit(dict);
  PyoaDerivedLayerModTypeEnum_TypeInit(dict);
  PyoaDerivedLayerParam_TypeInit(dict);
  PyoaDerivedLayerParamArray_TypeInit(dict);
  PyoaDerivedLayerParamDef_TypeInit(dict);
  PyoaDerivedLayerParamModTypeEnum_TypeInit(dict);
  PyoaDerivedLayerParamType_TypeInit(dict);
  PyoaDerivedLayerParamTypeEnum_TypeInit(dict);
  PyoaDesign_TypeInit(dict);
  PyoaDesignAttrType_TypeInit(dict);
  PyoaDesignAttrTypeEnum_TypeInit(dict);
  PyoaDesignCollTypeEnum_TypeInit(dict);
  PyoaDesignCollection_TypeInit(dict);
  PyoaDesignDataType_TypeInit(dict);
  PyoaDesignDataTypeEnum_TypeInit(dict);
  PyoaDesignInst_TypeInit(dict);
  PyoaDesignInstModTypeEnum_TypeInit(dict);
  PyoaDesignIter_TypeInit(dict);
  PyoaDesignIterTypeEnum_TypeInit(dict);
  PyoaDesignModTypeEnum_TypeInit(dict);
  PyoaDesignMsgIds_TypeInit(dict);
  PyoaDesignObject_TypeInit(dict);
  PyoaDesignObjectIter_TypeInit(dict);
  PyoaDesignUndoObserver_TypeInit(dict);
  PyoaDetachVisibilityEnum_TypeInit(dict);
  PyoaDevice_TypeInit(dict);
  PyoaDeviceModTypeEnum_TypeInit(dict);
  PyoaDiode_TypeInit(dict);
  PyoaDir_TypeInit(dict);
  PyoaDirIter_TypeInit(dict);
  PyoaDirIterModeEnum_TypeInit(dict);
  PyoaDistanceMeasureType_TypeInit(dict);
  PyoaDistanceMeasureTypeEnum_TypeInit(dict);
  PyoaDomain_TypeInit(dict);
  PyoaDomainEnum_TypeInit(dict);
  PyoaDonut_TypeInit(dict);
  PyoaDot_TypeInit(dict);
  PyoaDoubleAppDef_oaAnalysisOpPoint_TypeInit(dict);
  PyoaDoubleAppDef_oaAnalysisPoint_TypeInit(dict);
  PyoaDoubleAppDef_oaAppObject_TypeInit(dict);
  PyoaDoubleAppDef_oaAssignment_TypeInit(dict);
  PyoaDoubleAppDef_oaBlock_TypeInit(dict);
  PyoaDoubleAppDef_oaBlockage_TypeInit(dict);
  PyoaDoubleAppDef_oaBoundary_TypeInit(dict);
  PyoaDoubleAppDef_oaBusNetDef_TypeInit(dict);
  PyoaDoubleAppDef_oaBusTermDef_TypeInit(dict);
  PyoaDoubleAppDef_oaCMap_TypeInit(dict);
  PyoaDoubleAppDef_oaCell_TypeInit(dict);
  PyoaDoubleAppDef_oaCellView_TypeInit(dict);
  PyoaDoubleAppDef_oaCluster_TypeInit(dict);
  PyoaDoubleAppDef_oaConnectDef_TypeInit(dict);
  PyoaDoubleAppDef_oaConstraint_TypeInit(dict);
  PyoaDoubleAppDef_oaConstraintDef_TypeInit(dict);
  PyoaDoubleAppDef_oaConstraintGroup_TypeInit(dict);
  PyoaDoubleAppDef_oaConstraintGroupHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaConstraintGroupMem_TypeInit(dict);
  PyoaDoubleAppDef_oaConstraintParam_TypeInit(dict);
  PyoaDoubleAppDef_oaConstraintParamDef_TypeInit(dict);
  PyoaDoubleAppDef_oaDMData_TypeInit(dict);
  PyoaDoubleAppDef_oaDMFile_TypeInit(dict);
  PyoaDoubleAppDef_oaDerivedLayerParam_TypeInit(dict);
  PyoaDoubleAppDef_oaDesign_TypeInit(dict);
  PyoaDoubleAppDef_oaDesignInst_TypeInit(dict);
  PyoaDoubleAppDef_oaDevice_TypeInit(dict);
  PyoaDoubleAppDef_oaElmore_TypeInit(dict);
  PyoaDoubleAppDef_oaFigGroup_TypeInit(dict);
  PyoaDoubleAppDef_oaFigGroupMem_TypeInit(dict);
  PyoaDoubleAppDef_oaFrame_TypeInit(dict);
  PyoaDoubleAppDef_oaFrameInst_TypeInit(dict);
  PyoaDoubleAppDef_oaGCellPattern_TypeInit(dict);
  PyoaDoubleAppDef_oaGroup_TypeInit(dict);
  PyoaDoubleAppDef_oaGroupMember_TypeInit(dict);
  PyoaDoubleAppDef_oaGuide_TypeInit(dict);
  PyoaDoubleAppDef_oaImage_TypeInit(dict);
  PyoaDoubleAppDef_oaInst_TypeInit(dict);
  PyoaDoubleAppDef_oaInstHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaInstTerm_TypeInit(dict);
  PyoaDoubleAppDef_oaLPPHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaLayer_TypeInit(dict);
  PyoaDoubleAppDef_oaLayerHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaLib_TypeInit(dict);
  PyoaDoubleAppDef_oaMarker_TypeInit(dict);
  PyoaDoubleAppDef_oaModAssignment_TypeInit(dict);
  PyoaDoubleAppDef_oaModBusNetDef_TypeInit(dict);
  PyoaDoubleAppDef_oaModBusTermDef_TypeInit(dict);
  PyoaDoubleAppDef_oaModConnectDef_TypeInit(dict);
  PyoaDoubleAppDef_oaModInst_TypeInit(dict);
  PyoaDoubleAppDef_oaModInstHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaModInstTerm_TypeInit(dict);
  PyoaDoubleAppDef_oaModModuleInstHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaModNet_TypeInit(dict);
  PyoaDoubleAppDef_oaModTerm_TypeInit(dict);
  PyoaDoubleAppDef_oaModVectorInstDef_TypeInit(dict);
  PyoaDoubleAppDef_oaModule_TypeInit(dict);
  PyoaDoubleAppDef_oaNet_TypeInit(dict);
  PyoaDoubleAppDef_oaNode_TypeInit(dict);
  PyoaDoubleAppDef_oaOccAssignment_TypeInit(dict);
  PyoaDoubleAppDef_oaOccBusNetDef_TypeInit(dict);
  PyoaDoubleAppDef_oaOccBusTermDef_TypeInit(dict);
  PyoaDoubleAppDef_oaOccConnectDef_TypeInit(dict);
  PyoaDoubleAppDef_oaOccInst_TypeInit(dict);
  PyoaDoubleAppDef_oaOccInstHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaOccInstTerm_TypeInit(dict);
  PyoaDoubleAppDef_oaOccModuleInstHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaOccNet_TypeInit(dict);
  PyoaDoubleAppDef_oaOccShape_TypeInit(dict);
  PyoaDoubleAppDef_oaOccTerm_TypeInit(dict);
  PyoaDoubleAppDef_oaOccVectorInstDef_TypeInit(dict);
  PyoaDoubleAppDef_oaOccurrence_TypeInit(dict);
  PyoaDoubleAppDef_oaOpPointHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaParasiticNetwork_TypeInit(dict);
  PyoaDoubleAppDef_oaPin_TypeInit(dict);
  PyoaDoubleAppDef_oaPoleResidue_TypeInit(dict);
  PyoaDoubleAppDef_oaProp_TypeInit(dict);
  PyoaDoubleAppDef_oaPurpose_TypeInit(dict);
  PyoaDoubleAppDef_oaReducedModel_TypeInit(dict);
  PyoaDoubleAppDef_oaReticle_TypeInit(dict);
  PyoaDoubleAppDef_oaReticleRef_TypeInit(dict);
  PyoaDoubleAppDef_oaRoute_TypeInit(dict);
  PyoaDoubleAppDef_oaRow_TypeInit(dict);
  PyoaDoubleAppDef_oaRowHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaScanChain_TypeInit(dict);
  PyoaDoubleAppDef_oaScanChainInst_TypeInit(dict);
  PyoaDoubleAppDef_oaScanChainSet_TypeInit(dict);
  PyoaDoubleAppDef_oaShape_TypeInit(dict);
  PyoaDoubleAppDef_oaSiteDef_TypeInit(dict);
  PyoaDoubleAppDef_oaSteiner_TypeInit(dict);
  PyoaDoubleAppDef_oaStepperMap_TypeInit(dict);
  PyoaDoubleAppDef_oaTech_TypeInit(dict);
  PyoaDoubleAppDef_oaTechHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaTechLayerHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaTechViaDefHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaTerm_TypeInit(dict);
  PyoaDoubleAppDef_oaTrackPattern_TypeInit(dict);
  PyoaDoubleAppDef_oaValue_TypeInit(dict);
  PyoaDoubleAppDef_oaVectorInstDef_TypeInit(dict);
  PyoaDoubleAppDef_oaVia_TypeInit(dict);
  PyoaDoubleAppDef_oaViaDef_TypeInit(dict);
  PyoaDoubleAppDef_oaViaHeader_TypeInit(dict);
  PyoaDoubleAppDef_oaViaSpec_TypeInit(dict);
  PyoaDoubleAppDef_oaView_TypeInit(dict);
  PyoaDoubleAppDef_oaWafer_TypeInit(dict);
  PyoaDoubleAppDef_oaWaferDesc_TypeInit(dict);
  PyoaDoubleAppDef_oaWaferFeature_TypeInit(dict);
  PyoaDoubleProp_TypeInit(dict);
  PyoaDoubleRangeProp_TypeInit(dict);
  PyoaDualInt_TypeInit(dict);
  PyoaDualInt1DTblValue_TypeInit(dict);
  PyoaDualIntArray_TypeInit(dict);
  PyoaDualIntValue_TypeInit(dict);
  PyoaEllipse_TypeInit(dict);
  PyoaElmore_TypeInit(dict);
  PyoaElmoreModTypeEnum_TypeInit(dict);
  PyoaEndStyle_TypeInit(dict);
  PyoaEndStyleEnum_TypeInit(dict);
  PyoaEndpointType_TypeInit(dict);
  PyoaEndpointTypeEnum_TypeInit(dict);
  PyoaEnumCollection_TypeInit(dict);
  PyoaEnumProp_TypeInit(dict);
  PyoaEnumPropIter_TypeInit(dict);
  PyoaEvalText_TypeInit(dict);
  PyoaEvalTextLink_TypeInit(dict);
  PyoaExtrapolateType_TypeInit(dict);
  PyoaExtrapolateTypeEnum_TypeInit(dict);
  PyoaFDSet_TypeInit(dict);
  PyoaFSComponent_TypeInit(dict);
  PyoaFeature_TypeInit(dict);
  PyoaFeatureArray_TypeInit(dict);
  PyoaFig_TypeInit(dict);
  PyoaFigGroup_TypeInit(dict);
  PyoaFigGroupMem_TypeInit(dict);
  PyoaFigGroupMemModTypeEnum_TypeInit(dict);
  PyoaFigGroupModTypeEnum_TypeInit(dict);
  PyoaFigGroupQuery_TypeInit(dict);
  PyoaFigGroupStatus_TypeInit(dict);
  PyoaFigGroupStatusEnum_TypeInit(dict);
  PyoaFile_TypeInit(dict);
  PyoaFloatAppDef_oaAnalysisOpPoint_TypeInit(dict);
  PyoaFloatAppDef_oaAnalysisPoint_TypeInit(dict);
  PyoaFloatAppDef_oaAppObject_TypeInit(dict);
  PyoaFloatAppDef_oaAssignment_TypeInit(dict);
  PyoaFloatAppDef_oaBlock_TypeInit(dict);
  PyoaFloatAppDef_oaBlockage_TypeInit(dict);
  PyoaFloatAppDef_oaBoundary_TypeInit(dict);
  PyoaFloatAppDef_oaBusNetDef_TypeInit(dict);
  PyoaFloatAppDef_oaBusTermDef_TypeInit(dict);
  PyoaFloatAppDef_oaCMap_TypeInit(dict);
  PyoaFloatAppDef_oaCell_TypeInit(dict);
  PyoaFloatAppDef_oaCellView_TypeInit(dict);
  PyoaFloatAppDef_oaCluster_TypeInit(dict);
  PyoaFloatAppDef_oaConnectDef_TypeInit(dict);
  PyoaFloatAppDef_oaConstraint_TypeInit(dict);
  PyoaFloatAppDef_oaConstraintDef_TypeInit(dict);
  PyoaFloatAppDef_oaConstraintGroup_TypeInit(dict);
  PyoaFloatAppDef_oaConstraintGroupHeader_TypeInit(dict);
  PyoaFloatAppDef_oaConstraintGroupMem_TypeInit(dict);
  PyoaFloatAppDef_oaConstraintParam_TypeInit(dict);
  PyoaFloatAppDef_oaConstraintParamDef_TypeInit(dict);
  PyoaFloatAppDef_oaDMData_TypeInit(dict);
  PyoaFloatAppDef_oaDMFile_TypeInit(dict);
  PyoaFloatAppDef_oaDerivedLayerParam_TypeInit(dict);
  PyoaFloatAppDef_oaDesign_TypeInit(dict);
  PyoaFloatAppDef_oaDesignInst_TypeInit(dict);
  PyoaFloatAppDef_oaDevice_TypeInit(dict);
  PyoaFloatAppDef_oaElmore_TypeInit(dict);
  PyoaFloatAppDef_oaFigGroup_TypeInit(dict);
  PyoaFloatAppDef_oaFigGroupMem_TypeInit(dict);
  PyoaFloatAppDef_oaFrame_TypeInit(dict);
  PyoaFloatAppDef_oaFrameInst_TypeInit(dict);
  PyoaFloatAppDef_oaGCellPattern_TypeInit(dict);
  PyoaFloatAppDef_oaGroup_TypeInit(dict);
  PyoaFloatAppDef_oaGroupMember_TypeInit(dict);
  PyoaFloatAppDef_oaGuide_TypeInit(dict);
  PyoaFloatAppDef_oaImage_TypeInit(dict);
  PyoaFloatAppDef_oaInst_TypeInit(dict);
  PyoaFloatAppDef_oaInstHeader_TypeInit(dict);
  PyoaFloatAppDef_oaInstTerm_TypeInit(dict);
  PyoaFloatAppDef_oaLPPHeader_TypeInit(dict);
  PyoaFloatAppDef_oaLayer_TypeInit(dict);
  PyoaFloatAppDef_oaLayerHeader_TypeInit(dict);
  PyoaFloatAppDef_oaLib_TypeInit(dict);
  PyoaFloatAppDef_oaMarker_TypeInit(dict);
  PyoaFloatAppDef_oaModAssignment_TypeInit(dict);
  PyoaFloatAppDef_oaModBusNetDef_TypeInit(dict);
  PyoaFloatAppDef_oaModBusTermDef_TypeInit(dict);
  PyoaFloatAppDef_oaModConnectDef_TypeInit(dict);
  PyoaFloatAppDef_oaModInst_TypeInit(dict);
  PyoaFloatAppDef_oaModInstHeader_TypeInit(dict);
  PyoaFloatAppDef_oaModInstTerm_TypeInit(dict);
  PyoaFloatAppDef_oaModModuleInstHeader_TypeInit(dict);
  PyoaFloatAppDef_oaModNet_TypeInit(dict);
  PyoaFloatAppDef_oaModTerm_TypeInit(dict);
  PyoaFloatAppDef_oaModVectorInstDef_TypeInit(dict);
  PyoaFloatAppDef_oaModule_TypeInit(dict);
  PyoaFloatAppDef_oaNet_TypeInit(dict);
  PyoaFloatAppDef_oaNode_TypeInit(dict);
  PyoaFloatAppDef_oaOccAssignment_TypeInit(dict);
  PyoaFloatAppDef_oaOccBusNetDef_TypeInit(dict);
  PyoaFloatAppDef_oaOccBusTermDef_TypeInit(dict);
  PyoaFloatAppDef_oaOccConnectDef_TypeInit(dict);
  PyoaFloatAppDef_oaOccInst_TypeInit(dict);
  PyoaFloatAppDef_oaOccInstHeader_TypeInit(dict);
  PyoaFloatAppDef_oaOccInstTerm_TypeInit(dict);
  PyoaFloatAppDef_oaOccModuleInstHeader_TypeInit(dict);
  PyoaFloatAppDef_oaOccNet_TypeInit(dict);
  PyoaFloatAppDef_oaOccShape_TypeInit(dict);
  PyoaFloatAppDef_oaOccTerm_TypeInit(dict);
  PyoaFloatAppDef_oaOccVectorInstDef_TypeInit(dict);
  PyoaFloatAppDef_oaOccurrence_TypeInit(dict);
  PyoaFloatAppDef_oaOpPointHeader_TypeInit(dict);
  PyoaFloatAppDef_oaParasiticNetwork_TypeInit(dict);
  PyoaFloatAppDef_oaPin_TypeInit(dict);
  PyoaFloatAppDef_oaPoleResidue_TypeInit(dict);
  PyoaFloatAppDef_oaProp_TypeInit(dict);
  PyoaFloatAppDef_oaPurpose_TypeInit(dict);
  PyoaFloatAppDef_oaReducedModel_TypeInit(dict);
  PyoaFloatAppDef_oaReticle_TypeInit(dict);
  PyoaFloatAppDef_oaReticleRef_TypeInit(dict);
  PyoaFloatAppDef_oaRoute_TypeInit(dict);
  PyoaFloatAppDef_oaRow_TypeInit(dict);
  PyoaFloatAppDef_oaRowHeader_TypeInit(dict);
  PyoaFloatAppDef_oaScanChain_TypeInit(dict);
  PyoaFloatAppDef_oaScanChainInst_TypeInit(dict);
  PyoaFloatAppDef_oaScanChainSet_TypeInit(dict);
  PyoaFloatAppDef_oaShape_TypeInit(dict);
  PyoaFloatAppDef_oaSiteDef_TypeInit(dict);
  PyoaFloatAppDef_oaSteiner_TypeInit(dict);
  PyoaFloatAppDef_oaStepperMap_TypeInit(dict);
  PyoaFloatAppDef_oaTech_TypeInit(dict);
  PyoaFloatAppDef_oaTechHeader_TypeInit(dict);
  PyoaFloatAppDef_oaTechLayerHeader_TypeInit(dict);
  PyoaFloatAppDef_oaTechViaDefHeader_TypeInit(dict);
  PyoaFloatAppDef_oaTerm_TypeInit(dict);
  PyoaFloatAppDef_oaTrackPattern_TypeInit(dict);
  PyoaFloatAppDef_oaValue_TypeInit(dict);
  PyoaFloatAppDef_oaVectorInstDef_TypeInit(dict);
  PyoaFloatAppDef_oaVia_TypeInit(dict);
  PyoaFloatAppDef_oaViaDef_TypeInit(dict);
  PyoaFloatAppDef_oaViaHeader_TypeInit(dict);
  PyoaFloatAppDef_oaViaSpec_TypeInit(dict);
  PyoaFloatAppDef_oaView_TypeInit(dict);
  PyoaFloatAppDef_oaWafer_TypeInit(dict);
  PyoaFloatAppDef_oaWaferDesc_TypeInit(dict);
  PyoaFloatAppDef_oaWaferFeature_TypeInit(dict);
  PyoaFloatProp_TypeInit(dict);
  PyoaFloatRangeProp_TypeInit(dict);
  PyoaFlt1DTblValue_TypeInit(dict);
  PyoaFlt2DTblValue_TypeInit(dict);
  PyoaFltIntFltTblValue_TypeInit(dict);
  PyoaFltValue_TypeInit(dict);
  PyoaFont_TypeInit(dict);
  PyoaFontEnum_TypeInit(dict);
  PyoaFrame_TypeInit(dict);
  PyoaFrameInst_TypeInit(dict);
  PyoaFrameInstModTypeEnum_TypeInit(dict);
  PyoaFrameModTypeEnum_TypeInit(dict);
  PyoaGCellPattern_TypeInit(dict);
  PyoaGCellPatternModTypeEnum_TypeInit(dict);
  PyoaGroundedNode_TypeInit(dict);
  PyoaGroup_TypeInit(dict);
  PyoaGroupCollection_TypeInit(dict);
  PyoaGroupDeleteWhen_TypeInit(dict);
  PyoaGroupDeleteWhenEnum_TypeInit(dict);
  PyoaGroupMember_TypeInit(dict);
  PyoaGroupMemberModTypeEnum_TypeInit(dict);
  PyoaGroupModTypeEnum_TypeInit(dict);
  PyoaGroupType_TypeInit(dict);
  PyoaGroupTypeEnum_TypeInit(dict);
  PyoaGuide_TypeInit(dict);
  PyoaGuideModTypeEnum_TypeInit(dict);
  PyoaGuideQuery_TypeInit(dict);
  PyoaHierPath_TypeInit(dict);
  PyoaHierPathElement_TypeInit(dict);
  PyoaHierProp_TypeInit(dict);
  PyoaImage_TypeInit(dict);
  PyoaImageModTypeEnum_TypeInit(dict);
  PyoaInductor_TypeInit(dict);
  PyoaInst_TypeInit(dict);
  PyoaInstAttrDisplay_TypeInit(dict);
  PyoaInstAttrType_TypeInit(dict);
  PyoaInstAttrTypeEnum_TypeInit(dict);
  PyoaInstHeader_TypeInit(dict);
  PyoaInstHeaderModTypeEnum_TypeInit(dict);
  PyoaInstModTypeEnum_TypeInit(dict);
  PyoaInstPropDisplay_TypeInit(dict);
  PyoaInstQuery_TypeInit(dict);
  PyoaInstTerm_TypeInit(dict);
  PyoaInstTermAttrType_TypeInit(dict);
  PyoaInstTermAttrTypeEnum_TypeInit(dict);
  PyoaInstTermModTypeEnum_TypeInit(dict);
  PyoaInt1DTblValue_TypeInit(dict);
  PyoaInt2DTblValue_TypeInit(dict);
  PyoaIntAppDef_oaAnalysisOpPoint_TypeInit(dict);
  PyoaIntAppDef_oaAnalysisPoint_TypeInit(dict);
  PyoaIntAppDef_oaAppObject_TypeInit(dict);
  PyoaIntAppDef_oaAssignment_TypeInit(dict);
  PyoaIntAppDef_oaBlock_TypeInit(dict);
  PyoaIntAppDef_oaBlockage_TypeInit(dict);
  PyoaIntAppDef_oaBoundary_TypeInit(dict);
  PyoaIntAppDef_oaBusNetDef_TypeInit(dict);
  PyoaIntAppDef_oaBusTermDef_TypeInit(dict);
  PyoaIntAppDef_oaCMap_TypeInit(dict);
  PyoaIntAppDef_oaCell_TypeInit(dict);
  PyoaIntAppDef_oaCellView_TypeInit(dict);
  PyoaIntAppDef_oaCluster_TypeInit(dict);
  PyoaIntAppDef_oaConnectDef_TypeInit(dict);
  PyoaIntAppDef_oaConstraint_TypeInit(dict);
  PyoaIntAppDef_oaConstraintDef_TypeInit(dict);
  PyoaIntAppDef_oaConstraintGroup_TypeInit(dict);
  PyoaIntAppDef_oaConstraintGroupHeader_TypeInit(dict);
  PyoaIntAppDef_oaConstraintGroupMem_TypeInit(dict);
  PyoaIntAppDef_oaConstraintParam_TypeInit(dict);
  PyoaIntAppDef_oaConstraintParamDef_TypeInit(dict);
  PyoaIntAppDef_oaDMData_TypeInit(dict);
  PyoaIntAppDef_oaDMFile_TypeInit(dict);
  PyoaIntAppDef_oaDerivedLayerParam_TypeInit(dict);
  PyoaIntAppDef_oaDesign_TypeInit(dict);
  PyoaIntAppDef_oaDesignInst_TypeInit(dict);
  PyoaIntAppDef_oaDevice_TypeInit(dict);
  PyoaIntAppDef_oaElmore_TypeInit(dict);
  PyoaIntAppDef_oaFigGroup_TypeInit(dict);
  PyoaIntAppDef_oaFigGroupMem_TypeInit(dict);
  PyoaIntAppDef_oaFrame_TypeInit(dict);
  PyoaIntAppDef_oaFrameInst_TypeInit(dict);
  PyoaIntAppDef_oaGCellPattern_TypeInit(dict);
  PyoaIntAppDef_oaGroup_TypeInit(dict);
  PyoaIntAppDef_oaGroupMember_TypeInit(dict);
  PyoaIntAppDef_oaGuide_TypeInit(dict);
  PyoaIntAppDef_oaImage_TypeInit(dict);
  PyoaIntAppDef_oaInst_TypeInit(dict);
  PyoaIntAppDef_oaInstHeader_TypeInit(dict);
  PyoaIntAppDef_oaInstTerm_TypeInit(dict);
  PyoaIntAppDef_oaLPPHeader_TypeInit(dict);
  PyoaIntAppDef_oaLayer_TypeInit(dict);
  PyoaIntAppDef_oaLayerHeader_TypeInit(dict);
  PyoaIntAppDef_oaLib_TypeInit(dict);
  PyoaIntAppDef_oaMarker_TypeInit(dict);
  PyoaIntAppDef_oaModAssignment_TypeInit(dict);
  PyoaIntAppDef_oaModBusNetDef_TypeInit(dict);
  PyoaIntAppDef_oaModBusTermDef_TypeInit(dict);
  PyoaIntAppDef_oaModConnectDef_TypeInit(dict);
  PyoaIntAppDef_oaModInst_TypeInit(dict);
  PyoaIntAppDef_oaModInstHeader_TypeInit(dict);
  PyoaIntAppDef_oaModInstTerm_TypeInit(dict);
  PyoaIntAppDef_oaModModuleInstHeader_TypeInit(dict);
  PyoaIntAppDef_oaModNet_TypeInit(dict);
  PyoaIntAppDef_oaModTerm_TypeInit(dict);
  PyoaIntAppDef_oaModVectorInstDef_TypeInit(dict);
  PyoaIntAppDef_oaModule_TypeInit(dict);
  PyoaIntAppDef_oaNet_TypeInit(dict);
  PyoaIntAppDef_oaNode_TypeInit(dict);
  PyoaIntAppDef_oaOccAssignment_TypeInit(dict);
  PyoaIntAppDef_oaOccBusNetDef_TypeInit(dict);
  PyoaIntAppDef_oaOccBusTermDef_TypeInit(dict);
  PyoaIntAppDef_oaOccConnectDef_TypeInit(dict);
  PyoaIntAppDef_oaOccInst_TypeInit(dict);
  PyoaIntAppDef_oaOccInstHeader_TypeInit(dict);
  PyoaIntAppDef_oaOccInstTerm_TypeInit(dict);
  PyoaIntAppDef_oaOccModuleInstHeader_TypeInit(dict);
  PyoaIntAppDef_oaOccNet_TypeInit(dict);
  PyoaIntAppDef_oaOccShape_TypeInit(dict);
  PyoaIntAppDef_oaOccTerm_TypeInit(dict);
  PyoaIntAppDef_oaOccVectorInstDef_TypeInit(dict);
  PyoaIntAppDef_oaOccurrence_TypeInit(dict);
  PyoaIntAppDef_oaOpPointHeader_TypeInit(dict);
  PyoaIntAppDef_oaParasiticNetwork_TypeInit(dict);
  PyoaIntAppDef_oaPin_TypeInit(dict);
  PyoaIntAppDef_oaPoleResidue_TypeInit(dict);
  PyoaIntAppDef_oaProp_TypeInit(dict);
  PyoaIntAppDef_oaPurpose_TypeInit(dict);
  PyoaIntAppDef_oaReducedModel_TypeInit(dict);
  PyoaIntAppDef_oaReticle_TypeInit(dict);
  PyoaIntAppDef_oaReticleRef_TypeInit(dict);
  PyoaIntAppDef_oaRoute_TypeInit(dict);
  PyoaIntAppDef_oaRow_TypeInit(dict);
  PyoaIntAppDef_oaRowHeader_TypeInit(dict);
  PyoaIntAppDef_oaScanChain_TypeInit(dict);
  PyoaIntAppDef_oaScanChainInst_TypeInit(dict);
  PyoaIntAppDef_oaScanChainSet_TypeInit(dict);
  PyoaIntAppDef_oaShape_TypeInit(dict);
  PyoaIntAppDef_oaSiteDef_TypeInit(dict);
  PyoaIntAppDef_oaSteiner_TypeInit(dict);
  PyoaIntAppDef_oaStepperMap_TypeInit(dict);
  PyoaIntAppDef_oaTech_TypeInit(dict);
  PyoaIntAppDef_oaTechHeader_TypeInit(dict);
  PyoaIntAppDef_oaTechLayerHeader_TypeInit(dict);
  PyoaIntAppDef_oaTechViaDefHeader_TypeInit(dict);
  PyoaIntAppDef_oaTerm_TypeInit(dict);
  PyoaIntAppDef_oaTrackPattern_TypeInit(dict);
  PyoaIntAppDef_oaValue_TypeInit(dict);
  PyoaIntAppDef_oaVectorInstDef_TypeInit(dict);
  PyoaIntAppDef_oaVia_TypeInit(dict);
  PyoaIntAppDef_oaViaDef_TypeInit(dict);
  PyoaIntAppDef_oaViaHeader_TypeInit(dict);
  PyoaIntAppDef_oaViaSpec_TypeInit(dict);
  PyoaIntAppDef_oaView_TypeInit(dict);
  PyoaIntAppDef_oaWafer_TypeInit(dict);
  PyoaIntAppDef_oaWaferDesc_TypeInit(dict);
  PyoaIntAppDef_oaWaferFeature_TypeInit(dict);
  PyoaIntDualIntArrayTblValue_TypeInit(dict);
  PyoaIntFltTblValue_TypeInit(dict);
  PyoaIntProp_TypeInit(dict);
  PyoaIntRange_TypeInit(dict);
  PyoaIntRangeProp_TypeInit(dict);
  PyoaIntRangeValue_TypeInit(dict);
  PyoaIntValue_TypeInit(dict);
  PyoaInterPointerAppDef_oaAnalysisOpPoint_TypeInit(dict);
  PyoaInterPointerAppDef_oaAnalysisPoint_TypeInit(dict);
  PyoaInterPointerAppDef_oaAppObject_TypeInit(dict);
  PyoaInterPointerAppDef_oaAssignment_TypeInit(dict);
  PyoaInterPointerAppDef_oaBlock_TypeInit(dict);
  PyoaInterPointerAppDef_oaBlockage_TypeInit(dict);
  PyoaInterPointerAppDef_oaBoundary_TypeInit(dict);
  PyoaInterPointerAppDef_oaBusNetDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaBusTermDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaCMap_TypeInit(dict);
  PyoaInterPointerAppDef_oaCell_TypeInit(dict);
  PyoaInterPointerAppDef_oaCellView_TypeInit(dict);
  PyoaInterPointerAppDef_oaCluster_TypeInit(dict);
  PyoaInterPointerAppDef_oaConnectDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaConstraint_TypeInit(dict);
  PyoaInterPointerAppDef_oaConstraintDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaConstraintGroup_TypeInit(dict);
  PyoaInterPointerAppDef_oaConstraintGroupHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaConstraintGroupMem_TypeInit(dict);
  PyoaInterPointerAppDef_oaConstraintParam_TypeInit(dict);
  PyoaInterPointerAppDef_oaConstraintParamDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaDMData_TypeInit(dict);
  PyoaInterPointerAppDef_oaDMFile_TypeInit(dict);
  PyoaInterPointerAppDef_oaDerivedLayerParam_TypeInit(dict);
  PyoaInterPointerAppDef_oaDesign_TypeInit(dict);
  PyoaInterPointerAppDef_oaDesignInst_TypeInit(dict);
  PyoaInterPointerAppDef_oaDevice_TypeInit(dict);
  PyoaInterPointerAppDef_oaElmore_TypeInit(dict);
  PyoaInterPointerAppDef_oaFigGroup_TypeInit(dict);
  PyoaInterPointerAppDef_oaFigGroupMem_TypeInit(dict);
  PyoaInterPointerAppDef_oaFrame_TypeInit(dict);
  PyoaInterPointerAppDef_oaFrameInst_TypeInit(dict);
  PyoaInterPointerAppDef_oaGCellPattern_TypeInit(dict);
  PyoaInterPointerAppDef_oaGroup_TypeInit(dict);
  PyoaInterPointerAppDef_oaGroupMember_TypeInit(dict);
  PyoaInterPointerAppDef_oaGuide_TypeInit(dict);
  PyoaInterPointerAppDef_oaImage_TypeInit(dict);
  PyoaInterPointerAppDef_oaInst_TypeInit(dict);
  PyoaInterPointerAppDef_oaInstHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaInstTerm_TypeInit(dict);
  PyoaInterPointerAppDef_oaLPPHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaLayer_TypeInit(dict);
  PyoaInterPointerAppDef_oaLayerHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaLib_TypeInit(dict);
  PyoaInterPointerAppDef_oaMarker_TypeInit(dict);
  PyoaInterPointerAppDef_oaModAssignment_TypeInit(dict);
  PyoaInterPointerAppDef_oaModBusNetDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaModBusTermDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaModConnectDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaModInst_TypeInit(dict);
  PyoaInterPointerAppDef_oaModInstHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaModInstTerm_TypeInit(dict);
  PyoaInterPointerAppDef_oaModModuleInstHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaModNet_TypeInit(dict);
  PyoaInterPointerAppDef_oaModTerm_TypeInit(dict);
  PyoaInterPointerAppDef_oaModVectorInstDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaModule_TypeInit(dict);
  PyoaInterPointerAppDef_oaNet_TypeInit(dict);
  PyoaInterPointerAppDef_oaNode_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccAssignment_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccBusNetDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccBusTermDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccConnectDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccInst_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccInstHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccInstTerm_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccModuleInstHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccNet_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccShape_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccTerm_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccVectorInstDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaOccurrence_TypeInit(dict);
  PyoaInterPointerAppDef_oaOpPointHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaParasiticNetwork_TypeInit(dict);
  PyoaInterPointerAppDef_oaPin_TypeInit(dict);
  PyoaInterPointerAppDef_oaPoleResidue_TypeInit(dict);
  PyoaInterPointerAppDef_oaProp_TypeInit(dict);
  PyoaInterPointerAppDef_oaPurpose_TypeInit(dict);
  PyoaInterPointerAppDef_oaReducedModel_TypeInit(dict);
  PyoaInterPointerAppDef_oaReticle_TypeInit(dict);
  PyoaInterPointerAppDef_oaReticleRef_TypeInit(dict);
  PyoaInterPointerAppDef_oaRoute_TypeInit(dict);
  PyoaInterPointerAppDef_oaRow_TypeInit(dict);
  PyoaInterPointerAppDef_oaRowHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaScanChain_TypeInit(dict);
  PyoaInterPointerAppDef_oaScanChainInst_TypeInit(dict);
  PyoaInterPointerAppDef_oaScanChainSet_TypeInit(dict);
  PyoaInterPointerAppDef_oaShape_TypeInit(dict);
  PyoaInterPointerAppDef_oaSiteDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaSteiner_TypeInit(dict);
  PyoaInterPointerAppDef_oaStepperMap_TypeInit(dict);
  PyoaInterPointerAppDef_oaTech_TypeInit(dict);
  PyoaInterPointerAppDef_oaTechHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaTechLayerHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaTechViaDefHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaTerm_TypeInit(dict);
  PyoaInterPointerAppDef_oaTrackPattern_TypeInit(dict);
  PyoaInterPointerAppDef_oaValue_TypeInit(dict);
  PyoaInterPointerAppDef_oaVectorInstDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaVia_TypeInit(dict);
  PyoaInterPointerAppDef_oaViaDef_TypeInit(dict);
  PyoaInterPointerAppDef_oaViaHeader_TypeInit(dict);
  PyoaInterPointerAppDef_oaViaSpec_TypeInit(dict);
  PyoaInterPointerAppDef_oaView_TypeInit(dict);
  PyoaInterPointerAppDef_oaWafer_TypeInit(dict);
  PyoaInterPointerAppDef_oaWaferDesc_TypeInit(dict);
  PyoaInterPointerAppDef_oaWaferFeature_TypeInit(dict);
  PyoaInterpolateType_TypeInit(dict);
  PyoaInterpolateTypeEnum_TypeInit(dict);
  PyoaIntraPointerAppDef_oaAnalysisOpPoint_TypeInit(dict);
  PyoaIntraPointerAppDef_oaAnalysisPoint_TypeInit(dict);
  PyoaIntraPointerAppDef_oaAppObject_TypeInit(dict);
  PyoaIntraPointerAppDef_oaAssignment_TypeInit(dict);
  PyoaIntraPointerAppDef_oaBlock_TypeInit(dict);
  PyoaIntraPointerAppDef_oaBlockage_TypeInit(dict);
  PyoaIntraPointerAppDef_oaBoundary_TypeInit(dict);
  PyoaIntraPointerAppDef_oaBusNetDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaBusTermDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaCMap_TypeInit(dict);
  PyoaIntraPointerAppDef_oaCell_TypeInit(dict);
  PyoaIntraPointerAppDef_oaCellView_TypeInit(dict);
  PyoaIntraPointerAppDef_oaCluster_TypeInit(dict);
  PyoaIntraPointerAppDef_oaConnectDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaConstraint_TypeInit(dict);
  PyoaIntraPointerAppDef_oaConstraintDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaConstraintGroup_TypeInit(dict);
  PyoaIntraPointerAppDef_oaConstraintGroupHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaConstraintGroupMem_TypeInit(dict);
  PyoaIntraPointerAppDef_oaConstraintParam_TypeInit(dict);
  PyoaIntraPointerAppDef_oaConstraintParamDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaDMData_TypeInit(dict);
  PyoaIntraPointerAppDef_oaDMFile_TypeInit(dict);
  PyoaIntraPointerAppDef_oaDerivedLayerParam_TypeInit(dict);
  PyoaIntraPointerAppDef_oaDesign_TypeInit(dict);
  PyoaIntraPointerAppDef_oaDesignInst_TypeInit(dict);
  PyoaIntraPointerAppDef_oaDevice_TypeInit(dict);
  PyoaIntraPointerAppDef_oaElmore_TypeInit(dict);
  PyoaIntraPointerAppDef_oaFigGroup_TypeInit(dict);
  PyoaIntraPointerAppDef_oaFigGroupMem_TypeInit(dict);
  PyoaIntraPointerAppDef_oaFrame_TypeInit(dict);
  PyoaIntraPointerAppDef_oaFrameInst_TypeInit(dict);
  PyoaIntraPointerAppDef_oaGCellPattern_TypeInit(dict);
  PyoaIntraPointerAppDef_oaGroup_TypeInit(dict);
  PyoaIntraPointerAppDef_oaGroupMember_TypeInit(dict);
  PyoaIntraPointerAppDef_oaGuide_TypeInit(dict);
  PyoaIntraPointerAppDef_oaImage_TypeInit(dict);
  PyoaIntraPointerAppDef_oaInst_TypeInit(dict);
  PyoaIntraPointerAppDef_oaInstHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaInstTerm_TypeInit(dict);
  PyoaIntraPointerAppDef_oaLPPHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaLayer_TypeInit(dict);
  PyoaIntraPointerAppDef_oaLayerHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaLib_TypeInit(dict);
  PyoaIntraPointerAppDef_oaMarker_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModAssignment_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModBusNetDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModBusTermDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModConnectDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModInst_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModInstHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModInstTerm_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModModuleInstHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModNet_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModTerm_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModVectorInstDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaModule_TypeInit(dict);
  PyoaIntraPointerAppDef_oaNet_TypeInit(dict);
  PyoaIntraPointerAppDef_oaNode_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccAssignment_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccBusNetDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccBusTermDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccConnectDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccInst_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccInstHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccInstTerm_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccModuleInstHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccNet_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccShape_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccTerm_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccVectorInstDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOccurrence_TypeInit(dict);
  PyoaIntraPointerAppDef_oaOpPointHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaParasiticNetwork_TypeInit(dict);
  PyoaIntraPointerAppDef_oaPin_TypeInit(dict);
  PyoaIntraPointerAppDef_oaPoleResidue_TypeInit(dict);
  PyoaIntraPointerAppDef_oaProp_TypeInit(dict);
  PyoaIntraPointerAppDef_oaPurpose_TypeInit(dict);
  PyoaIntraPointerAppDef_oaReducedModel_TypeInit(dict);
  PyoaIntraPointerAppDef_oaReticle_TypeInit(dict);
  PyoaIntraPointerAppDef_oaReticleRef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaRoute_TypeInit(dict);
  PyoaIntraPointerAppDef_oaRow_TypeInit(dict);
  PyoaIntraPointerAppDef_oaRowHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaScanChain_TypeInit(dict);
  PyoaIntraPointerAppDef_oaScanChainInst_TypeInit(dict);
  PyoaIntraPointerAppDef_oaScanChainSet_TypeInit(dict);
  PyoaIntraPointerAppDef_oaShape_TypeInit(dict);
  PyoaIntraPointerAppDef_oaSiteDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaSteiner_TypeInit(dict);
  PyoaIntraPointerAppDef_oaStepperMap_TypeInit(dict);
  PyoaIntraPointerAppDef_oaTech_TypeInit(dict);
  PyoaIntraPointerAppDef_oaTechHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaTechLayerHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaTechViaDefHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaTerm_TypeInit(dict);
  PyoaIntraPointerAppDef_oaTrackPattern_TypeInit(dict);
  PyoaIntraPointerAppDef_oaValue_TypeInit(dict);
  PyoaIntraPointerAppDef_oaVectorInstDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaVia_TypeInit(dict);
  PyoaIntraPointerAppDef_oaViaDef_TypeInit(dict);
  PyoaIntraPointerAppDef_oaViaHeader_TypeInit(dict);
  PyoaIntraPointerAppDef_oaViaSpec_TypeInit(dict);
  PyoaIntraPointerAppDef_oaView_TypeInit(dict);
  PyoaIntraPointerAppDef_oaWafer_TypeInit(dict);
  PyoaIntraPointerAppDef_oaWaferDesc_TypeInit(dict);
  PyoaIntraPointerAppDef_oaWaferFeature_TypeInit(dict);
  PyoaIter_oaAnalysisLib_TypeInit(dict);
  PyoaIter_oaAnalysisOpPoint_TypeInit(dict);
  PyoaIter_oaAnalysisPoint_TypeInit(dict);
  PyoaIter_oaAppDef_TypeInit(dict);
  PyoaIter_oaAppObject_TypeInit(dict);
  PyoaIter_oaAppObjectDef_TypeInit(dict);
  PyoaIter_oaAreaBoundary_TypeInit(dict);
  PyoaIter_oaAssignment_TypeInit(dict);
  PyoaIter_oaBitNet_TypeInit(dict);
  PyoaIter_oaBitTerm_TypeInit(dict);
  PyoaIter_oaBlockObject_TypeInit(dict);
  PyoaIter_oaBlockage_TypeInit(dict);
  PyoaIter_oaBusNet_TypeInit(dict);
  PyoaIter_oaBusNetBit_TypeInit(dict);
  PyoaIter_oaBusNetDef_TypeInit(dict);
  PyoaIter_oaBusTerm_TypeInit(dict);
  PyoaIter_oaBusTermBit_TypeInit(dict);
  PyoaIter_oaBusTermDef_TypeInit(dict);
  PyoaIter_oaCell_TypeInit(dict);
  PyoaIter_oaCellView_TypeInit(dict);
  PyoaIter_oaCluster_TypeInit(dict);
  PyoaIter_oaClusterBoundary_TypeInit(dict);
  PyoaIter_oaConnectDef_TypeInit(dict);
  PyoaIter_oaConstraint_TypeInit(dict);
  PyoaIter_oaConstraintDef_TypeInit(dict);
  PyoaIter_oaConstraintGroup_TypeInit(dict);
  PyoaIter_oaConstraintGroupHeader_TypeInit(dict);
  PyoaIter_oaConstraintGroupMem_TypeInit(dict);
  PyoaIter_oaConstraintParam_TypeInit(dict);
  PyoaIter_oaConstraintParamDef_TypeInit(dict);
  PyoaIter_oaDMData_TypeInit(dict);
  PyoaIter_oaDMFile_TypeInit(dict);
  PyoaIter_oaDerivedLayerDef_TypeInit(dict);
  PyoaIter_oaDerivedLayerParam_TypeInit(dict);
  PyoaIter_oaDerivedLayerParamDef_TypeInit(dict);
  PyoaIter_oaDesign_TypeInit(dict);
  PyoaIter_oaDesignInst_TypeInit(dict);
  PyoaIter_oaDesignObject_TypeInit(dict);
  PyoaIter_oaDevice_TypeInit(dict);
  PyoaIter_oaElmore_TypeInit(dict);
  PyoaIter_oaFigGroup_TypeInit(dict);
  PyoaIter_oaFigGroupMem_TypeInit(dict);
  PyoaIter_oaFrame_TypeInit(dict);
  PyoaIter_oaFrameInst_TypeInit(dict);
  PyoaIter_oaGCellPattern_TypeInit(dict);
  PyoaIter_oaGroup_TypeInit(dict);
  PyoaIter_oaGroupMember_TypeInit(dict);
  PyoaIter_oaGuide_TypeInit(dict);
  PyoaIter_oaImage_TypeInit(dict);
  PyoaIter_oaInst_TypeInit(dict);
  PyoaIter_oaInstHeader_TypeInit(dict);
  PyoaIter_oaInstTerm_TypeInit(dict);
  PyoaIter_oaLPPHeader_TypeInit(dict);
  PyoaIter_oaLayer_TypeInit(dict);
  PyoaIter_oaLayerArrayConstraint_TypeInit(dict);
  PyoaIter_oaLayerConstraint_TypeInit(dict);
  PyoaIter_oaLayerHeader_TypeInit(dict);
  PyoaIter_oaLayerPairConstraint_TypeInit(dict);
  PyoaIter_oaLib_TypeInit(dict);
  PyoaIter_oaLibDefList_TypeInit(dict);
  PyoaIter_oaLibDefListMem_TypeInit(dict);
  PyoaIter_oaMarker_TypeInit(dict);
  PyoaIter_oaModAssignment_TypeInit(dict);
  PyoaIter_oaModBitNet_TypeInit(dict);
  PyoaIter_oaModBusNet_TypeInit(dict);
  PyoaIter_oaModBusNetBit_TypeInit(dict);
  PyoaIter_oaModBusNetDef_TypeInit(dict);
  PyoaIter_oaModBusTerm_TypeInit(dict);
  PyoaIter_oaModBusTermBit_TypeInit(dict);
  PyoaIter_oaModBusTermDef_TypeInit(dict);
  PyoaIter_oaModConnectDef_TypeInit(dict);
  PyoaIter_oaModDesignInst_TypeInit(dict);
  PyoaIter_oaModInst_TypeInit(dict);
  PyoaIter_oaModInstHeader_TypeInit(dict);
  PyoaIter_oaModInstTerm_TypeInit(dict);
  PyoaIter_oaModModuleInst_TypeInit(dict);
  PyoaIter_oaModModuleInstHeader_TypeInit(dict);
  PyoaIter_oaModNet_TypeInit(dict);
  PyoaIter_oaModTerm_TypeInit(dict);
  PyoaIter_oaModVectorInstDef_TypeInit(dict);
  PyoaIter_oaModule_TypeInit(dict);
  PyoaIter_oaMutualInductor_TypeInit(dict);
  PyoaIter_oaNet_TypeInit(dict);
  PyoaIter_oaNode_TypeInit(dict);
  PyoaIter_oaOccAssignment_TypeInit(dict);
  PyoaIter_oaOccBitNet_TypeInit(dict);
  PyoaIter_oaOccBusNet_TypeInit(dict);
  PyoaIter_oaOccBusNetBit_TypeInit(dict);
  PyoaIter_oaOccBusNetDef_TypeInit(dict);
  PyoaIter_oaOccBusTerm_TypeInit(dict);
  PyoaIter_oaOccBusTermBit_TypeInit(dict);
  PyoaIter_oaOccBusTermDef_TypeInit(dict);
  PyoaIter_oaOccConnectDef_TypeInit(dict);
  PyoaIter_oaOccDesignInst_TypeInit(dict);
  PyoaIter_oaOccInst_TypeInit(dict);
  PyoaIter_oaOccInstHeader_TypeInit(dict);
  PyoaIter_oaOccInstTerm_TypeInit(dict);
  PyoaIter_oaOccModuleInst_TypeInit(dict);
  PyoaIter_oaOccModuleInstHeader_TypeInit(dict);
  PyoaIter_oaOccNet_TypeInit(dict);
  PyoaIter_oaOccTerm_TypeInit(dict);
  PyoaIter_oaOccVectorInstDef_TypeInit(dict);
  PyoaIter_oaOccurrence_TypeInit(dict);
  PyoaIter_oaOpPoint_TypeInit(dict);
  PyoaIter_oaOpPointHeader_TypeInit(dict);
  PyoaIter_oaParasiticNetwork_TypeInit(dict);
  PyoaIter_oaPin_TypeInit(dict);
  PyoaIter_oaPinFig_TypeInit(dict);
  PyoaIter_oaPoleResidue_TypeInit(dict);
  PyoaIter_oaProp_TypeInit(dict);
  PyoaIter_oaPurpose_TypeInit(dict);
  PyoaIter_oaReticle_TypeInit(dict);
  PyoaIter_oaReticleRef_TypeInit(dict);
  PyoaIter_oaRoute_TypeInit(dict);
  PyoaIter_oaRow_TypeInit(dict);
  PyoaIter_oaRowHeader_TypeInit(dict);
  PyoaIter_oaScanChain_TypeInit(dict);
  PyoaIter_oaScanChainInst_TypeInit(dict);
  PyoaIter_oaScanChainSet_TypeInit(dict);
  PyoaIter_oaShape_TypeInit(dict);
  PyoaIter_oaSimpleConstraint_TypeInit(dict);
  PyoaIter_oaSiteDef_TypeInit(dict);
  PyoaIter_oaSteiner_TypeInit(dict);
  PyoaIter_oaStepperMap_TypeInit(dict);
  PyoaIter_oaSubNetwork_TypeInit(dict);
  PyoaIter_oaTech_TypeInit(dict);
  PyoaIter_oaTechHeader_TypeInit(dict);
  PyoaIter_oaTechLayerHeader_TypeInit(dict);
  PyoaIter_oaTechViaDefHeader_TypeInit(dict);
  PyoaIter_oaTerm_TypeInit(dict);
  PyoaIter_oaTrackPattern_TypeInit(dict);
  PyoaIter_oaValue_TypeInit(dict);
  PyoaIter_oaVectorInst_TypeInit(dict);
  PyoaIter_oaVectorInstBit_TypeInit(dict);
  PyoaIter_oaVectorInstDef_TypeInit(dict);
  PyoaIter_oaVia_TypeInit(dict);
  PyoaIter_oaViaDef_TypeInit(dict);
  PyoaIter_oaViaHeader_TypeInit(dict);
  PyoaIter_oaViaSpec_TypeInit(dict);
  PyoaIter_oaView_TypeInit(dict);
  PyoaIter_oaViewType_TypeInit(dict);
  PyoaIter_oaWafer_TypeInit(dict);
  PyoaIter_oaWaferFeature_TypeInit(dict);
  PyoaLPPHeader_TypeInit(dict);
  PyoaLPPHeaderModTypeEnum_TypeInit(dict);
  PyoaLayer_TypeInit(dict);
  PyoaLayerArray_TypeInit(dict);
  PyoaLayerArrayConstraint_TypeInit(dict);
  PyoaLayerArrayConstraintDef_TypeInit(dict);
  PyoaLayerArrayConstraintType_TypeInit(dict);
  PyoaLayerArrayConstraintTypeEnum_TypeInit(dict);
  PyoaLayerArrayValue_TypeInit(dict);
  PyoaLayerBlockage_TypeInit(dict);
  PyoaLayerConstraint_TypeInit(dict);
  PyoaLayerConstraintDef_TypeInit(dict);
  PyoaLayerConstraintType_TypeInit(dict);
  PyoaLayerConstraintTypeEnum_TypeInit(dict);
  PyoaLayerHalo_TypeInit(dict);
  PyoaLayerHeader_TypeInit(dict);
  PyoaLayerHeaderModTypeEnum_TypeInit(dict);
  PyoaLayerMap_TypeInit(dict);
  PyoaLayerMapArray_TypeInit(dict);
  PyoaLayerModTypeEnum_TypeInit(dict);
  PyoaLayerOp_TypeInit(dict);
  PyoaLayerOpEnum_TypeInit(dict);
  PyoaLayerPairConstraint_TypeInit(dict);
  PyoaLayerPairConstraintDef_TypeInit(dict);
  PyoaLayerPairConstraintType_TypeInit(dict);
  PyoaLayerPairConstraintTypeEnum_TypeInit(dict);
  PyoaLayerValue_TypeInit(dict);
  PyoaLefNS_TypeInit(dict);
  PyoaLib_TypeInit(dict);
  PyoaLibAccess_TypeInit(dict);
  PyoaLibAccessEnum_TypeInit(dict);
  PyoaLibAccessLevel_TypeInit(dict);
  PyoaLibAccessLevelEnum_TypeInit(dict);
  PyoaLibDMData_TypeInit(dict);
  PyoaLibDataType_TypeInit(dict);
  PyoaLibDataTypeEnum_TypeInit(dict);
  PyoaLibDef_TypeInit(dict);
  PyoaLibDefList_TypeInit(dict);
  PyoaLibDefListMem_TypeInit(dict);
  PyoaLibDefListRef_TypeInit(dict);
  PyoaLibDefListWarningTypeEnum_TypeInit(dict);
  PyoaLibMode_TypeInit(dict);
  PyoaLibModeEnum_TypeInit(dict);
  PyoaLine_TypeInit(dict);
  PyoaLumpedElmore_TypeInit(dict);
  PyoaMapFile_TypeInit(dict);
  PyoaMapFileWindow_TypeInit(dict);
  PyoaMapWindow_TypeInit(dict);
  PyoaMarker_TypeInit(dict);
  PyoaMarkerDeleteWhen_TypeInit(dict);
  PyoaMarkerDeleteWhenEnum_TypeInit(dict);
  PyoaMarkerModTypeEnum_TypeInit(dict);
  PyoaMarkerQuery_TypeInit(dict);
  PyoaMarkerSeverity_TypeInit(dict);
  PyoaMarkerSeverityEnum_TypeInit(dict);
  PyoaMaterial_TypeInit(dict);
  PyoaMaterialEnum_TypeInit(dict);
  PyoaMemNetCollection_TypeInit(dict);
  PyoaMemNetIter_TypeInit(dict);
  PyoaMfgLayerArray_TypeInit(dict);
  PyoaModAssignAssignment_TypeInit(dict);
  PyoaModAssignValue_TypeInit(dict);
  PyoaModAssignment_TypeInit(dict);
  PyoaModBitInst_TypeInit(dict);
  PyoaModBitNet_TypeInit(dict);
  PyoaModBitTerm_TypeInit(dict);
  PyoaModBundleNet_TypeInit(dict);
  PyoaModBundleTerm_TypeInit(dict);
  PyoaModBusNet_TypeInit(dict);
  PyoaModBusNetBit_TypeInit(dict);
  PyoaModBusNetDef_TypeInit(dict);
  PyoaModBusTerm_TypeInit(dict);
  PyoaModBusTermBit_TypeInit(dict);
  PyoaModBusTermDef_TypeInit(dict);
  PyoaModConnectDef_TypeInit(dict);
  PyoaModDesignInst_TypeInit(dict);
  PyoaModInst_TypeInit(dict);
  PyoaModInstHeader_TypeInit(dict);
  PyoaModInstTerm_TypeInit(dict);
  PyoaModMemNetCollection_TypeInit(dict);
  PyoaModMemNetIter_TypeInit(dict);
  PyoaModModuleBitInst_TypeInit(dict);
  PyoaModModuleInst_TypeInit(dict);
  PyoaModModuleInstHeader_TypeInit(dict);
  PyoaModModuleScalarInst_TypeInit(dict);
  PyoaModModuleVectorInst_TypeInit(dict);
  PyoaModModuleVectorInstBit_TypeInit(dict);
  PyoaModNet_TypeInit(dict);
  PyoaModNetConnectDef_TypeInit(dict);
  PyoaModNetTermArray_TypeInit(dict);
  PyoaModNetTermNameArray_TypeInit(dict);
  PyoaModNetTermPosArray_TypeInit(dict);
  PyoaModObject_TypeInit(dict);
  PyoaModScalarInst_TypeInit(dict);
  PyoaModScalarNet_TypeInit(dict);
  PyoaModScalarTerm_TypeInit(dict);
  PyoaModTerm_TypeInit(dict);
  PyoaModTermArray_TypeInit(dict);
  PyoaModTermConnectDef_TypeInit(dict);
  PyoaModVectorInst_TypeInit(dict);
  PyoaModVectorInstBit_TypeInit(dict);
  PyoaModVectorInstDef_TypeInit(dict);
  PyoaModule_TypeInit(dict);
  PyoaModuleInstHeaderModTypeEnum_TypeInit(dict);
  PyoaModuleModTypeEnum_TypeInit(dict);
  PyoaMutualInductor_TypeInit(dict);
  PyoaName_TypeInit(dict);
  PyoaNameBase_TypeInit(dict);
  PyoaNameMem_TypeInit(dict);
  PyoaNameSpace_TypeInit(dict);
  PyoaNameType_TypeInit(dict);
  PyoaNameTypeEnum_TypeInit(dict);
  PyoaNativeNS_TypeInit(dict);
  PyoaNet_TypeInit(dict);
  PyoaNetAttrType_TypeInit(dict);
  PyoaNetAttrTypeEnum_TypeInit(dict);
  PyoaNetConnectDef_TypeInit(dict);
  PyoaNetModTypeEnum_TypeInit(dict);
  PyoaNetNetCollTypeEnum_TypeInit(dict);
  PyoaNetTermArray_TypeInit(dict);
  PyoaNetTermArrayBase_oaModNet_oaModTerm_TypeInit(dict);
  PyoaNetTermArrayBase_oaModNet_oaName_TypeInit(dict);
  PyoaNetTermArrayBase_oaModNet_oaUInt4_TypeInit(dict);
  PyoaNetTermArrayBase_oaNet_oaName_TypeInit(dict);
  PyoaNetTermArrayBase_oaNet_oaTerm_TypeInit(dict);
  PyoaNetTermArrayBase_oaNet_oaUInt4_TypeInit(dict);
  PyoaNetTermNameArray_TypeInit(dict);
  PyoaNetTermPair_oaModNet_oaModTerm_TypeInit(dict);
  PyoaNetTermPair_oaModNet_oaName_TypeInit(dict);
  PyoaNetTermPair_oaModNet_oaUInt4_TypeInit(dict);
  PyoaNetTermPair_oaNet_oaName_TypeInit(dict);
  PyoaNetTermPair_oaNet_oaTerm_TypeInit(dict);
  PyoaNetTermPair_oaNet_oaUInt4_TypeInit(dict);
  PyoaNetTermPosArray_TypeInit(dict);
  PyoaNode_TypeInit(dict);
  PyoaNodeModTypeEnum_TypeInit(dict);
  PyoaObject_TypeInit(dict);
  PyoaObjectArray_TypeInit(dict);
  PyoaObserver_oaAnalysisLib_TypeInit(dict);
  PyoaObserver_oaAnalysisOpPoint_TypeInit(dict);
  PyoaObserver_oaAnalysisPoint_TypeInit(dict);
  PyoaObserver_oaAppDef_TypeInit(dict);
  PyoaObserver_oaAppObject_TypeInit(dict);
  PyoaObserver_oaAppProp_TypeInit(dict);
  PyoaObserver_oaArc_TypeInit(dict);
  PyoaObserver_oaAreaBlockage_TypeInit(dict);
  PyoaObserver_oaAreaBoundary_TypeInit(dict);
  PyoaObserver_oaAreaHalo_TypeInit(dict);
  PyoaObserver_oaArrayInst_TypeInit(dict);
  PyoaObserver_oaArraySiteDef_TypeInit(dict);
  PyoaObserver_oaAssignAssignment_TypeInit(dict);
  PyoaObserver_oaAssignValue_TypeInit(dict);
  PyoaObserver_oaAssignment_TypeInit(dict);
  PyoaObserver_oaAttrDisplay_TypeInit(dict);
  PyoaObserver_oaBitInst_TypeInit(dict);
  PyoaObserver_oaBitNet_TypeInit(dict);
  PyoaObserver_oaBitTerm_TypeInit(dict);
  PyoaObserver_oaBlock_TypeInit(dict);
  PyoaObserver_oaBlockage_TypeInit(dict);
  PyoaObserver_oaBooleanProp_TypeInit(dict);
  PyoaObserver_oaBooleanValue_TypeInit(dict);
  PyoaObserver_oaBoundary_TypeInit(dict);
  PyoaObserver_oaBoxArrayValue_TypeInit(dict);
  PyoaObserver_oaBundleNet_TypeInit(dict);
  PyoaObserver_oaBundleTerm_TypeInit(dict);
  PyoaObserver_oaBusNet_TypeInit(dict);
  PyoaObserver_oaBusNetBit_TypeInit(dict);
  PyoaObserver_oaBusNetDef_TypeInit(dict);
  PyoaObserver_oaBusTerm_TypeInit(dict);
  PyoaObserver_oaBusTermBit_TypeInit(dict);
  PyoaObserver_oaBusTermDef_TypeInit(dict);
  PyoaObserver_oaCMap_TypeInit(dict);
  PyoaObserver_oaCell_TypeInit(dict);
  PyoaObserver_oaCellView_TypeInit(dict);
  PyoaObserver_oaCluster_TypeInit(dict);
  PyoaObserver_oaClusterBoundary_TypeInit(dict);
  PyoaObserver_oaConnectDef_TypeInit(dict);
  PyoaObserver_oaConstraint_TypeInit(dict);
  PyoaObserver_oaConstraintDef_TypeInit(dict);
  PyoaObserver_oaConstraintGroup_TypeInit(dict);
  PyoaObserver_oaConstraintGroupMem_TypeInit(dict);
  PyoaObserver_oaConstraintParam_TypeInit(dict);
  PyoaObserver_oaConstraintParamDef_TypeInit(dict);
  PyoaObserver_oaCouplingCap_TypeInit(dict);
  PyoaObserver_oaCustomVia_TypeInit(dict);
  PyoaObserver_oaCustomViaDef_TypeInit(dict);
  PyoaObserver_oaCustomViaHeader_TypeInit(dict);
  PyoaObserver_oaDMData_TypeInit(dict);
  PyoaObserver_oaDMFile_TypeInit(dict);
  PyoaObserver_oaDerivedLayer_TypeInit(dict);
  PyoaObserver_oaDerivedLayerDef_TypeInit(dict);
  PyoaObserver_oaDerivedLayerParam_TypeInit(dict);
  PyoaObserver_oaDerivedLayerParamDef_TypeInit(dict);
  PyoaObserver_oaDesign_TypeInit(dict);
  PyoaObserver_oaDesignInst_TypeInit(dict);
  PyoaObserver_oaDevice_TypeInit(dict);
  PyoaObserver_oaDiode_TypeInit(dict);
  PyoaObserver_oaDonut_TypeInit(dict);
  PyoaObserver_oaDot_TypeInit(dict);
  PyoaObserver_oaDoubleProp_TypeInit(dict);
  PyoaObserver_oaDoubleRangeProp_TypeInit(dict);
  PyoaObserver_oaDualInt1DTblValue_TypeInit(dict);
  PyoaObserver_oaDualIntValue_TypeInit(dict);
  PyoaObserver_oaEllipse_TypeInit(dict);
  PyoaObserver_oaElmore_TypeInit(dict);
  PyoaObserver_oaEnumProp_TypeInit(dict);
  PyoaObserver_oaEvalText_TypeInit(dict);
  PyoaObserver_oaFigGroup_TypeInit(dict);
  PyoaObserver_oaFigGroupMem_TypeInit(dict);
  PyoaObserver_oaFloatProp_TypeInit(dict);
  PyoaObserver_oaFloatRangeProp_TypeInit(dict);
  PyoaObserver_oaFlt1DTblValue_TypeInit(dict);
  PyoaObserver_oaFlt2DTblValue_TypeInit(dict);
  PyoaObserver_oaFltIntFltTblValue_TypeInit(dict);
  PyoaObserver_oaFltValue_TypeInit(dict);
  PyoaObserver_oaFrame_TypeInit(dict);
  PyoaObserver_oaFrameInst_TypeInit(dict);
  PyoaObserver_oaGCellPattern_TypeInit(dict);
  PyoaObserver_oaGroundedNode_TypeInit(dict);
  PyoaObserver_oaGroup_TypeInit(dict);
  PyoaObserver_oaGroupMember_TypeInit(dict);
  PyoaObserver_oaGuide_TypeInit(dict);
  PyoaObserver_oaHierProp_TypeInit(dict);
  PyoaObserver_oaImage_TypeInit(dict);
  PyoaObserver_oaInductor_TypeInit(dict);
  PyoaObserver_oaInst_TypeInit(dict);
  PyoaObserver_oaInstAttrDisplay_TypeInit(dict);
  PyoaObserver_oaInstHeader_TypeInit(dict);
  PyoaObserver_oaInstPropDisplay_TypeInit(dict);
  PyoaObserver_oaInstTerm_TypeInit(dict);
  PyoaObserver_oaInt1DTblValue_TypeInit(dict);
  PyoaObserver_oaInt2DTblValue_TypeInit(dict);
  PyoaObserver_oaIntDualIntArrayTblValue_TypeInit(dict);
  PyoaObserver_oaIntFltTblValue_TypeInit(dict);
  PyoaObserver_oaIntProp_TypeInit(dict);
  PyoaObserver_oaIntRangeProp_TypeInit(dict);
  PyoaObserver_oaIntRangeValue_TypeInit(dict);
  PyoaObserver_oaIntValue_TypeInit(dict);
  PyoaObserver_oaLPPHeader_TypeInit(dict);
  PyoaObserver_oaLayer_TypeInit(dict);
  PyoaObserver_oaLayerBlockage_TypeInit(dict);
  PyoaObserver_oaLayerHalo_TypeInit(dict);
  PyoaObserver_oaLayerHeader_TypeInit(dict);
  PyoaObserver_oaLib_TypeInit(dict);
  PyoaObserver_oaLibDefList_TypeInit(dict);
  PyoaObserver_oaLine_TypeInit(dict);
  PyoaObserver_oaLumpedElmore_TypeInit(dict);
  PyoaObserver_oaMarker_TypeInit(dict);
  PyoaObserver_oaModAssignAssignment_TypeInit(dict);
  PyoaObserver_oaModAssignValue_TypeInit(dict);
  PyoaObserver_oaModAssignment_TypeInit(dict);
  PyoaObserver_oaModBitInst_TypeInit(dict);
  PyoaObserver_oaModBitNet_TypeInit(dict);
  PyoaObserver_oaModBitTerm_TypeInit(dict);
  PyoaObserver_oaModBundleNet_TypeInit(dict);
  PyoaObserver_oaModBundleTerm_TypeInit(dict);
  PyoaObserver_oaModBusNet_TypeInit(dict);
  PyoaObserver_oaModBusNetBit_TypeInit(dict);
  PyoaObserver_oaModBusNetDef_TypeInit(dict);
  PyoaObserver_oaModBusTerm_TypeInit(dict);
  PyoaObserver_oaModBusTermBit_TypeInit(dict);
  PyoaObserver_oaModBusTermDef_TypeInit(dict);
  PyoaObserver_oaModConnectDef_TypeInit(dict);
  PyoaObserver_oaModDesignInst_TypeInit(dict);
  PyoaObserver_oaModInst_TypeInit(dict);
  PyoaObserver_oaModInstHeader_TypeInit(dict);
  PyoaObserver_oaModInstTerm_TypeInit(dict);
  PyoaObserver_oaModModuleBitInst_TypeInit(dict);
  PyoaObserver_oaModModuleInst_TypeInit(dict);
  PyoaObserver_oaModModuleInstHeader_TypeInit(dict);
  PyoaObserver_oaModModuleScalarInst_TypeInit(dict);
  PyoaObserver_oaModModuleVectorInst_TypeInit(dict);
  PyoaObserver_oaModModuleVectorInstBit_TypeInit(dict);
  PyoaObserver_oaModNet_TypeInit(dict);
  PyoaObserver_oaModNetConnectDef_TypeInit(dict);
  PyoaObserver_oaModScalarInst_TypeInit(dict);
  PyoaObserver_oaModScalarNet_TypeInit(dict);
  PyoaObserver_oaModScalarTerm_TypeInit(dict);
  PyoaObserver_oaModTerm_TypeInit(dict);
  PyoaObserver_oaModTermConnectDef_TypeInit(dict);
  PyoaObserver_oaModVectorInst_TypeInit(dict);
  PyoaObserver_oaModVectorInstBit_TypeInit(dict);
  PyoaObserver_oaModVectorInstDef_TypeInit(dict);
  PyoaObserver_oaModule_TypeInit(dict);
  PyoaObserver_oaMutualInductor_TypeInit(dict);
  PyoaObserver_oaNet_TypeInit(dict);
  PyoaObserver_oaNetConnectDef_TypeInit(dict);
  PyoaObserver_oaNode_TypeInit(dict);
  PyoaObserver_oaOccArrayInst_TypeInit(dict);
  PyoaObserver_oaOccAssignAssignment_TypeInit(dict);
  PyoaObserver_oaOccAssignValue_TypeInit(dict);
  PyoaObserver_oaOccAssignment_TypeInit(dict);
  PyoaObserver_oaOccBitInst_TypeInit(dict);
  PyoaObserver_oaOccBitNet_TypeInit(dict);
  PyoaObserver_oaOccBitTerm_TypeInit(dict);
  PyoaObserver_oaOccBundleNet_TypeInit(dict);
  PyoaObserver_oaOccBundleTerm_TypeInit(dict);
  PyoaObserver_oaOccBusNet_TypeInit(dict);
  PyoaObserver_oaOccBusNetBit_TypeInit(dict);
  PyoaObserver_oaOccBusNetDef_TypeInit(dict);
  PyoaObserver_oaOccBusTerm_TypeInit(dict);
  PyoaObserver_oaOccBusTermBit_TypeInit(dict);
  PyoaObserver_oaOccBusTermDef_TypeInit(dict);
  PyoaObserver_oaOccConnectDef_TypeInit(dict);
  PyoaObserver_oaOccDesignInst_TypeInit(dict);
  PyoaObserver_oaOccInst_TypeInit(dict);
  PyoaObserver_oaOccInstHeader_TypeInit(dict);
  PyoaObserver_oaOccInstTerm_TypeInit(dict);
  PyoaObserver_oaOccModuleBitInst_TypeInit(dict);
  PyoaObserver_oaOccModuleInst_TypeInit(dict);
  PyoaObserver_oaOccModuleInstHeader_TypeInit(dict);
  PyoaObserver_oaOccModuleScalarInst_TypeInit(dict);
  PyoaObserver_oaOccModuleVectorInst_TypeInit(dict);
  PyoaObserver_oaOccModuleVectorInstBit_TypeInit(dict);
  PyoaObserver_oaOccNet_TypeInit(dict);
  PyoaObserver_oaOccNetConnectDef_TypeInit(dict);
  PyoaObserver_oaOccScalarInst_TypeInit(dict);
  PyoaObserver_oaOccScalarNet_TypeInit(dict);
  PyoaObserver_oaOccScalarTerm_TypeInit(dict);
  PyoaObserver_oaOccTerm_TypeInit(dict);
  PyoaObserver_oaOccTermConnectDef_TypeInit(dict);
  PyoaObserver_oaOccVectorInst_TypeInit(dict);
  PyoaObserver_oaOccVectorInstBit_TypeInit(dict);
  PyoaObserver_oaOccVectorInstDef_TypeInit(dict);
  PyoaObserver_oaOccurrence_TypeInit(dict);
  PyoaObserver_oaOpPoint_TypeInit(dict);
  PyoaObserver_oaOpPointHeader_TypeInit(dict);
  PyoaObserver_oaPRBoundary_TypeInit(dict);
  PyoaObserver_oaParasiticNetwork_TypeInit(dict);
  PyoaObserver_oaPath_TypeInit(dict);
  PyoaObserver_oaPathSeg_TypeInit(dict);
  PyoaObserver_oaPhysicalLayer_TypeInit(dict);
  PyoaObserver_oaPiElmore_TypeInit(dict);
  PyoaObserver_oaPiPoleResidue_TypeInit(dict);
  PyoaObserver_oaPin_TypeInit(dict);
  PyoaObserver_oaPoleResidue_TypeInit(dict);
  PyoaObserver_oaPolygon_TypeInit(dict);
  PyoaObserver_oaProp_TypeInit(dict);
  PyoaObserver_oaPropDisplay_TypeInit(dict);
  PyoaObserver_oaPurpose_TypeInit(dict);
  PyoaObserver_oaRect_TypeInit(dict);
  PyoaObserver_oaReducedModel_TypeInit(dict);
  PyoaObserver_oaResistor_TypeInit(dict);
  PyoaObserver_oaReticle_TypeInit(dict);
  PyoaObserver_oaReticleRef_TypeInit(dict);
  PyoaObserver_oaRoute_TypeInit(dict);
  PyoaObserver_oaRow_TypeInit(dict);
  PyoaObserver_oaRowHeader_TypeInit(dict);
  PyoaObserver_oaScalarInst_TypeInit(dict);
  PyoaObserver_oaScalarNet_TypeInit(dict);
  PyoaObserver_oaScalarSiteDef_TypeInit(dict);
  PyoaObserver_oaScalarTerm_TypeInit(dict);
  PyoaObserver_oaScanChain_TypeInit(dict);
  PyoaObserver_oaScanChainInst_TypeInit(dict);
  PyoaObserver_oaScanChainSet_TypeInit(dict);
  PyoaObserver_oaSeriesRL_TypeInit(dict);
  PyoaObserver_oaShape_TypeInit(dict);
  PyoaObserver_oaSimpleConstraint_TypeInit(dict);
  PyoaObserver_oaSiteDef_TypeInit(dict);
  PyoaObserver_oaSizedLayer_TypeInit(dict);
  PyoaObserver_oaSnapBoundary_TypeInit(dict);
  PyoaObserver_oaStdDevice_TypeInit(dict);
  PyoaObserver_oaStdVia_TypeInit(dict);
  PyoaObserver_oaStdViaDef_TypeInit(dict);
  PyoaObserver_oaStdViaHeader_TypeInit(dict);
  PyoaObserver_oaSteiner_TypeInit(dict);
  PyoaObserver_oaStepperMap_TypeInit(dict);
  PyoaObserver_oaStringProp_TypeInit(dict);
  PyoaObserver_oaSubNetwork_TypeInit(dict);
  PyoaObserver_oaTech_TypeInit(dict);
  PyoaObserver_oaTechHeader_TypeInit(dict);
  PyoaObserver_oaTechLayerHeader_TypeInit(dict);
  PyoaObserver_oaTechViaDefHeader_TypeInit(dict);
  PyoaObserver_oaTerm_TypeInit(dict);
  PyoaObserver_oaTermConnectDef_TypeInit(dict);
  PyoaObserver_oaText_TypeInit(dict);
  PyoaObserver_oaTextDisplay_TypeInit(dict);
  PyoaObserver_oaTextOverride_TypeInit(dict);
  PyoaObserver_oaTimeProp_TypeInit(dict);
  PyoaObserver_oaTimeRangeProp_TypeInit(dict);
  PyoaObserver_oaTrackPattern_TypeInit(dict);
  PyoaObserver_oaUInt8RangeValue_TypeInit(dict);
  PyoaObserver_oaUInt8Value_TypeInit(dict);
  PyoaObserver_oaValue_TypeInit(dict);
  PyoaObserver_oaValueArrayValue_TypeInit(dict);
  PyoaObserver_oaVectorInst_TypeInit(dict);
  PyoaObserver_oaVectorInstBit_TypeInit(dict);
  PyoaObserver_oaVectorInstDef_TypeInit(dict);
  PyoaObserver_oaVia_TypeInit(dict);
  PyoaObserver_oaViaDef_TypeInit(dict);
  PyoaObserver_oaViaHeader_TypeInit(dict);
  PyoaObserver_oaViaSpec_TypeInit(dict);
  PyoaObserver_oaView_TypeInit(dict);
  PyoaObserver_oaViewType_TypeInit(dict);
  PyoaObserver_oaWafer_TypeInit(dict);
  PyoaObserver_oaWaferDesc_TypeInit(dict);
  PyoaObserver_oaWaferFeature_TypeInit(dict);
  PyoaOccArc_TypeInit(dict);
  PyoaOccArrayInst_TypeInit(dict);
  PyoaOccAssignAssignment_TypeInit(dict);
  PyoaOccAssignValue_TypeInit(dict);
  PyoaOccAssignment_TypeInit(dict);
  PyoaOccAttrDisplay_TypeInit(dict);
  PyoaOccBitInst_TypeInit(dict);
  PyoaOccBitNet_TypeInit(dict);
  PyoaOccBitTerm_TypeInit(dict);
  PyoaOccBundleNet_TypeInit(dict);
  PyoaOccBundleTerm_TypeInit(dict);
  PyoaOccBusNet_TypeInit(dict);
  PyoaOccBusNetBit_TypeInit(dict);
  PyoaOccBusNetDef_TypeInit(dict);
  PyoaOccBusTerm_TypeInit(dict);
  PyoaOccBusTermBit_TypeInit(dict);
  PyoaOccBusTermDef_TypeInit(dict);
  PyoaOccConnectDef_TypeInit(dict);
  PyoaOccDesignInst_TypeInit(dict);
  PyoaOccDonut_TypeInit(dict);
  PyoaOccDot_TypeInit(dict);
  PyoaOccEllipse_TypeInit(dict);
  PyoaOccEvalText_TypeInit(dict);
  PyoaOccHeaderModTypeEnum_TypeInit(dict);
  PyoaOccInst_TypeInit(dict);
  PyoaOccInstAttrDisplay_TypeInit(dict);
  PyoaOccInstHeader_TypeInit(dict);
  PyoaOccInstPropDisplay_TypeInit(dict);
  PyoaOccInstTerm_TypeInit(dict);
  PyoaOccLine_TypeInit(dict);
  PyoaOccMemNetCollection_TypeInit(dict);
  PyoaOccMemNetIter_TypeInit(dict);
  PyoaOccModuleBitInst_TypeInit(dict);
  PyoaOccModuleInst_TypeInit(dict);
  PyoaOccModuleInstHeader_TypeInit(dict);
  PyoaOccModuleScalarInst_TypeInit(dict);
  PyoaOccModuleVectorInst_TypeInit(dict);
  PyoaOccModuleVectorInstBit_TypeInit(dict);
  PyoaOccNet_TypeInit(dict);
  PyoaOccNetConnectDef_TypeInit(dict);
  PyoaOccObject_TypeInit(dict);
  PyoaOccPath_TypeInit(dict);
  PyoaOccPathSeg_TypeInit(dict);
  PyoaOccPolygon_TypeInit(dict);
  PyoaOccPropDisplay_TypeInit(dict);
  PyoaOccRect_TypeInit(dict);
  PyoaOccScalarInst_TypeInit(dict);
  PyoaOccScalarNet_TypeInit(dict);
  PyoaOccScalarTerm_TypeInit(dict);
  PyoaOccShape_TypeInit(dict);
  PyoaOccTerm_TypeInit(dict);
  PyoaOccTermArray_TypeInit(dict);
  PyoaOccTermConnectDef_TypeInit(dict);
  PyoaOccText_TypeInit(dict);
  PyoaOccTextDisplay_TypeInit(dict);
  PyoaOccTextOverride_TypeInit(dict);
  PyoaOccTraverser_TypeInit(dict);
  PyoaOccVectorInst_TypeInit(dict);
  PyoaOccVectorInstBit_TypeInit(dict);
  PyoaOccVectorInstDef_TypeInit(dict);
  PyoaOccurrence_TypeInit(dict);
  PyoaOccurrenceModTypeEnum_TypeInit(dict);
  PyoaOpPoint_TypeInit(dict);
  PyoaOpPointHeader_TypeInit(dict);
  PyoaOpPointHeaderModTypeEnum_TypeInit(dict);
  PyoaOpPointModTypeEnum_TypeInit(dict);
  PyoaOrient_TypeInit(dict);
  PyoaOrientEnum_TypeInit(dict);
  PyoaPRBoundary_TypeInit(dict);
  PyoaPackedData_TypeInit(dict);
  PyoaParam_TypeInit(dict);
  PyoaParamArray_TypeInit(dict);
  PyoaParamType_TypeInit(dict);
  PyoaParamTypeEnum_TypeInit(dict);
  PyoaParasiticNetwork_TypeInit(dict);
  PyoaParasiticNetworkModTypeEnum_TypeInit(dict);
  PyoaPath_TypeInit(dict);
  PyoaPathSeg_TypeInit(dict);
  PyoaPathStyle_TypeInit(dict);
  PyoaPathStyleEnum_TypeInit(dict);
  PyoaPcellDef_TypeInit(dict);
  PyoaPcellErrorTypeEnum_TypeInit(dict);
  PyoaPcellLink_TypeInit(dict);
  PyoaPhysicalLayer_TypeInit(dict);
  PyoaPiElmore_TypeInit(dict);
  PyoaPiPoleResidue_TypeInit(dict);
  PyoaPin_TypeInit(dict);
  PyoaPinConnectMethod_TypeInit(dict);
  PyoaPinConnectMethodEnum_TypeInit(dict);
  PyoaPinFig_TypeInit(dict);
  PyoaPinModTypeEnum_TypeInit(dict);
  PyoaPlacementStatus_TypeInit(dict);
  PyoaPlacementStatusEnum_TypeInit(dict);
  PyoaPoint_TypeInit(dict);
  PyoaPointArray_TypeInit(dict);
  PyoaPoleResidue_TypeInit(dict);
  PyoaPoleResidueModTypeEnum_TypeInit(dict);
  PyoaPolygon_TypeInit(dict);
  PyoaPrefRoutingDir_TypeInit(dict);
  PyoaPrefRoutingDirEnum_TypeInit(dict);
  PyoaProp_TypeInit(dict);
  PyoaPropDisplay_TypeInit(dict);
  PyoaPropModTypeEnum_TypeInit(dict);
  PyoaPurpose_TypeInit(dict);
  PyoaPurposeModTypeEnum_TypeInit(dict);
  PyoaPurposeType_TypeInit(dict);
  PyoaPurposeTypeEnum_TypeInit(dict);
  PyoaRangeBase_TypeInit(dict);
  PyoaRangeType_TypeInit(dict);
  PyoaRangeTypeEnum_TypeInit(dict);
  PyoaRange_oaInt4_TypeInit(dict);
  PyoaRange_oaUInt8_TypeInit(dict);
  PyoaRect_TypeInit(dict);
  PyoaReducedModTypeEnum_TypeInit(dict);
  PyoaReducedModel_TypeInit(dict);
  PyoaRef_TypeInit(dict);
  PyoaRefHeader_TypeInit(dict);
  PyoaRegionQuery_TypeInit(dict);
  PyoaReservedViewType_TypeInit(dict);
  PyoaReservedViewTypeEnum_TypeInit(dict);
  PyoaResistor_TypeInit(dict);
  PyoaReticle_TypeInit(dict);
  PyoaReticleModTypeEnum_TypeInit(dict);
  PyoaReticleRef_TypeInit(dict);
  PyoaReticleRefModTypeEnum_TypeInit(dict);
  PyoaReticleUsage_TypeInit(dict);
  PyoaReticleUsageEnum_TypeInit(dict);
  PyoaRoute_TypeInit(dict);
  PyoaRouteMethod_TypeInit(dict);
  PyoaRouteMethodEnum_TypeInit(dict);
  PyoaRouteModTypeEnum_TypeInit(dict);
  PyoaRouteObjectArray_TypeInit(dict);
  PyoaRouteOptimizer_TypeInit(dict);
  PyoaRoutePattern_TypeInit(dict);
  PyoaRoutePatternEnum_TypeInit(dict);
  PyoaRouteStatus_TypeInit(dict);
  PyoaRouteStatusEnum_TypeInit(dict);
  PyoaRouteTopology_TypeInit(dict);
  PyoaRouteTopologyEnum_TypeInit(dict);
  PyoaRow_TypeInit(dict);
  PyoaRowFlipType_TypeInit(dict);
  PyoaRowFlipTypeEnum_TypeInit(dict);
  PyoaRowHeader_TypeInit(dict);
  PyoaRowHeaderModTypeEnum_TypeInit(dict);
  PyoaRowModTypeEnum_TypeInit(dict);
  PyoaRowQuery_TypeInit(dict);
  PyoaRowSpacingType_TypeInit(dict);
  PyoaRowSpacingTypeEnum_TypeInit(dict);
  PyoaScalarInst_TypeInit(dict);
  PyoaScalarName_TypeInit(dict);
  PyoaScalarNet_TypeInit(dict);
  PyoaScalarSiteDef_TypeInit(dict);
  PyoaScalarTerm_TypeInit(dict);
  PyoaScanChain_TypeInit(dict);
  PyoaScanChainInst_TypeInit(dict);
  PyoaScanChainInstModTypeEnum_TypeInit(dict);
  PyoaScanChainModTypeEnum_TypeInit(dict);
  PyoaScanChainSet_TypeInit(dict);
  PyoaScanChainSetModTypeEnum_TypeInit(dict);
  PyoaScanChainSetType_TypeInit(dict);
  PyoaScanChainSetTypeEnum_TypeInit(dict);
  PyoaSegStyle_TypeInit(dict);
  PyoaSegment_TypeInit(dict);
  PyoaSeriesRL_TypeInit(dict);
  PyoaSession_TypeInit(dict);
  PyoaSessionDataTypeEnum_TypeInit(dict);
  PyoaSessionObject_TypeInit(dict);
  PyoaShape_TypeInit(dict);
  PyoaShapeModTypeEnum_TypeInit(dict);
  PyoaShapeQuery_TypeInit(dict);
  PyoaSigType_TypeInit(dict);
  PyoaSigTypeEnum_TypeInit(dict);
  PyoaSimpleConstraint_TypeInit(dict);
  PyoaSimpleConstraintDef_TypeInit(dict);
  PyoaSimpleConstraintType_TypeInit(dict);
  PyoaSimpleConstraintTypeEnum_TypeInit(dict);
  PyoaSimpleName_TypeInit(dict);
  PyoaSiteDef_TypeInit(dict);
  PyoaSiteDefModTypeEnum_TypeInit(dict);
  PyoaSiteDefType_TypeInit(dict);
  PyoaSiteDefTypeEnum_TypeInit(dict);
  PyoaSitePattern_TypeInit(dict);
  PyoaSiteRef_TypeInit(dict);
  PyoaSizeOp_TypeInit(dict);
  PyoaSizeOpEnum_TypeInit(dict);
  PyoaSizedLayer_TypeInit(dict);
  PyoaSnapBoundary_TypeInit(dict);
  PyoaSource_TypeInit(dict);
  PyoaSourceEnum_TypeInit(dict);
  PyoaSpefNS_TypeInit(dict);
  PyoaSpfNS_TypeInit(dict);
  PyoaSpiceNS_TypeInit(dict);
  PyoaStdDevice_TypeInit(dict);
  PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAppProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaArc_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBitInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBitNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBlock_oaBlockModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBusNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaCMap_oaCMapModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaCellView_oaCellViewModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaCell_oaCellModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaCluster_oaClusterModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaConnectDef_oaConnectDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaConstraint_oaConstraintModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaCouplingCap_oaDeviceModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaCustomVia_oaViaModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDMFile_oaDMFileModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDerivedLayer_oaLayerModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDesignInst_oaDesignInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDesign_oaDesignModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDevice_oaDeviceModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDiode_oaDeviceModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDonut_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDot_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDoubleProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaDualIntValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaEllipse_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaElmore_oaElmoreModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaEnumProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaEvalText_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaFigGroup_oaFigGroupModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaFloatProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaFloatRangeProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaFltValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaFrameInst_oaFrameInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaFrame_oaFrameModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaGroundedNode_oaNodeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaGroup_oaGroupModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaGuide_oaGuideModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaHierProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaImage_oaImageModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaInductor_oaDeviceModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaInstTerm_oaInstTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaInt1DTblValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaInt2DTblValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaIntFltTblValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaIntProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaIntRangeProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaIntRangeValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaIntValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaLayerHalo_oaBlockageModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaLayer_oaLayerModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaLine_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaLumpedElmore_oaReducedModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaMarker_oaMarkerModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModAssignment_oaAssignmentModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBitInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBitNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBitTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBundleNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBundleTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBusNetBit_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBusNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBusTermBit_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModBusTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModDesignInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModInstTerm_oaInstTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModModuleBitInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModModuleInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModScalarInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModScalarNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModScalarTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaModule_oaModuleModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaNode_oaNodeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPath_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPhysicalLayer_oaLayerModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPiElmore_oaReducedModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPiPoleResidue_oaReducedModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPin_oaPinModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPoleResidue_oaPoleResidueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPolygon_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPropDisplay_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaPurpose_oaPurposeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaRect_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaReducedModel_oaReducedModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaResistor_oaDeviceModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaReticleRef_oaReticleRefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaReticle_oaReticleModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaRoute_oaRouteModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaRowHeader_oaRowHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaRow_oaRowModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaScalarInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaScalarNet_oaNetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaScalarSiteDef_oaSiteDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaScalarTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaScanChainInst_oaScanChainInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaScanChainSet_oaScanChainSetModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaScanChain_oaScanChainModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaSeriesRL_oaDeviceModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaShape_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaSimpleConstraint_oaConstraintModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaSiteDef_oaSiteDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaSizedLayer_oaLayerModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaSnapBoundary_oaBoundaryModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaStdDevice_oaDeviceModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaStdViaDef_oaViaDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaStdViaHeader_oaViaHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaStdVia_oaViaModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaSteiner_oaSteinerModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaStepperMap_oaStepperMapModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaStringProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaSubNetwork_oaSubNetworkModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTechHeader_oaTechHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTechLayerHeader_oaTechLayerHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTechViaDefHeader_oaTechViaDefHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTech_oaTechModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTermConnectDef_oaConnectDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTerm_oaTermModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTextDisplay_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTextOverride_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaText_oaShapeModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTimeProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTimeRangeProp_oaPropModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaUInt8Value_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaValueArrayValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaValue_oaValueModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaVectorInstBit_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaVectorInst_oaInstModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaViaDef_oaViaDefModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaViaSpec_oaViaSpecModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaVia_oaViaModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaView_oaViewModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum_TypeInit(dict);
  PyoaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum_TypeInit(dict);
  PyoaStdVia_TypeInit(dict);
  PyoaStdViaDef_TypeInit(dict);
  PyoaStdViaHeader_TypeInit(dict);
  PyoaSteiner_TypeInit(dict);
  PyoaSteinerModTypeEnum_TypeInit(dict);
  PyoaSteinerQuery_TypeInit(dict);
  PyoaStepperMap_TypeInit(dict);
  PyoaStepperMapModTypeEnum_TypeInit(dict);
  PyoaStringAppDef_oaAnalysisOpPoint_TypeInit(dict);
  PyoaStringAppDef_oaAnalysisPoint_TypeInit(dict);
  PyoaStringAppDef_oaAppObject_TypeInit(dict);
  PyoaStringAppDef_oaAssignment_TypeInit(dict);
  PyoaStringAppDef_oaBlock_TypeInit(dict);
  PyoaStringAppDef_oaBlockage_TypeInit(dict);
  PyoaStringAppDef_oaBoundary_TypeInit(dict);
  PyoaStringAppDef_oaBusNetDef_TypeInit(dict);
  PyoaStringAppDef_oaBusTermDef_TypeInit(dict);
  PyoaStringAppDef_oaCMap_TypeInit(dict);
  PyoaStringAppDef_oaCell_TypeInit(dict);
  PyoaStringAppDef_oaCellView_TypeInit(dict);
  PyoaStringAppDef_oaCluster_TypeInit(dict);
  PyoaStringAppDef_oaConnectDef_TypeInit(dict);
  PyoaStringAppDef_oaConstraint_TypeInit(dict);
  PyoaStringAppDef_oaConstraintDef_TypeInit(dict);
  PyoaStringAppDef_oaConstraintGroup_TypeInit(dict);
  PyoaStringAppDef_oaConstraintGroupHeader_TypeInit(dict);
  PyoaStringAppDef_oaConstraintGroupMem_TypeInit(dict);
  PyoaStringAppDef_oaConstraintParam_TypeInit(dict);
  PyoaStringAppDef_oaConstraintParamDef_TypeInit(dict);
  PyoaStringAppDef_oaDMData_TypeInit(dict);
  PyoaStringAppDef_oaDMFile_TypeInit(dict);
  PyoaStringAppDef_oaDerivedLayerParam_TypeInit(dict);
  PyoaStringAppDef_oaDesign_TypeInit(dict);
  PyoaStringAppDef_oaDesignInst_TypeInit(dict);
  PyoaStringAppDef_oaDevice_TypeInit(dict);
  PyoaStringAppDef_oaElmore_TypeInit(dict);
  PyoaStringAppDef_oaFigGroup_TypeInit(dict);
  PyoaStringAppDef_oaFigGroupMem_TypeInit(dict);
  PyoaStringAppDef_oaFrame_TypeInit(dict);
  PyoaStringAppDef_oaFrameInst_TypeInit(dict);
  PyoaStringAppDef_oaGCellPattern_TypeInit(dict);
  PyoaStringAppDef_oaGroup_TypeInit(dict);
  PyoaStringAppDef_oaGroupMember_TypeInit(dict);
  PyoaStringAppDef_oaGuide_TypeInit(dict);
  PyoaStringAppDef_oaImage_TypeInit(dict);
  PyoaStringAppDef_oaInst_TypeInit(dict);
  PyoaStringAppDef_oaInstHeader_TypeInit(dict);
  PyoaStringAppDef_oaInstTerm_TypeInit(dict);
  PyoaStringAppDef_oaLPPHeader_TypeInit(dict);
  PyoaStringAppDef_oaLayer_TypeInit(dict);
  PyoaStringAppDef_oaLayerHeader_TypeInit(dict);
  PyoaStringAppDef_oaLib_TypeInit(dict);
  PyoaStringAppDef_oaMarker_TypeInit(dict);
  PyoaStringAppDef_oaModAssignment_TypeInit(dict);
  PyoaStringAppDef_oaModBusNetDef_TypeInit(dict);
  PyoaStringAppDef_oaModBusTermDef_TypeInit(dict);
  PyoaStringAppDef_oaModConnectDef_TypeInit(dict);
  PyoaStringAppDef_oaModInst_TypeInit(dict);
  PyoaStringAppDef_oaModInstHeader_TypeInit(dict);
  PyoaStringAppDef_oaModInstTerm_TypeInit(dict);
  PyoaStringAppDef_oaModModuleInstHeader_TypeInit(dict);
  PyoaStringAppDef_oaModNet_TypeInit(dict);
  PyoaStringAppDef_oaModTerm_TypeInit(dict);
  PyoaStringAppDef_oaModVectorInstDef_TypeInit(dict);
  PyoaStringAppDef_oaModule_TypeInit(dict);
  PyoaStringAppDef_oaNet_TypeInit(dict);
  PyoaStringAppDef_oaNode_TypeInit(dict);
  PyoaStringAppDef_oaOccAssignment_TypeInit(dict);
  PyoaStringAppDef_oaOccBusNetDef_TypeInit(dict);
  PyoaStringAppDef_oaOccBusTermDef_TypeInit(dict);
  PyoaStringAppDef_oaOccConnectDef_TypeInit(dict);
  PyoaStringAppDef_oaOccInst_TypeInit(dict);
  PyoaStringAppDef_oaOccInstHeader_TypeInit(dict);
  PyoaStringAppDef_oaOccInstTerm_TypeInit(dict);
  PyoaStringAppDef_oaOccModuleInstHeader_TypeInit(dict);
  PyoaStringAppDef_oaOccNet_TypeInit(dict);
  PyoaStringAppDef_oaOccShape_TypeInit(dict);
  PyoaStringAppDef_oaOccTerm_TypeInit(dict);
  PyoaStringAppDef_oaOccVectorInstDef_TypeInit(dict);
  PyoaStringAppDef_oaOccurrence_TypeInit(dict);
  PyoaStringAppDef_oaOpPointHeader_TypeInit(dict);
  PyoaStringAppDef_oaParasiticNetwork_TypeInit(dict);
  PyoaStringAppDef_oaPin_TypeInit(dict);
  PyoaStringAppDef_oaPoleResidue_TypeInit(dict);
  PyoaStringAppDef_oaProp_TypeInit(dict);
  PyoaStringAppDef_oaPurpose_TypeInit(dict);
  PyoaStringAppDef_oaReducedModel_TypeInit(dict);
  PyoaStringAppDef_oaReticle_TypeInit(dict);
  PyoaStringAppDef_oaReticleRef_TypeInit(dict);
  PyoaStringAppDef_oaRoute_TypeInit(dict);
  PyoaStringAppDef_oaRow_TypeInit(dict);
  PyoaStringAppDef_oaRowHeader_TypeInit(dict);
  PyoaStringAppDef_oaScanChain_TypeInit(dict);
  PyoaStringAppDef_oaScanChainInst_TypeInit(dict);
  PyoaStringAppDef_oaScanChainSet_TypeInit(dict);
  PyoaStringAppDef_oaShape_TypeInit(dict);
  PyoaStringAppDef_oaSiteDef_TypeInit(dict);
  PyoaStringAppDef_oaSteiner_TypeInit(dict);
  PyoaStringAppDef_oaStepperMap_TypeInit(dict);
  PyoaStringAppDef_oaTech_TypeInit(dict);
  PyoaStringAppDef_oaTechHeader_TypeInit(dict);
  PyoaStringAppDef_oaTechLayerHeader_TypeInit(dict);
  PyoaStringAppDef_oaTechViaDefHeader_TypeInit(dict);
  PyoaStringAppDef_oaTerm_TypeInit(dict);
  PyoaStringAppDef_oaTrackPattern_TypeInit(dict);
  PyoaStringAppDef_oaValue_TypeInit(dict);
  PyoaStringAppDef_oaVectorInstDef_TypeInit(dict);
  PyoaStringAppDef_oaVia_TypeInit(dict);
  PyoaStringAppDef_oaViaDef_TypeInit(dict);
  PyoaStringAppDef_oaViaHeader_TypeInit(dict);
  PyoaStringAppDef_oaViaSpec_TypeInit(dict);
  PyoaStringAppDef_oaView_TypeInit(dict);
  PyoaStringAppDef_oaWafer_TypeInit(dict);
  PyoaStringAppDef_oaWaferDesc_TypeInit(dict);
  PyoaStringAppDef_oaWaferFeature_TypeInit(dict);
  PyoaStringProp_TypeInit(dict);
  PyoaSubNetwork_TypeInit(dict);
  PyoaSubNetworkModTypeEnum_TypeInit(dict);
  PyoaSubset_oaDBType_TypeInit(dict);
  PyoaSubset_oaType_TypeInit(dict);
  PyoaSymmetry_TypeInit(dict);
  PyoaSymmetryEnum_TypeInit(dict);
  PyoaSystemTime_TypeInit(dict);
  PyoaTech_TypeInit(dict);
  PyoaTechArray_TypeInit(dict);
  PyoaTechConflictTypeEnum_TypeInit(dict);
  PyoaTechDataType_TypeInit(dict);
  PyoaTechDataTypeEnum_TypeInit(dict);
  PyoaTechHeader_TypeInit(dict);
  PyoaTechHeaderArray_TypeInit(dict);
  PyoaTechHeaderModTypeEnum_TypeInit(dict);
  PyoaTechLayerHeader_TypeInit(dict);
  PyoaTechLayerHeaderModTypeEnum_TypeInit(dict);
  PyoaTechModTypeEnum_TypeInit(dict);
  PyoaTechMsgIds_TypeInit(dict);
  PyoaTechObject_TypeInit(dict);
  PyoaTechViaDefHeader_TypeInit(dict);
  PyoaTechViaDefHeaderModTypeEnum_TypeInit(dict);
  PyoaTerm_TypeInit(dict);
  PyoaTermArray_TypeInit(dict);
  PyoaTermAttrType_TypeInit(dict);
  PyoaTermAttrTypeEnum_TypeInit(dict);
  PyoaTermConnectDef_TypeInit(dict);
  PyoaTermModTypeEnum_TypeInit(dict);
  PyoaTermTermCollTypeEnum_TypeInit(dict);
  PyoaTermType_TypeInit(dict);
  PyoaTermTypeEnum_TypeInit(dict);
  PyoaText_TypeInit(dict);
  PyoaTextAlign_TypeInit(dict);
  PyoaTextAlignEnum_TypeInit(dict);
  PyoaTextDisplay_TypeInit(dict);
  PyoaTextDisplayCollection_TypeInit(dict);
  PyoaTextDisplayFormat_TypeInit(dict);
  PyoaTextDisplayFormatEnum_TypeInit(dict);
  PyoaTextDisplayIter_TypeInit(dict);
  PyoaTextOverride_TypeInit(dict);
  PyoaTimeAppDef_oaAnalysisOpPoint_TypeInit(dict);
  PyoaTimeAppDef_oaAnalysisPoint_TypeInit(dict);
  PyoaTimeAppDef_oaAppObject_TypeInit(dict);
  PyoaTimeAppDef_oaAssignment_TypeInit(dict);
  PyoaTimeAppDef_oaBlock_TypeInit(dict);
  PyoaTimeAppDef_oaBlockage_TypeInit(dict);
  PyoaTimeAppDef_oaBoundary_TypeInit(dict);
  PyoaTimeAppDef_oaBusNetDef_TypeInit(dict);
  PyoaTimeAppDef_oaBusTermDef_TypeInit(dict);
  PyoaTimeAppDef_oaCMap_TypeInit(dict);
  PyoaTimeAppDef_oaCell_TypeInit(dict);
  PyoaTimeAppDef_oaCellView_TypeInit(dict);
  PyoaTimeAppDef_oaCluster_TypeInit(dict);
  PyoaTimeAppDef_oaConnectDef_TypeInit(dict);
  PyoaTimeAppDef_oaConstraint_TypeInit(dict);
  PyoaTimeAppDef_oaConstraintDef_TypeInit(dict);
  PyoaTimeAppDef_oaConstraintGroup_TypeInit(dict);
  PyoaTimeAppDef_oaConstraintGroupHeader_TypeInit(dict);
  PyoaTimeAppDef_oaConstraintGroupMem_TypeInit(dict);
  PyoaTimeAppDef_oaConstraintParam_TypeInit(dict);
  PyoaTimeAppDef_oaConstraintParamDef_TypeInit(dict);
  PyoaTimeAppDef_oaDMData_TypeInit(dict);
  PyoaTimeAppDef_oaDMFile_TypeInit(dict);
  PyoaTimeAppDef_oaDerivedLayerParam_TypeInit(dict);
  PyoaTimeAppDef_oaDesign_TypeInit(dict);
  PyoaTimeAppDef_oaDesignInst_TypeInit(dict);
  PyoaTimeAppDef_oaDevice_TypeInit(dict);
  PyoaTimeAppDef_oaElmore_TypeInit(dict);
  PyoaTimeAppDef_oaFigGroup_TypeInit(dict);
  PyoaTimeAppDef_oaFigGroupMem_TypeInit(dict);
  PyoaTimeAppDef_oaFrame_TypeInit(dict);
  PyoaTimeAppDef_oaFrameInst_TypeInit(dict);
  PyoaTimeAppDef_oaGCellPattern_TypeInit(dict);
  PyoaTimeAppDef_oaGroup_TypeInit(dict);
  PyoaTimeAppDef_oaGroupMember_TypeInit(dict);
  PyoaTimeAppDef_oaGuide_TypeInit(dict);
  PyoaTimeAppDef_oaImage_TypeInit(dict);
  PyoaTimeAppDef_oaInst_TypeInit(dict);
  PyoaTimeAppDef_oaInstHeader_TypeInit(dict);
  PyoaTimeAppDef_oaInstTerm_TypeInit(dict);
  PyoaTimeAppDef_oaLPPHeader_TypeInit(dict);
  PyoaTimeAppDef_oaLayer_TypeInit(dict);
  PyoaTimeAppDef_oaLayerHeader_TypeInit(dict);
  PyoaTimeAppDef_oaLib_TypeInit(dict);
  PyoaTimeAppDef_oaMarker_TypeInit(dict);
  PyoaTimeAppDef_oaModAssignment_TypeInit(dict);
  PyoaTimeAppDef_oaModBusNetDef_TypeInit(dict);
  PyoaTimeAppDef_oaModBusTermDef_TypeInit(dict);
  PyoaTimeAppDef_oaModConnectDef_TypeInit(dict);
  PyoaTimeAppDef_oaModInst_TypeInit(dict);
  PyoaTimeAppDef_oaModInstHeader_TypeInit(dict);
  PyoaTimeAppDef_oaModInstTerm_TypeInit(dict);
  PyoaTimeAppDef_oaModModuleInstHeader_TypeInit(dict);
  PyoaTimeAppDef_oaModNet_TypeInit(dict);
  PyoaTimeAppDef_oaModTerm_TypeInit(dict);
  PyoaTimeAppDef_oaModVectorInstDef_TypeInit(dict);
  PyoaTimeAppDef_oaModule_TypeInit(dict);
  PyoaTimeAppDef_oaNet_TypeInit(dict);
  PyoaTimeAppDef_oaNode_TypeInit(dict);
  PyoaTimeAppDef_oaOccAssignment_TypeInit(dict);
  PyoaTimeAppDef_oaOccBusNetDef_TypeInit(dict);
  PyoaTimeAppDef_oaOccBusTermDef_TypeInit(dict);
  PyoaTimeAppDef_oaOccConnectDef_TypeInit(dict);
  PyoaTimeAppDef_oaOccInst_TypeInit(dict);
  PyoaTimeAppDef_oaOccInstHeader_TypeInit(dict);
  PyoaTimeAppDef_oaOccInstTerm_TypeInit(dict);
  PyoaTimeAppDef_oaOccModuleInstHeader_TypeInit(dict);
  PyoaTimeAppDef_oaOccNet_TypeInit(dict);
  PyoaTimeAppDef_oaOccShape_TypeInit(dict);
  PyoaTimeAppDef_oaOccTerm_TypeInit(dict);
  PyoaTimeAppDef_oaOccVectorInstDef_TypeInit(dict);
  PyoaTimeAppDef_oaOccurrence_TypeInit(dict);
  PyoaTimeAppDef_oaOpPointHeader_TypeInit(dict);
  PyoaTimeAppDef_oaParasiticNetwork_TypeInit(dict);
  PyoaTimeAppDef_oaPin_TypeInit(dict);
  PyoaTimeAppDef_oaPoleResidue_TypeInit(dict);
  PyoaTimeAppDef_oaProp_TypeInit(dict);
  PyoaTimeAppDef_oaPurpose_TypeInit(dict);
  PyoaTimeAppDef_oaReducedModel_TypeInit(dict);
  PyoaTimeAppDef_oaReticle_TypeInit(dict);
  PyoaTimeAppDef_oaReticleRef_TypeInit(dict);
  PyoaTimeAppDef_oaRoute_TypeInit(dict);
  PyoaTimeAppDef_oaRow_TypeInit(dict);
  PyoaTimeAppDef_oaRowHeader_TypeInit(dict);
  PyoaTimeAppDef_oaScanChain_TypeInit(dict);
  PyoaTimeAppDef_oaScanChainInst_TypeInit(dict);
  PyoaTimeAppDef_oaScanChainSet_TypeInit(dict);
  PyoaTimeAppDef_oaShape_TypeInit(dict);
  PyoaTimeAppDef_oaSiteDef_TypeInit(dict);
  PyoaTimeAppDef_oaSteiner_TypeInit(dict);
  PyoaTimeAppDef_oaStepperMap_TypeInit(dict);
  PyoaTimeAppDef_oaTech_TypeInit(dict);
  PyoaTimeAppDef_oaTechHeader_TypeInit(dict);
  PyoaTimeAppDef_oaTechLayerHeader_TypeInit(dict);
  PyoaTimeAppDef_oaTechViaDefHeader_TypeInit(dict);
  PyoaTimeAppDef_oaTerm_TypeInit(dict);
  PyoaTimeAppDef_oaTrackPattern_TypeInit(dict);
  PyoaTimeAppDef_oaValue_TypeInit(dict);
  PyoaTimeAppDef_oaVectorInstDef_TypeInit(dict);
  PyoaTimeAppDef_oaVia_TypeInit(dict);
  PyoaTimeAppDef_oaViaDef_TypeInit(dict);
  PyoaTimeAppDef_oaViaHeader_TypeInit(dict);
  PyoaTimeAppDef_oaViaSpec_TypeInit(dict);
  PyoaTimeAppDef_oaView_TypeInit(dict);
  PyoaTimeAppDef_oaWafer_TypeInit(dict);
  PyoaTimeAppDef_oaWaferDesc_TypeInit(dict);
  PyoaTimeAppDef_oaWaferFeature_TypeInit(dict);
  PyoaTimeProp_TypeInit(dict);
  PyoaTimeRangeProp_TypeInit(dict);
  PyoaTimeStamp_TypeInit(dict);
  PyoaTimer_TypeInit(dict);
  PyoaTrackPattern_TypeInit(dict);
  PyoaTrackPatternModTypeEnum_TypeInit(dict);
  PyoaTransform_TypeInit(dict);
  PyoaType_TypeInit(dict);
  PyoaTypeEnum_TypeInit(dict);
  PyoaUInt8Range_TypeInit(dict);
  PyoaUInt8RangeValue_TypeInit(dict);
  PyoaUInt8Value_TypeInit(dict);
  PyoaUndoModelEnum_TypeInit(dict);
  PyoaUnixNS_TypeInit(dict);
  PyoaUserUnitsType_TypeInit(dict);
  PyoaUserUnitsTypeEnum_TypeInit(dict);
  PyoaVCCap_TypeInit(dict);
  PyoaVCCapEnum_TypeInit(dict);
  PyoaVCMessageType_TypeInit(dict);
  PyoaVCMessageTypeEnum_TypeInit(dict);
  PyoaVCObserver_TypeInit(dict);
  PyoaVCObserverResult_TypeInit(dict);
  PyoaVCObserverResultEnum_TypeInit(dict);
  PyoaVCOperation_TypeInit(dict);
  PyoaVCOperationEnum_TypeInit(dict);
  PyoaVCQueryDepth_TypeInit(dict);
  PyoaVCQueryDepthEnum_TypeInit(dict);
  PyoaVCSystem_TypeInit(dict);
  PyoaVCVersion_TypeInit(dict);
  PyoaVCVersionIter_TypeInit(dict);
  PyoaValue_TypeInit(dict);
  PyoaValueArray_TypeInit(dict);
  PyoaValueArrayValue_TypeInit(dict);
  PyoaValueModTypeEnum_TypeInit(dict);
  PyoaVarDataAppDef_oaAnalysisOpPoint_TypeInit(dict);
  PyoaVarDataAppDef_oaAnalysisPoint_TypeInit(dict);
  PyoaVarDataAppDef_oaAppObject_TypeInit(dict);
  PyoaVarDataAppDef_oaAssignment_TypeInit(dict);
  PyoaVarDataAppDef_oaBlock_TypeInit(dict);
  PyoaVarDataAppDef_oaBlockage_TypeInit(dict);
  PyoaVarDataAppDef_oaBoundary_TypeInit(dict);
  PyoaVarDataAppDef_oaBusNetDef_TypeInit(dict);
  PyoaVarDataAppDef_oaBusTermDef_TypeInit(dict);
  PyoaVarDataAppDef_oaCMap_TypeInit(dict);
  PyoaVarDataAppDef_oaCell_TypeInit(dict);
  PyoaVarDataAppDef_oaCellView_TypeInit(dict);
  PyoaVarDataAppDef_oaCluster_TypeInit(dict);
  PyoaVarDataAppDef_oaConnectDef_TypeInit(dict);
  PyoaVarDataAppDef_oaConstraint_TypeInit(dict);
  PyoaVarDataAppDef_oaConstraintDef_TypeInit(dict);
  PyoaVarDataAppDef_oaConstraintGroup_TypeInit(dict);
  PyoaVarDataAppDef_oaConstraintGroupHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaConstraintGroupMem_TypeInit(dict);
  PyoaVarDataAppDef_oaConstraintParam_TypeInit(dict);
  PyoaVarDataAppDef_oaConstraintParamDef_TypeInit(dict);
  PyoaVarDataAppDef_oaDMData_TypeInit(dict);
  PyoaVarDataAppDef_oaDMFile_TypeInit(dict);
  PyoaVarDataAppDef_oaDerivedLayerParam_TypeInit(dict);
  PyoaVarDataAppDef_oaDesign_TypeInit(dict);
  PyoaVarDataAppDef_oaDesignInst_TypeInit(dict);
  PyoaVarDataAppDef_oaDevice_TypeInit(dict);
  PyoaVarDataAppDef_oaElmore_TypeInit(dict);
  PyoaVarDataAppDef_oaFigGroup_TypeInit(dict);
  PyoaVarDataAppDef_oaFigGroupMem_TypeInit(dict);
  PyoaVarDataAppDef_oaFrame_TypeInit(dict);
  PyoaVarDataAppDef_oaFrameInst_TypeInit(dict);
  PyoaVarDataAppDef_oaGCellPattern_TypeInit(dict);
  PyoaVarDataAppDef_oaGroup_TypeInit(dict);
  PyoaVarDataAppDef_oaGroupMember_TypeInit(dict);
  PyoaVarDataAppDef_oaGuide_TypeInit(dict);
  PyoaVarDataAppDef_oaImage_TypeInit(dict);
  PyoaVarDataAppDef_oaInst_TypeInit(dict);
  PyoaVarDataAppDef_oaInstHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaInstTerm_TypeInit(dict);
  PyoaVarDataAppDef_oaLPPHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaLayer_TypeInit(dict);
  PyoaVarDataAppDef_oaLayerHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaLib_TypeInit(dict);
  PyoaVarDataAppDef_oaMarker_TypeInit(dict);
  PyoaVarDataAppDef_oaModAssignment_TypeInit(dict);
  PyoaVarDataAppDef_oaModBusNetDef_TypeInit(dict);
  PyoaVarDataAppDef_oaModBusTermDef_TypeInit(dict);
  PyoaVarDataAppDef_oaModConnectDef_TypeInit(dict);
  PyoaVarDataAppDef_oaModInst_TypeInit(dict);
  PyoaVarDataAppDef_oaModInstHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaModInstTerm_TypeInit(dict);
  PyoaVarDataAppDef_oaModModuleInstHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaModNet_TypeInit(dict);
  PyoaVarDataAppDef_oaModTerm_TypeInit(dict);
  PyoaVarDataAppDef_oaModVectorInstDef_TypeInit(dict);
  PyoaVarDataAppDef_oaModule_TypeInit(dict);
  PyoaVarDataAppDef_oaNet_TypeInit(dict);
  PyoaVarDataAppDef_oaNode_TypeInit(dict);
  PyoaVarDataAppDef_oaOccAssignment_TypeInit(dict);
  PyoaVarDataAppDef_oaOccBusNetDef_TypeInit(dict);
  PyoaVarDataAppDef_oaOccBusTermDef_TypeInit(dict);
  PyoaVarDataAppDef_oaOccConnectDef_TypeInit(dict);
  PyoaVarDataAppDef_oaOccInst_TypeInit(dict);
  PyoaVarDataAppDef_oaOccInstHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaOccInstTerm_TypeInit(dict);
  PyoaVarDataAppDef_oaOccModuleInstHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaOccNet_TypeInit(dict);
  PyoaVarDataAppDef_oaOccShape_TypeInit(dict);
  PyoaVarDataAppDef_oaOccTerm_TypeInit(dict);
  PyoaVarDataAppDef_oaOccVectorInstDef_TypeInit(dict);
  PyoaVarDataAppDef_oaOccurrence_TypeInit(dict);
  PyoaVarDataAppDef_oaOpPointHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaParasiticNetwork_TypeInit(dict);
  PyoaVarDataAppDef_oaPin_TypeInit(dict);
  PyoaVarDataAppDef_oaPoleResidue_TypeInit(dict);
  PyoaVarDataAppDef_oaProp_TypeInit(dict);
  PyoaVarDataAppDef_oaPurpose_TypeInit(dict);
  PyoaVarDataAppDef_oaReducedModel_TypeInit(dict);
  PyoaVarDataAppDef_oaReticle_TypeInit(dict);
  PyoaVarDataAppDef_oaReticleRef_TypeInit(dict);
  PyoaVarDataAppDef_oaRoute_TypeInit(dict);
  PyoaVarDataAppDef_oaRow_TypeInit(dict);
  PyoaVarDataAppDef_oaRowHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaScanChain_TypeInit(dict);
  PyoaVarDataAppDef_oaScanChainInst_TypeInit(dict);
  PyoaVarDataAppDef_oaScanChainSet_TypeInit(dict);
  PyoaVarDataAppDef_oaShape_TypeInit(dict);
  PyoaVarDataAppDef_oaSiteDef_TypeInit(dict);
  PyoaVarDataAppDef_oaSteiner_TypeInit(dict);
  PyoaVarDataAppDef_oaStepperMap_TypeInit(dict);
  PyoaVarDataAppDef_oaTech_TypeInit(dict);
  PyoaVarDataAppDef_oaTechHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaTechLayerHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaTechViaDefHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaTerm_TypeInit(dict);
  PyoaVarDataAppDef_oaTrackPattern_TypeInit(dict);
  PyoaVarDataAppDef_oaValue_TypeInit(dict);
  PyoaVarDataAppDef_oaVectorInstDef_TypeInit(dict);
  PyoaVarDataAppDef_oaVia_TypeInit(dict);
  PyoaVarDataAppDef_oaViaDef_TypeInit(dict);
  PyoaVarDataAppDef_oaViaHeader_TypeInit(dict);
  PyoaVarDataAppDef_oaViaSpec_TypeInit(dict);
  PyoaVarDataAppDef_oaView_TypeInit(dict);
  PyoaVarDataAppDef_oaWafer_TypeInit(dict);
  PyoaVarDataAppDef_oaWaferDesc_TypeInit(dict);
  PyoaVarDataAppDef_oaWaferFeature_TypeInit(dict);
  PyoaVector_TypeInit(dict);
  PyoaVectorBitName_TypeInit(dict);
  PyoaVectorInst_TypeInit(dict);
  PyoaVectorInstBit_TypeInit(dict);
  PyoaVectorInstDef_TypeInit(dict);
  PyoaVectorInstDefModTypeEnum_TypeInit(dict);
  PyoaVectorName_TypeInit(dict);
  PyoaVerilogNS_TypeInit(dict);
  PyoaVersionComp_TypeInit(dict);
  PyoaVersionCompEnum_TypeInit(dict);
  PyoaVhdlNS_TypeInit(dict);
  PyoaVia_TypeInit(dict);
  PyoaViaDef_TypeInit(dict);
  PyoaViaDef2DTblValue_TypeInit(dict);
  PyoaViaDefArray_TypeInit(dict);
  PyoaViaDefArrayValue_TypeInit(dict);
  PyoaViaDefModTypeEnum_TypeInit(dict);
  PyoaViaDefNameArray_TypeInit(dict);
  PyoaViaDirection_TypeInit(dict);
  PyoaViaDirectionEnum_TypeInit(dict);
  PyoaViaHeader_TypeInit(dict);
  PyoaViaHeaderModTypeEnum_TypeInit(dict);
  PyoaViaModTypeEnum_TypeInit(dict);
  PyoaViaParam_TypeInit(dict);
  PyoaViaParamType_TypeInit(dict);
  PyoaViaParamTypeEnum_TypeInit(dict);
  PyoaViaQuery_TypeInit(dict);
  PyoaViaSpec_TypeInit(dict);
  PyoaViaSpecModTypeEnum_TypeInit(dict);
  PyoaView_TypeInit(dict);
  PyoaViewDMData_TypeInit(dict);
  PyoaViewModTypeEnum_TypeInit(dict);
  PyoaViewType_TypeInit(dict);
  PyoaWafer_TypeInit(dict);
  PyoaWaferDataType_TypeInit(dict);
  PyoaWaferDataTypeEnum_TypeInit(dict);
  PyoaWaferDesc_TypeInit(dict);
  PyoaWaferDescModTypeEnum_TypeInit(dict);
  PyoaWaferFeature_TypeInit(dict);
  PyoaWaferFeatureEnum_TypeInit(dict);
  PyoaWaferFeatureModTypeEnum_TypeInit(dict);
  PyoaWaferFeatureType_TypeInit(dict);
  PyoaWaferModTypeEnum_TypeInit(dict);
  PyoaWaferMsgIds_TypeInit(dict);
  PyoaWaferObject_TypeInit(dict);
  PyoaWaferUnitsEnum_TypeInit(dict);
  PyoaWaferUnitsType_TypeInit(dict);
  PyoaWidthLengthTableType_TypeInit(dict);
  PyoaWidthLengthTableTypeEnum_TypeInit(dict);
  PyoaWinNS_TypeInit(dict);
  PyoaBoolean_TypeInit(dict);
  PyoaByte_TypeInit(dict);
  PyoaChar_TypeInit(dict);
  PyoaComplex_oaDouble_TypeInit(dict);
  PyoaComplex_oaFloat_TypeInit(dict);
  PyoaCoord_TypeInit(dict);
  PyoaDist_TypeInit(dict);
  PyoaDouble_TypeInit(dict);
  PyoaFloat_TypeInit(dict);
  PyoaInt1_TypeInit(dict);
  PyoaInt2_TypeInit(dict);
  PyoaInt4_TypeInit(dict);
  PyoaInt8_TypeInit(dict);
  PyoaLayerNum_TypeInit(dict);
  PyoaOffset_TypeInit(dict);
  PyoaPurposeNum_TypeInit(dict);
  PyoaString_TypeInit(dict);
  PyoaTime_TypeInit(dict);
  PyoaUInt2_TypeInit(dict);
  PyoaUInt4_TypeInit(dict);
  PyoaUInt8_TypeInit(dict);
  PyoaAnalysisPoint_Array_TypeInit(dict);
  PyoaAntennaArea_Array_TypeInit(dict);
  PyoaBoolean_Array_TypeInit(dict);
  PyoaBox_Array_TypeInit(dict);
  PyoaBuildInfo_Array_TypeInit(dict);
  PyoaByte_Array_TypeInit(dict);
  PyoaChar_Array_TypeInit(dict);
  PyoaComplex_oaDouble_Array_TypeInit(dict);
  PyoaComplex_oaFloat_Array_TypeInit(dict);
  PyoaConstraintParam_Array_TypeInit(dict);
  PyoaCoord_Array_TypeInit(dict);
  PyoaDBType_Array_TypeInit(dict);
  PyoaDMAttr_Array_TypeInit(dict);
  PyoaDerivedLayerParam_Array_TypeInit(dict);
  PyoaDesignObject_Array_TypeInit(dict);
  PyoaDist_Array_TypeInit(dict);
  PyoaDouble_Array_TypeInit(dict);
  PyoaDualInt_Array_TypeInit(dict);
  PyoaFeature_Array_TypeInit(dict);
  PyoaFig_Array_TypeInit(dict);
  PyoaFloat_Array_TypeInit(dict);
  PyoaInt1_Array_TypeInit(dict);
  PyoaInt2_Array_TypeInit(dict);
  PyoaInt4_Array_TypeInit(dict);
  PyoaInt8_Array_TypeInit(dict);
  PyoaLayerMap_Array_TypeInit(dict);
  PyoaLayerNum_Array_TypeInit(dict);
  PyoaLib_Array_TypeInit(dict);
  PyoaModTerm_Array_TypeInit(dict);
  PyoaNameMem_Array_TypeInit(dict);
  PyoaObject_Array_TypeInit(dict);
  PyoaOccTerm_Array_TypeInit(dict);
  PyoaOffset_Array_TypeInit(dict);
  PyoaParam_Array_TypeInit(dict);
  PyoaPoint_Array_TypeInit(dict);
  PyoaPurposeNum_Array_TypeInit(dict);
  PyoaSiteRef_Array_TypeInit(dict);
  PyoaString_Array_TypeInit(dict);
  PyoaTech_Array_TypeInit(dict);
  PyoaTechHeader_Array_TypeInit(dict);
  PyoaTerm_Array_TypeInit(dict);
  PyoaTime_Array_TypeInit(dict);
  PyoaType_Array_TypeInit(dict);
  PyoaUInt2_Array_TypeInit(dict);
  PyoaUInt4_Array_TypeInit(dict);
  PyoaUInt8_Array_TypeInit(dict);
  PyoaValue_Array_TypeInit(dict);
  PyoaViaDef_Array_TypeInit(dict);

  // Add the templated classes to the dictionary
  PyObject* template_dict;
  PyObject* template_dict2;
  PyObject* obj_type;
  PyObject* obj_type2;
  PyObject* template_type;

  // Template: oaDoubleAppDef
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccShape");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaDoubleAppDef_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaDoubleAppDef",template_dict);
  Py_DECREF(template_dict);

  // Template: oa2DLookupTbl

  // Template: oaDataAppDef
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccShape");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaDataAppDef_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaDataAppDef",template_dict);
  Py_DECREF(template_dict);

  // Template: oa1DLookupTbl
  template_dict=PyDict_New();
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInt8");
    obj_type2=PyDict_GetItemString(dict,"oaFloat");
    template_type=PyDict_GetItemString(dict,"oa1DLookupTbl_oaInt8_oaFloat");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFloat");
    obj_type2=PyDict_GetItemString(dict,"oaFloat");
    template_type=PyDict_GetItemString(dict,"oa1DLookupTbl_oaFloat_oaFloat");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInt4");
    obj_type2=PyDict_GetItemString(dict,"oaFloat");
    template_type=PyDict_GetItemString(dict,"oa1DLookupTbl_oaInt4_oaFloat");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDualIntArray");
    template_type=PyDict_GetItemString(dict,"oa1DLookupTbl_oaInt4_oaDualIntArray");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaInt4");
    template_type=PyDict_GetItemString(dict,"oa1DLookupTbl_oaInt4_oaInt4");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  PyDict_SetItemString(dict,"oa1DLookupTbl",template_dict);
  Py_DECREF(template_dict);

  // Template: oaBooleanAppDef
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccShape");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaBooleanAppDef_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaBooleanAppDef",template_dict);
  Py_DECREF(template_dict);

  // Template: oaArrayBase
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaObject");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParam");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignObject");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaDesignObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMAttr");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaDMAttr");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBuildInfo");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaBuildInfo");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDualInt");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaDualInt");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerMap");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaLayerMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoint");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDBType");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaDBType");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaComplex_oaDouble");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaComplex_oaDouble");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBox");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaBox");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerNum");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaLayerNum");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaComplex_oaFloat");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaComplex_oaFloat");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaType");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaType");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAntennaArea");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaAntennaArea");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFig");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaFig");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFeature");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteRef");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaSiteRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaString");
  template_type=PyDict_GetItemString(dict,"oaArrayBase_oaString");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaArrayBase",template_dict);
  Py_DECREF(template_dict);

  // Template: oaComplexArray
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDouble");
  template_type=PyDict_GetItemString(dict,"oaComplexArray_oaDouble");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFloat");
  template_type=PyDict_GetItemString(dict,"oaComplexArray_oaFloat");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaComplexArray",template_dict);
  Py_DECREF(template_dict);

  // Template: oaInterPointerAppDef
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccShape");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaInterPointerAppDef_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaInterPointerAppDef",template_dict);
  Py_DECREF(template_dict);

  // Template: oaRange
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaUInt8");
  template_type=PyDict_GetItemString(dict,"oaRange_oaUInt8");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInt4");
  template_type=PyDict_GetItemString(dict,"oaRange_oaInt4");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaRange",template_dict);
  Py_DECREF(template_dict);

  // Template: oaObserver
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaVectorInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBitTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBitTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroundedNode");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaGroundedNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBusTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModDesignInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstPropDisplay");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaInstPropDisplay");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBusNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaArc");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaArc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModScalarInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModScalarInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInt1DTblValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaInt1DTblValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBundleNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBundleNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAreaHalo");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAreaHalo");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBundleTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBundleTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccScalarInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccScalarInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDonut");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDonut");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScalarNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaScalarNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModVectorInstBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleVectorInstBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModModuleVectorInstBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScalarInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaScalarInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCustomViaDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaCustomViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPRBoundary");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPRBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBitInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBitInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFlt2DTblValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaFlt2DTblValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSeriesRL");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaSeriesRL");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBundleNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBundleNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleScalarInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModModuleScalarInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTermConnectDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModTermConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleBitInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModModuleBitInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTimeRangeProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTimeRangeProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccAssignValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDualInt1DTblValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDualInt1DTblValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParamDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDerivedLayerParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaIntProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaIntProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBusTermBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInt2DTblValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaInt2DTblValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStringProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaStringProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModVectorInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTermConnectDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTermConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaUInt8Value");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaUInt8Value");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAreaBoundary");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAreaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModScalarTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModScalarTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBundleTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBundleTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBusNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDerivedLayerDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNetConnectDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModNetConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAppProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaUInt8RangeValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaUInt8RangeValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleScalarInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccModuleScalarInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBitTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBitTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisLib");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAnalysisLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTextOverride");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTextOverride");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccScalarTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccScalarTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaHierProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaHierProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHalo");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaLayerHalo");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaArrayInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaArrayInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLibDefList");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaLibDefList");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPath");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPath");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccScalarNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccScalarNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStdViaDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaStdViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInductor");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaInductor");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModScalarNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModScalarNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccModuleInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBundleNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBundleNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBusNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccVectorInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTermConnectDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccTermConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFltValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaFltValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDiode");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDiode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFlt1DTblValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaFlt1DTblValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRect");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaRect");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModAssignValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDualIntValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDualIntValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValueArrayValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaValueArrayValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDot");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDot");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSimpleConstraint");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaSimpleConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaIntRangeProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaIntRangeProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDoubleProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDoubleProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBooleanProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBooleanProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleBitInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccModuleBitInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTextDisplay");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTextDisplay");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAppDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBusTermBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPathSeg");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPathSeg");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignAssignment");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccAssignAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaEnumProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaEnumProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaClusterBoundary");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaClusterBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPhysicalLayer");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPhysicalLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPiElmore");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPiElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBitTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBitTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSubNetwork");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaSubNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBusNetBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStdVia");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaStdVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccArrayInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccArrayInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerBlockage");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaLayerBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBooleanValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBooleanValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLine");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaLine");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaArraySiteDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaArraySiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaIntDualIntArrayTblValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaIntDualIntArrayTblValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleVectorInstBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccModuleVectorInstBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBusNetBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBitInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBitInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPoint");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBusTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaText");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaText");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBitInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBitInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBitNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBitNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaIntValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaIntValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstAttrDisplay");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaInstAttrDisplay");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPolygon");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPolygon");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNetConnectDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaNetConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDoubleRangeProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDoubleRangeProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleVectorInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccModuleVectorInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPiPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPiPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSizedLayer");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaSizedLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFloatProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaFloatProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignAssignment");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModAssignAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoxArrayValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBoxArrayValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSnapBoundary");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaSnapBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModModuleInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaResistor");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaResistor");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBundleTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBundleTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaEvalText");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaEvalText");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccVectorInstBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTimeProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTimeProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMutualInductor");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaMutualInductor");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAreaBlockage");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAreaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStdViaHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaStdViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaVectorInstBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStdDevice");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaStdDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFltIntFltTblValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaFltIntFltTblValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViewType");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaViewType");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAttrDisplay");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAttrDisplay");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignAssignment");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAssignAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccDesignInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCustomVia");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaCustomVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBusTermBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCustomViaHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaCustomViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaIntFltTblValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaIntFltTblValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCouplingCap");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaCouplingCap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaEllipse");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaEllipse");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFloatRangeProp");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaFloatRangeProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayer");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDerivedLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBitNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBitNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModBusTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPropDisplay");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaPropDisplay");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScalarTerm");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaScalarTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaAssignValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBitNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBitNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetBit");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBusNetBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleVectorInst");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaModModuleVectorInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLumpedElmore");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaLumpedElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScalarSiteDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaScalarSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaIntRangeValue");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaIntRangeValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNetConnectDef");
  template_type=PyDict_GetItemString(dict,"oaObserver_oaOccNetConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaObserver",template_dict);
  Py_DECREF(template_dict);

  // Template: oaVarDataAppDef
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccShape");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaVarDataAppDef_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaVarDataAppDef",template_dict);
  Py_DECREF(template_dict);

  // Template: oaIter
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaIter_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaVectorInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTerm");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccBusTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModDesignInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaIter_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNet");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccBusNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaIter_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObjectDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaAppObjectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaIter_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisLib");
  template_type=PyDict_GetItemString(dict,"oaIter_oaAnalysisLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaIter_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaIter_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaIter_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaIter_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaIter_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaIter_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaIter_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaIter_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccModuleInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParamDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaDerivedLayerParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPinFig");
  template_type=PyDict_GetItemString(dict,"oaIter_oaPinFig");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaIter_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNet");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModBusNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaDerivedLayerDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaIter_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLibDefList");
  template_type=PyDict_GetItemString(dict,"oaIter_oaLibDefList");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaIter_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBitTerm");
  template_type=PyDict_GetItemString(dict,"oaIter_oaBitTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaIter_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaIter_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaIter_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaIter_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaIter_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignObject");
  template_type=PyDict_GetItemString(dict,"oaIter_oaDesignObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaIter_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaIter_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaIter_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaIter_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermBit");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModBusTermBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaIter_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerConstraint");
  template_type=PyDict_GetItemString(dict,"oaIter_oaLayerConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNet");
  template_type=PyDict_GetItemString(dict,"oaIter_oaBusNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaIter_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaIter_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSimpleConstraint");
  template_type=PyDict_GetItemString(dict,"oaIter_oaSimpleConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaIter_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaAppDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermBit");
  template_type=PyDict_GetItemString(dict,"oaIter_oaBusTermBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerPairConstraint");
  template_type=PyDict_GetItemString(dict,"oaIter_oaLayerPairConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaIter_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaIter_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaClusterBoundary");
  template_type=PyDict_GetItemString(dict,"oaIter_oaClusterBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSubNetwork");
  template_type=PyDict_GetItemString(dict,"oaIter_oaSubNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetBit");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModBusNetBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLibDefListMem");
  template_type=PyDict_GetItemString(dict,"oaIter_oaLibDefListMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaIter_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaIter_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaIter_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetBit");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccBusNetBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaIter_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetBit");
  template_type=PyDict_GetItemString(dict,"oaIter_oaBusNetBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPoint");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTerm");
  template_type=PyDict_GetItemString(dict,"oaIter_oaBusTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBitNet");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModBitNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaIter_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAreaBoundary");
  template_type=PyDict_GetItemString(dict,"oaIter_oaAreaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaIter_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModModuleInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaIter_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockObject");
  template_type=PyDict_GetItemString(dict,"oaIter_oaBlockObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaIter_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaIter_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaIter_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMutualInductor");
  template_type=PyDict_GetItemString(dict,"oaIter_oaMutualInductor");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstBit");
  template_type=PyDict_GetItemString(dict,"oaIter_oaVectorInstBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViewType");
  template_type=PyDict_GetItemString(dict,"oaIter_oaViewType");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaIter_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaIter_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaIter_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaIter_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaIter_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaIter_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaIter_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermBit");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccBusTermBit");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaIter_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerArrayConstraint");
  template_type=PyDict_GetItemString(dict,"oaIter_oaLayerArrayConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaIter_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBitNet");
  template_type=PyDict_GetItemString(dict,"oaIter_oaBitNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTerm");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModBusTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBitNet");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccBitNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaIter_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaIter_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaIter_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaIter_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaIter_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaIter_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaIter_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccDesignInst");
  template_type=PyDict_GetItemString(dict,"oaIter_oaOccDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaIter_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaIter",template_dict);
  Py_DECREF(template_dict);

  // Template: oaComplex
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDouble");
  template_type=PyDict_GetItemString(dict,"oaComplex_oaDouble");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFloat");
  template_type=PyDict_GetItemString(dict,"oaComplex_oaFloat");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaComplex",template_dict);
  Py_DECREF(template_dict);

  // Template: oaNetTermArrayBase
  template_dict=PyDict_New();
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaNet");
    obj_type2=PyDict_GetItemString(dict,"oaName");
    template_type=PyDict_GetItemString(dict,"oaNetTermArrayBase_oaNet_oaName");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaTerm");
    template_type=PyDict_GetItemString(dict,"oaNetTermArrayBase_oaNet_oaTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaUInt4");
    template_type=PyDict_GetItemString(dict,"oaNetTermArrayBase_oaNet_oaUInt4");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModNet");
    obj_type2=PyDict_GetItemString(dict,"oaName");
    template_type=PyDict_GetItemString(dict,"oaNetTermArrayBase_oaModNet_oaName");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaUInt4");
    template_type=PyDict_GetItemString(dict,"oaNetTermArrayBase_oaModNet_oaUInt4");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModTerm");
    template_type=PyDict_GetItemString(dict,"oaNetTermArrayBase_oaModNet_oaModTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  PyDict_SetItemString(dict,"oaNetTermArrayBase",template_dict);
  Py_DECREF(template_dict);

  // Template: oaIntAppDef
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccShape");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaIntAppDef_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaIntAppDef",template_dict);
  Py_DECREF(template_dict);

  // Template: oaTimeAppDef
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccShape");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaTimeAppDef_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaTimeAppDef",template_dict);
  Py_DECREF(template_dict);

  // Template: oaStdObserver
  template_dict=PyDict_New();
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
    obj_type2=PyDict_GetItemString(dict,"oaViaHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaViaHeader_oaViaHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaVectorInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaVectorInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDesign");
    obj_type2=PyDict_GetItemString(dict,"oaDesignModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDesign_oaDesignModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBitTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBitTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaGroundedNode");
    obj_type2=PyDict_GetItemString(dict,"oaNodeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaGroundedNode_oaNodeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccModuleScalarInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBusTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
    obj_type2=PyDict_GetItemString(dict,"oaRowHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaRowHeader_oaRowHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModDesignInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModDesignInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInstPropDisplay");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaInstPropDisplay_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusNet");
    obj_type2=PyDict_GetItemString(dict,"oaBusNetDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaArc");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaArc_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModScalarInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModScalarInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
    obj_type2=PyDict_GetItemString(dict,"oaScanChainSetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaScanChainSet_oaScanChainSetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInt1DTblValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaInt1DTblValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBundleNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBundleNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
    obj_type2=PyDict_GetItemString(dict,"oaBusTermDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
    obj_type2=PyDict_GetItemString(dict,"oaAssignmentModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAreaHalo");
    obj_type2=PyDict_GetItemString(dict,"oaBlockageModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBundleTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccScalarInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccScalarInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDonut");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDonut_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaScalarNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaScalarNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFrame");
    obj_type2=PyDict_GetItemString(dict,"oaFrameModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaFrame_oaFrameModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCell");
    obj_type2=PyDict_GetItemString(dict,"oaCellModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaCell_oaCellModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaEnumProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaEnumProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
    obj_type2=PyDict_GetItemString(dict,"oaTrackPatternModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTrackPattern_oaTrackPatternModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstBit");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccModuleBitInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModModuleVectorInstBit");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModModuleVectorInstBit_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
    obj_type2=PyDict_GetItemString(dict,"oaInstTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModInstTerm_oaInstTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
    obj_type2=PyDict_GetItemString(dict,"oaAssignmentModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModAssignment_oaAssignmentModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCustomViaDef");
    obj_type2=PyDict_GetItemString(dict,"oaViaDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaCustomViaDef_oaViaDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPRBoundary");
    obj_type2=PyDict_GetItemString(dict,"oaBoundaryModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetBit");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBitInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBitInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
    obj_type2=PyDict_GetItemString(dict,"oaInstTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaInstTerm_oaInstTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaRoute");
    obj_type2=PyDict_GetItemString(dict,"oaRouteModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaRoute_oaRouteModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFlt2DTblValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaFlt2DTblValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBundleTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBundleTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSeriesRL");
    obj_type2=PyDict_GetItemString(dict,"oaDeviceModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaSeriesRL_oaDeviceModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBundleNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBundleNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModModuleScalarInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModModuleScalarInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
    obj_type2=PyDict_GetItemString(dict,"oaAnalysisOpPointModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
    obj_type2=PyDict_GetItemString(dict,"oaInstTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModModuleBitInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModModuleBitInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSimpleConstraint");
    obj_type2=PyDict_GetItemString(dict,"oaConstraintModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaSimpleConstraint_oaConstraintModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTimeRangeProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTimeRangeProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaVia");
    obj_type2=PyDict_GetItemString(dict,"oaViaModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaVia_oaViaModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCustomVia");
    obj_type2=PyDict_GetItemString(dict,"oaViaModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaCustomVia_oaViaModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccAssignValue");
    obj_type2=PyDict_GetItemString(dict,"oaAssignmentModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
    obj_type2=PyDict_GetItemString(dict,"oaDerivedLayerParamModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDerivedLayerParam_oaDerivedLayerParamModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
    obj_type2=PyDict_GetItemString(dict,"oaTechHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTechHeader_oaTechHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDualInt1DTblValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDualInt1DTblValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaIntProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaIntProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccModuleInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
    obj_type2=PyDict_GetItemString(dict,"oaReducedModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaReducedModel_oaReducedModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
    obj_type2=PyDict_GetItemString(dict,"oaTechViaDefHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTechViaDefHeader_oaTechViaDefHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInt2DTblValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaInt2DTblValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaStringProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaStringProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
    obj_type2=PyDict_GetItemString(dict,"oaBusTermDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBusTermDef_oaBusTermDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTermConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaConnectDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTermConnectDef_oaConnectDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaUInt8Value");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaUInt8Value_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLayer");
    obj_type2=PyDict_GetItemString(dict,"oaLayerModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaLayer_oaLayerModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
    obj_type2=PyDict_GetItemString(dict,"oaAssignmentModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAssignment_oaAssignmentModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModScalarTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModScalarTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBundleTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBundleTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
    obj_type2=PyDict_GetItemString(dict,"oaConstraintGroupMemModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaConstraintGroupMem_oaConstraintGroupMemModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBusNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaConnectDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModNetConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaConnectDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModNetConnectDef_oaConnectDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaShape");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaShape_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
    obj_type2=PyDict_GetItemString(dict,"oaPurposeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPurpose_oaPurposeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaUInt8RangeValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaUInt8RangeValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
    obj_type2=PyDict_GetItemString(dict,"oaVectorInstDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBitTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBitTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
    obj_type2=PyDict_GetItemString(dict,"oaPoleResidueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPoleResidue_oaPoleResidueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
    obj_type2=PyDict_GetItemString(dict,"oaViaDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaViaDef_oaViaDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAnalysisLib");
    obj_type2=PyDict_GetItemString(dict,"oaAnalysisLibModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTextOverride");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTextOverride_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBlock");
    obj_type2=PyDict_GetItemString(dict,"oaBlockModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBlock_oaBlockModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaGroup");
    obj_type2=PyDict_GetItemString(dict,"oaGroupModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaGroup_oaGroupModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
    obj_type2=PyDict_GetItemString(dict,"oaDMFileModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDMFile_oaDMFileModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
    obj_type2=PyDict_GetItemString(dict,"oaWaferFeatureModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaWaferFeature_oaWaferFeatureModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaHierProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaHierProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLayerHalo");
    obj_type2=PyDict_GetItemString(dict,"oaBlockageModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaLayerHalo_oaBlockageModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaArrayInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaArrayInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaNode");
    obj_type2=PyDict_GetItemString(dict,"oaNodeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaNode_oaNodeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPath");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPath_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccScalarNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccScalarNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaStdViaDef");
    obj_type2=PyDict_GetItemString(dict,"oaViaDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaStdViaDef_oaViaDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPiElmore");
    obj_type2=PyDict_GetItemString(dict,"oaReducedModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPiElmore_oaReducedModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFltValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaFltValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusTermBit");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBusTermBit_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPin");
    obj_type2=PyDict_GetItemString(dict,"oaPinModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPin_oaPinModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
    obj_type2=PyDict_GetItemString(dict,"oaAppObjectModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAppObject_oaAppObjectModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInductor");
    obj_type2=PyDict_GetItemString(dict,"oaDeviceModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaInductor_oaDeviceModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
    obj_type2=PyDict_GetItemString(dict,"oaDesignInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDesignInst_oaDesignInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModScalarNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModScalarNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModule");
    obj_type2=PyDict_GetItemString(dict,"oaModuleModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModule_oaModuleModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusTermBit");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBusTermBit_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBundleNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBundleNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
    obj_type2=PyDict_GetItemString(dict,"oaModuleInstHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModModuleInstHeader_oaModuleInstHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccTermConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaConnectDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccScalarTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
    obj_type2=PyDict_GetItemString(dict,"oaScanChainModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaScanChain_oaScanChainModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDiode");
    obj_type2=PyDict_GetItemString(dict,"oaDeviceModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDiode_oaDeviceModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
    obj_type2=PyDict_GetItemString(dict,"oaBoundaryModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBoundary_oaBoundaryModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBusNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaRect");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaRect_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
    obj_type2=PyDict_GetItemString(dict,"oaFigGroupModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaFigGroup_oaFigGroupModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModAssignValue");
    obj_type2=PyDict_GetItemString(dict,"oaAssignmentModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModAssignValue_oaAssignmentModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDualIntValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDualIntValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaValueArrayValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaValueArrayValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTech");
    obj_type2=PyDict_GetItemString(dict,"oaTechModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTech_oaTechModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDot");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDot_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
    obj_type2=PyDict_GetItemString(dict,"oaBusNetDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaIntRangeProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaIntRangeProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDoubleProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDoubleProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBooleanProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBooleanProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTextDisplay");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTextDisplay_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFlt1DTblValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaFlt1DTblValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPathSeg");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPathSeg_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccAssignAssignment");
    obj_type2=PyDict_GetItemString(dict,"oaAssignmentModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModVectorInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModVectorInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
    obj_type2=PyDict_GetItemString(dict,"oaStepperMapModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaStepperMap_oaStepperMapModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
    obj_type2=PyDict_GetItemString(dict,"oaInstHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaClusterBoundary");
    obj_type2=PyDict_GetItemString(dict,"oaBoundaryModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaClusterBoundary_oaBoundaryModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPhysicalLayer");
    obj_type2=PyDict_GetItemString(dict,"oaLayerModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPhysicalLayer_oaLayerModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
    obj_type2=PyDict_GetItemString(dict,"oaReticleRefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaReticleRef_oaReticleRefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBitTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBitTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
    obj_type2=PyDict_GetItemString(dict,"oaBusTermDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSubNetwork");
    obj_type2=PyDict_GetItemString(dict,"oaSubNetworkModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaSubNetwork_oaSubNetworkModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusNetBit");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBusNetBit_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
    obj_type2=PyDict_GetItemString(dict,"oaScanChainInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaScanChainInst_oaScanChainInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
    obj_type2=PyDict_GetItemString(dict,"oaInstHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaInstHeader_oaInstHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaStdVia");
    obj_type2=PyDict_GetItemString(dict,"oaViaModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaStdVia_oaViaModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccArrayInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccArrayInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLayerBlockage");
    obj_type2=PyDict_GetItemString(dict,"oaBlockageModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaLayerBlockage_oaBlockageModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBoxArrayValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
    obj_type2=PyDict_GetItemString(dict,"oaConstraintParamModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaConstraintParam_oaConstraintParamModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBooleanValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBooleanValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAppProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAppProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAttrDisplay");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
    obj_type2=PyDict_GetItemString(dict,"oaFrameInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaFrameInst_oaFrameInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLine");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaLine_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaArraySiteDef");
    obj_type2=PyDict_GetItemString(dict,"oaSiteDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaIntDualIntArrayTblValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaIntDualIntArrayTblValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
    obj_type2=PyDict_GetItemString(dict,"oaGCellPatternModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaGCellPattern_oaGCellPatternModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccModuleVectorInstBit");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaView");
    obj_type2=PyDict_GetItemString(dict,"oaViewModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaView_oaViewModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusNetBit");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBusNetBit_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBitInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBitInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
    obj_type2=PyDict_GetItemString(dict,"oaBusNetDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBusNetDef_oaBusNetDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOpPoint");
    obj_type2=PyDict_GetItemString(dict,"oaOpPointModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOpPoint_oaOpPointModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBusTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
    obj_type2=PyDict_GetItemString(dict,"oaWaferDescModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaWaferDesc_oaWaferDescModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaText");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaText_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBitInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBitInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBitNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBitNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaIntValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaIntValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaElmore");
    obj_type2=PyDict_GetItemString(dict,"oaElmoreModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaElmore_oaElmoreModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAreaBoundary");
    obj_type2=PyDict_GetItemString(dict,"oaBoundaryModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInstAttrDisplay");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaInstAttrDisplay_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPolygon");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPolygon_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaNetConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaConnectDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDoubleRangeProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDoubleRangeProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccModuleVectorInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPiPoleResidue");
    obj_type2=PyDict_GetItemString(dict,"oaReducedModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPiPoleResidue_oaReducedModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSizedLayer");
    obj_type2=PyDict_GetItemString(dict,"oaLayerModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaSizedLayer_oaLayerModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFloatProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaFloatProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModAssignAssignment");
    obj_type2=PyDict_GetItemString(dict,"oaAssignmentModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModAssignAssignment_oaAssignmentModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
    obj_type2=PyDict_GetItemString(dict,"oaModuleInstHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSnapBoundary");
    obj_type2=PyDict_GetItemString(dict,"oaBoundaryModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaSnapBoundary_oaBoundaryModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
    obj_type2=PyDict_GetItemString(dict,"oaVectorInstDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaVectorInstDef_oaVectorInstDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModModuleInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModModuleInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
    obj_type2=PyDict_GetItemString(dict,"oaFigGroupMemModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaFigGroupMem_oaFigGroupMemModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaResistor");
    obj_type2=PyDict_GetItemString(dict,"oaDeviceModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaResistor_oaDeviceModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaEvalText");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaEvalText_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccVectorInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
    obj_type2=PyDict_GetItemString(dict,"oaTechLayerHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTechLayerHeader_oaTechLayerHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCouplingCap");
    obj_type2=PyDict_GetItemString(dict,"oaDeviceModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaCouplingCap_oaDeviceModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstBit");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
    obj_type2=PyDict_GetItemString(dict,"oaInstHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModInstHeader_oaInstHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTimeProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaTimeProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCluster");
    obj_type2=PyDict_GetItemString(dict,"oaClusterModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaCluster_oaClusterModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
    obj_type2=PyDict_GetItemString(dict,"oaLPPHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaLPPHeader_oaLPPHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaMutualInductor");
    obj_type2=PyDict_GetItemString(dict,"oaDeviceModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAreaBlockage");
    obj_type2=PyDict_GetItemString(dict,"oaBlockageModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaStdViaHeader");
    obj_type2=PyDict_GetItemString(dict,"oaViaHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaStdViaHeader_oaViaHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaVectorInstBit");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaVectorInstBit_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaStdDevice");
    obj_type2=PyDict_GetItemString(dict,"oaDeviceModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaStdDevice_oaDeviceModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFltIntFltTblValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaFltIntFltTblValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
    obj_type2=PyDict_GetItemString(dict,"oaVectorInstDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPropDisplay");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaPropDisplay_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaReticle");
    obj_type2=PyDict_GetItemString(dict,"oaReticleModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaReticle_oaReticleModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaConnectDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModConnectDef_oaConnectDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAssignAssignment");
    obj_type2=PyDict_GetItemString(dict,"oaAssignmentModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaScalarInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaScalarInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaRow");
    obj_type2=PyDict_GetItemString(dict,"oaRowModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaRow_oaRowModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
    obj_type2=PyDict_GetItemString(dict,"oaBlockageModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBlockage_oaBlockageModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
    obj_type2=PyDict_GetItemString(dict,"oaAnalysisPointModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccDesignInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccDesignInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaGuide");
    obj_type2=PyDict_GetItemString(dict,"oaGuideModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaGuide_oaGuideModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModTermConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaConnectDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModTermConnectDef_oaConnectDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
    obj_type2=PyDict_GetItemString(dict,"oaConstraintModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaConstraint_oaConstraintModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermBit");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCustomViaHeader");
    obj_type2=PyDict_GetItemString(dict,"oaViaHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaCustomViaHeader_oaViaHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaIntFltTblValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaIntFltTblValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
    obj_type2=PyDict_GetItemString(dict,"oaViaSpecModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaViaSpec_oaViaSpecModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaEllipse");
    obj_type2=PyDict_GetItemString(dict,"oaShapeModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaEllipse_oaShapeModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCellView");
    obj_type2=PyDict_GetItemString(dict,"oaCellViewModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaCellView_oaCellViewModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFloatRangeProp");
    obj_type2=PyDict_GetItemString(dict,"oaPropModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaFloatRangeProp_oaPropModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaConnectDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaConnectDef_oaConnectDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayer");
    obj_type2=PyDict_GetItemString(dict,"oaLayerModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDerivedLayer_oaLayerModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBitNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBitNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
    obj_type2=PyDict_GetItemString(dict,"oaBusNetDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModBusTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaScalarTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaScalarTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAssignValue");
    obj_type2=PyDict_GetItemString(dict,"oaAssignmentModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBitNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccBitNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModNet");
    obj_type2=PyDict_GetItemString(dict,"oaNetModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModNet_oaNetModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
    obj_type2=PyDict_GetItemString(dict,"oaGroupMemberModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaGroupMember_oaGroupMemberModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
    obj_type2=PyDict_GetItemString(dict,"oaConstraintGroupModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaConstraintGroup_oaConstraintGroupModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
    obj_type2=PyDict_GetItemString(dict,"oaOpPointHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDevice");
    obj_type2=PyDict_GetItemString(dict,"oaDeviceModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaDevice_oaDeviceModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
    obj_type2=PyDict_GetItemString(dict,"oaSteinerModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaSteiner_oaSteinerModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
    obj_type2=PyDict_GetItemString(dict,"oaTermModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModTerm_oaTermModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaImage");
    obj_type2=PyDict_GetItemString(dict,"oaImageModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaImage_oaImageModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
    obj_type2=PyDict_GetItemString(dict,"oaOccurrenceModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
    obj_type2=PyDict_GetItemString(dict,"oaLayerHeaderModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaLayerHeader_oaLayerHeaderModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaMarker");
    obj_type2=PyDict_GetItemString(dict,"oaMarkerModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaMarker_oaMarkerModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
    obj_type2=PyDict_GetItemString(dict,"oaSiteDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaSiteDef_oaSiteDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModModuleVectorInst");
    obj_type2=PyDict_GetItemString(dict,"oaInstModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaModModuleVectorInst_oaInstModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLumpedElmore");
    obj_type2=PyDict_GetItemString(dict,"oaReducedModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaLumpedElmore_oaReducedModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaScalarSiteDef");
    obj_type2=PyDict_GetItemString(dict,"oaSiteDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaScalarSiteDef_oaSiteDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCMap");
    obj_type2=PyDict_GetItemString(dict,"oaCMapModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaCMap_oaCMapModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaIntRangeValue");
    obj_type2=PyDict_GetItemString(dict,"oaValueModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaIntRangeValue_oaValueModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccNetConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaConnectDefModTypeEnum");
    template_type=PyDict_GetItemString(dict,"oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  PyDict_SetItemString(dict,"oaStdObserver",template_dict);
  Py_DECREF(template_dict);

  // Template: oaFloatAppDef
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccShape");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaFloatAppDef_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaFloatAppDef",template_dict);
  Py_DECREF(template_dict);

  // Template: oaSubset
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaType");
  template_type=PyDict_GetItemString(dict,"oaSubset_oaType");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDBType");
  template_type=PyDict_GetItemString(dict,"oaSubset_oaDBType");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaSubset",template_dict);
  Py_DECREF(template_dict);

  // Template: oaCollection
  template_dict=PyDict_New();
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
    obj_type2=PyDict_GetItemString(dict,"oaViaHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaViaHeader_oaViaHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaViaDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaViaHeader_oaViaDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaViaHeader_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaViaHeader_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModInst");
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModInst_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModVectorInstDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModInst_oaModVectorInstDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
    obj_type2=PyDict_GetItemString(dict,"oaOccInst");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccInstTerm_oaOccInst");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaInstTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccInstTerm_oaInstTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModInstTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccInstTerm_oaModInstTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaOccNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccInstTerm_oaOccNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaOccurrence");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccInstTerm_oaOccurrence");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaVectorInst");
    obj_type2=PyDict_GetItemString(dict,"oaVectorInstDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaVectorInst_oaVectorInstDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusTerm");
    obj_type2=PyDict_GetItemString(dict,"oaOccBusTermDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccBusTerm_oaOccBusTermDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRowHeader_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaSiteDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRowHeader_oaSiteDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModDesignInst");
    obj_type2=PyDict_GetItemString(dict,"oaModInstHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModDesignInst_oaModInstHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
    obj_type2=PyDict_GetItemString(dict,"oaOpPointHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAnalysisOpPoint_oaOpPointHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaAnalysisPoint");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAnalysisOpPoint_oaAnalysisPoint");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusNet");
    obj_type2=PyDict_GetItemString(dict,"oaOccBusNetDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccBusNet_oaOccBusNetDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaViaSpec_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAppObjectDef");
    obj_type2=PyDict_GetItemString(dict,"oaSession");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppObjectDef_oaSession");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppObjectDef_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDMData");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppObjectDef_oaDMData");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppObjectDef_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBusTermDef_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
    obj_type2=PyDict_GetItemString(dict,"oaOccInst");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccAssignment_oaOccInst");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaOccurrence");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccAssignment_oaOccurrence");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAnalysisLib");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAnalysisLib_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFrame");
    obj_type2=PyDict_GetItemString(dict,"oaWafer");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaFrame_oaWafer");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDMData");
    obj_type2=PyDict_GetItemString(dict,"oaDMData");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDMData_oaDMData");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
    obj_type2=PyDict_GetItemString(dict,"oaOccBundleNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccNet_oaOccBundleNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccNet_oaModNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccNet_oaNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaOccNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccNet_oaOccNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaOccurrence");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccNet_oaOccurrence");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaTrackPattern_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
    obj_type2=PyDict_GetItemString(dict,"oaModNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModInstTerm_oaModNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModInstTerm_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModInst");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModInstTerm_oaModInst");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
    obj_type2=PyDict_GetItemString(dict,"oaOccInstHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccInstHeader_oaOccInstHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaRoute");
    obj_type2=PyDict_GetItemString(dict,"oaInstTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRoute_oaInstTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRoute_oaNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaSteiner");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRoute_oaSteiner");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaShape");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRoute_oaShape");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRoute_oaTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaPin");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRoute_oaPin");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRoute_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaVia");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRoute_oaVia");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
    obj_type2=PyDict_GetItemString(dict,"oaModInst");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccInst_oaModInst");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaInst");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccInst_oaInst");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaOccVectorInstDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccInst_oaOccVectorInstDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaOccurrence");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccInst_oaOccurrence");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
    obj_type2=PyDict_GetItemString(dict,"oaSession");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraintDef_oaSession");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraintGroup_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraintGroup_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDesign");
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDesign_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
    obj_type2=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraintGroupMem_oaConstraintGroupHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaConstraintGroup");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraintGroupMem_oaConstraintGroup");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDerivedLayerParam_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaWafer");
    obj_type2=PyDict_GetItemString(dict,"oaWafer");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaWafer_oaWafer");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
    obj_type2=PyDict_GetItemString(dict,"oaScanChain");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaScanChainSet_oaScanChain");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInst");
    obj_type2=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccModuleInst_oaOccModuleInstHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaTechViaDefHeader_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParamDef");
    obj_type2=PyDict_GetItemString(dict,"oaSession");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDerivedLayerParamDef_oaSession");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
    obj_type2=PyDict_GetItemString(dict,"oaFrame");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaFrameInst_oaFrame");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaReticle");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaFrameInst_oaReticle");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPinFig");
    obj_type2=PyDict_GetItemString(dict,"oaPin");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaPinFig_oaPin");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAssignment_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaInst");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAssignment_oaInst");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
    obj_type2=PyDict_GetItemString(dict,"oaOccurrence");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccModuleInstHeader_oaOccurrence");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusNet");
    obj_type2=PyDict_GetItemString(dict,"oaModBusNetDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModBusNet_oaModBusNetDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaOccurrence");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccConnectDef_oaOccurrence");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerDef");
    obj_type2=PyDict_GetItemString(dict,"oaSession");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDerivedLayerDef_oaSession");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaShape");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaShape_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaShape_oaNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaLPPHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaShape_oaLPPHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLibDefList");
    obj_type2=PyDict_GetItemString(dict,"oaLibDefList");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaLibDefList_oaLibDefList");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaPurpose_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
    obj_type2=PyDict_GetItemString(dict,"oaOccurrence");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccVectorInstDef_oaOccurrence");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBitTerm");
    obj_type2=PyDict_GetItemString(dict,"oaBitTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBitTerm_oaBitTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
    obj_type2=PyDict_GetItemString(dict,"oaPiPoleResidue");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaPoleResidue_oaPiPoleResidue");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaViaDef_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaProp");
    obj_type2=PyDict_GetItemString(dict,"oaObject");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaProp_oaObject");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaGroup");
    obj_type2=PyDict_GetItemString(dict,"oaObject");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGroup_oaObject");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGroup_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaLib");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGroup_oaLib");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDMData");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGroup_oaDMData");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGroup_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
    obj_type2=PyDict_GetItemString(dict,"oaDMFile");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDMFile_oaDMFile");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDMContainer");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDMFile_oaDMContainer");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGCellPattern_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDesignObject");
    obj_type2=PyDict_GetItemString(dict,"oaParasiticNetwork");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDesignObject_oaParasiticNetwork");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNode");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDesignObject_oaNode");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaNode");
    obj_type2=PyDict_GetItemString(dict,"oaSubNetwork");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaNode_oaSubNetwork");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaParasiticNetwork");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaNode_oaParasiticNetwork");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaStdDevice");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaNode_oaStdDevice");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTerm");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaTerm_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaTerm_oaNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaBundleTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaTerm_oaBundleTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaPin");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaPin_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaPin_oaNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaPin_oaTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppObject_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDMData");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppObject_oaDMData");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppObject_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
    obj_type2=PyDict_GetItemString(dict,"oaFrame");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDesignInst_oaFrame");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaReticle");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDesignInst_oaReticle");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModule");
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModule_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusTermBit");
    obj_type2=PyDict_GetItemString(dict,"oaModBusTermDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModBusTermBit_oaModBusTermDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModModuleInstHeader_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaScanChain_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLayerConstraint");
    obj_type2=PyDict_GetItemString(dict,"oaConstraintGroup");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaLayerConstraint_oaConstraintGroup");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusNet");
    obj_type2=PyDict_GetItemString(dict,"oaBusNetDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBusNet_oaBusNetDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaFigGroup_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModNet");
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModNet_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModBundleNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModNet_oaModBundleNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTech");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaTech_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSimpleConstraint");
    obj_type2=PyDict_GetItemString(dict,"oaConstraintGroup");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaSimpleConstraint_oaConstraintGroup");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaValue");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaValue_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaValue_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAppDef");
    obj_type2=PyDict_GetItemString(dict,"oaSession");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppDef_oaSession");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppDef_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDMData");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppDef_oaDMData");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppDef_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaObject");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAppDef_oaObject");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusTermBit");
    obj_type2=PyDict_GetItemString(dict,"oaBusTermDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBusTermBit_oaBusTermDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLayerPairConstraint");
    obj_type2=PyDict_GetItemString(dict,"oaConstraintGroup");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaLayerPairConstraint_oaConstraintGroup");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModBusTermDef_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
    obj_type2=PyDict_GetItemString(dict,"oaWaferDesc");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaStepperMap_oaWaferDesc");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
    obj_type2=PyDict_GetItemString(dict,"oaWaferDesc");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaWaferFeature_oaWaferDesc");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaClusterBoundary");
    obj_type2=PyDict_GetItemString(dict,"oaCluster");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaClusterBoundary_oaCluster");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
    obj_type2=PyDict_GetItemString(dict,"oaOccurrence");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccBusNetDef_oaOccurrence");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
    obj_type2=PyDict_GetItemString(dict,"oaWafer");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaReticleRef_oaWafer");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
    obj_type2=PyDict_GetItemString(dict,"oaOccurrence");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccBusTermDef_oaOccurrence");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSubNetwork");
    obj_type2=PyDict_GetItemString(dict,"oaParasiticNetwork");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaSubNetwork_oaParasiticNetwork");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDevice");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaSubNetwork_oaDevice");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNode");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaSubNetwork_oaNode");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusNetBit");
    obj_type2=PyDict_GetItemString(dict,"oaModBusNetDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModBusNetBit_oaModBusNetDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
    obj_type2=PyDict_GetItemString(dict,"oaScanChainSet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaScanChainInst_oaScanChainSet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLibDefListMem");
    obj_type2=PyDict_GetItemString(dict,"oaLibDefList");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaLibDefListMem_oaLibDefList");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaInstHeader_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaInstHeader_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaInstHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaInstHeader_oaInstHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaNet");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaNet_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaBundleNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaNet_oaBundleNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraintParam_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraintParam_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaTechHeader_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModConnectDef_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLayer");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaLayer_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetBit");
    obj_type2=PyDict_GetItemString(dict,"oaOccBusNetDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccBusNetBit_oaOccBusNetDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaView");
    obj_type2=PyDict_GetItemString(dict,"oaLib");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaView_oaLib");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusNetBit");
    obj_type2=PyDict_GetItemString(dict,"oaBusNetDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBusNetBit_oaBusNetDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModBusNetDef_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOpPoint");
    obj_type2=PyDict_GetItemString(dict,"oaAnalysisLib");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOpPoint_oaAnalysisLib");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOpPoint_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusTerm");
    obj_type2=PyDict_GetItemString(dict,"oaBusTermDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBusTerm_oaBusTermDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBitNet");
    obj_type2=PyDict_GetItemString(dict,"oaModNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModBitNet_oaModNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModBitNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModBitNet_oaModBitNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaElmore");
    obj_type2=PyDict_GetItemString(dict,"oaPiElmore");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaElmore_oaPiElmore");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaLumpedElmore");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaElmore_oaLumpedElmore");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAreaBoundary");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAreaBoundary_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLib");
    obj_type2=PyDict_GetItemString(dict,"oaLib");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaLib_oaLib");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraintGroupHeader_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraintGroupHeader_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInst");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaInst_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaCluster");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaInst_oaCluster");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaInstHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaInst_oaInstHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaVectorInstDef_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
    obj_type2=PyDict_GetItemString(dict,"oaOccBundleTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccTerm_oaOccBundleTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaOccurrence");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccTerm_oaOccurrence");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccTerm_oaTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaOccNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccTerm_oaOccNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccTerm_oaModTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModModuleInst");
    obj_type2=PyDict_GetItemString(dict,"oaModModuleInstHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModModuleInst_oaModModuleInstHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
    obj_type2=PyDict_GetItemString(dict,"oaFigGroup");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaFigGroupMem_oaFigGroup");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBlockObject");
    obj_type2=PyDict_GetItemString(dict,"oaMarker");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBlockObject_oaMarker");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaReticle");
    obj_type2=PyDict_GetItemString(dict,"oaWafer");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaReticle_oaWafer");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCell");
    obj_type2=PyDict_GetItemString(dict,"oaLib");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaCell_oaLib");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaInstTerm_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaInstTerm_oaNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaInst");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaInstTerm_oaInst");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCluster");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaCluster_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaCluster");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaCluster_oaCluster");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaLPPHeader_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaLayerHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaLPPHeader_oaLayerHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaMutualInductor");
    obj_type2=PyDict_GetItemString(dict,"oaInductor");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaMutualInductor_oaInductor");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaVectorInstBit");
    obj_type2=PyDict_GetItemString(dict,"oaVectorInstDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaVectorInstBit_oaVectorInstDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModVectorInstDef_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViewType");
    obj_type2=PyDict_GetItemString(dict,"oaSession");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaViewType_oaSession");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaTechLayerHeader_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
    obj_type2=PyDict_GetItemString(dict,"oaModInst");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModAssignment_oaModInst");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModAssignment_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaRow");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRow_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaRowHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaRow_oaRowHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBlockage_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaLayerHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBlockage_oaLayerHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaInst");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBlockage_oaInst");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaCluster");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBlockage_oaCluster");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaPRBoundary");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBlockage_oaPRBoundary");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
    obj_type2=PyDict_GetItemString(dict,"oaParasiticNetwork");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAnalysisPoint_oaParasiticNetwork");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaAnalysisPoint_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaVia");
    obj_type2=PyDict_GetItemString(dict,"oaViaHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaVia_oaViaHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaVia_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaVia_oaNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
    obj_type2=PyDict_GetItemString(dict,"oaParasiticNetwork");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaParasiticNetwork_oaParasiticNetwork");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaGuide");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGuide_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaLayerHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGuide_oaLayerHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGuide_oaNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraint_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraint_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaConstraintGroup");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraint_oaConstraintGroup");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermBit");
    obj_type2=PyDict_GetItemString(dict,"oaOccBusTermDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccBusTermBit_oaOccBusTermDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
    obj_type2=PyDict_GetItemString(dict,"oaModInstHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModInstHeader_oaModInstHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaDesign");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModInstHeader_oaDesign");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLayerArrayConstraint");
    obj_type2=PyDict_GetItemString(dict,"oaConstraintGroup");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaLayerArrayConstraint_oaConstraintGroup");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaCellView");
    obj_type2=PyDict_GetItemString(dict,"oaView");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaCellView_oaView");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaLib");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaCellView_oaLib");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaCell");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaCellView_oaCell");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBitNet");
    obj_type2=PyDict_GetItemString(dict,"oaNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBitNet_oaNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaBitNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBitNet_oaBitNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaBusNetDef_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModBusTerm");
    obj_type2=PyDict_GetItemString(dict,"oaModBusTermDef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModBusTerm_oaModBusTermDef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccBitNet");
    obj_type2=PyDict_GetItemString(dict,"oaOccBitNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccBitNet_oaOccBitNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaOccNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccBitNet_oaOccNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
    obj_type2=PyDict_GetItemString(dict,"oaSession");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConstraintParamDef_oaSession");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
    obj_type2=PyDict_GetItemString(dict,"oaObject");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGroupMember_oaObject");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaGroup");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaGroupMember_oaGroup");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
    obj_type2=PyDict_GetItemString(dict,"oaOpPoint");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOpPointHeader_oaOpPoint");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaDevice");
    obj_type2=PyDict_GetItemString(dict,"oaSubNetwork");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDevice_oaSubNetwork");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaParasiticNetwork");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDevice_oaParasiticNetwork");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNode");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaDevice_oaNode");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaSteiner_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaLayerHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaSteiner_oaLayerHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaSteiner_oaNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
    obj_type2=PyDict_GetItemString(dict,"oaModNet");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModTerm_oaModNet");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModTerm_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModBundleTerm");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaModTerm_oaModBundleTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaImage");
    obj_type2=PyDict_GetItemString(dict,"oaWafer");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaImage_oaWafer");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaReticle");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaImage_oaReticle");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaReticleRef");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaImage_oaReticleRef");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
    obj_type2=PyDict_GetItemString(dict,"oaModule");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccurrence_oaModule");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaLayerHeader_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaMarker");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaMarker_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaBlockObject");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaMarker_oaBlockObject");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
    obj_type2=PyDict_GetItemString(dict,"oaTech");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaSiteDef_oaTech");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaOccDesignInst");
    obj_type2=PyDict_GetItemString(dict,"oaOccInstHeader");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaOccDesignInst_oaOccInstHeader");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
    obj_type2=PyDict_GetItemString(dict,"oaBlock");
    template_type=PyDict_GetItemString(dict,"oaCollection_oaConnectDef_oaBlock");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  PyDict_SetItemString(dict,"oaCollection",template_dict);
  Py_DECREF(template_dict);

  // Template: oaArray
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaObject");
  template_type=PyDict_GetItemString(dict,"oaArray_oaObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParam");
  template_type=PyDict_GetItemString(dict,"oaArray_oaParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignObject");
  template_type=PyDict_GetItemString(dict,"oaArray_oaDesignObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaArray_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMAttr");
  template_type=PyDict_GetItemString(dict,"oaArray_oaDMAttr");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaArray_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBuildInfo");
  template_type=PyDict_GetItemString(dict,"oaArray_oaBuildInfo");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDualInt");
  template_type=PyDict_GetItemString(dict,"oaArray_oaDualInt");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaArray_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerMap");
  template_type=PyDict_GetItemString(dict,"oaArray_oaLayerMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoint");
  template_type=PyDict_GetItemString(dict,"oaArray_oaPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaArray_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDBType");
  template_type=PyDict_GetItemString(dict,"oaArray_oaDBType");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaArray_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaComplex_oaDouble");
  template_type=PyDict_GetItemString(dict,"oaArray_oaComplex_oaDouble");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaArray_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBox");
  template_type=PyDict_GetItemString(dict,"oaArray_oaBox");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerNum");
  template_type=PyDict_GetItemString(dict,"oaArray_oaLayerNum");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaComplex_oaFloat");
  template_type=PyDict_GetItemString(dict,"oaArray_oaComplex_oaFloat");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaArray_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaArray_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaType");
  template_type=PyDict_GetItemString(dict,"oaArray_oaType");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAntennaArea");
  template_type=PyDict_GetItemString(dict,"oaArray_oaAntennaArea");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaArray_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFig");
  template_type=PyDict_GetItemString(dict,"oaArray_oaFig");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFeature");
  template_type=PyDict_GetItemString(dict,"oaArray_oaFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaArray_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaArray_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteRef");
  template_type=PyDict_GetItemString(dict,"oaArray_oaSiteRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaString");
  template_type=PyDict_GetItemString(dict,"oaArray_oaString");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaArray",template_dict);
  Py_DECREF(template_dict);

  // Template: oaNetTermPair
  template_dict=PyDict_New();
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaNet");
    obj_type2=PyDict_GetItemString(dict,"oaName");
    template_type=PyDict_GetItemString(dict,"oaNetTermPair_oaNet_oaName");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaTerm");
    template_type=PyDict_GetItemString(dict,"oaNetTermPair_oaNet_oaTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaUInt4");
    template_type=PyDict_GetItemString(dict,"oaNetTermPair_oaNet_oaUInt4");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  template_dict2=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaModNet");
    obj_type2=PyDict_GetItemString(dict,"oaName");
    template_type=PyDict_GetItemString(dict,"oaNetTermPair_oaModNet_oaName");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaUInt4");
    template_type=PyDict_GetItemString(dict,"oaNetTermPair_oaModNet_oaUInt4");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
    obj_type2=PyDict_GetItemString(dict,"oaModTerm");
    template_type=PyDict_GetItemString(dict,"oaNetTermPair_oaModNet_oaModTerm");
    PyDict_SetItem(template_dict2,obj_type2,template_type);
  PyDict_SetItem(template_dict,obj_type,template_dict2);
  PyDict_SetItemString(dict,"oaNetTermPair",template_dict);
  Py_DECREF(template_dict);

  // Template: oaIntraPointerAppDef
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccShape");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaIntraPointerAppDef_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaIntraPointerAppDef",template_dict);
  Py_DECREF(template_dict);

  // Template: oaStringAppDef
  template_dict=PyDict_New();
  obj_type=PyDict_GetItemString(dict,"oaViaHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaViaHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInst");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesign");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaDesign");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRowHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaRowHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisOpPoint");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaAnalysisOpPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainSet");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaScanChainSet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccAssignment");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrame");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaFrame");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMData");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaDMData");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccNet");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTrackPattern");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaTrackPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstTerm");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModAssignment");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRoute");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaRoute");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInst");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaConstraintDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroup");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaConstraintGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstTerm");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupMem");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaConstraintGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDerivedLayerParam");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaDerivedLayerParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWafer");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaWafer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaSpec");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaViaSpec");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReducedModel");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaReducedModel");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechViaDefHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaTechViaDefHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFrameInst");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaFrameInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAssignment");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaAssignment");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccConnectDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaShape");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPurpose");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaPurpose");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPoleResidue");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaPoleResidue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaViaDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaViaDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlock");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaBlock");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaProp");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaProp");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroup");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDMFile");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaDMFile");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferFeature");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaWaferFeature");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNode");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaNode");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTerm");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCMap");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaCMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaPin");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaPin");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAppObject");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaAppObject");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDesignInst");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaDesignInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModule");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModule");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModModuleInstHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModModuleInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChain");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaScanChain");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroup");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaFigGroup");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModNet");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTech");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaTech");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaValue");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaValue");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaStepperMap");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaStepperMap");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccInstHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticleRef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaReticleRef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccBusTermDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccBusTermDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaScanChainInst");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaScanChainInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaNet");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaNet");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParam");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaConstraintParam");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaTechHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModConnectDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayer");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaLayer");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaDevice");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaDevice");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGCellPattern");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaGCellPattern");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaView");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaWaferDesc");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaWaferDesc");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaElmore");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaElmore");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaFigGroupMem");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaFigGroupMem");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLib");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaLib");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintGroupHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaConstraintGroupHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInst");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaInst");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccTerm");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaReticle");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaReticle");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCell");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaCell");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaInstTerm");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaInstTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCluster");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaCluster");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLPPHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaLPPHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModVectorInstDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModVectorInstDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaTechLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaTechLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBoundary");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaBoundary");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaRow");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaRow");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBlockage");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaBlockage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaAnalysisPoint");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaAnalysisPoint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaVia");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaVia");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaParasiticNetwork");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaParasiticNetwork");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGuide");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaGuide");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraint");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaConstraint");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModInstHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModInstHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaCellView");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaCellView");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaBusNetDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaBusNetDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConstraintParamDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaConstraintParamDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaGroupMember");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaGroupMember");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOpPointHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOpPointHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccShape");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccShape");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSteiner");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaSteiner");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaModTerm");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaModTerm");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaImage");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaImage");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaOccurrence");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaOccurrence");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaLayerHeader");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaLayerHeader");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaMarker");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaMarker");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaSiteDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaSiteDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  obj_type=PyDict_GetItemString(dict,"oaConnectDef");
  template_type=PyDict_GetItemString(dict,"oaStringAppDef_oaConnectDef");
  PyDict_SetItem(template_dict,obj_type,template_type);
  PyDict_SetItemString(dict,"oaStringAppDef",template_dict);
  Py_DECREF(template_dict);

}


#ifdef WIN32
extern "C" void __declspec(dllexport)
#else
extern "C" void 
#endif
initpyoa226p084()
{
  PyObject* mod;
  PyObject* dict;

  // Initialize the Module
  mod=Py_InitModule3((char*)"pyoa226p084",openaccess_methods,(char*)openaccess_doc);

  // Fetch its dictionary
  dict=PyModule_GetDict(mod);

  commoninit(mod,dict);
}


extern "C" void 
initlibpyoa226p084()
{
  PyObject* mod;
  PyObject* dict;

  // Initialize the Module
  mod=Py_InitModule3((char*)"libpyoa226p084",openaccess_methods,(char*)openaccess_doc);

  // Fetch its dictionary
  dict=PyModule_GetDict(mod);
  
  commoninit(mod,dict);
}



/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"

// ==================================================================
// Declare Array Converts for Typedefs
// ==================================================================


// ==================================================================
// Array for class: oaBoolean
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaBoolean_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaBoolean_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaBoolean_ArrayObject* self = (PyoaBoolean_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaBoolean_Array) */
    {
        PyParamoaBoolean_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaBoolean_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaBoolean_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaBoolean_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaBoolean_Array_dealloc(PyObject* gself)
{
    PyoaBoolean_ArrayObject* self = (PyoaBoolean_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaBoolean_Array_str(PyObject *ob)
{
    PyParamoaBoolean_Array value;
    int convert_status=PyoaBoolean_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaBoolean_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaBoolean_Array_repr(PyObject *ob)
{
    PyParamoaBoolean_Array value;
    int convert_status=PyoaBoolean_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaBoolean_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaBoolean_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaBoolean_Array p1;
    PyParamoaBoolean_Array p2;
    int s1=PyoaBoolean_Array_Convert(ob1,&p1);
    int s2=PyoaBoolean_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaBoolean_Array_CreateList(p1);
    PyObject* l2=PyoaBoolean_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaBoolean_Array_Convert(PyObject* ob,PyParamoaBoolean_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaBoolean_Array_Check(ob)) {
    PyoaBoolean_ArrayObject* self = (PyoaBoolean_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaBoolean data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaBoolean_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaBoolean data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaBoolean_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaBoolean_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaBoolean_Array_FromoaBoolean_Array(const oaBoolean_Array& value)
{
  PyObject* gself = PyoaBoolean_Array_Type.tp_alloc(&PyoaBoolean_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaBoolean_ArrayObject* self = (PyoaBoolean_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaBoolean_Array_FromoaBoolean_Array(PyTypeoaBoolean* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaBoolean_Array_Type.tp_alloc(&PyoaBoolean_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaBoolean_ArrayObject* self = (PyoaBoolean_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaBoolean_Array_CreateList(PyParamoaBoolean_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaBoolean_FromoaBoolean(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaBoolean_Array_assign_doc[] = 
"Class: oaBoolean_Array, Function: assign\n"
"  Paramegers: (oaBoolean_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaBoolean_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaBoolean_ArrayObject* self=(PyoaBoolean_ArrayObject*)ob;
  try {
    PyParamoaBoolean_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaBoolean_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaBoolean_Array_list_doc[] = 
"Class: oaBoolean_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaBoolean_Array_list(PyObject* ob, PyObject *args)
{
  PyoaBoolean_ArrayObject* self=(PyoaBoolean_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaBoolean_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaBoolean_Array_methodlist[] = {
    {"assign",(PyCFunction)oaBoolean_Array_assign,METH_VARARGS,oaBoolean_Array_assign_doc},
    {"list",(PyCFunction)oaBoolean_Array_list,METH_VARARGS,oaBoolean_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaBoolean_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaBoolean_ArrayObject* self=(PyoaBoolean_ArrayObject*)ob;
  try {
    PyParamoaBoolean_Array data;
    int convert_status=PyoaBoolean_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaBoolean_FromoaBoolean(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaBoolean_Array_index_get_length(PyObject* ob)
{
    PyParamoaBoolean_Array data;
    int convert_status=PyoaBoolean_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaBoolean_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaBoolean_Array data;
    PyParamoaBoolean dataitem;
    int convert_status=PyoaBoolean_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaBoolean_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaBoolean_Array_doc[] =
"Class: oaBoolean_Array\n"
"  The oaBoolean_Array utility class provides an array of oaBoolean.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean_Array()\n"
"    Signature: oaBoolean_Array||\n"
"    This is the default constructor for the oaBoolean_Array class. This constructor creates an empty oaBoolean_Array.\n"
"  Paramegers: (oaBoolean_Array)\n"
"    Calls: (const oaBoolean_Array&)\n"
"    Signature: oaBoolean_Array||cref-oaBoolean_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaBoolean_Array_as_sequence = {
    (Pyoa_inquiry)oaBoolean_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaBoolean_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaBoolean_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaBoolean_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaBoolean_Array",
    sizeof(PyoaBoolean_ArrayObject),
    0,
    oaBoolean_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaBoolean_Array_compare,    /* tp_compare */
    oaBoolean_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaBoolean_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaBoolean_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaBoolean_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaBoolean_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaBoolean_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaBoolean_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaBoolean_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaBoolean_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaBoolean_Array",
           (PyObject*)(&PyoaBoolean_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaBoolean_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaComplex_oaDouble
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaDouble_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaComplex_oaDouble_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaComplex_oaDouble_ArrayObject* self = (PyoaComplex_oaDouble_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaComplex_oaDouble_Array) */
    {
        PyParamoaComplex_oaDouble_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaComplex_oaDouble_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaComplex_oaDouble_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaComplex_oaDouble_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaComplex_oaDouble_Array_dealloc(PyObject* gself)
{
    PyoaComplex_oaDouble_ArrayObject* self = (PyoaComplex_oaDouble_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaDouble_Array_str(PyObject *ob)
{
    PyParamoaComplex_oaDouble_Array value;
    int convert_status=PyoaComplex_oaDouble_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaComplex_oaDouble_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaDouble_Array_repr(PyObject *ob)
{
    PyParamoaComplex_oaDouble_Array value;
    int convert_status=PyoaComplex_oaDouble_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaComplex_oaDouble_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaComplex_oaDouble_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaComplex_oaDouble_Array p1;
    PyParamoaComplex_oaDouble_Array p2;
    int s1=PyoaComplex_oaDouble_Array_Convert(ob1,&p1);
    int s2=PyoaComplex_oaDouble_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaComplex_oaDouble_Array_CreateList(p1);
    PyObject* l2=PyoaComplex_oaDouble_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaComplex_oaDouble_Array_Convert(PyObject* ob,PyParamoaComplex_oaDouble_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaComplex_oaDouble_Array_Check(ob)) {
    PyoaComplex_oaDouble_ArrayObject* self = (PyoaComplex_oaDouble_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaComplex_oaDouble data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaComplex_oaDouble_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaComplex_oaDouble data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaComplex_oaDouble_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaComplex_oaDouble_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaComplex_oaDouble_Array_FromoaComplex_oaDouble_Array(const oaComplex_oaDouble_Array& value)
{
  PyObject* gself = PyoaComplex_oaDouble_Array_Type.tp_alloc(&PyoaComplex_oaDouble_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaComplex_oaDouble_ArrayObject* self = (PyoaComplex_oaDouble_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaComplex_oaDouble_Array_FromoaComplex_oaDouble_Array(PyTypeoaComplex_oaDouble* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaComplex_oaDouble_Array_Type.tp_alloc(&PyoaComplex_oaDouble_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaComplex_oaDouble_ArrayObject* self = (PyoaComplex_oaDouble_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaComplex_oaDouble_Array_CreateList(PyParamoaComplex_oaDouble_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaComplex_oaDouble_FromoaComplex_oaDouble(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaComplex_oaDouble_Array_assign_doc[] = 
"Class: oaComplex_oaDouble_Array, Function: assign\n"
"  Paramegers: (oaComplex_oaDouble_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaComplex_oaDouble_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaComplex_oaDouble_ArrayObject* self=(PyoaComplex_oaDouble_ArrayObject*)ob;
  try {
    PyParamoaComplex_oaDouble_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaComplex_oaDouble_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaComplex_oaDouble_Array_list_doc[] = 
"Class: oaComplex_oaDouble_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaComplex_oaDouble_Array_list(PyObject* ob, PyObject *args)
{
  PyoaComplex_oaDouble_ArrayObject* self=(PyoaComplex_oaDouble_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaComplex_oaDouble_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaComplex_oaDouble_Array_methodlist[] = {
    {"assign",(PyCFunction)oaComplex_oaDouble_Array_assign,METH_VARARGS,oaComplex_oaDouble_Array_assign_doc},
    {"list",(PyCFunction)oaComplex_oaDouble_Array_list,METH_VARARGS,oaComplex_oaDouble_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaDouble_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaComplex_oaDouble_ArrayObject* self=(PyoaComplex_oaDouble_ArrayObject*)ob;
  try {
    PyParamoaComplex_oaDouble_Array data;
    int convert_status=PyoaComplex_oaDouble_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaComplex_oaDouble_FromoaComplex_oaDouble(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaComplex_oaDouble_Array_index_get_length(PyObject* ob)
{
    PyParamoaComplex_oaDouble_Array data;
    int convert_status=PyoaComplex_oaDouble_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaComplex_oaDouble_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaComplex_oaDouble_Array data;
    PyParamoaComplex_oaDouble dataitem;
    int convert_status=PyoaComplex_oaDouble_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaComplex_oaDouble_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaComplex_oaDouble_Array_doc[] =
"Class: oaComplex_oaDouble_Array\n"
"  The oaComplex_oaDouble_Array utility class provides an array of oaComplex_oaDouble.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaComplex_oaDouble_Array()\n"
"    Signature: oaComplex_oaDouble_Array||\n"
"    This is the default constructor for the oaComplex_oaDouble_Array class. This constructor creates an empty oaComplex_oaDouble_Array.\n"
"  Paramegers: (oaComplex_oaDouble_Array)\n"
"    Calls: (const oaComplex_oaDouble_Array&)\n"
"    Signature: oaComplex_oaDouble_Array||cref-oaComplex_oaDouble_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaComplex_oaDouble_Array_as_sequence = {
    (Pyoa_inquiry)oaComplex_oaDouble_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaComplex_oaDouble_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaComplex_oaDouble_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaComplex_oaDouble_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaComplex_oaDouble_Array",
    sizeof(PyoaComplex_oaDouble_ArrayObject),
    0,
    oaComplex_oaDouble_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaComplex_oaDouble_Array_compare,    /* tp_compare */
    oaComplex_oaDouble_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaComplex_oaDouble_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaComplex_oaDouble_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaComplex_oaDouble_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaComplex_oaDouble_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaComplex_oaDouble_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaComplex_oaDouble_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaComplex_oaDouble_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaComplex_oaDouble_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaComplex_oaDouble_Array",
           (PyObject*)(&PyoaComplex_oaDouble_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaComplex_oaDouble_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaComplex_oaFloat
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaFloat_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaComplex_oaFloat_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaComplex_oaFloat_ArrayObject* self = (PyoaComplex_oaFloat_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaComplex_oaFloat_Array) */
    {
        PyParamoaComplex_oaFloat_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaComplex_oaFloat_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaComplex_oaFloat_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaComplex_oaFloat_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaComplex_oaFloat_Array_dealloc(PyObject* gself)
{
    PyoaComplex_oaFloat_ArrayObject* self = (PyoaComplex_oaFloat_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaFloat_Array_str(PyObject *ob)
{
    PyParamoaComplex_oaFloat_Array value;
    int convert_status=PyoaComplex_oaFloat_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaComplex_oaFloat_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaFloat_Array_repr(PyObject *ob)
{
    PyParamoaComplex_oaFloat_Array value;
    int convert_status=PyoaComplex_oaFloat_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaComplex_oaFloat_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaComplex_oaFloat_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaComplex_oaFloat_Array p1;
    PyParamoaComplex_oaFloat_Array p2;
    int s1=PyoaComplex_oaFloat_Array_Convert(ob1,&p1);
    int s2=PyoaComplex_oaFloat_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaComplex_oaFloat_Array_CreateList(p1);
    PyObject* l2=PyoaComplex_oaFloat_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaComplex_oaFloat_Array_Convert(PyObject* ob,PyParamoaComplex_oaFloat_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaComplex_oaFloat_Array_Check(ob)) {
    PyoaComplex_oaFloat_ArrayObject* self = (PyoaComplex_oaFloat_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaComplex_oaFloat data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaComplex_oaFloat_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaComplex_oaFloat data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaComplex_oaFloat_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaComplex_oaFloat_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaComplex_oaFloat_Array_FromoaComplex_oaFloat_Array(const oaComplex_oaFloat_Array& value)
{
  PyObject* gself = PyoaComplex_oaFloat_Array_Type.tp_alloc(&PyoaComplex_oaFloat_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaComplex_oaFloat_ArrayObject* self = (PyoaComplex_oaFloat_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaComplex_oaFloat_Array_FromoaComplex_oaFloat_Array(PyTypeoaComplex_oaFloat* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaComplex_oaFloat_Array_Type.tp_alloc(&PyoaComplex_oaFloat_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaComplex_oaFloat_ArrayObject* self = (PyoaComplex_oaFloat_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaComplex_oaFloat_Array_CreateList(PyParamoaComplex_oaFloat_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaComplex_oaFloat_FromoaComplex_oaFloat(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaComplex_oaFloat_Array_assign_doc[] = 
"Class: oaComplex_oaFloat_Array, Function: assign\n"
"  Paramegers: (oaComplex_oaFloat_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaComplex_oaFloat_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaComplex_oaFloat_ArrayObject* self=(PyoaComplex_oaFloat_ArrayObject*)ob;
  try {
    PyParamoaComplex_oaFloat_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaComplex_oaFloat_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaComplex_oaFloat_Array_list_doc[] = 
"Class: oaComplex_oaFloat_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaComplex_oaFloat_Array_list(PyObject* ob, PyObject *args)
{
  PyoaComplex_oaFloat_ArrayObject* self=(PyoaComplex_oaFloat_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaComplex_oaFloat_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaComplex_oaFloat_Array_methodlist[] = {
    {"assign",(PyCFunction)oaComplex_oaFloat_Array_assign,METH_VARARGS,oaComplex_oaFloat_Array_assign_doc},
    {"list",(PyCFunction)oaComplex_oaFloat_Array_list,METH_VARARGS,oaComplex_oaFloat_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaComplex_oaFloat_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaComplex_oaFloat_ArrayObject* self=(PyoaComplex_oaFloat_ArrayObject*)ob;
  try {
    PyParamoaComplex_oaFloat_Array data;
    int convert_status=PyoaComplex_oaFloat_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaComplex_oaFloat_FromoaComplex_oaFloat(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaComplex_oaFloat_Array_index_get_length(PyObject* ob)
{
    PyParamoaComplex_oaFloat_Array data;
    int convert_status=PyoaComplex_oaFloat_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaComplex_oaFloat_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaComplex_oaFloat_Array data;
    PyParamoaComplex_oaFloat dataitem;
    int convert_status=PyoaComplex_oaFloat_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaComplex_oaFloat_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaComplex_oaFloat_Array_doc[] =
"Class: oaComplex_oaFloat_Array\n"
"  The oaComplex_oaFloat_Array utility class provides an array of oaComplex_oaFloat.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaComplex_oaFloat_Array()\n"
"    Signature: oaComplex_oaFloat_Array||\n"
"    This is the default constructor for the oaComplex_oaFloat_Array class. This constructor creates an empty oaComplex_oaFloat_Array.\n"
"  Paramegers: (oaComplex_oaFloat_Array)\n"
"    Calls: (const oaComplex_oaFloat_Array&)\n"
"    Signature: oaComplex_oaFloat_Array||cref-oaComplex_oaFloat_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaComplex_oaFloat_Array_as_sequence = {
    (Pyoa_inquiry)oaComplex_oaFloat_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaComplex_oaFloat_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaComplex_oaFloat_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaComplex_oaFloat_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaComplex_oaFloat_Array",
    sizeof(PyoaComplex_oaFloat_ArrayObject),
    0,
    oaComplex_oaFloat_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaComplex_oaFloat_Array_compare,    /* tp_compare */
    oaComplex_oaFloat_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaComplex_oaFloat_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaComplex_oaFloat_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaComplex_oaFloat_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaComplex_oaFloat_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaComplex_oaFloat_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaComplex_oaFloat_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaComplex_oaFloat_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaComplex_oaFloat_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaComplex_oaFloat_Array",
           (PyObject*)(&PyoaComplex_oaFloat_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaComplex_oaFloat_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaCoord
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaCoord_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaCoord_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaCoord_ArrayObject* self = (PyoaCoord_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaCoord_Array) */
    {
        PyParamoaCoord_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaCoord_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaCoord_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaCoord_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaCoord_Array_dealloc(PyObject* gself)
{
    PyoaCoord_ArrayObject* self = (PyoaCoord_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaCoord_Array_str(PyObject *ob)
{
    PyParamoaCoord_Array value;
    int convert_status=PyoaCoord_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaCoord_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaCoord_Array_repr(PyObject *ob)
{
    PyParamoaCoord_Array value;
    int convert_status=PyoaCoord_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaCoord_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaCoord_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaCoord_Array p1;
    PyParamoaCoord_Array p2;
    int s1=PyoaCoord_Array_Convert(ob1,&p1);
    int s2=PyoaCoord_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaCoord_Array_CreateList(p1);
    PyObject* l2=PyoaCoord_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaCoord_Array_Convert(PyObject* ob,PyParamoaCoord_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaCoord_Array_Check(ob)) {
    PyoaCoord_ArrayObject* self = (PyoaCoord_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaCoord data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaCoord_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaCoord data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaCoord_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaCoord_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaCoord_Array_FromoaCoord_Array(const oaCoord_Array& value)
{
  PyObject* gself = PyoaCoord_Array_Type.tp_alloc(&PyoaCoord_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaCoord_ArrayObject* self = (PyoaCoord_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaCoord_Array_FromoaCoord_Array(PyTypeoaCoord* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaCoord_Array_Type.tp_alloc(&PyoaCoord_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaCoord_ArrayObject* self = (PyoaCoord_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaCoord_Array_CreateList(PyParamoaCoord_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaCoord_FromoaCoord(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaCoord_Array_assign_doc[] = 
"Class: oaCoord_Array, Function: assign\n"
"  Paramegers: (oaCoord_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaCoord_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaCoord_ArrayObject* self=(PyoaCoord_ArrayObject*)ob;
  try {
    PyParamoaCoord_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaCoord_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaCoord_Array_list_doc[] = 
"Class: oaCoord_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaCoord_Array_list(PyObject* ob, PyObject *args)
{
  PyoaCoord_ArrayObject* self=(PyoaCoord_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaCoord_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaCoord_Array_methodlist[] = {
    {"assign",(PyCFunction)oaCoord_Array_assign,METH_VARARGS,oaCoord_Array_assign_doc},
    {"list",(PyCFunction)oaCoord_Array_list,METH_VARARGS,oaCoord_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaCoord_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaCoord_ArrayObject* self=(PyoaCoord_ArrayObject*)ob;
  try {
    PyParamoaCoord_Array data;
    int convert_status=PyoaCoord_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaCoord_FromoaCoord(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaCoord_Array_index_get_length(PyObject* ob)
{
    PyParamoaCoord_Array data;
    int convert_status=PyoaCoord_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaCoord_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaCoord_Array data;
    PyParamoaCoord dataitem;
    int convert_status=PyoaCoord_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaCoord_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaCoord_Array_doc[] =
"Class: oaCoord_Array\n"
"  The oaCoord_Array utility class provides an array of oaCoord.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaCoord_Array()\n"
"    Signature: oaCoord_Array||\n"
"    This is the default constructor for the oaCoord_Array class. This constructor creates an empty oaCoord_Array.\n"
"  Paramegers: (oaCoord_Array)\n"
"    Calls: (const oaCoord_Array&)\n"
"    Signature: oaCoord_Array||cref-oaCoord_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaCoord_Array_as_sequence = {
    (Pyoa_inquiry)oaCoord_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaCoord_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaCoord_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaCoord_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaCoord_Array",
    sizeof(PyoaCoord_ArrayObject),
    0,
    oaCoord_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaCoord_Array_compare,    /* tp_compare */
    oaCoord_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaCoord_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaCoord_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaCoord_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaCoord_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaCoord_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaCoord_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaCoord_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaCoord_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaCoord_Array",
           (PyObject*)(&PyoaCoord_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaCoord_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaDist
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDist_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDist_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaDist_ArrayObject* self = (PyoaDist_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaDist_Array) */
    {
        PyParamoaDist_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDist_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDist_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaDist_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDist_Array_dealloc(PyObject* gself)
{
    PyoaDist_ArrayObject* self = (PyoaDist_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaDist_Array_str(PyObject *ob)
{
    PyParamoaDist_Array value;
    int convert_status=PyoaDist_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaDist_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaDist_Array_repr(PyObject *ob)
{
    PyParamoaDist_Array value;
    int convert_status=PyoaDist_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaDist_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaDist_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDist_Array p1;
    PyParamoaDist_Array p2;
    int s1=PyoaDist_Array_Convert(ob1,&p1);
    int s2=PyoaDist_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaDist_Array_CreateList(p1);
    PyObject* l2=PyoaDist_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaDist_Array_Convert(PyObject* ob,PyParamoaDist_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaDist_Array_Check(ob)) {
    PyoaDist_ArrayObject* self = (PyoaDist_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaDist data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaDist_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaDist data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaDist_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaDist_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaDist_Array_FromoaDist_Array(const oaDist_Array& value)
{
  PyObject* gself = PyoaDist_Array_Type.tp_alloc(&PyoaDist_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaDist_ArrayObject* self = (PyoaDist_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaDist_Array_FromoaDist_Array(PyTypeoaDist* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaDist_Array_Type.tp_alloc(&PyoaDist_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaDist_ArrayObject* self = (PyoaDist_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaDist_Array_CreateList(PyParamoaDist_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaDist_FromoaDist(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaDist_Array_assign_doc[] = 
"Class: oaDist_Array, Function: assign\n"
"  Paramegers: (oaDist_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaDist_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaDist_ArrayObject* self=(PyoaDist_ArrayObject*)ob;
  try {
    PyParamoaDist_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDist_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaDist_Array_list_doc[] = 
"Class: oaDist_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaDist_Array_list(PyObject* ob, PyObject *args)
{
  PyoaDist_ArrayObject* self=(PyoaDist_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaDist_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaDist_Array_methodlist[] = {
    {"assign",(PyCFunction)oaDist_Array_assign,METH_VARARGS,oaDist_Array_assign_doc},
    {"list",(PyCFunction)oaDist_Array_list,METH_VARARGS,oaDist_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaDist_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaDist_ArrayObject* self=(PyoaDist_ArrayObject*)ob;
  try {
    PyParamoaDist_Array data;
    int convert_status=PyoaDist_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaDist_FromoaDist(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaDist_Array_index_get_length(PyObject* ob)
{
    PyParamoaDist_Array data;
    int convert_status=PyoaDist_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaDist_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaDist_Array data;
    PyParamoaDist dataitem;
    int convert_status=PyoaDist_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaDist_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaDist_Array_doc[] =
"Class: oaDist_Array\n"
"  The oaDist_Array utility class provides an array of oaDist.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaDist_Array()\n"
"    Signature: oaDist_Array||\n"
"    This is the default constructor for the oaDist_Array class. This constructor creates an empty oaDist_Array.\n"
"  Paramegers: (oaDist_Array)\n"
"    Calls: (const oaDist_Array&)\n"
"    Signature: oaDist_Array||cref-oaDist_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaDist_Array_as_sequence = {
    (Pyoa_inquiry)oaDist_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaDist_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaDist_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaDist_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDist_Array",
    sizeof(PyoaDist_ArrayObject),
    0,
    oaDist_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaDist_Array_compare,    /* tp_compare */
    oaDist_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaDist_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaDist_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDist_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaDist_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaDist_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaDist_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDist_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaDist_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaDist_Array",
           (PyObject*)(&PyoaDist_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDist_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaDouble
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaDouble_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaDouble_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaDouble_ArrayObject* self = (PyoaDouble_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaDouble_Array) */
    {
        PyParamoaDouble_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaDouble_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaDouble_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaDouble_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaDouble_Array_dealloc(PyObject* gself)
{
    PyoaDouble_ArrayObject* self = (PyoaDouble_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaDouble_Array_str(PyObject *ob)
{
    PyParamoaDouble_Array value;
    int convert_status=PyoaDouble_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaDouble_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaDouble_Array_repr(PyObject *ob)
{
    PyParamoaDouble_Array value;
    int convert_status=PyoaDouble_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaDouble_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaDouble_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaDouble_Array p1;
    PyParamoaDouble_Array p2;
    int s1=PyoaDouble_Array_Convert(ob1,&p1);
    int s2=PyoaDouble_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaDouble_Array_CreateList(p1);
    PyObject* l2=PyoaDouble_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaDouble_Array_Convert(PyObject* ob,PyParamoaDouble_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaDouble_Array_Check(ob)) {
    PyoaDouble_ArrayObject* self = (PyoaDouble_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaDouble data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaDouble_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaDouble data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaDouble_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaDouble_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaDouble_Array_FromoaDouble_Array(const oaDouble_Array& value)
{
  PyObject* gself = PyoaDouble_Array_Type.tp_alloc(&PyoaDouble_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaDouble_ArrayObject* self = (PyoaDouble_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaDouble_Array_FromoaDouble_Array(PyTypeoaDouble* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaDouble_Array_Type.tp_alloc(&PyoaDouble_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaDouble_ArrayObject* self = (PyoaDouble_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaDouble_Array_CreateList(PyParamoaDouble_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaDouble_FromoaDouble(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaDouble_Array_assign_doc[] = 
"Class: oaDouble_Array, Function: assign\n"
"  Paramegers: (oaDouble_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaDouble_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaDouble_ArrayObject* self=(PyoaDouble_ArrayObject*)ob;
  try {
    PyParamoaDouble_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaDouble_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaDouble_Array_list_doc[] = 
"Class: oaDouble_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaDouble_Array_list(PyObject* ob, PyObject *args)
{
  PyoaDouble_ArrayObject* self=(PyoaDouble_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaDouble_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaDouble_Array_methodlist[] = {
    {"assign",(PyCFunction)oaDouble_Array_assign,METH_VARARGS,oaDouble_Array_assign_doc},
    {"list",(PyCFunction)oaDouble_Array_list,METH_VARARGS,oaDouble_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaDouble_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaDouble_ArrayObject* self=(PyoaDouble_ArrayObject*)ob;
  try {
    PyParamoaDouble_Array data;
    int convert_status=PyoaDouble_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaDouble_FromoaDouble(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaDouble_Array_index_get_length(PyObject* ob)
{
    PyParamoaDouble_Array data;
    int convert_status=PyoaDouble_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaDouble_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaDouble_Array data;
    PyParamoaDouble dataitem;
    int convert_status=PyoaDouble_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaDouble_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaDouble_Array_doc[] =
"Class: oaDouble_Array\n"
"  The oaDouble_Array utility class provides an array of oaDouble.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaDouble_Array()\n"
"    Signature: oaDouble_Array||\n"
"    This is the default constructor for the oaDouble_Array class. This constructor creates an empty oaDouble_Array.\n"
"  Paramegers: (oaDouble_Array)\n"
"    Calls: (const oaDouble_Array&)\n"
"    Signature: oaDouble_Array||cref-oaDouble_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaDouble_Array_as_sequence = {
    (Pyoa_inquiry)oaDouble_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaDouble_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaDouble_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaDouble_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaDouble_Array",
    sizeof(PyoaDouble_ArrayObject),
    0,
    oaDouble_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaDouble_Array_compare,    /* tp_compare */
    oaDouble_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaDouble_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaDouble_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaDouble_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaDouble_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaDouble_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaDouble_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaDouble_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaDouble_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaDouble_Array",
           (PyObject*)(&PyoaDouble_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaDouble_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaFloat
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloat_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloat_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaFloat_ArrayObject* self = (PyoaFloat_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaFloat_Array) */
    {
        PyParamoaFloat_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloat_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloat_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaFloat_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloat_Array_dealloc(PyObject* gself)
{
    PyoaFloat_ArrayObject* self = (PyoaFloat_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaFloat_Array_str(PyObject *ob)
{
    PyParamoaFloat_Array value;
    int convert_status=PyoaFloat_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaFloat_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaFloat_Array_repr(PyObject *ob)
{
    PyParamoaFloat_Array value;
    int convert_status=PyoaFloat_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaFloat_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaFloat_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloat_Array p1;
    PyParamoaFloat_Array p2;
    int s1=PyoaFloat_Array_Convert(ob1,&p1);
    int s2=PyoaFloat_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaFloat_Array_CreateList(p1);
    PyObject* l2=PyoaFloat_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaFloat_Array_Convert(PyObject* ob,PyParamoaFloat_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaFloat_Array_Check(ob)) {
    PyoaFloat_ArrayObject* self = (PyoaFloat_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaFloat data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaFloat_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaFloat data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaFloat_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaFloat_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaFloat_Array_FromoaFloat_Array(const oaFloat_Array& value)
{
  PyObject* gself = PyoaFloat_Array_Type.tp_alloc(&PyoaFloat_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaFloat_ArrayObject* self = (PyoaFloat_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaFloat_Array_FromoaFloat_Array(PyTypeoaFloat* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaFloat_Array_Type.tp_alloc(&PyoaFloat_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaFloat_ArrayObject* self = (PyoaFloat_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaFloat_Array_CreateList(PyParamoaFloat_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaFloat_FromoaFloat(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaFloat_Array_assign_doc[] = 
"Class: oaFloat_Array, Function: assign\n"
"  Paramegers: (oaFloat_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaFloat_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaFloat_ArrayObject* self=(PyoaFloat_ArrayObject*)ob;
  try {
    PyParamoaFloat_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloat_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaFloat_Array_list_doc[] = 
"Class: oaFloat_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaFloat_Array_list(PyObject* ob, PyObject *args)
{
  PyoaFloat_ArrayObject* self=(PyoaFloat_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaFloat_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaFloat_Array_methodlist[] = {
    {"assign",(PyCFunction)oaFloat_Array_assign,METH_VARARGS,oaFloat_Array_assign_doc},
    {"list",(PyCFunction)oaFloat_Array_list,METH_VARARGS,oaFloat_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaFloat_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaFloat_ArrayObject* self=(PyoaFloat_ArrayObject*)ob;
  try {
    PyParamoaFloat_Array data;
    int convert_status=PyoaFloat_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaFloat_FromoaFloat(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaFloat_Array_index_get_length(PyObject* ob)
{
    PyParamoaFloat_Array data;
    int convert_status=PyoaFloat_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaFloat_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaFloat_Array data;
    PyParamoaFloat dataitem;
    int convert_status=PyoaFloat_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaFloat_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaFloat_Array_doc[] =
"Class: oaFloat_Array\n"
"  The oaFloat_Array utility class provides an array of oaFloat.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaFloat_Array()\n"
"    Signature: oaFloat_Array||\n"
"    This is the default constructor for the oaFloat_Array class. This constructor creates an empty oaFloat_Array.\n"
"  Paramegers: (oaFloat_Array)\n"
"    Calls: (const oaFloat_Array&)\n"
"    Signature: oaFloat_Array||cref-oaFloat_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaFloat_Array_as_sequence = {
    (Pyoa_inquiry)oaFloat_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaFloat_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaFloat_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaFloat_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloat_Array",
    sizeof(PyoaFloat_ArrayObject),
    0,
    oaFloat_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaFloat_Array_compare,    /* tp_compare */
    oaFloat_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaFloat_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaFloat_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloat_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaFloat_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaFloat_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaFloat_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloat_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaFloat_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaFloat_Array",
           (PyObject*)(&PyoaFloat_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloat_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaInt1
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInt1_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInt1_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaInt1_ArrayObject* self = (PyoaInt1_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaInt1_Array) */
    {
        PyParamoaInt1_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInt1_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInt1_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaInt1_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInt1_Array_dealloc(PyObject* gself)
{
    PyoaInt1_ArrayObject* self = (PyoaInt1_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaInt1_Array_str(PyObject *ob)
{
    PyParamoaInt1_Array value;
    int convert_status=PyoaInt1_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaInt1_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaInt1_Array_repr(PyObject *ob)
{
    PyParamoaInt1_Array value;
    int convert_status=PyoaInt1_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaInt1_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaInt1_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInt1_Array p1;
    PyParamoaInt1_Array p2;
    int s1=PyoaInt1_Array_Convert(ob1,&p1);
    int s2=PyoaInt1_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaInt1_Array_CreateList(p1);
    PyObject* l2=PyoaInt1_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaInt1_Array_Convert(PyObject* ob,PyParamoaInt1_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaInt1_Array_Check(ob)) {
    PyoaInt1_ArrayObject* self = (PyoaInt1_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaInt1 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaInt1_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaInt1 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaInt1_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaInt1_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaInt1_Array_FromoaInt1_Array(const oaInt1_Array& value)
{
  PyObject* gself = PyoaInt1_Array_Type.tp_alloc(&PyoaInt1_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaInt1_ArrayObject* self = (PyoaInt1_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt1_Array_FromoaInt1_Array(PyTypeoaInt1* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaInt1_Array_Type.tp_alloc(&PyoaInt1_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaInt1_ArrayObject* self = (PyoaInt1_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt1_Array_CreateList(PyParamoaInt1_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaInt1_FromoaInt1(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaInt1_Array_assign_doc[] = 
"Class: oaInt1_Array, Function: assign\n"
"  Paramegers: (oaInt1_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaInt1_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaInt1_ArrayObject* self=(PyoaInt1_ArrayObject*)ob;
  try {
    PyParamoaInt1_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInt1_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaInt1_Array_list_doc[] = 
"Class: oaInt1_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaInt1_Array_list(PyObject* ob, PyObject *args)
{
  PyoaInt1_ArrayObject* self=(PyoaInt1_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaInt1_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaInt1_Array_methodlist[] = {
    {"assign",(PyCFunction)oaInt1_Array_assign,METH_VARARGS,oaInt1_Array_assign_doc},
    {"list",(PyCFunction)oaInt1_Array_list,METH_VARARGS,oaInt1_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaInt1_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaInt1_ArrayObject* self=(PyoaInt1_ArrayObject*)ob;
  try {
    PyParamoaInt1_Array data;
    int convert_status=PyoaInt1_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaInt1_FromoaInt1(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaInt1_Array_index_get_length(PyObject* ob)
{
    PyParamoaInt1_Array data;
    int convert_status=PyoaInt1_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaInt1_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaInt1_Array data;
    PyParamoaInt1 dataitem;
    int convert_status=PyoaInt1_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaInt1_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaInt1_Array_doc[] =
"Class: oaInt1_Array\n"
"  The oaInt1_Array utility class provides an array of oaInt1.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaInt1_Array()\n"
"    Signature: oaInt1_Array||\n"
"    This is the default constructor for the oaInt1_Array class. This constructor creates an empty oaInt1_Array.\n"
"  Paramegers: (oaInt1_Array)\n"
"    Calls: (const oaInt1_Array&)\n"
"    Signature: oaInt1_Array||cref-oaInt1_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaInt1_Array_as_sequence = {
    (Pyoa_inquiry)oaInt1_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaInt1_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaInt1_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaInt1_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInt1_Array",
    sizeof(PyoaInt1_ArrayObject),
    0,
    oaInt1_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaInt1_Array_compare,    /* tp_compare */
    oaInt1_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaInt1_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaInt1_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInt1_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaInt1_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaInt1_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaInt1_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInt1_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaInt1_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaInt1_Array",
           (PyObject*)(&PyoaInt1_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInt1_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaInt2
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInt2_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInt2_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaInt2_ArrayObject* self = (PyoaInt2_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaInt2_Array) */
    {
        PyParamoaInt2_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInt2_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInt2_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaInt2_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInt2_Array_dealloc(PyObject* gself)
{
    PyoaInt2_ArrayObject* self = (PyoaInt2_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaInt2_Array_str(PyObject *ob)
{
    PyParamoaInt2_Array value;
    int convert_status=PyoaInt2_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaInt2_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaInt2_Array_repr(PyObject *ob)
{
    PyParamoaInt2_Array value;
    int convert_status=PyoaInt2_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaInt2_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaInt2_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInt2_Array p1;
    PyParamoaInt2_Array p2;
    int s1=PyoaInt2_Array_Convert(ob1,&p1);
    int s2=PyoaInt2_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaInt2_Array_CreateList(p1);
    PyObject* l2=PyoaInt2_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaInt2_Array_Convert(PyObject* ob,PyParamoaInt2_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaInt2_Array_Check(ob)) {
    PyoaInt2_ArrayObject* self = (PyoaInt2_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaInt2 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaInt2_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaInt2 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaInt2_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaInt2_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaInt2_Array_FromoaInt2_Array(const oaInt2_Array& value)
{
  PyObject* gself = PyoaInt2_Array_Type.tp_alloc(&PyoaInt2_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaInt2_ArrayObject* self = (PyoaInt2_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt2_Array_FromoaInt2_Array(PyTypeoaInt2* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaInt2_Array_Type.tp_alloc(&PyoaInt2_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaInt2_ArrayObject* self = (PyoaInt2_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt2_Array_CreateList(PyParamoaInt2_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaInt2_FromoaInt2(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaInt2_Array_assign_doc[] = 
"Class: oaInt2_Array, Function: assign\n"
"  Paramegers: (oaInt2_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaInt2_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaInt2_ArrayObject* self=(PyoaInt2_ArrayObject*)ob;
  try {
    PyParamoaInt2_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInt2_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaInt2_Array_list_doc[] = 
"Class: oaInt2_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaInt2_Array_list(PyObject* ob, PyObject *args)
{
  PyoaInt2_ArrayObject* self=(PyoaInt2_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaInt2_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaInt2_Array_methodlist[] = {
    {"assign",(PyCFunction)oaInt2_Array_assign,METH_VARARGS,oaInt2_Array_assign_doc},
    {"list",(PyCFunction)oaInt2_Array_list,METH_VARARGS,oaInt2_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaInt2_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaInt2_ArrayObject* self=(PyoaInt2_ArrayObject*)ob;
  try {
    PyParamoaInt2_Array data;
    int convert_status=PyoaInt2_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaInt2_FromoaInt2(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaInt2_Array_index_get_length(PyObject* ob)
{
    PyParamoaInt2_Array data;
    int convert_status=PyoaInt2_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaInt2_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaInt2_Array data;
    PyParamoaInt2 dataitem;
    int convert_status=PyoaInt2_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaInt2_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaInt2_Array_doc[] =
"Class: oaInt2_Array\n"
"  The oaInt2_Array utility class provides an array of oaInt2.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaInt2_Array()\n"
"    Signature: oaInt2_Array||\n"
"    This is the default constructor for the oaInt2_Array class. This constructor creates an empty oaInt2_Array.\n"
"  Paramegers: (oaInt2_Array)\n"
"    Calls: (const oaInt2_Array&)\n"
"    Signature: oaInt2_Array||cref-oaInt2_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaInt2_Array_as_sequence = {
    (Pyoa_inquiry)oaInt2_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaInt2_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaInt2_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaInt2_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInt2_Array",
    sizeof(PyoaInt2_ArrayObject),
    0,
    oaInt2_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaInt2_Array_compare,    /* tp_compare */
    oaInt2_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaInt2_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaInt2_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInt2_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaInt2_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaInt2_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaInt2_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInt2_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaInt2_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaInt2_Array",
           (PyObject*)(&PyoaInt2_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInt2_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaInt4
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInt4_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInt4_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaInt4_ArrayObject* self = (PyoaInt4_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaInt4_Array) */
    {
        PyParamoaInt4_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInt4_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInt4_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaInt4_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInt4_Array_dealloc(PyObject* gself)
{
    PyoaInt4_ArrayObject* self = (PyoaInt4_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaInt4_Array_str(PyObject *ob)
{
    PyParamoaInt4_Array value;
    int convert_status=PyoaInt4_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaInt4_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaInt4_Array_repr(PyObject *ob)
{
    PyParamoaInt4_Array value;
    int convert_status=PyoaInt4_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaInt4_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaInt4_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInt4_Array p1;
    PyParamoaInt4_Array p2;
    int s1=PyoaInt4_Array_Convert(ob1,&p1);
    int s2=PyoaInt4_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaInt4_Array_CreateList(p1);
    PyObject* l2=PyoaInt4_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaInt4_Array_Convert(PyObject* ob,PyParamoaInt4_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaInt4_Array_Check(ob)) {
    PyoaInt4_ArrayObject* self = (PyoaInt4_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaInt4 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaInt4_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaInt4 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaInt4_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaInt4_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaInt4_Array_FromoaInt4_Array(const oaInt4_Array& value)
{
  PyObject* gself = PyoaInt4_Array_Type.tp_alloc(&PyoaInt4_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaInt4_ArrayObject* self = (PyoaInt4_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt4_Array_FromoaInt4_Array(PyTypeoaInt4* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaInt4_Array_Type.tp_alloc(&PyoaInt4_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaInt4_ArrayObject* self = (PyoaInt4_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt4_Array_CreateList(PyParamoaInt4_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaInt4_FromoaInt4(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaInt4_Array_assign_doc[] = 
"Class: oaInt4_Array, Function: assign\n"
"  Paramegers: (oaInt4_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaInt4_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaInt4_ArrayObject* self=(PyoaInt4_ArrayObject*)ob;
  try {
    PyParamoaInt4_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInt4_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaInt4_Array_list_doc[] = 
"Class: oaInt4_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaInt4_Array_list(PyObject* ob, PyObject *args)
{
  PyoaInt4_ArrayObject* self=(PyoaInt4_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaInt4_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaInt4_Array_methodlist[] = {
    {"assign",(PyCFunction)oaInt4_Array_assign,METH_VARARGS,oaInt4_Array_assign_doc},
    {"list",(PyCFunction)oaInt4_Array_list,METH_VARARGS,oaInt4_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaInt4_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaInt4_ArrayObject* self=(PyoaInt4_ArrayObject*)ob;
  try {
    PyParamoaInt4_Array data;
    int convert_status=PyoaInt4_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaInt4_FromoaInt4(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaInt4_Array_index_get_length(PyObject* ob)
{
    PyParamoaInt4_Array data;
    int convert_status=PyoaInt4_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaInt4_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaInt4_Array data;
    PyParamoaInt4 dataitem;
    int convert_status=PyoaInt4_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaInt4_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaInt4_Array_doc[] =
"Class: oaInt4_Array\n"
"  The oaInt4_Array utility class provides an array of oaInt4.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaInt4_Array()\n"
"    Signature: oaInt4_Array||\n"
"    This is the default constructor for the oaInt4_Array class. This constructor creates an empty oaInt4_Array.\n"
"  Paramegers: (oaInt4_Array)\n"
"    Calls: (const oaInt4_Array&)\n"
"    Signature: oaInt4_Array||cref-oaInt4_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaInt4_Array_as_sequence = {
    (Pyoa_inquiry)oaInt4_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaInt4_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaInt4_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaInt4_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInt4_Array",
    sizeof(PyoaInt4_ArrayObject),
    0,
    oaInt4_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaInt4_Array_compare,    /* tp_compare */
    oaInt4_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaInt4_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaInt4_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInt4_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaInt4_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaInt4_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaInt4_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInt4_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaInt4_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaInt4_Array",
           (PyObject*)(&PyoaInt4_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInt4_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaInt8
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInt8_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInt8_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaInt8_ArrayObject* self = (PyoaInt8_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaInt8_Array) */
    {
        PyParamoaInt8_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInt8_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInt8_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaInt8_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInt8_Array_dealloc(PyObject* gself)
{
    PyoaInt8_ArrayObject* self = (PyoaInt8_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaInt8_Array_str(PyObject *ob)
{
    PyParamoaInt8_Array value;
    int convert_status=PyoaInt8_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaInt8_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaInt8_Array_repr(PyObject *ob)
{
    PyParamoaInt8_Array value;
    int convert_status=PyoaInt8_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaInt8_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaInt8_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInt8_Array p1;
    PyParamoaInt8_Array p2;
    int s1=PyoaInt8_Array_Convert(ob1,&p1);
    int s2=PyoaInt8_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaInt8_Array_CreateList(p1);
    PyObject* l2=PyoaInt8_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaInt8_Array_Convert(PyObject* ob,PyParamoaInt8_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaInt8_Array_Check(ob)) {
    PyoaInt8_ArrayObject* self = (PyoaInt8_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaInt8 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaInt8_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaInt8 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaInt8_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaInt8_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaInt8_Array_FromoaInt8_Array(const oaInt8_Array& value)
{
  PyObject* gself = PyoaInt8_Array_Type.tp_alloc(&PyoaInt8_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaInt8_ArrayObject* self = (PyoaInt8_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt8_Array_FromoaInt8_Array(PyTypeoaInt8* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaInt8_Array_Type.tp_alloc(&PyoaInt8_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaInt8_ArrayObject* self = (PyoaInt8_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaInt8_Array_CreateList(PyParamoaInt8_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaInt8_FromoaInt8(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaInt8_Array_assign_doc[] = 
"Class: oaInt8_Array, Function: assign\n"
"  Paramegers: (oaInt8_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaInt8_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaInt8_ArrayObject* self=(PyoaInt8_ArrayObject*)ob;
  try {
    PyParamoaInt8_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInt8_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaInt8_Array_list_doc[] = 
"Class: oaInt8_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaInt8_Array_list(PyObject* ob, PyObject *args)
{
  PyoaInt8_ArrayObject* self=(PyoaInt8_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaInt8_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaInt8_Array_methodlist[] = {
    {"assign",(PyCFunction)oaInt8_Array_assign,METH_VARARGS,oaInt8_Array_assign_doc},
    {"list",(PyCFunction)oaInt8_Array_list,METH_VARARGS,oaInt8_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaInt8_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaInt8_ArrayObject* self=(PyoaInt8_ArrayObject*)ob;
  try {
    PyParamoaInt8_Array data;
    int convert_status=PyoaInt8_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaInt8_FromoaInt8(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaInt8_Array_index_get_length(PyObject* ob)
{
    PyParamoaInt8_Array data;
    int convert_status=PyoaInt8_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaInt8_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaInt8_Array data;
    PyParamoaInt8 dataitem;
    int convert_status=PyoaInt8_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaInt8_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaInt8_Array_doc[] =
"Class: oaInt8_Array\n"
"  The oaInt8_Array utility class provides an array of oaInt8.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaInt8_Array()\n"
"    Signature: oaInt8_Array||\n"
"    This is the default constructor for the oaInt8_Array class. This constructor creates an empty oaInt8_Array.\n"
"  Paramegers: (oaInt8_Array)\n"
"    Calls: (const oaInt8_Array&)\n"
"    Signature: oaInt8_Array||cref-oaInt8_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaInt8_Array_as_sequence = {
    (Pyoa_inquiry)oaInt8_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaInt8_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaInt8_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaInt8_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInt8_Array",
    sizeof(PyoaInt8_ArrayObject),
    0,
    oaInt8_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaInt8_Array_compare,    /* tp_compare */
    oaInt8_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaInt8_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaInt8_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInt8_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaInt8_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaInt8_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaInt8_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInt8_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaInt8_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaInt8_Array",
           (PyObject*)(&PyoaInt8_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInt8_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaLayerNum
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaLayerNum_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaLayerNum_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaLayerNum_ArrayObject* self = (PyoaLayerNum_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaLayerNum_Array) */
    {
        PyParamoaLayerNum_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaLayerNum_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaLayerNum_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaLayerNum_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaLayerNum_Array_dealloc(PyObject* gself)
{
    PyoaLayerNum_ArrayObject* self = (PyoaLayerNum_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaLayerNum_Array_str(PyObject *ob)
{
    PyParamoaLayerNum_Array value;
    int convert_status=PyoaLayerNum_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaLayerNum_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaLayerNum_Array_repr(PyObject *ob)
{
    PyParamoaLayerNum_Array value;
    int convert_status=PyoaLayerNum_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaLayerNum_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaLayerNum_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaLayerNum_Array p1;
    PyParamoaLayerNum_Array p2;
    int s1=PyoaLayerNum_Array_Convert(ob1,&p1);
    int s2=PyoaLayerNum_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaLayerNum_Array_CreateList(p1);
    PyObject* l2=PyoaLayerNum_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaLayerNum_Array_Convert(PyObject* ob,PyParamoaLayerNum_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaLayerNum_Array_Check(ob)) {
    PyoaLayerNum_ArrayObject* self = (PyoaLayerNum_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaLayerNum data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaLayerNum_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaLayerNum data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaLayerNum_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaLayerNum_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaLayerNum_Array_FromoaLayerNum_Array(const oaLayerNum_Array& value)
{
  PyObject* gself = PyoaLayerNum_Array_Type.tp_alloc(&PyoaLayerNum_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaLayerNum_ArrayObject* self = (PyoaLayerNum_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaLayerNum_Array_FromoaLayerNum_Array(PyTypeoaLayerNum* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaLayerNum_Array_Type.tp_alloc(&PyoaLayerNum_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaLayerNum_ArrayObject* self = (PyoaLayerNum_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaLayerNum_Array_CreateList(PyParamoaLayerNum_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaLayerNum_FromoaLayerNum(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaLayerNum_Array_assign_doc[] = 
"Class: oaLayerNum_Array, Function: assign\n"
"  Paramegers: (oaLayerNum_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaLayerNum_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaLayerNum_ArrayObject* self=(PyoaLayerNum_ArrayObject*)ob;
  try {
    PyParamoaLayerNum_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaLayerNum_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaLayerNum_Array_list_doc[] = 
"Class: oaLayerNum_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaLayerNum_Array_list(PyObject* ob, PyObject *args)
{
  PyoaLayerNum_ArrayObject* self=(PyoaLayerNum_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaLayerNum_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaLayerNum_Array_methodlist[] = {
    {"assign",(PyCFunction)oaLayerNum_Array_assign,METH_VARARGS,oaLayerNum_Array_assign_doc},
    {"list",(PyCFunction)oaLayerNum_Array_list,METH_VARARGS,oaLayerNum_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaLayerNum_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaLayerNum_ArrayObject* self=(PyoaLayerNum_ArrayObject*)ob;
  try {
    PyParamoaLayerNum_Array data;
    int convert_status=PyoaLayerNum_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaLayerNum_FromoaLayerNum(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaLayerNum_Array_index_get_length(PyObject* ob)
{
    PyParamoaLayerNum_Array data;
    int convert_status=PyoaLayerNum_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaLayerNum_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaLayerNum_Array data;
    PyParamoaLayerNum dataitem;
    int convert_status=PyoaLayerNum_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaLayerNum_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaLayerNum_Array_doc[] =
"Class: oaLayerNum_Array\n"
"  The oaLayerNum_Array utility class provides an array of oaLayerNum.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaLayerNum_Array()\n"
"    Signature: oaLayerNum_Array||\n"
"    This is the default constructor for the oaLayerNum_Array class. This constructor creates an empty oaLayerNum_Array.\n"
"  Paramegers: (oaLayerNum_Array)\n"
"    Calls: (const oaLayerNum_Array&)\n"
"    Signature: oaLayerNum_Array||cref-oaLayerNum_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaLayerNum_Array_as_sequence = {
    (Pyoa_inquiry)oaLayerNum_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaLayerNum_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaLayerNum_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaLayerNum_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaLayerNum_Array",
    sizeof(PyoaLayerNum_ArrayObject),
    0,
    oaLayerNum_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaLayerNum_Array_compare,    /* tp_compare */
    oaLayerNum_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaLayerNum_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaLayerNum_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaLayerNum_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaLayerNum_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaLayerNum_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaLayerNum_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaLayerNum_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaLayerNum_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaLayerNum_Array",
           (PyObject*)(&PyoaLayerNum_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaLayerNum_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaOffset
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaOffset_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaOffset_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaOffset_ArrayObject* self = (PyoaOffset_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaOffset_Array) */
    {
        PyParamoaOffset_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaOffset_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaOffset_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaOffset_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaOffset_Array_dealloc(PyObject* gself)
{
    PyoaOffset_ArrayObject* self = (PyoaOffset_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaOffset_Array_str(PyObject *ob)
{
    PyParamoaOffset_Array value;
    int convert_status=PyoaOffset_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaOffset_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaOffset_Array_repr(PyObject *ob)
{
    PyParamoaOffset_Array value;
    int convert_status=PyoaOffset_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaOffset_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaOffset_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaOffset_Array p1;
    PyParamoaOffset_Array p2;
    int s1=PyoaOffset_Array_Convert(ob1,&p1);
    int s2=PyoaOffset_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaOffset_Array_CreateList(p1);
    PyObject* l2=PyoaOffset_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaOffset_Array_Convert(PyObject* ob,PyParamoaOffset_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaOffset_Array_Check(ob)) {
    PyoaOffset_ArrayObject* self = (PyoaOffset_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaOffset data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaOffset_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaOffset data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaOffset_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaOffset_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaOffset_Array_FromoaOffset_Array(const oaOffset_Array& value)
{
  PyObject* gself = PyoaOffset_Array_Type.tp_alloc(&PyoaOffset_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaOffset_ArrayObject* self = (PyoaOffset_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaOffset_Array_FromoaOffset_Array(PyTypeoaOffset* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaOffset_Array_Type.tp_alloc(&PyoaOffset_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaOffset_ArrayObject* self = (PyoaOffset_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaOffset_Array_CreateList(PyParamoaOffset_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaOffset_FromoaOffset(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaOffset_Array_assign_doc[] = 
"Class: oaOffset_Array, Function: assign\n"
"  Paramegers: (oaOffset_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaOffset_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaOffset_ArrayObject* self=(PyoaOffset_ArrayObject*)ob;
  try {
    PyParamoaOffset_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaOffset_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaOffset_Array_list_doc[] = 
"Class: oaOffset_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaOffset_Array_list(PyObject* ob, PyObject *args)
{
  PyoaOffset_ArrayObject* self=(PyoaOffset_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaOffset_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaOffset_Array_methodlist[] = {
    {"assign",(PyCFunction)oaOffset_Array_assign,METH_VARARGS,oaOffset_Array_assign_doc},
    {"list",(PyCFunction)oaOffset_Array_list,METH_VARARGS,oaOffset_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaOffset_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaOffset_ArrayObject* self=(PyoaOffset_ArrayObject*)ob;
  try {
    PyParamoaOffset_Array data;
    int convert_status=PyoaOffset_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaOffset_FromoaOffset(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaOffset_Array_index_get_length(PyObject* ob)
{
    PyParamoaOffset_Array data;
    int convert_status=PyoaOffset_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaOffset_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaOffset_Array data;
    PyParamoaOffset dataitem;
    int convert_status=PyoaOffset_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaOffset_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaOffset_Array_doc[] =
"Class: oaOffset_Array\n"
"  The oaOffset_Array utility class provides an array of oaOffset.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaOffset_Array()\n"
"    Signature: oaOffset_Array||\n"
"    This is the default constructor for the oaOffset_Array class. This constructor creates an empty oaOffset_Array.\n"
"  Paramegers: (oaOffset_Array)\n"
"    Calls: (const oaOffset_Array&)\n"
"    Signature: oaOffset_Array||cref-oaOffset_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaOffset_Array_as_sequence = {
    (Pyoa_inquiry)oaOffset_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaOffset_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaOffset_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaOffset_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaOffset_Array",
    sizeof(PyoaOffset_ArrayObject),
    0,
    oaOffset_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaOffset_Array_compare,    /* tp_compare */
    oaOffset_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaOffset_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaOffset_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaOffset_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaOffset_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaOffset_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaOffset_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaOffset_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaOffset_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaOffset_Array",
           (PyObject*)(&PyoaOffset_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaOffset_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaPurposeNum
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaPurposeNum_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaPurposeNum_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaPurposeNum_ArrayObject* self = (PyoaPurposeNum_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaPurposeNum_Array) */
    {
        PyParamoaPurposeNum_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaPurposeNum_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaPurposeNum_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaPurposeNum_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaPurposeNum_Array_dealloc(PyObject* gself)
{
    PyoaPurposeNum_ArrayObject* self = (PyoaPurposeNum_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaPurposeNum_Array_str(PyObject *ob)
{
    PyParamoaPurposeNum_Array value;
    int convert_status=PyoaPurposeNum_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaPurposeNum_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaPurposeNum_Array_repr(PyObject *ob)
{
    PyParamoaPurposeNum_Array value;
    int convert_status=PyoaPurposeNum_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaPurposeNum_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaPurposeNum_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaPurposeNum_Array p1;
    PyParamoaPurposeNum_Array p2;
    int s1=PyoaPurposeNum_Array_Convert(ob1,&p1);
    int s2=PyoaPurposeNum_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaPurposeNum_Array_CreateList(p1);
    PyObject* l2=PyoaPurposeNum_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaPurposeNum_Array_Convert(PyObject* ob,PyParamoaPurposeNum_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaPurposeNum_Array_Check(ob)) {
    PyoaPurposeNum_ArrayObject* self = (PyoaPurposeNum_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaPurposeNum data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaPurposeNum_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaPurposeNum data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaPurposeNum_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaPurposeNum_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaPurposeNum_Array_FromoaPurposeNum_Array(const oaPurposeNum_Array& value)
{
  PyObject* gself = PyoaPurposeNum_Array_Type.tp_alloc(&PyoaPurposeNum_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaPurposeNum_ArrayObject* self = (PyoaPurposeNum_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaPurposeNum_Array_FromoaPurposeNum_Array(PyTypeoaPurposeNum* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaPurposeNum_Array_Type.tp_alloc(&PyoaPurposeNum_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaPurposeNum_ArrayObject* self = (PyoaPurposeNum_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaPurposeNum_Array_CreateList(PyParamoaPurposeNum_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaPurposeNum_FromoaPurposeNum(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaPurposeNum_Array_assign_doc[] = 
"Class: oaPurposeNum_Array, Function: assign\n"
"  Paramegers: (oaPurposeNum_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaPurposeNum_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaPurposeNum_ArrayObject* self=(PyoaPurposeNum_ArrayObject*)ob;
  try {
    PyParamoaPurposeNum_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaPurposeNum_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaPurposeNum_Array_list_doc[] = 
"Class: oaPurposeNum_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaPurposeNum_Array_list(PyObject* ob, PyObject *args)
{
  PyoaPurposeNum_ArrayObject* self=(PyoaPurposeNum_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaPurposeNum_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaPurposeNum_Array_methodlist[] = {
    {"assign",(PyCFunction)oaPurposeNum_Array_assign,METH_VARARGS,oaPurposeNum_Array_assign_doc},
    {"list",(PyCFunction)oaPurposeNum_Array_list,METH_VARARGS,oaPurposeNum_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaPurposeNum_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaPurposeNum_ArrayObject* self=(PyoaPurposeNum_ArrayObject*)ob;
  try {
    PyParamoaPurposeNum_Array data;
    int convert_status=PyoaPurposeNum_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaPurposeNum_FromoaPurposeNum(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaPurposeNum_Array_index_get_length(PyObject* ob)
{
    PyParamoaPurposeNum_Array data;
    int convert_status=PyoaPurposeNum_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaPurposeNum_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaPurposeNum_Array data;
    PyParamoaPurposeNum dataitem;
    int convert_status=PyoaPurposeNum_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaPurposeNum_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaPurposeNum_Array_doc[] =
"Class: oaPurposeNum_Array\n"
"  The oaPurposeNum_Array utility class provides an array of oaPurposeNum.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaPurposeNum_Array()\n"
"    Signature: oaPurposeNum_Array||\n"
"    This is the default constructor for the oaPurposeNum_Array class. This constructor creates an empty oaPurposeNum_Array.\n"
"  Paramegers: (oaPurposeNum_Array)\n"
"    Calls: (const oaPurposeNum_Array&)\n"
"    Signature: oaPurposeNum_Array||cref-oaPurposeNum_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaPurposeNum_Array_as_sequence = {
    (Pyoa_inquiry)oaPurposeNum_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaPurposeNum_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaPurposeNum_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaPurposeNum_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaPurposeNum_Array",
    sizeof(PyoaPurposeNum_ArrayObject),
    0,
    oaPurposeNum_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaPurposeNum_Array_compare,    /* tp_compare */
    oaPurposeNum_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaPurposeNum_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaPurposeNum_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaPurposeNum_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaPurposeNum_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaPurposeNum_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaPurposeNum_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaPurposeNum_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaPurposeNum_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaPurposeNum_Array",
           (PyObject*)(&PyoaPurposeNum_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaPurposeNum_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaString
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaString_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaString_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaString_ArrayObject* self = (PyoaString_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaString_Array) */
    {
        PyParamoaString_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaString_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaString_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaString_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaString_Array_dealloc(PyObject* gself)
{
    PyoaString_ArrayObject* self = (PyoaString_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaString_Array_str(PyObject *ob)
{
    PyParamoaString_Array value;
    int convert_status=PyoaString_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaString_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaString_Array_repr(PyObject *ob)
{
    PyParamoaString_Array value;
    int convert_status=PyoaString_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaString_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaString_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaString_Array p1;
    PyParamoaString_Array p2;
    int s1=PyoaString_Array_Convert(ob1,&p1);
    int s2=PyoaString_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaString_Array_CreateList(p1);
    PyObject* l2=PyoaString_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaString_Array_Convert(PyObject* ob,PyParamoaString_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaString_Array_Check(ob)) {
    PyoaString_ArrayObject* self = (PyoaString_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaString data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaString_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaString data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaString_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaString_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaString_Array_FromoaString_Array(const oaString_Array& value)
{
  PyObject* gself = PyoaString_Array_Type.tp_alloc(&PyoaString_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaString_ArrayObject* self = (PyoaString_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaString_Array_FromoaString_Array(PyTypeoaString* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaString_Array_Type.tp_alloc(&PyoaString_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaString_ArrayObject* self = (PyoaString_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaString_Array_CreateList(PyParamoaString_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaString_FromoaString(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaString_Array_assign_doc[] = 
"Class: oaString_Array, Function: assign\n"
"  Paramegers: (oaString_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaString_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaString_ArrayObject* self=(PyoaString_ArrayObject*)ob;
  try {
    PyParamoaString_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaString_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaString_Array_list_doc[] = 
"Class: oaString_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaString_Array_list(PyObject* ob, PyObject *args)
{
  PyoaString_ArrayObject* self=(PyoaString_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaString_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaString_Array_methodlist[] = {
    {"assign",(PyCFunction)oaString_Array_assign,METH_VARARGS,oaString_Array_assign_doc},
    {"list",(PyCFunction)oaString_Array_list,METH_VARARGS,oaString_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaString_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaString_ArrayObject* self=(PyoaString_ArrayObject*)ob;
  try {
    PyParamoaString_Array data;
    int convert_status=PyoaString_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaString_FromoaString(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaString_Array_index_get_length(PyObject* ob)
{
    PyParamoaString_Array data;
    int convert_status=PyoaString_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaString_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaString_Array data;
    PyParamoaString dataitem;
    int convert_status=PyoaString_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaString_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaString_Array_doc[] =
"Class: oaString_Array\n"
"  The oaString_Array utility class provides an array of oaString.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaString_Array()\n"
"    Signature: oaString_Array||\n"
"    This is the default constructor for the oaString_Array class. This constructor creates an empty oaString_Array.\n"
"  Paramegers: (oaString_Array)\n"
"    Calls: (const oaString_Array&)\n"
"    Signature: oaString_Array||cref-oaString_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaString_Array_as_sequence = {
    (Pyoa_inquiry)oaString_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaString_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaString_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaString_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaString_Array",
    sizeof(PyoaString_ArrayObject),
    0,
    oaString_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaString_Array_compare,    /* tp_compare */
    oaString_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaString_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaString_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaString_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaString_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaString_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaString_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaString_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaString_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaString_Array",
           (PyObject*)(&PyoaString_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaString_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaTime
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTime_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTime_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaTime_ArrayObject* self = (PyoaTime_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaTime_Array) */
    {
        PyParamoaTime_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTime_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTime_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaTime_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTime_Array_dealloc(PyObject* gself)
{
    PyoaTime_ArrayObject* self = (PyoaTime_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaTime_Array_str(PyObject *ob)
{
    PyParamoaTime_Array value;
    int convert_status=PyoaTime_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaTime_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaTime_Array_repr(PyObject *ob)
{
    PyParamoaTime_Array value;
    int convert_status=PyoaTime_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaTime_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaTime_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTime_Array p1;
    PyParamoaTime_Array p2;
    int s1=PyoaTime_Array_Convert(ob1,&p1);
    int s2=PyoaTime_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaTime_Array_CreateList(p1);
    PyObject* l2=PyoaTime_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaTime_Array_Convert(PyObject* ob,PyParamoaTime_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaTime_Array_Check(ob)) {
    PyoaTime_ArrayObject* self = (PyoaTime_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaTime data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaTime_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaTime data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaTime_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaTime_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaTime_Array_FromoaTime_Array(const oaTime_Array& value)
{
  PyObject* gself = PyoaTime_Array_Type.tp_alloc(&PyoaTime_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaTime_ArrayObject* self = (PyoaTime_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaTime_Array_FromoaTime_Array(PyTypeoaTime* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaTime_Array_Type.tp_alloc(&PyoaTime_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaTime_ArrayObject* self = (PyoaTime_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaTime_Array_CreateList(PyParamoaTime_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaTime_FromoaTime(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaTime_Array_assign_doc[] = 
"Class: oaTime_Array, Function: assign\n"
"  Paramegers: (oaTime_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaTime_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaTime_ArrayObject* self=(PyoaTime_ArrayObject*)ob;
  try {
    PyParamoaTime_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTime_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaTime_Array_list_doc[] = 
"Class: oaTime_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaTime_Array_list(PyObject* ob, PyObject *args)
{
  PyoaTime_ArrayObject* self=(PyoaTime_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaTime_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaTime_Array_methodlist[] = {
    {"assign",(PyCFunction)oaTime_Array_assign,METH_VARARGS,oaTime_Array_assign_doc},
    {"list",(PyCFunction)oaTime_Array_list,METH_VARARGS,oaTime_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaTime_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaTime_ArrayObject* self=(PyoaTime_ArrayObject*)ob;
  try {
    PyParamoaTime_Array data;
    int convert_status=PyoaTime_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaTime_FromoaTime(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaTime_Array_index_get_length(PyObject* ob)
{
    PyParamoaTime_Array data;
    int convert_status=PyoaTime_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaTime_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaTime_Array data;
    PyParamoaTime dataitem;
    int convert_status=PyoaTime_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaTime_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaTime_Array_doc[] =
"Class: oaTime_Array\n"
"  The oaTime_Array utility class provides an array of oaTime.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaTime_Array()\n"
"    Signature: oaTime_Array||\n"
"    This is the default constructor for the oaTime_Array class. This constructor creates an empty oaTime_Array.\n"
"  Paramegers: (oaTime_Array)\n"
"    Calls: (const oaTime_Array&)\n"
"    Signature: oaTime_Array||cref-oaTime_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaTime_Array_as_sequence = {
    (Pyoa_inquiry)oaTime_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaTime_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaTime_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaTime_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTime_Array",
    sizeof(PyoaTime_ArrayObject),
    0,
    oaTime_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaTime_Array_compare,    /* tp_compare */
    oaTime_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaTime_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaTime_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTime_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaTime_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaTime_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaTime_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTime_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaTime_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaTime_Array",
           (PyObject*)(&PyoaTime_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTime_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaUInt2
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUInt2_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUInt2_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaUInt2_ArrayObject* self = (PyoaUInt2_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaUInt2_Array) */
    {
        PyParamoaUInt2_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt2_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUInt2_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaUInt2_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUInt2_Array_dealloc(PyObject* gself)
{
    PyoaUInt2_ArrayObject* self = (PyoaUInt2_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaUInt2_Array_str(PyObject *ob)
{
    PyParamoaUInt2_Array value;
    int convert_status=PyoaUInt2_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaUInt2_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaUInt2_Array_repr(PyObject *ob)
{
    PyParamoaUInt2_Array value;
    int convert_status=PyoaUInt2_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaUInt2_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaUInt2_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUInt2_Array p1;
    PyParamoaUInt2_Array p2;
    int s1=PyoaUInt2_Array_Convert(ob1,&p1);
    int s2=PyoaUInt2_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaUInt2_Array_CreateList(p1);
    PyObject* l2=PyoaUInt2_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaUInt2_Array_Convert(PyObject* ob,PyParamoaUInt2_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaUInt2_Array_Check(ob)) {
    PyoaUInt2_ArrayObject* self = (PyoaUInt2_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaUInt2 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaUInt2_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaUInt2 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaUInt2_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaUInt2_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt2_Array_FromoaUInt2_Array(const oaUInt2_Array& value)
{
  PyObject* gself = PyoaUInt2_Array_Type.tp_alloc(&PyoaUInt2_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt2_ArrayObject* self = (PyoaUInt2_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt2_Array_FromoaUInt2_Array(PyTypeoaUInt2* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaUInt2_Array_Type.tp_alloc(&PyoaUInt2_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt2_ArrayObject* self = (PyoaUInt2_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt2_Array_CreateList(PyParamoaUInt2_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaUInt2_FromoaUInt2(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaUInt2_Array_assign_doc[] = 
"Class: oaUInt2_Array, Function: assign\n"
"  Paramegers: (oaUInt2_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaUInt2_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaUInt2_ArrayObject* self=(PyoaUInt2_ArrayObject*)ob;
  try {
    PyParamoaUInt2_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaUInt2_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaUInt2_Array_list_doc[] = 
"Class: oaUInt2_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaUInt2_Array_list(PyObject* ob, PyObject *args)
{
  PyoaUInt2_ArrayObject* self=(PyoaUInt2_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaUInt2_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaUInt2_Array_methodlist[] = {
    {"assign",(PyCFunction)oaUInt2_Array_assign,METH_VARARGS,oaUInt2_Array_assign_doc},
    {"list",(PyCFunction)oaUInt2_Array_list,METH_VARARGS,oaUInt2_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaUInt2_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaUInt2_ArrayObject* self=(PyoaUInt2_ArrayObject*)ob;
  try {
    PyParamoaUInt2_Array data;
    int convert_status=PyoaUInt2_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaUInt2_FromoaUInt2(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaUInt2_Array_index_get_length(PyObject* ob)
{
    PyParamoaUInt2_Array data;
    int convert_status=PyoaUInt2_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaUInt2_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaUInt2_Array data;
    PyParamoaUInt2 dataitem;
    int convert_status=PyoaUInt2_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaUInt2_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaUInt2_Array_doc[] =
"Class: oaUInt2_Array\n"
"  The oaUInt2_Array utility class provides an array of oaUInt2.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaUInt2_Array()\n"
"    Signature: oaUInt2_Array||\n"
"    This is the default constructor for the oaUInt2_Array class. This constructor creates an empty oaUInt2_Array.\n"
"  Paramegers: (oaUInt2_Array)\n"
"    Calls: (const oaUInt2_Array&)\n"
"    Signature: oaUInt2_Array||cref-oaUInt2_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaUInt2_Array_as_sequence = {
    (Pyoa_inquiry)oaUInt2_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaUInt2_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaUInt2_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaUInt2_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUInt2_Array",
    sizeof(PyoaUInt2_ArrayObject),
    0,
    oaUInt2_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaUInt2_Array_compare,    /* tp_compare */
    oaUInt2_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaUInt2_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaUInt2_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUInt2_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaUInt2_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaUInt2_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaUInt2_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUInt2_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaUInt2_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaUInt2_Array",
           (PyObject*)(&PyoaUInt2_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUInt2_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaUInt4
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUInt4_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUInt4_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaUInt4_ArrayObject* self = (PyoaUInt4_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaUInt4_Array) */
    {
        PyParamoaUInt4_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt4_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUInt4_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaUInt4_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUInt4_Array_dealloc(PyObject* gself)
{
    PyoaUInt4_ArrayObject* self = (PyoaUInt4_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaUInt4_Array_str(PyObject *ob)
{
    PyParamoaUInt4_Array value;
    int convert_status=PyoaUInt4_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaUInt4_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaUInt4_Array_repr(PyObject *ob)
{
    PyParamoaUInt4_Array value;
    int convert_status=PyoaUInt4_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaUInt4_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaUInt4_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUInt4_Array p1;
    PyParamoaUInt4_Array p2;
    int s1=PyoaUInt4_Array_Convert(ob1,&p1);
    int s2=PyoaUInt4_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaUInt4_Array_CreateList(p1);
    PyObject* l2=PyoaUInt4_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaUInt4_Array_Convert(PyObject* ob,PyParamoaUInt4_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaUInt4_Array_Check(ob)) {
    PyoaUInt4_ArrayObject* self = (PyoaUInt4_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaUInt4 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaUInt4_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaUInt4 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaUInt4_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaUInt4_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt4_Array_FromoaUInt4_Array(const oaUInt4_Array& value)
{
  PyObject* gself = PyoaUInt4_Array_Type.tp_alloc(&PyoaUInt4_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt4_ArrayObject* self = (PyoaUInt4_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt4_Array_FromoaUInt4_Array(PyTypeoaUInt4* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaUInt4_Array_Type.tp_alloc(&PyoaUInt4_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt4_ArrayObject* self = (PyoaUInt4_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt4_Array_CreateList(PyParamoaUInt4_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaUInt4_FromoaUInt4(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaUInt4_Array_assign_doc[] = 
"Class: oaUInt4_Array, Function: assign\n"
"  Paramegers: (oaUInt4_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaUInt4_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaUInt4_ArrayObject* self=(PyoaUInt4_ArrayObject*)ob;
  try {
    PyParamoaUInt4_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaUInt4_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaUInt4_Array_list_doc[] = 
"Class: oaUInt4_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaUInt4_Array_list(PyObject* ob, PyObject *args)
{
  PyoaUInt4_ArrayObject* self=(PyoaUInt4_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaUInt4_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaUInt4_Array_methodlist[] = {
    {"assign",(PyCFunction)oaUInt4_Array_assign,METH_VARARGS,oaUInt4_Array_assign_doc},
    {"list",(PyCFunction)oaUInt4_Array_list,METH_VARARGS,oaUInt4_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaUInt4_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaUInt4_ArrayObject* self=(PyoaUInt4_ArrayObject*)ob;
  try {
    PyParamoaUInt4_Array data;
    int convert_status=PyoaUInt4_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaUInt4_FromoaUInt4(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaUInt4_Array_index_get_length(PyObject* ob)
{
    PyParamoaUInt4_Array data;
    int convert_status=PyoaUInt4_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaUInt4_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaUInt4_Array data;
    PyParamoaUInt4 dataitem;
    int convert_status=PyoaUInt4_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaUInt4_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaUInt4_Array_doc[] =
"Class: oaUInt4_Array\n"
"  The oaUInt4_Array utility class provides an array of oaUInt4.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4_Array()\n"
"    Signature: oaUInt4_Array||\n"
"    This is the default constructor for the oaUInt4_Array class. This constructor creates an empty oaUInt4_Array.\n"
"  Paramegers: (oaUInt4_Array)\n"
"    Calls: (const oaUInt4_Array&)\n"
"    Signature: oaUInt4_Array||cref-oaUInt4_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaUInt4_Array_as_sequence = {
    (Pyoa_inquiry)oaUInt4_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaUInt4_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaUInt4_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaUInt4_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUInt4_Array",
    sizeof(PyoaUInt4_ArrayObject),
    0,
    oaUInt4_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaUInt4_Array_compare,    /* tp_compare */
    oaUInt4_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaUInt4_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaUInt4_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUInt4_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaUInt4_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaUInt4_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaUInt4_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUInt4_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaUInt4_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaUInt4_Array",
           (PyObject*)(&PyoaUInt4_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUInt4_Array\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaUInt8
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUInt8_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUInt8_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaUInt8_ArrayObject* self = (PyoaUInt8_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaUInt8_Array) */
    {
        PyParamoaUInt8_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt8_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUInt8_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaUInt8_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUInt8_Array_dealloc(PyObject* gself)
{
    PyoaUInt8_ArrayObject* self = (PyoaUInt8_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaUInt8_Array_str(PyObject *ob)
{
    PyParamoaUInt8_Array value;
    int convert_status=PyoaUInt8_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaUInt8_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaUInt8_Array_repr(PyObject *ob)
{
    PyParamoaUInt8_Array value;
    int convert_status=PyoaUInt8_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaUInt8_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaUInt8_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUInt8_Array p1;
    PyParamoaUInt8_Array p2;
    int s1=PyoaUInt8_Array_Convert(ob1,&p1);
    int s2=PyoaUInt8_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaUInt8_Array_CreateList(p1);
    PyObject* l2=PyoaUInt8_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaUInt8_Array_Convert(PyObject* ob,PyParamoaUInt8_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaUInt8_Array_Check(ob)) {
    PyoaUInt8_ArrayObject* self = (PyoaUInt8_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaUInt8 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaUInt8_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaUInt8 data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaUInt8_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaUInt8_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt8_Array_FromoaUInt8_Array(const oaUInt8_Array& value)
{
  PyObject* gself = PyoaUInt8_Array_Type.tp_alloc(&PyoaUInt8_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt8_ArrayObject* self = (PyoaUInt8_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt8_Array_FromoaUInt8_Array(PyTypeoaUInt8* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaUInt8_Array_Type.tp_alloc(&PyoaUInt8_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaUInt8_ArrayObject* self = (PyoaUInt8_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaUInt8_Array_CreateList(PyParamoaUInt8_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaUInt8_FromoaUInt8(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaUInt8_Array_assign_doc[] = 
"Class: oaUInt8_Array, Function: assign\n"
"  Paramegers: (oaUInt8_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaUInt8_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaUInt8_ArrayObject* self=(PyoaUInt8_ArrayObject*)ob;
  try {
    PyParamoaUInt8_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaUInt8_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaUInt8_Array_list_doc[] = 
"Class: oaUInt8_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaUInt8_Array_list(PyObject* ob, PyObject *args)
{
  PyoaUInt8_ArrayObject* self=(PyoaUInt8_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaUInt8_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaUInt8_Array_methodlist[] = {
    {"assign",(PyCFunction)oaUInt8_Array_assign,METH_VARARGS,oaUInt8_Array_assign_doc},
    {"list",(PyCFunction)oaUInt8_Array_list,METH_VARARGS,oaUInt8_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaUInt8_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaUInt8_ArrayObject* self=(PyoaUInt8_ArrayObject*)ob;
  try {
    PyParamoaUInt8_Array data;
    int convert_status=PyoaUInt8_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaUInt8_FromoaUInt8(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaUInt8_Array_index_get_length(PyObject* ob)
{
    PyParamoaUInt8_Array data;
    int convert_status=PyoaUInt8_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaUInt8_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaUInt8_Array data;
    PyParamoaUInt8 dataitem;
    int convert_status=PyoaUInt8_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaUInt8_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaUInt8_Array_doc[] =
"Class: oaUInt8_Array\n"
"  The oaUInt8_Array utility class provides an array of oaUInt8.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8_Array()\n"
"    Signature: oaUInt8_Array||\n"
"    This is the default constructor for the oaUInt8_Array class. This constructor creates an empty oaUInt8_Array.\n"
"  Paramegers: (oaUInt8_Array)\n"
"    Calls: (const oaUInt8_Array&)\n"
"    Signature: oaUInt8_Array||cref-oaUInt8_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaUInt8_Array_as_sequence = {
    (Pyoa_inquiry)oaUInt8_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaUInt8_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaUInt8_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaUInt8_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUInt8_Array",
    sizeof(PyoaUInt8_ArrayObject),
    0,
    oaUInt8_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaUInt8_Array_compare,    /* tp_compare */
    oaUInt8_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaUInt8_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaUInt8_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUInt8_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaUInt8_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaUInt8_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaUInt8_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUInt8_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaUInt8_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaUInt8_Array",
           (PyObject*)(&PyoaUInt8_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUInt8_Array\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oa1DLookupTbl_oaFloat_oaFloat
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&Pyoa1DLookupTbl_oaFloat_oaFloat_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self = (Pyoa1DLookupTbl_oaFloat_oaFloatObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oa1DLookupTbl_oaFloat_oaFloat();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oa1DLookupTbl_oaFloat_oaFloat)
    {
        PyParamoa1DLookupTbl_oaFloat_oaFloat p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pyoa1DLookupTbl_oaFloat_oaFloat_Convert,&p1)) {
            self->value =  new oa1DLookupTbl_oaFloat_oaFloat(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            self->value =  new oa1DLookupTbl_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        PyParamoaInterpolateType p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4)) {
            self->value =  new oa1DLookupTbl_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        PyParamoaInterpolateType p4;
        PyParamoaExtrapolateType p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4,
              &PyoaExtrapolateType_Convert,&p5)) {
            self->value =  new oa1DLookupTbl_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        PyParamoaInterpolateType p4;
        PyParamoaExtrapolateType p5;
        PyParamoaExtrapolateType p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4,
              &PyoaExtrapolateType_Convert,&p5,
              &PyoaExtrapolateType_Convert,&p6)) {
            self->value =  new oa1DLookupTbl_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oa1DLookupTbl_oaFloat_oaFloat, Choices are:\n"
        "    ()\n"
        "    (oa1DLookupTbl_oaFloat_oaFloat)\n"
        "    (oaUInt4,oaString,oaFloat)\n"
        "    (oaUInt4,oaString,oaFloat,oaInterpolateType)\n"
        "    (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oa1DLookupTbl_oaFloat_oaFloat_tp_dealloc(Pyoa1DLookupTbl_oaFloat_oaFloatObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_tp_repr(PyObject *ob)
{
    PyParamoa1DLookupTbl_oaFloat_oaFloat value;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oa1DLookupTbl_oaFloat_oaFloat::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oa1DLookupTbl_oaFloat_oaFloat_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoa1DLookupTbl_oaFloat_oaFloat v1;
    PyParamoa1DLookupTbl_oaFloat_oaFloat v2;
    int convert_status1=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob1,&v1);
    int convert_status2=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(PyObject* ob,PyParamoa1DLookupTbl_oaFloat_oaFloat* result)
{
    if (ob == NULL) return 1;
    if (Pyoa1DLookupTbl_oaFloat_oaFloat_Check(ob)) {
        result->SetData(  ((Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oa1DLookupTbl_oaFloat_oaFloat Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* Pyoa1DLookupTbl_oaFloat_oaFloat_Fromoa1DLookupTbl_oaFloat_oaFloat(oa1DLookupTbl_oaFloat_oaFloat* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = Pyoa1DLookupTbl_oaFloat_oaFloat_Type.tp_alloc(&Pyoa1DLookupTbl_oaFloat_oaFloat_Type,0);
        if (bself == NULL) return bself;
        Pyoa1DLookupTbl_oaFloat_oaFloatObject* self = (Pyoa1DLookupTbl_oaFloat_oaFloatObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_calcVMSize_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: calcVMSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8 calcVMSize() const\n"
"    Signature: calcVMSize|simple-oaUInt8|\n"
"    BrowseData: 1\n"
"    This utility function returns the number of bytes this object uses in virtual memory.\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_calcVMSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8 result= (data.DataCall()->calcVMSize());
        return PyoaUInt8_FromoaUInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_find_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: find\n"
"  Paramegers: (oaFloat)\n"
"    Calls: oaFloat find(oaFloat key) const\n"
"    Signature: find|simple-oaFloat|simple-oaFloat,\n"
"    This function returns a value based on the specified header key. If the key is not present in the table, the value is interpolated or extrapolated.\n"
"    key\n"
"    The key value to lookup\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaFloat p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloat_Convert,&p1)) {
        oaFloat result= (data.DataCall()->find(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_getDefaultValue_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: getDefaultValue\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefaultValue() const\n"
"    Signature: getDefaultValue|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_getDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefaultValue());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_getHeader_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: getHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaFloat getHeader(oaUInt4 index) const\n"
"    Signature: getHeader|simple-oaFloat|simple-oaUInt4,\n"
"    This function returns a header value for this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_getHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaFloat result= (data.DataCall()->getHeader(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_getInterpolateType_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: getInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getInterpolateType() const\n"
"    Signature: getInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_getInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_getLowerExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: getLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getLowerExtrapolateType() const\n"
"    Signature: getLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the lower extrapolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_getLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_getName_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: getName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getName(oaString& nameOut) const\n"
"    Signature: getName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of this table.\n"
"    nameOut\n"
"    The returned name.\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa1DLookupTbl_oaFloat_oaFloat, function: getName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_getNumItems_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: getNumItems\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumItems() const\n"
"    Signature: getNumItems|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the allocated size of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_getNumItems(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumItems());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_getUpperExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: getUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getUpperExtrapolateType() const\n"
"    Signature: getUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the upperExtrapolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_getUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_getValue_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: getValue\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaFloat getValue(oaUInt4 index) const\n"
"    Signature: getValue|simple-oaFloat|simple-oaUInt4,\n"
"    This function gets a return value contained in this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaFloat result= (data.DataCall()->getValue(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_setDefaultValue_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: setDefaultValue\n"
"  Paramegers: (oaFloat)\n"
"    Calls: void setDefaultValue(oaFloat value)\n"
"    Signature: setDefaultValue|void-void|simple-oaFloat,\n"
"    This function sets the default value of this table to the specified value.\n"
"    value\n"
"    The default value\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_setDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaFloat p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloat_Convert,&p1)) {
        data.DataCall()->setDefaultValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_setHeader_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: setHeader\n"
"  Paramegers: (oaUInt4,oaFloat)\n"
"    Calls: void setHeader(oaUInt4 index,oaFloat value)\n"
"    Signature: setHeader|void-void|simple-oaUInt4,simple-oaFloat,\n"
"    This function sets a header value in this table.\n"
"    index\n"
"    The index location in this table. The index must be legal for this table.\n"
"    value\n"
"    The header value\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_setHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        data.DataCall()->setHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_setInterpolateType_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: setInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setInterpolateType(oaInterpolateType type)\n"
"    Signature: setInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_setInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_setLowerExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: setLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type of this table for keys that are below all the header values.\n"
"    type\n"
"    The extrapolation type\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_setLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_setName_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: setName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setName(const oaString& nameIn)\n"
"    Signature: setName|void-void|cref-oaString,\n"
"    This function sets the name of this table to the specified name.\n"
"    nameIn\n"
"    The name of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_setName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_setNumItems_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: setNumItems\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumItems(oaUInt4 numItemsIn)\n"
"    Signature: setNumItems|void-void|simple-oaUInt4,\n"
"    This function sets the allocated size of this table. The previous values will be maintained in the new table if there is room. If the new size is smaller than the previous size then some of the old values will be discarded. If the new size is larger than the previous size then the previous values will still be present in the same index locations.\n"
"    numItemsIn\n"
"    The possible number of items this table can contain\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_setNumItems(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumItems(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_setUpperExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: setUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type of this table for keys that are above all the header values.\n"
"    type\n"
"    The extrapolation type\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_setUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_setValue_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: setValue\n"
"  Paramegers: (oaUInt4,oaFloat)\n"
"    Calls: void setValue(oaUInt4 index,oaFloat value)\n"
"    Signature: setValue|void-void|simple-oaUInt4,simple-oaFloat,\n"
"    This function sets a return value in this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
"    value\n"
"    The return value\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaFloat_oaFloatObject* self=(Pyoa1DLookupTbl_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        data.DataCall()->setValue(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oa1DLookupTbl_oaFloat_oaFloat_assign_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oa1DLookupTbl_oaFloat_oaFloat_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoa1DLookupTbl_oaFloat_oaFloat data;
  int convert_status=Pyoa1DLookupTbl_oaFloat_oaFloat_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoa1DLookupTbl_oaFloat_oaFloat p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &Pyoa1DLookupTbl_oaFloat_oaFloat_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oa1DLookupTbl_oaFloat_oaFloat_methodlist[] = {
    {"calcVMSize",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_calcVMSize,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_calcVMSize_doc},
    {"find",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_find,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_find_doc},
    {"getDefaultValue",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_getDefaultValue,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_getDefaultValue_doc},
    {"getHeader",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_getHeader,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_getHeader_doc},
    {"getInterpolateType",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_getInterpolateType,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_getInterpolateType_doc},
    {"getLowerExtrapolateType",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_getLowerExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_getLowerExtrapolateType_doc},
    {"getName",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_getName,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_getName_doc},
    {"getNumItems",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_getNumItems,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_getNumItems_doc},
    {"getUpperExtrapolateType",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_getUpperExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_getUpperExtrapolateType_doc},
    {"getValue",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_getValue,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_getValue_doc},
    {"setDefaultValue",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_setDefaultValue,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_setDefaultValue_doc},
    {"setHeader",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_setHeader,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_setHeader_doc},
    {"setInterpolateType",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_setInterpolateType,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_setInterpolateType_doc},
    {"setLowerExtrapolateType",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_setLowerExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_setLowerExtrapolateType_doc},
    {"setName",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_setName,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_setName_doc},
    {"setNumItems",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_setNumItems,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_setNumItems_doc},
    {"setUpperExtrapolateType",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_setUpperExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_setUpperExtrapolateType_doc},
    {"setValue",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_setValue,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_setValue_doc},
    {"assign",(PyCFunction)oa1DLookupTbl_oaFloat_oaFloat_tp_assign,METH_VARARGS,oa1DLookupTbl_oaFloat_oaFloat_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaFloat_oaFloat_doc[] = 
"Class: oa1DLookupTbl_oaFloat_oaFloat\n"
"  The oa1DLookupTbl class is a template for a one-dimensional lookup table. The table has both header entries and return value entries. When a lookup is performed, the key is compared with the header entries to find its location in that set. The lookup will then return the corresponding return value entry, or a value based on the nearest return value entries.\n"
"  The class is templatized for both the type of the header and the return value entries. At the time that a lookup is performed, the header entries are assumed to be in strictly ascending order. The entries can be out of order while the table is being created or modified.\n"
"  The handling of keys that are not exact header entries is determined by the interpolation and extrapolation types set in the table. Interpolation applies to keys that are within the range of the header entries, and extrapolation applies to keys that are outside of the values in the header. See the classes oaExtrapolateType and oaInterpolateType for more details.\n"
"  The lookup classes (oa1DLookupTbl and oa2DLookupTbl ) are used by OpenAccess to represent values passed to oaValue subclasses -- see oaInt1DTblValue , oaDualInt1DTblValue , oaFlt1DTblValue , oaIntFltTblValue , oaFltIntFltTblValue , and oaAntennaRatioValue for examples of oaValue subclasses that use oa1DLookupTbls. The oaValue subclasses, in turn, are used to associate different values with constraints -- see oaValue() and its subclasses for more information. The oa1DLookupTbl utility class can be used by applications for other purposes as well.\n"
"  Here is an example of an oa1DLookupTbl<oaUInt4, oaFloat>:\n"
"  Index\n"
"  0\n"
"  1\n"
"  2\n"
"  Header\n"
"  4\n"
"  8\n"
"  16\n"
"  Return Value\n"
"  2.2\n"
"  3.3\n"
"  4.4\n"
"  In this example, looking up with a key of 12, midway between the 8 and 12 keys, will return: 3.3 if InterpolateType is set to oacSnapDownInterpolateType 3.85 if InterpolateType is set to oacLinearInterpolateType 4.4 if InterpolateType is set to oacSnapUpInterpolateType\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oa1DLookupTbl_oaFloat_oaFloat()\n"
"    Signature: oa1DLookupTbl_oaFloat_oaFloat||\n"
"    This function constructs an empty oa1DLookupTbl instance to provide a one-dimensional lookup table. The table has a 0 allocated size at this point. oa1DLookupTbl::setNumItems must be called before it can be used.\n"
"  Paramegers: (oa1DLookupTbl_oaFloat_oaFloat)\n"
"    Calls: oa1DLookupTbl_oaFloat_oaFloat(const oa1DLookupTbl_oaFloat_oaFloat& tbl)\n"
"    Signature: oa1DLookupTbl_oaFloat_oaFloat||cref-oa1DLookupTbl_oaFloat_oaFloat,\n"
"    This function constructs an oa1DLookupTbl instance and initializes the table to the values in the argument oa1DLookupTbl tbl .\n"
"    tbl\n"
"    The oa1DLookupTbl to copy\n"
"  Paramegers: (oaUInt4,oaString,oaFloat)\n"
"    Calls: oa1DLookupTbl_oaFloat_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue)\n"
"    Signature: oa1DLookupTbl_oaFloat_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaFloat,oaInterpolateType)\n"
"    Calls: oa1DLookupTbl_oaFloat_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue,oaInterpolateType iTypeIn)\n"
"    Signature: oa1DLookupTbl_oaFloat_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType)\n"
"    Calls: oa1DLookupTbl_oaFloat_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue,oaInterpolateType iTypeIn,oaExtrapolateType eLowerTypeIn)\n"
"    Signature: oa1DLookupTbl_oaFloat_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa1DLookupTbl_oaFloat_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue,oaInterpolateType iTypeIn,oaExtrapolateType eLowerTypeIn,oaExtrapolateType eUpperTypeIn)\n"
"    Signature: oa1DLookupTbl_oaFloat_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oa1DLookupTbl_oaFloat_oaFloat)\n"
"    Calls: (const oa1DLookupTbl_oaFloat_oaFloat&)\n"
"    Signature: oa1DLookupTbl_oaFloat_oaFloat||cref-oa1DLookupTbl_oaFloat_oaFloat,\n"
;

// ------------------------------------------------------------------
PyTypeObject Pyoa1DLookupTbl_oaFloat_oaFloat_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oa1DLookupTbl_oaFloat_oaFloat",
    sizeof(Pyoa1DLookupTbl_oaFloat_oaFloatObject),
    0,
    (destructor)oa1DLookupTbl_oaFloat_oaFloat_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oa1DLookupTbl_oaFloat_oaFloat_tp_compare,	/* tp_compare */
    (reprfunc)oa1DLookupTbl_oaFloat_oaFloat_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oa1DLookupTbl_oaFloat_oaFloat_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oa1DLookupTbl_oaFloat_oaFloat_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oa1DLookupTbl_oaFloat_oaFloat_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
Pyoa1DLookupTbl_oaFloat_oaFloat_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&Pyoa1DLookupTbl_oaFloat_oaFloat_Type)<0) {
      printf("** PyType_Ready failed for: oa1DLookupTbl_oaFloat_oaFloat\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oa1DLookupTbl_oaFloat_oaFloat",
           (PyObject*)(&Pyoa1DLookupTbl_oaFloat_oaFloat_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oa1DLookupTbl_oaFloat_oaFloat\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oa1DLookupTbl_oaInt4_oaDualIntArray
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self = (Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oa1DLookupTbl_oaInt4_oaDualIntArray();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oa1DLookupTbl_oaInt4_oaDualIntArray)
    {
        PyParamoa1DLookupTbl_oaInt4_oaDualIntArray p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert,&p1)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaDualIntArray(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaDualIntArray)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaDualIntArray p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaDualIntArray_Convert,&p3)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaDualIntArray(p1.Data(),p2.Data(),p3.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaDualIntArray,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaDualIntArray p3;
        PyParamoaInterpolateType p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaDualIntArray_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaDualIntArray(p1.Data(),p2.Data(),p3.Data(),p4.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaDualIntArray,oaInterpolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaDualIntArray p3;
        PyParamoaInterpolateType p4;
        PyParamoaExtrapolateType p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaDualIntArray_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4,
              &PyoaExtrapolateType_Convert,&p5)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaDualIntArray(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaDualIntArray,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaDualIntArray p3;
        PyParamoaInterpolateType p4;
        PyParamoaExtrapolateType p5;
        PyParamoaExtrapolateType p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaDualIntArray_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4,
              &PyoaExtrapolateType_Convert,&p5,
              &PyoaExtrapolateType_Convert,&p6)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaDualIntArray(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oa1DLookupTbl_oaInt4_oaDualIntArray, Choices are:\n"
        "    ()\n"
        "    (oa1DLookupTbl_oaInt4_oaDualIntArray)\n"
        "    (oaUInt4,oaString,oaDualIntArray)\n"
        "    (oaUInt4,oaString,oaDualIntArray,oaInterpolateType)\n"
        "    (oaUInt4,oaString,oaDualIntArray,oaInterpolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaString,oaDualIntArray,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oa1DLookupTbl_oaInt4_oaDualIntArray_tp_dealloc(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_tp_repr(PyObject *ob)
{
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray value;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oa1DLookupTbl_oaInt4_oaDualIntArray::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oa1DLookupTbl_oaInt4_oaDualIntArray_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray v1;
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray v2;
    int convert_status1=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob1,&v1);
    int convert_status2=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(PyObject* ob,PyParamoa1DLookupTbl_oaInt4_oaDualIntArray* result)
{
    if (ob == NULL) return 1;
    if (Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Check(ob)) {
        result->SetData(  ((Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oa1DLookupTbl_oaInt4_oaDualIntArray Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Fromoa1DLookupTbl_oaInt4_oaDualIntArray(oa1DLookupTbl_oaInt4_oaDualIntArray* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Type.tp_alloc(&Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Type,0);
        if (bself == NULL) return bself;
        Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self = (Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_calcVMSize_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: calcVMSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8 calcVMSize() const\n"
"    Signature: calcVMSize|simple-oaUInt8|\n"
"    BrowseData: 1\n"
"    This utility function returns the number of bytes this object uses in virtual memory.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_calcVMSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8 result= (data.DataCall()->calcVMSize());
        return PyoaUInt8_FromoaUInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_find_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: find\n"
"  Paramegers: (oaInt4)\n"
"    Calls: oaDualIntArray find(oaInt4 key) const\n"
"    Signature: find|simple-oaDualIntArray|simple-oaInt4,\n"
"    This function returns a value based on the specified header key. If the key is not present in the table, the value is interpolated or extrapolated.\n"
"    key\n"
"    The key value to lookup\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt4_Convert,&p1)) {
        oaDualIntArray* result= new oaDualIntArray(data.DataCall()->find(p1.Data()));
        return PyoaDualIntArray_FromoaDualIntArray(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_getDefaultValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: getDefaultValue\n"
"  Paramegers: ()\n"
"    Calls: oaDualIntArray getDefaultValue() const\n"
"    Signature: getDefaultValue|simple-oaDualIntArray|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_getDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaDualIntArray* result= new oaDualIntArray(data.DataCall()->getDefaultValue());
        return PyoaDualIntArray_FromoaDualIntArray(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_getHeader_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: getHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaInt4 getHeader(oaUInt4 index) const\n"
"    Signature: getHeader|simple-oaInt4|simple-oaUInt4,\n"
"    This function returns a header value for this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_getHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaInt4 result= (data.DataCall()->getHeader(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_getInterpolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: getInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getInterpolateType() const\n"
"    Signature: getInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_getInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_getLowerExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: getLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getLowerExtrapolateType() const\n"
"    Signature: getLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the lower extrapolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_getLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_getName_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: getName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getName(oaString& nameOut) const\n"
"    Signature: getName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of this table.\n"
"    nameOut\n"
"    The returned name.\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa1DLookupTbl_oaInt4_oaDualIntArray, function: getName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_getNumItems_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: getNumItems\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumItems() const\n"
"    Signature: getNumItems|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the allocated size of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_getNumItems(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumItems());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_getUpperExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: getUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getUpperExtrapolateType() const\n"
"    Signature: getUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the upperExtrapolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_getUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_getValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: getValue\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaDualIntArray getValue(oaUInt4 index) const\n"
"    Signature: getValue|simple-oaDualIntArray|simple-oaUInt4,\n"
"    This function gets a return value contained in this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaDualIntArray* result= new oaDualIntArray(data.DataCall()->getValue(p1.Data()));
        return PyoaDualIntArray_FromoaDualIntArray(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_setDefaultValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: setDefaultValue\n"
"  Paramegers: (oaDualIntArray)\n"
"    Calls: void setDefaultValue(oaDualIntArray value)\n"
"    Signature: setDefaultValue|void-void|simple-oaDualIntArray,\n"
"    This function sets the default value of this table to the specified value.\n"
"    value\n"
"    The default value\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_setDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaDualIntArray p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDualIntArray_Convert,&p1)) {
        data.DataCall()->setDefaultValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_setHeader_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: setHeader\n"
"  Paramegers: (oaUInt4,oaInt4)\n"
"    Calls: void setHeader(oaUInt4 index,oaInt4 value)\n"
"    Signature: setHeader|void-void|simple-oaUInt4,simple-oaInt4,\n"
"    This function sets a header value in this table.\n"
"    index\n"
"    The index location in this table. The index must be legal for this table.\n"
"    value\n"
"    The header value\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_setHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        data.DataCall()->setHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_setInterpolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: setInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setInterpolateType(oaInterpolateType type)\n"
"    Signature: setInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_setInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_setLowerExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: setLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type of this table for keys that are below all the header values.\n"
"    type\n"
"    The extrapolation type\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_setLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_setName_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: setName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setName(const oaString& nameIn)\n"
"    Signature: setName|void-void|cref-oaString,\n"
"    This function sets the name of this table to the specified name.\n"
"    nameIn\n"
"    The name of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_setName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_setNumItems_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: setNumItems\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumItems(oaUInt4 numItemsIn)\n"
"    Signature: setNumItems|void-void|simple-oaUInt4,\n"
"    This function sets the allocated size of this table. The previous values will be maintained in the new table if there is room. If the new size is smaller than the previous size then some of the old values will be discarded. If the new size is larger than the previous size then the previous values will still be present in the same index locations.\n"
"    numItemsIn\n"
"    The possible number of items this table can contain\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_setNumItems(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumItems(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_setUpperExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: setUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type of this table for keys that are above all the header values.\n"
"    type\n"
"    The extrapolation type\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_setUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_setValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: setValue\n"
"  Paramegers: (oaUInt4,oaDualIntArray)\n"
"    Calls: void setValue(oaUInt4 index,oaDualIntArray value)\n"
"    Signature: setValue|void-void|simple-oaUInt4,simple-oaDualIntArray,\n"
"    This function sets a return value in this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
"    value\n"
"    The return value\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject* self=(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaDualIntArray p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaDualIntArray_Convert,&p2)) {
        data.DataCall()->setValue(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oa1DLookupTbl_oaInt4_oaDualIntArray_assign_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaDualIntArray_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoa1DLookupTbl_oaInt4_oaDualIntArray data;
  int convert_status=Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoa1DLookupTbl_oaInt4_oaDualIntArray p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oa1DLookupTbl_oaInt4_oaDualIntArray_methodlist[] = {
    {"calcVMSize",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_calcVMSize,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_calcVMSize_doc},
    {"find",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_find,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_find_doc},
    {"getDefaultValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_getDefaultValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_getDefaultValue_doc},
    {"getHeader",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_getHeader,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_getHeader_doc},
    {"getInterpolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_getInterpolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_getInterpolateType_doc},
    {"getLowerExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_getLowerExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_getLowerExtrapolateType_doc},
    {"getName",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_getName,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_getName_doc},
    {"getNumItems",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_getNumItems,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_getNumItems_doc},
    {"getUpperExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_getUpperExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_getUpperExtrapolateType_doc},
    {"getValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_getValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_getValue_doc},
    {"setDefaultValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_setDefaultValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_setDefaultValue_doc},
    {"setHeader",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_setHeader,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_setHeader_doc},
    {"setInterpolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_setInterpolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_setInterpolateType_doc},
    {"setLowerExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_setLowerExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_setLowerExtrapolateType_doc},
    {"setName",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_setName,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_setName_doc},
    {"setNumItems",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_setNumItems,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_setNumItems_doc},
    {"setUpperExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_setUpperExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_setUpperExtrapolateType_doc},
    {"setValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_setValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_setValue_doc},
    {"assign",(PyCFunction)oa1DLookupTbl_oaInt4_oaDualIntArray_tp_assign,METH_VARARGS,oa1DLookupTbl_oaInt4_oaDualIntArray_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaDualIntArray_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaDualIntArray\n"
"  The oa1DLookupTbl class is a template for a one-dimensional lookup table. The table has both header entries and return value entries. When a lookup is performed, the key is compared with the header entries to find its location in that set. The lookup will then return the corresponding return value entry, or a value based on the nearest return value entries.\n"
"  The class is templatized for both the type of the header and the return value entries. At the time that a lookup is performed, the header entries are assumed to be in strictly ascending order. The entries can be out of order while the table is being created or modified.\n"
"  The handling of keys that are not exact header entries is determined by the interpolation and extrapolation types set in the table. Interpolation applies to keys that are within the range of the header entries, and extrapolation applies to keys that are outside of the values in the header. See the classes oaExtrapolateType and oaInterpolateType for more details.\n"
"  The lookup classes (oa1DLookupTbl and oa2DLookupTbl ) are used by OpenAccess to represent values passed to oaValue subclasses -- see oaInt1DTblValue , oaDualInt1DTblValue , oaFlt1DTblValue , oaIntFltTblValue , oaFltIntFltTblValue , and oaAntennaRatioValue for examples of oaValue subclasses that use oa1DLookupTbls. The oaValue subclasses, in turn, are used to associate different values with constraints -- see oaValue() and its subclasses for more information. The oa1DLookupTbl utility class can be used by applications for other purposes as well.\n"
"  Here is an example of an oa1DLookupTbl<oaUInt4, oaFloat>:\n"
"  Index\n"
"  0\n"
"  1\n"
"  2\n"
"  Header\n"
"  4\n"
"  8\n"
"  16\n"
"  Return Value\n"
"  2.2\n"
"  3.3\n"
"  4.4\n"
"  In this example, looking up with a key of 12, midway between the 8 and 12 keys, will return: 3.3 if InterpolateType is set to oacSnapDownInterpolateType 3.85 if InterpolateType is set to oacLinearInterpolateType 4.4 if InterpolateType is set to oacSnapUpInterpolateType\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oa1DLookupTbl_oaInt4_oaDualIntArray()\n"
"    Signature: oa1DLookupTbl_oaInt4_oaDualIntArray||\n"
"    This function constructs an empty oa1DLookupTbl instance to provide a one-dimensional lookup table. The table has a 0 allocated size at this point. oa1DLookupTbl::setNumItems must be called before it can be used.\n"
"  Paramegers: (oa1DLookupTbl_oaInt4_oaDualIntArray)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaDualIntArray(const oa1DLookupTbl_oaInt4_oaDualIntArray& tbl)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaDualIntArray||cref-oa1DLookupTbl_oaInt4_oaDualIntArray,\n"
"    This function constructs an oa1DLookupTbl instance and initializes the table to the values in the argument oa1DLookupTbl tbl .\n"
"    tbl\n"
"    The oa1DLookupTbl to copy\n"
"  Paramegers: (oaUInt4,oaString,oaDualIntArray)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaDualIntArray(oaUInt4 numItemsIn,const oaString& nameIn,oaDualIntArray defaultValue)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaDualIntArray||simple-oaUInt4,cref-oaString,simple-oaDualIntArray,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaDualIntArray,oaInterpolateType)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaDualIntArray(oaUInt4 numItemsIn,const oaString& nameIn,oaDualIntArray defaultValue,oaInterpolateType iTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaDualIntArray||simple-oaUInt4,cref-oaString,simple-oaDualIntArray,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaDualIntArray,oaInterpolateType,oaExtrapolateType)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaDualIntArray(oaUInt4 numItemsIn,const oaString& nameIn,oaDualIntArray defaultValue,oaInterpolateType iTypeIn,oaExtrapolateType eLowerTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaDualIntArray||simple-oaUInt4,cref-oaString,simple-oaDualIntArray,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaDualIntArray,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaDualIntArray(oaUInt4 numItemsIn,const oaString& nameIn,oaDualIntArray defaultValue,oaInterpolateType iTypeIn,oaExtrapolateType eLowerTypeIn,oaExtrapolateType eUpperTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaDualIntArray||simple-oaUInt4,cref-oaString,simple-oaDualIntArray,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oa1DLookupTbl_oaInt4_oaDualIntArray)\n"
"    Calls: (const oa1DLookupTbl_oaInt4_oaDualIntArray&)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaDualIntArray||cref-oa1DLookupTbl_oaInt4_oaDualIntArray,\n"
;

// ------------------------------------------------------------------
PyTypeObject Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oa1DLookupTbl_oaInt4_oaDualIntArray",
    sizeof(Pyoa1DLookupTbl_oaInt4_oaDualIntArrayObject),
    0,
    (destructor)oa1DLookupTbl_oaInt4_oaDualIntArray_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oa1DLookupTbl_oaInt4_oaDualIntArray_tp_compare,	/* tp_compare */
    (reprfunc)oa1DLookupTbl_oaInt4_oaDualIntArray_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oa1DLookupTbl_oaInt4_oaDualIntArray_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oa1DLookupTbl_oaInt4_oaDualIntArray_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oa1DLookupTbl_oaInt4_oaDualIntArray_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
Pyoa1DLookupTbl_oaInt4_oaDualIntArray_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Type)<0) {
      printf("** PyType_Ready failed for: oa1DLookupTbl_oaInt4_oaDualIntArray\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oa1DLookupTbl_oaInt4_oaDualIntArray",
           (PyObject*)(&Pyoa1DLookupTbl_oaInt4_oaDualIntArray_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oa1DLookupTbl_oaInt4_oaDualIntArray\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oa1DLookupTbl_oaInt4_oaFloat
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&Pyoa1DLookupTbl_oaInt4_oaFloat_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self = (Pyoa1DLookupTbl_oaInt4_oaFloatObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oa1DLookupTbl_oaInt4_oaFloat();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oa1DLookupTbl_oaInt4_oaFloat)
    {
        PyParamoa1DLookupTbl_oaInt4_oaFloat p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pyoa1DLookupTbl_oaInt4_oaFloat_Convert,&p1)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaFloat(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        PyParamoaInterpolateType p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        PyParamoaInterpolateType p4;
        PyParamoaExtrapolateType p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4,
              &PyoaExtrapolateType_Convert,&p5)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        PyParamoaInterpolateType p4;
        PyParamoaExtrapolateType p5;
        PyParamoaExtrapolateType p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4,
              &PyoaExtrapolateType_Convert,&p5,
              &PyoaExtrapolateType_Convert,&p6)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oa1DLookupTbl_oaInt4_oaFloat, Choices are:\n"
        "    ()\n"
        "    (oa1DLookupTbl_oaInt4_oaFloat)\n"
        "    (oaUInt4,oaString,oaFloat)\n"
        "    (oaUInt4,oaString,oaFloat,oaInterpolateType)\n"
        "    (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oa1DLookupTbl_oaInt4_oaFloat_tp_dealloc(Pyoa1DLookupTbl_oaInt4_oaFloatObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_tp_repr(PyObject *ob)
{
    PyParamoa1DLookupTbl_oaInt4_oaFloat value;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oa1DLookupTbl_oaInt4_oaFloat::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oa1DLookupTbl_oaInt4_oaFloat_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoa1DLookupTbl_oaInt4_oaFloat v1;
    PyParamoa1DLookupTbl_oaInt4_oaFloat v2;
    int convert_status1=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob1,&v1);
    int convert_status2=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(PyObject* ob,PyParamoa1DLookupTbl_oaInt4_oaFloat* result)
{
    if (ob == NULL) return 1;
    if (Pyoa1DLookupTbl_oaInt4_oaFloat_Check(ob)) {
        result->SetData(  ((Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oa1DLookupTbl_oaInt4_oaFloat Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* Pyoa1DLookupTbl_oaInt4_oaFloat_Fromoa1DLookupTbl_oaInt4_oaFloat(oa1DLookupTbl_oaInt4_oaFloat* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = Pyoa1DLookupTbl_oaInt4_oaFloat_Type.tp_alloc(&Pyoa1DLookupTbl_oaInt4_oaFloat_Type,0);
        if (bself == NULL) return bself;
        Pyoa1DLookupTbl_oaInt4_oaFloatObject* self = (Pyoa1DLookupTbl_oaInt4_oaFloatObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_calcVMSize_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: calcVMSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8 calcVMSize() const\n"
"    Signature: calcVMSize|simple-oaUInt8|\n"
"    BrowseData: 1\n"
"    This utility function returns the number of bytes this object uses in virtual memory.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_calcVMSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8 result= (data.DataCall()->calcVMSize());
        return PyoaUInt8_FromoaUInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_find_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: find\n"
"  Paramegers: (oaInt4)\n"
"    Calls: oaFloat find(oaInt4 key) const\n"
"    Signature: find|simple-oaFloat|simple-oaInt4,\n"
"    This function returns a value based on the specified header key. If the key is not present in the table, the value is interpolated or extrapolated.\n"
"    key\n"
"    The key value to lookup\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt4_Convert,&p1)) {
        oaFloat result= (data.DataCall()->find(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_getDefaultValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: getDefaultValue\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefaultValue() const\n"
"    Signature: getDefaultValue|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_getDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefaultValue());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_getHeader_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: getHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaInt4 getHeader(oaUInt4 index) const\n"
"    Signature: getHeader|simple-oaInt4|simple-oaUInt4,\n"
"    This function returns a header value for this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_getHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaInt4 result= (data.DataCall()->getHeader(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_getInterpolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: getInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getInterpolateType() const\n"
"    Signature: getInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_getInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_getLowerExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: getLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getLowerExtrapolateType() const\n"
"    Signature: getLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the lower extrapolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_getLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_getName_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: getName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getName(oaString& nameOut) const\n"
"    Signature: getName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of this table.\n"
"    nameOut\n"
"    The returned name.\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa1DLookupTbl_oaInt4_oaFloat, function: getName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_getNumItems_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: getNumItems\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumItems() const\n"
"    Signature: getNumItems|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the allocated size of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_getNumItems(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumItems());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_getUpperExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: getUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getUpperExtrapolateType() const\n"
"    Signature: getUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the upperExtrapolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_getUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_getValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: getValue\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaFloat getValue(oaUInt4 index) const\n"
"    Signature: getValue|simple-oaFloat|simple-oaUInt4,\n"
"    This function gets a return value contained in this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaFloat result= (data.DataCall()->getValue(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_setDefaultValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: setDefaultValue\n"
"  Paramegers: (oaFloat)\n"
"    Calls: void setDefaultValue(oaFloat value)\n"
"    Signature: setDefaultValue|void-void|simple-oaFloat,\n"
"    This function sets the default value of this table to the specified value.\n"
"    value\n"
"    The default value\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_setDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaFloat p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloat_Convert,&p1)) {
        data.DataCall()->setDefaultValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_setHeader_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: setHeader\n"
"  Paramegers: (oaUInt4,oaInt4)\n"
"    Calls: void setHeader(oaUInt4 index,oaInt4 value)\n"
"    Signature: setHeader|void-void|simple-oaUInt4,simple-oaInt4,\n"
"    This function sets a header value in this table.\n"
"    index\n"
"    The index location in this table. The index must be legal for this table.\n"
"    value\n"
"    The header value\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_setHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        data.DataCall()->setHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_setInterpolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: setInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setInterpolateType(oaInterpolateType type)\n"
"    Signature: setInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_setInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_setLowerExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: setLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type of this table for keys that are below all the header values.\n"
"    type\n"
"    The extrapolation type\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_setLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_setName_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: setName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setName(const oaString& nameIn)\n"
"    Signature: setName|void-void|cref-oaString,\n"
"    This function sets the name of this table to the specified name.\n"
"    nameIn\n"
"    The name of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_setName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_setNumItems_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: setNumItems\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumItems(oaUInt4 numItemsIn)\n"
"    Signature: setNumItems|void-void|simple-oaUInt4,\n"
"    This function sets the allocated size of this table. The previous values will be maintained in the new table if there is room. If the new size is smaller than the previous size then some of the old values will be discarded. If the new size is larger than the previous size then the previous values will still be present in the same index locations.\n"
"    numItemsIn\n"
"    The possible number of items this table can contain\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_setNumItems(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumItems(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_setUpperExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: setUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type of this table for keys that are above all the header values.\n"
"    type\n"
"    The extrapolation type\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_setUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_setValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: setValue\n"
"  Paramegers: (oaUInt4,oaFloat)\n"
"    Calls: void setValue(oaUInt4 index,oaFloat value)\n"
"    Signature: setValue|void-void|simple-oaUInt4,simple-oaFloat,\n"
"    This function sets a return value in this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
"    value\n"
"    The return value\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        data.DataCall()->setValue(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oa1DLookupTbl_oaInt4_oaFloat_assign_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaFloat_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoa1DLookupTbl_oaInt4_oaFloat data;
  int convert_status=Pyoa1DLookupTbl_oaInt4_oaFloat_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoa1DLookupTbl_oaInt4_oaFloat p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &Pyoa1DLookupTbl_oaInt4_oaFloat_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oa1DLookupTbl_oaInt4_oaFloat_methodlist[] = {
    {"calcVMSize",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_calcVMSize,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_calcVMSize_doc},
    {"find",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_find,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_find_doc},
    {"getDefaultValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_getDefaultValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_getDefaultValue_doc},
    {"getHeader",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_getHeader,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_getHeader_doc},
    {"getInterpolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_getInterpolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_getInterpolateType_doc},
    {"getLowerExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_getLowerExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_getLowerExtrapolateType_doc},
    {"getName",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_getName,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_getName_doc},
    {"getNumItems",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_getNumItems,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_getNumItems_doc},
    {"getUpperExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_getUpperExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_getUpperExtrapolateType_doc},
    {"getValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_getValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_getValue_doc},
    {"setDefaultValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_setDefaultValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_setDefaultValue_doc},
    {"setHeader",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_setHeader,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_setHeader_doc},
    {"setInterpolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_setInterpolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_setInterpolateType_doc},
    {"setLowerExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_setLowerExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_setLowerExtrapolateType_doc},
    {"setName",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_setName,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_setName_doc},
    {"setNumItems",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_setNumItems,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_setNumItems_doc},
    {"setUpperExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_setUpperExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_setUpperExtrapolateType_doc},
    {"setValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_setValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_setValue_doc},
    {"assign",(PyCFunction)oa1DLookupTbl_oaInt4_oaFloat_tp_assign,METH_VARARGS,oa1DLookupTbl_oaInt4_oaFloat_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaFloat_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaFloat\n"
"  The oa1DLookupTbl class is a template for a one-dimensional lookup table. The table has both header entries and return value entries. When a lookup is performed, the key is compared with the header entries to find its location in that set. The lookup will then return the corresponding return value entry, or a value based on the nearest return value entries.\n"
"  The class is templatized for both the type of the header and the return value entries. At the time that a lookup is performed, the header entries are assumed to be in strictly ascending order. The entries can be out of order while the table is being created or modified.\n"
"  The handling of keys that are not exact header entries is determined by the interpolation and extrapolation types set in the table. Interpolation applies to keys that are within the range of the header entries, and extrapolation applies to keys that are outside of the values in the header. See the classes oaExtrapolateType and oaInterpolateType for more details.\n"
"  The lookup classes (oa1DLookupTbl and oa2DLookupTbl ) are used by OpenAccess to represent values passed to oaValue subclasses -- see oaInt1DTblValue , oaDualInt1DTblValue , oaFlt1DTblValue , oaIntFltTblValue , oaFltIntFltTblValue , and oaAntennaRatioValue for examples of oaValue subclasses that use oa1DLookupTbls. The oaValue subclasses, in turn, are used to associate different values with constraints -- see oaValue() and its subclasses for more information. The oa1DLookupTbl utility class can be used by applications for other purposes as well.\n"
"  Here is an example of an oa1DLookupTbl<oaUInt4, oaFloat>:\n"
"  Index\n"
"  0\n"
"  1\n"
"  2\n"
"  Header\n"
"  4\n"
"  8\n"
"  16\n"
"  Return Value\n"
"  2.2\n"
"  3.3\n"
"  4.4\n"
"  In this example, looking up with a key of 12, midway between the 8 and 12 keys, will return: 3.3 if InterpolateType is set to oacSnapDownInterpolateType 3.85 if InterpolateType is set to oacLinearInterpolateType 4.4 if InterpolateType is set to oacSnapUpInterpolateType\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oa1DLookupTbl_oaInt4_oaFloat()\n"
"    Signature: oa1DLookupTbl_oaInt4_oaFloat||\n"
"    This function constructs an empty oa1DLookupTbl instance to provide a one-dimensional lookup table. The table has a 0 allocated size at this point. oa1DLookupTbl::setNumItems must be called before it can be used.\n"
"  Paramegers: (oa1DLookupTbl_oaInt4_oaFloat)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaFloat(const oa1DLookupTbl_oaInt4_oaFloat& tbl)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaFloat||cref-oa1DLookupTbl_oaInt4_oaFloat,\n"
"    This function constructs an oa1DLookupTbl instance and initializes the table to the values in the argument oa1DLookupTbl tbl .\n"
"    tbl\n"
"    The oa1DLookupTbl to copy\n"
"  Paramegers: (oaUInt4,oaString,oaFloat)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaFloat,oaInterpolateType)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue,oaInterpolateType iTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue,oaInterpolateType iTypeIn,oaExtrapolateType eLowerTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue,oaInterpolateType iTypeIn,oaExtrapolateType eLowerTypeIn,oaExtrapolateType eUpperTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oa1DLookupTbl_oaInt4_oaFloat)\n"
"    Calls: (const oa1DLookupTbl_oaInt4_oaFloat&)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaFloat||cref-oa1DLookupTbl_oaInt4_oaFloat,\n"
;

// ------------------------------------------------------------------
PyTypeObject Pyoa1DLookupTbl_oaInt4_oaFloat_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oa1DLookupTbl_oaInt4_oaFloat",
    sizeof(Pyoa1DLookupTbl_oaInt4_oaFloatObject),
    0,
    (destructor)oa1DLookupTbl_oaInt4_oaFloat_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oa1DLookupTbl_oaInt4_oaFloat_tp_compare,	/* tp_compare */
    (reprfunc)oa1DLookupTbl_oaInt4_oaFloat_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oa1DLookupTbl_oaInt4_oaFloat_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oa1DLookupTbl_oaInt4_oaFloat_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oa1DLookupTbl_oaInt4_oaFloat_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
Pyoa1DLookupTbl_oaInt4_oaFloat_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&Pyoa1DLookupTbl_oaInt4_oaFloat_Type)<0) {
      printf("** PyType_Ready failed for: oa1DLookupTbl_oaInt4_oaFloat\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oa1DLookupTbl_oaInt4_oaFloat",
           (PyObject*)(&Pyoa1DLookupTbl_oaInt4_oaFloat_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oa1DLookupTbl_oaInt4_oaFloat\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oa1DLookupTbl_oaInt4_oaInt4
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&Pyoa1DLookupTbl_oaInt4_oaInt4_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self = (Pyoa1DLookupTbl_oaInt4_oaInt4Object*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oa1DLookupTbl_oaInt4_oaInt4();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oa1DLookupTbl_oaInt4_oaInt4)
    {
        PyParamoa1DLookupTbl_oaInt4_oaInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pyoa1DLookupTbl_oaInt4_oaInt4_Convert,&p1)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaInt4(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaInt4)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaInt4_Convert,&p3)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaInt4,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaInt4 p3;
        PyParamoaInterpolateType p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data(),p4.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaInt4,oaInterpolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaInt4 p3;
        PyParamoaInterpolateType p4;
        PyParamoaExtrapolateType p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4,
              &PyoaExtrapolateType_Convert,&p5)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaInt4,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaInt4 p3;
        PyParamoaInterpolateType p4;
        PyParamoaExtrapolateType p5;
        PyParamoaExtrapolateType p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaInt4_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4,
              &PyoaExtrapolateType_Convert,&p5,
              &PyoaExtrapolateType_Convert,&p6)) {
            self->value =  new oa1DLookupTbl_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oa1DLookupTbl_oaInt4_oaInt4, Choices are:\n"
        "    ()\n"
        "    (oa1DLookupTbl_oaInt4_oaInt4)\n"
        "    (oaUInt4,oaString,oaInt4)\n"
        "    (oaUInt4,oaString,oaInt4,oaInterpolateType)\n"
        "    (oaUInt4,oaString,oaInt4,oaInterpolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaString,oaInt4,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oa1DLookupTbl_oaInt4_oaInt4_tp_dealloc(Pyoa1DLookupTbl_oaInt4_oaInt4Object* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_tp_repr(PyObject *ob)
{
    PyParamoa1DLookupTbl_oaInt4_oaInt4 value;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oa1DLookupTbl_oaInt4_oaInt4::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oa1DLookupTbl_oaInt4_oaInt4_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoa1DLookupTbl_oaInt4_oaInt4 v1;
    PyParamoa1DLookupTbl_oaInt4_oaInt4 v2;
    int convert_status1=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob1,&v1);
    int convert_status2=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(PyObject* ob,PyParamoa1DLookupTbl_oaInt4_oaInt4* result)
{
    if (ob == NULL) return 1;
    if (Pyoa1DLookupTbl_oaInt4_oaInt4_Check(ob)) {
        result->SetData(  ((Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oa1DLookupTbl_oaInt4_oaInt4 Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* Pyoa1DLookupTbl_oaInt4_oaInt4_Fromoa1DLookupTbl_oaInt4_oaInt4(oa1DLookupTbl_oaInt4_oaInt4* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = Pyoa1DLookupTbl_oaInt4_oaInt4_Type.tp_alloc(&Pyoa1DLookupTbl_oaInt4_oaInt4_Type,0);
        if (bself == NULL) return bself;
        Pyoa1DLookupTbl_oaInt4_oaInt4Object* self = (Pyoa1DLookupTbl_oaInt4_oaInt4Object*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_calcVMSize_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: calcVMSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8 calcVMSize() const\n"
"    Signature: calcVMSize|simple-oaUInt8|\n"
"    BrowseData: 1\n"
"    This utility function returns the number of bytes this object uses in virtual memory.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_calcVMSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8 result= (data.DataCall()->calcVMSize());
        return PyoaUInt8_FromoaUInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_find_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: find\n"
"  Paramegers: (oaInt4)\n"
"    Calls: oaInt4 find(oaInt4 key) const\n"
"    Signature: find|simple-oaInt4|simple-oaInt4,\n"
"    This function returns a value based on the specified header key. If the key is not present in the table, the value is interpolated or extrapolated.\n"
"    key\n"
"    The key value to lookup\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt4_Convert,&p1)) {
        oaInt4 result= (data.DataCall()->find(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_getDefaultValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: getDefaultValue\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefaultValue() const\n"
"    Signature: getDefaultValue|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_getDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefaultValue());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_getHeader_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: getHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaInt4 getHeader(oaUInt4 index) const\n"
"    Signature: getHeader|simple-oaInt4|simple-oaUInt4,\n"
"    This function returns a header value for this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_getHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaInt4 result= (data.DataCall()->getHeader(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_getInterpolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: getInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getInterpolateType() const\n"
"    Signature: getInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_getInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_getLowerExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: getLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getLowerExtrapolateType() const\n"
"    Signature: getLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the lower extrapolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_getLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_getName_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: getName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getName(oaString& nameOut) const\n"
"    Signature: getName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of this table.\n"
"    nameOut\n"
"    The returned name.\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa1DLookupTbl_oaInt4_oaInt4, function: getName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_getNumItems_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: getNumItems\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumItems() const\n"
"    Signature: getNumItems|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the allocated size of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_getNumItems(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumItems());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_getUpperExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: getUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getUpperExtrapolateType() const\n"
"    Signature: getUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the upperExtrapolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_getUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_getValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: getValue\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaInt4 getValue(oaUInt4 index) const\n"
"    Signature: getValue|simple-oaInt4|simple-oaUInt4,\n"
"    This function gets a return value contained in this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaInt4 result= (data.DataCall()->getValue(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_setDefaultValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: setDefaultValue\n"
"  Paramegers: (oaInt4)\n"
"    Calls: void setDefaultValue(oaInt4 value)\n"
"    Signature: setDefaultValue|void-void|simple-oaInt4,\n"
"    This function sets the default value of this table to the specified value.\n"
"    value\n"
"    The default value\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_setDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt4_Convert,&p1)) {
        data.DataCall()->setDefaultValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_setHeader_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: setHeader\n"
"  Paramegers: (oaUInt4,oaInt4)\n"
"    Calls: void setHeader(oaUInt4 index,oaInt4 value)\n"
"    Signature: setHeader|void-void|simple-oaUInt4,simple-oaInt4,\n"
"    This function sets a header value in this table.\n"
"    index\n"
"    The index location in this table. The index must be legal for this table.\n"
"    value\n"
"    The header value\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_setHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        data.DataCall()->setHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_setInterpolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: setInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setInterpolateType(oaInterpolateType type)\n"
"    Signature: setInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_setInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_setLowerExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: setLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type of this table for keys that are below all the header values.\n"
"    type\n"
"    The extrapolation type\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_setLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_setName_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: setName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setName(const oaString& nameIn)\n"
"    Signature: setName|void-void|cref-oaString,\n"
"    This function sets the name of this table to the specified name.\n"
"    nameIn\n"
"    The name of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_setName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_setNumItems_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: setNumItems\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumItems(oaUInt4 numItemsIn)\n"
"    Signature: setNumItems|void-void|simple-oaUInt4,\n"
"    This function sets the allocated size of this table. The previous values will be maintained in the new table if there is room. If the new size is smaller than the previous size then some of the old values will be discarded. If the new size is larger than the previous size then the previous values will still be present in the same index locations.\n"
"    numItemsIn\n"
"    The possible number of items this table can contain\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_setNumItems(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumItems(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_setUpperExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: setUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type of this table for keys that are above all the header values.\n"
"    type\n"
"    The extrapolation type\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_setUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_setValue_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: setValue\n"
"  Paramegers: (oaUInt4,oaInt4)\n"
"    Calls: void setValue(oaUInt4 index,oaInt4 value)\n"
"    Signature: setValue|void-void|simple-oaUInt4,simple-oaInt4,\n"
"    This function sets a return value in this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
"    value\n"
"    The return value\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
    int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt4_oaInt4Object* self=(Pyoa1DLookupTbl_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        data.DataCall()->setValue(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oa1DLookupTbl_oaInt4_oaInt4_assign_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oa1DLookupTbl_oaInt4_oaInt4_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoa1DLookupTbl_oaInt4_oaInt4 data;
  int convert_status=Pyoa1DLookupTbl_oaInt4_oaInt4_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoa1DLookupTbl_oaInt4_oaInt4 p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &Pyoa1DLookupTbl_oaInt4_oaInt4_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oa1DLookupTbl_oaInt4_oaInt4_methodlist[] = {
    {"calcVMSize",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_calcVMSize,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_calcVMSize_doc},
    {"find",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_find,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_find_doc},
    {"getDefaultValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_getDefaultValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_getDefaultValue_doc},
    {"getHeader",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_getHeader,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_getHeader_doc},
    {"getInterpolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_getInterpolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_getInterpolateType_doc},
    {"getLowerExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_getLowerExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_getLowerExtrapolateType_doc},
    {"getName",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_getName,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_getName_doc},
    {"getNumItems",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_getNumItems,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_getNumItems_doc},
    {"getUpperExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_getUpperExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_getUpperExtrapolateType_doc},
    {"getValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_getValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_getValue_doc},
    {"setDefaultValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_setDefaultValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_setDefaultValue_doc},
    {"setHeader",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_setHeader,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_setHeader_doc},
    {"setInterpolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_setInterpolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_setInterpolateType_doc},
    {"setLowerExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_setLowerExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_setLowerExtrapolateType_doc},
    {"setName",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_setName,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_setName_doc},
    {"setNumItems",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_setNumItems,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_setNumItems_doc},
    {"setUpperExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_setUpperExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_setUpperExtrapolateType_doc},
    {"setValue",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_setValue,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_setValue_doc},
    {"assign",(PyCFunction)oa1DLookupTbl_oaInt4_oaInt4_tp_assign,METH_VARARGS,oa1DLookupTbl_oaInt4_oaInt4_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt4_oaInt4_doc[] = 
"Class: oa1DLookupTbl_oaInt4_oaInt4\n"
"  The oa1DLookupTbl class is a template for a one-dimensional lookup table. The table has both header entries and return value entries. When a lookup is performed, the key is compared with the header entries to find its location in that set. The lookup will then return the corresponding return value entry, or a value based on the nearest return value entries.\n"
"  The class is templatized for both the type of the header and the return value entries. At the time that a lookup is performed, the header entries are assumed to be in strictly ascending order. The entries can be out of order while the table is being created or modified.\n"
"  The handling of keys that are not exact header entries is determined by the interpolation and extrapolation types set in the table. Interpolation applies to keys that are within the range of the header entries, and extrapolation applies to keys that are outside of the values in the header. See the classes oaExtrapolateType and oaInterpolateType for more details.\n"
"  The lookup classes (oa1DLookupTbl and oa2DLookupTbl ) are used by OpenAccess to represent values passed to oaValue subclasses -- see oaInt1DTblValue , oaDualInt1DTblValue , oaFlt1DTblValue , oaIntFltTblValue , oaFltIntFltTblValue , and oaAntennaRatioValue for examples of oaValue subclasses that use oa1DLookupTbls. The oaValue subclasses, in turn, are used to associate different values with constraints -- see oaValue() and its subclasses for more information. The oa1DLookupTbl utility class can be used by applications for other purposes as well.\n"
"  Here is an example of an oa1DLookupTbl<oaUInt4, oaFloat>:\n"
"  Index\n"
"  0\n"
"  1\n"
"  2\n"
"  Header\n"
"  4\n"
"  8\n"
"  16\n"
"  Return Value\n"
"  2.2\n"
"  3.3\n"
"  4.4\n"
"  In this example, looking up with a key of 12, midway between the 8 and 12 keys, will return: 3.3 if InterpolateType is set to oacSnapDownInterpolateType 3.85 if InterpolateType is set to oacLinearInterpolateType 4.4 if InterpolateType is set to oacSnapUpInterpolateType\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oa1DLookupTbl_oaInt4_oaInt4()\n"
"    Signature: oa1DLookupTbl_oaInt4_oaInt4||\n"
"    This function constructs an empty oa1DLookupTbl instance to provide a one-dimensional lookup table. The table has a 0 allocated size at this point. oa1DLookupTbl::setNumItems must be called before it can be used.\n"
"  Paramegers: (oa1DLookupTbl_oaInt4_oaInt4)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaInt4(const oa1DLookupTbl_oaInt4_oaInt4& tbl)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaInt4||cref-oa1DLookupTbl_oaInt4_oaInt4,\n"
"    This function constructs an oa1DLookupTbl instance and initializes the table to the values in the argument oa1DLookupTbl tbl .\n"
"    tbl\n"
"    The oa1DLookupTbl to copy\n"
"  Paramegers: (oaUInt4,oaString,oaInt4)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaInt4(oaUInt4 numItemsIn,const oaString& nameIn,oaInt4 defaultValue)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaInt4||simple-oaUInt4,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaInt4,oaInterpolateType)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaInt4(oaUInt4 numItemsIn,const oaString& nameIn,oaInt4 defaultValue,oaInterpolateType iTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaInt4||simple-oaUInt4,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaInt4,oaInterpolateType,oaExtrapolateType)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaInt4(oaUInt4 numItemsIn,const oaString& nameIn,oaInt4 defaultValue,oaInterpolateType iTypeIn,oaExtrapolateType eLowerTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaInt4||simple-oaUInt4,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaInt4,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa1DLookupTbl_oaInt4_oaInt4(oaUInt4 numItemsIn,const oaString& nameIn,oaInt4 defaultValue,oaInterpolateType iTypeIn,oaExtrapolateType eLowerTypeIn,oaExtrapolateType eUpperTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaInt4||simple-oaUInt4,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oa1DLookupTbl_oaInt4_oaInt4)\n"
"    Calls: (const oa1DLookupTbl_oaInt4_oaInt4&)\n"
"    Signature: oa1DLookupTbl_oaInt4_oaInt4||cref-oa1DLookupTbl_oaInt4_oaInt4,\n"
;

// ------------------------------------------------------------------
PyTypeObject Pyoa1DLookupTbl_oaInt4_oaInt4_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oa1DLookupTbl_oaInt4_oaInt4",
    sizeof(Pyoa1DLookupTbl_oaInt4_oaInt4Object),
    0,
    (destructor)oa1DLookupTbl_oaInt4_oaInt4_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oa1DLookupTbl_oaInt4_oaInt4_tp_compare,	/* tp_compare */
    (reprfunc)oa1DLookupTbl_oaInt4_oaInt4_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oa1DLookupTbl_oaInt4_oaInt4_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oa1DLookupTbl_oaInt4_oaInt4_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oa1DLookupTbl_oaInt4_oaInt4_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
Pyoa1DLookupTbl_oaInt4_oaInt4_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&Pyoa1DLookupTbl_oaInt4_oaInt4_Type)<0) {
      printf("** PyType_Ready failed for: oa1DLookupTbl_oaInt4_oaInt4\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oa1DLookupTbl_oaInt4_oaInt4",
           (PyObject*)(&Pyoa1DLookupTbl_oaInt4_oaInt4_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oa1DLookupTbl_oaInt4_oaInt4\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oa1DLookupTbl_oaInt8_oaFloat
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&Pyoa1DLookupTbl_oaInt8_oaFloat_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self = (Pyoa1DLookupTbl_oaInt8_oaFloatObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oa1DLookupTbl_oaInt8_oaFloat();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oa1DLookupTbl_oaInt8_oaFloat)
    {
        PyParamoa1DLookupTbl_oaInt8_oaFloat p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pyoa1DLookupTbl_oaInt8_oaFloat_Convert,&p1)) {
            self->value =  new oa1DLookupTbl_oaInt8_oaFloat(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            self->value =  new oa1DLookupTbl_oaInt8_oaFloat(p1.Data(),p2.Data(),p3.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        PyParamoaInterpolateType p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4)) {
            self->value =  new oa1DLookupTbl_oaInt8_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        PyParamoaInterpolateType p4;
        PyParamoaExtrapolateType p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4,
              &PyoaExtrapolateType_Convert,&p5)) {
            self->value =  new oa1DLookupTbl_oaInt8_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaString p2;
        PyParamoaFloat p3;
        PyParamoaInterpolateType p4;
        PyParamoaExtrapolateType p5;
        PyParamoaExtrapolateType p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaInterpolateType_Convert,&p4,
              &PyoaExtrapolateType_Convert,&p5,
              &PyoaExtrapolateType_Convert,&p6)) {
            self->value =  new oa1DLookupTbl_oaInt8_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oa1DLookupTbl_oaInt8_oaFloat, Choices are:\n"
        "    ()\n"
        "    (oa1DLookupTbl_oaInt8_oaFloat)\n"
        "    (oaUInt4,oaString,oaFloat)\n"
        "    (oaUInt4,oaString,oaFloat,oaInterpolateType)\n"
        "    (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oa1DLookupTbl_oaInt8_oaFloat_tp_dealloc(Pyoa1DLookupTbl_oaInt8_oaFloatObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_tp_repr(PyObject *ob)
{
    PyParamoa1DLookupTbl_oaInt8_oaFloat value;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oa1DLookupTbl_oaInt8_oaFloat::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oa1DLookupTbl_oaInt8_oaFloat_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoa1DLookupTbl_oaInt8_oaFloat v1;
    PyParamoa1DLookupTbl_oaInt8_oaFloat v2;
    int convert_status1=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob1,&v1);
    int convert_status2=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(PyObject* ob,PyParamoa1DLookupTbl_oaInt8_oaFloat* result)
{
    if (ob == NULL) return 1;
    if (Pyoa1DLookupTbl_oaInt8_oaFloat_Check(ob)) {
        result->SetData(  ((Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oa1DLookupTbl_oaInt8_oaFloat Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* Pyoa1DLookupTbl_oaInt8_oaFloat_Fromoa1DLookupTbl_oaInt8_oaFloat(oa1DLookupTbl_oaInt8_oaFloat* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = Pyoa1DLookupTbl_oaInt8_oaFloat_Type.tp_alloc(&Pyoa1DLookupTbl_oaInt8_oaFloat_Type,0);
        if (bself == NULL) return bself;
        Pyoa1DLookupTbl_oaInt8_oaFloatObject* self = (Pyoa1DLookupTbl_oaInt8_oaFloatObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_calcVMSize_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: calcVMSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8 calcVMSize() const\n"
"    Signature: calcVMSize|simple-oaUInt8|\n"
"    BrowseData: 1\n"
"    This utility function returns the number of bytes this object uses in virtual memory.\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_calcVMSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8 result= (data.DataCall()->calcVMSize());
        return PyoaUInt8_FromoaUInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_find_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: find\n"
"  Paramegers: (oaInt8)\n"
"    Calls: oaFloat find(oaInt8 key) const\n"
"    Signature: find|simple-oaFloat|simple-oaInt8,\n"
"    This function returns a value based on the specified header key. If the key is not present in the table, the value is interpolated or extrapolated.\n"
"    key\n"
"    The key value to lookup\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaInt8 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt8_Convert,&p1)) {
        oaFloat result= (data.DataCall()->find(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_getDefaultValue_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: getDefaultValue\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefaultValue() const\n"
"    Signature: getDefaultValue|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_getDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefaultValue());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_getHeader_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: getHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaInt8 getHeader(oaUInt4 index) const\n"
"    Signature: getHeader|simple-oaInt8|simple-oaUInt4,\n"
"    This function returns a header value for this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_getHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaInt8 result= (data.DataCall()->getHeader(p1.Data()));
        return PyoaInt8_FromoaInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_getInterpolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: getInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getInterpolateType() const\n"
"    Signature: getInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_getInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_getLowerExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: getLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getLowerExtrapolateType() const\n"
"    Signature: getLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the lower extrapolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_getLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_getName_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: getName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getName(oaString& nameOut) const\n"
"    Signature: getName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of this table.\n"
"    nameOut\n"
"    The returned name.\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa1DLookupTbl_oaInt8_oaFloat, function: getName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_getNumItems_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: getNumItems\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumItems() const\n"
"    Signature: getNumItems|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the allocated size of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_getNumItems(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumItems());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_getUpperExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: getUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getUpperExtrapolateType() const\n"
"    Signature: getUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the upperExtrapolation type of the table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_getUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_getValue_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: getValue\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaFloat getValue(oaUInt4 index) const\n"
"    Signature: getValue|simple-oaFloat|simple-oaUInt4,\n"
"    This function gets a return value contained in this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaFloat result= (data.DataCall()->getValue(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_setDefaultValue_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: setDefaultValue\n"
"  Paramegers: (oaFloat)\n"
"    Calls: void setDefaultValue(oaFloat value)\n"
"    Signature: setDefaultValue|void-void|simple-oaFloat,\n"
"    This function sets the default value of this table to the specified value.\n"
"    value\n"
"    The default value\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_setDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaFloat p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloat_Convert,&p1)) {
        data.DataCall()->setDefaultValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_setHeader_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: setHeader\n"
"  Paramegers: (oaUInt4,oaInt8)\n"
"    Calls: void setHeader(oaUInt4 index,oaInt8 value)\n"
"    Signature: setHeader|void-void|simple-oaUInt4,simple-oaInt8,\n"
"    This function sets a header value in this table.\n"
"    index\n"
"    The index location in this table. The index must be legal for this table.\n"
"    value\n"
"    The header value\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_setHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaInt8 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaInt8_Convert,&p2)) {
        data.DataCall()->setHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_setInterpolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: setInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setInterpolateType(oaInterpolateType type)\n"
"    Signature: setInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_setInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_setLowerExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: setLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type of this table for keys that are below all the header values.\n"
"    type\n"
"    The extrapolation type\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_setLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_setName_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: setName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setName(const oaString& nameIn)\n"
"    Signature: setName|void-void|cref-oaString,\n"
"    This function sets the name of this table to the specified name.\n"
"    nameIn\n"
"    The name of this table.\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_setName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_setNumItems_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: setNumItems\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumItems(oaUInt4 numItemsIn)\n"
"    Signature: setNumItems|void-void|simple-oaUInt4,\n"
"    This function sets the allocated size of this table. The previous values will be maintained in the new table if there is room. If the new size is smaller than the previous size then some of the old values will be discarded. If the new size is larger than the previous size then the previous values will still be present in the same index locations.\n"
"    numItemsIn\n"
"    The possible number of items this table can contain\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_setNumItems(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumItems(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_setUpperExtrapolateType_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: setUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type of this table for keys that are above all the header values.\n"
"    type\n"
"    The extrapolation type\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_setUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_setValue_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: setValue\n"
"  Paramegers: (oaUInt4,oaFloat)\n"
"    Calls: void setValue(oaUInt4 index,oaFloat value)\n"
"    Signature: setValue|void-void|simple-oaUInt4,simple-oaFloat,\n"
"    This function sets a return value in this table. The index must be legal for this table.\n"
"    index\n"
"    The index location in this table\n"
"    value\n"
"    The return value\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat data;
    int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa1DLookupTbl_oaInt8_oaFloatObject* self=(Pyoa1DLookupTbl_oaInt8_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        data.DataCall()->setValue(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oa1DLookupTbl_oaInt8_oaFloat_assign_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oa1DLookupTbl_oaInt8_oaFloat_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoa1DLookupTbl_oaInt8_oaFloat data;
  int convert_status=Pyoa1DLookupTbl_oaInt8_oaFloat_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoa1DLookupTbl_oaInt8_oaFloat p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &Pyoa1DLookupTbl_oaInt8_oaFloat_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oa1DLookupTbl_oaInt8_oaFloat_methodlist[] = {
    {"calcVMSize",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_calcVMSize,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_calcVMSize_doc},
    {"find",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_find,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_find_doc},
    {"getDefaultValue",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_getDefaultValue,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_getDefaultValue_doc},
    {"getHeader",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_getHeader,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_getHeader_doc},
    {"getInterpolateType",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_getInterpolateType,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_getInterpolateType_doc},
    {"getLowerExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_getLowerExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_getLowerExtrapolateType_doc},
    {"getName",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_getName,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_getName_doc},
    {"getNumItems",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_getNumItems,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_getNumItems_doc},
    {"getUpperExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_getUpperExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_getUpperExtrapolateType_doc},
    {"getValue",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_getValue,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_getValue_doc},
    {"setDefaultValue",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_setDefaultValue,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_setDefaultValue_doc},
    {"setHeader",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_setHeader,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_setHeader_doc},
    {"setInterpolateType",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_setInterpolateType,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_setInterpolateType_doc},
    {"setLowerExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_setLowerExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_setLowerExtrapolateType_doc},
    {"setName",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_setName,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_setName_doc},
    {"setNumItems",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_setNumItems,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_setNumItems_doc},
    {"setUpperExtrapolateType",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_setUpperExtrapolateType,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_setUpperExtrapolateType_doc},
    {"setValue",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_setValue,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_setValue_doc},
    {"assign",(PyCFunction)oa1DLookupTbl_oaInt8_oaFloat_tp_assign,METH_VARARGS,oa1DLookupTbl_oaInt8_oaFloat_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa1DLookupTbl_oaInt8_oaFloat_doc[] = 
"Class: oa1DLookupTbl_oaInt8_oaFloat\n"
"  The oa1DLookupTbl class is a template for a one-dimensional lookup table. The table has both header entries and return value entries. When a lookup is performed, the key is compared with the header entries to find its location in that set. The lookup will then return the corresponding return value entry, or a value based on the nearest return value entries.\n"
"  The class is templatized for both the type of the header and the return value entries. At the time that a lookup is performed, the header entries are assumed to be in strictly ascending order. The entries can be out of order while the table is being created or modified.\n"
"  The handling of keys that are not exact header entries is determined by the interpolation and extrapolation types set in the table. Interpolation applies to keys that are within the range of the header entries, and extrapolation applies to keys that are outside of the values in the header. See the classes oaExtrapolateType and oaInterpolateType for more details.\n"
"  The lookup classes (oa1DLookupTbl and oa2DLookupTbl ) are used by OpenAccess to represent values passed to oaValue subclasses -- see oaInt1DTblValue , oaDualInt1DTblValue , oaFlt1DTblValue , oaIntFltTblValue , oaFltIntFltTblValue , and oaAntennaRatioValue for examples of oaValue subclasses that use oa1DLookupTbls. The oaValue subclasses, in turn, are used to associate different values with constraints -- see oaValue() and its subclasses for more information. The oa1DLookupTbl utility class can be used by applications for other purposes as well.\n"
"  Here is an example of an oa1DLookupTbl<oaUInt4, oaFloat>:\n"
"  Index\n"
"  0\n"
"  1\n"
"  2\n"
"  Header\n"
"  4\n"
"  8\n"
"  16\n"
"  Return Value\n"
"  2.2\n"
"  3.3\n"
"  4.4\n"
"  In this example, looking up with a key of 12, midway between the 8 and 12 keys, will return: 3.3 if InterpolateType is set to oacSnapDownInterpolateType 3.85 if InterpolateType is set to oacLinearInterpolateType 4.4 if InterpolateType is set to oacSnapUpInterpolateType\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oa1DLookupTbl_oaInt8_oaFloat()\n"
"    Signature: oa1DLookupTbl_oaInt8_oaFloat||\n"
"    This function constructs an empty oa1DLookupTbl instance to provide a one-dimensional lookup table. The table has a 0 allocated size at this point. oa1DLookupTbl::setNumItems must be called before it can be used.\n"
"  Paramegers: (oa1DLookupTbl_oaInt8_oaFloat)\n"
"    Calls: oa1DLookupTbl_oaInt8_oaFloat(const oa1DLookupTbl_oaInt8_oaFloat& tbl)\n"
"    Signature: oa1DLookupTbl_oaInt8_oaFloat||cref-oa1DLookupTbl_oaInt8_oaFloat,\n"
"    This function constructs an oa1DLookupTbl instance and initializes the table to the values in the argument oa1DLookupTbl tbl .\n"
"    tbl\n"
"    The oa1DLookupTbl to copy\n"
"  Paramegers: (oaUInt4,oaString,oaFloat)\n"
"    Calls: oa1DLookupTbl_oaInt8_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue)\n"
"    Signature: oa1DLookupTbl_oaInt8_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaFloat,oaInterpolateType)\n"
"    Calls: oa1DLookupTbl_oaInt8_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue,oaInterpolateType iTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt8_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType)\n"
"    Calls: oa1DLookupTbl_oaInt8_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue,oaInterpolateType iTypeIn,oaExtrapolateType eLowerTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt8_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oaUInt4,oaString,oaFloat,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa1DLookupTbl_oaInt8_oaFloat(oaUInt4 numItemsIn,const oaString& nameIn,oaFloat defaultValue,oaInterpolateType iTypeIn,oaExtrapolateType eLowerTypeIn,oaExtrapolateType eUpperTypeIn)\n"
"    Signature: oa1DLookupTbl_oaInt8_oaFloat||simple-oaUInt4,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa1DLookupTbl instance using the specified values to provide a template for a one-dimensional lookup table.\n"
"    numItemsIn\n"
"    The number of items to allocate for the table\n"
"    nameIn\n"
"    The name of this table\n"
"    defaultValue\n"
"    The default value for the table\n"
"    iTypeIn\n"
"    The interpolation to apply for keys that are between header values\n"
"    eLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all header values.\n"
"    eUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all header values.\n"
"  Paramegers: (oa1DLookupTbl_oaInt8_oaFloat)\n"
"    Calls: (const oa1DLookupTbl_oaInt8_oaFloat&)\n"
"    Signature: oa1DLookupTbl_oaInt8_oaFloat||cref-oa1DLookupTbl_oaInt8_oaFloat,\n"
;

// ------------------------------------------------------------------
PyTypeObject Pyoa1DLookupTbl_oaInt8_oaFloat_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oa1DLookupTbl_oaInt8_oaFloat",
    sizeof(Pyoa1DLookupTbl_oaInt8_oaFloatObject),
    0,
    (destructor)oa1DLookupTbl_oaInt8_oaFloat_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oa1DLookupTbl_oaInt8_oaFloat_tp_compare,	/* tp_compare */
    (reprfunc)oa1DLookupTbl_oaInt8_oaFloat_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oa1DLookupTbl_oaInt8_oaFloat_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oa1DLookupTbl_oaInt8_oaFloat_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oa1DLookupTbl_oaInt8_oaFloat_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
Pyoa1DLookupTbl_oaInt8_oaFloat_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&Pyoa1DLookupTbl_oaInt8_oaFloat_Type)<0) {
      printf("** PyType_Ready failed for: oa1DLookupTbl_oaInt8_oaFloat\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oa1DLookupTbl_oaInt8_oaFloat",
           (PyObject*)(&Pyoa1DLookupTbl_oaInt8_oaFloat_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oa1DLookupTbl_oaInt8_oaFloat\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self = (Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oa2DLookupTbl_oaFloat_oaFloat_oaFloat();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oa2DLookupTbl_oaFloat_oaFloat_oaFloat)
    {
        PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert,&p1)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaFloat_oaFloat(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        PyParamoaExtrapolateType p10;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9,
              &PyoaExtrapolateType_Convert,&p10)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        PyParamoaExtrapolateType p10;
        PyParamoaExtrapolateType p11;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9,
              &PyoaExtrapolateType_Convert,&p10,
              &PyoaExtrapolateType_Convert,&p11)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaFloat_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data(),p11.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Choices are:\n"
        "    ()\n"
        "    (oa2DLookupTbl_oaFloat_oaFloat_oaFloat)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_tp_dealloc(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_tp_repr(PyObject *ob)
{
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat value;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[59];
    sprintf(buffer,"<oa2DLookupTbl_oaFloat_oaFloat_oaFloat::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat v1;
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat v2;
    int convert_status1=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob1,&v1);
    int convert_status2=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(PyObject* ob,PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat* result)
{
    if (ob == NULL) return 1;
    if (Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Check(ob)) {
        result->SetData(  ((Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Fromoa2DLookupTbl_oaFloat_oaFloat_oaFloat(oa2DLookupTbl_oaFloat_oaFloat_oaFloat* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Type.tp_alloc(&Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Type,0);
        if (bself == NULL) return bself;
        Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self = (Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_calcVMSize_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: calcVMSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8 calcVMSize() const\n"
"    Signature: calcVMSize|simple-oaUInt8|\n"
"    BrowseData: 1\n"
"    This function returns the number of bytes this object uses in virtual memory.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_calcVMSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8 result= (data.DataCall()->calcVMSize());
        return PyoaUInt8_FromoaUInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_find_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: find\n"
"  Paramegers: (oaFloat,oaFloat)\n"
"    Calls: oaFloat find(oaFloat rowKey,oaFloat colKey) const\n"
"    Signature: find|simple-oaFloat|simple-oaFloat,simple-oaFloat,\n"
"    This function returns a value based on the specified row and column keys. If the specified keys are not present in the table, the value is interpolated or extrapolated.\n"
"    rowKey\n"
"    The row value to find\n"
"    colKey\n"
"    The column value to find\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaFloat p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFloat_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        oaFloat result= (data.DataCall()->find(p1.Data(),p2.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColHeader_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getColHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaFloat getColHeader(oaUInt4 index) const\n"
"    Signature: getColHeader|simple-oaFloat|simple-oaUInt4,\n"
"    This function returns a value from the column header for this table.\n"
"    index\n"
"    The index location in the column header. This index must be a legal index for the columns in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaFloat result= (data.DataCall()->getColHeader(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getColInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getColInterpolateType() const\n"
"    Signature: getColInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type which is applied to keys that are between the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getColInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getColLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getColLowerExtrapolateType() const\n"
"    Signature: getColLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are below to the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getColLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColName_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getColName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getColName(oaString& name) const\n"
"    Signature: getColName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the column header of this table.\n"
"    name\n"
"    The returned column header name\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getColName() const\n"
"    Signature: getColName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the column header of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getColName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getColName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, function: getColName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getColUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getColUpperExtrapolateType() const\n"
"    Signature: getColUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are above to the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getColUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getDefaultValue_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getDefaultValue\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefaultValue() const\n"
"    Signature: getDefaultValue|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefaultValue());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getNumCols_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getNumCols\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumCols() const\n"
"    Signature: getNumCols|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of allocated columns in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getNumCols(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumCols());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getNumRows_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getNumRows\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumRows() const\n"
"    Signature: getNumRows|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of allocated rows in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getNumRows(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumRows());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowHeader_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getRowHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaFloat getRowHeader(oaUInt4 index) const\n"
"    Signature: getRowHeader|simple-oaFloat|simple-oaUInt4,\n"
"    This function returns a value from the row header for this table. The index must be a legal value for the rows of this table.\n"
"    index\n"
"    The index location in the row header array\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaFloat result= (data.DataCall()->getRowHeader(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getRowInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getRowInterpolateType() const\n"
"    Signature: getRowInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type which is applied to keys that are between the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getRowInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getRowLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getRowLowerExtrapolateType() const\n"
"    Signature: getRowLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are below to the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getRowLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowName_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getRowName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getRowName(oaString& name) const\n"
"    Signature: getRowName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the row header of this table.\n"
"    name\n"
"    The returned row header name\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getRowName() const\n"
"    Signature: getRowName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the row header of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getRowName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getRowName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, function: getRowName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getRowUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getRowUpperExtrapolateType() const\n"
"    Signature: getRowUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are above to the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getRowUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getValue_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: getValue\n"
"  Paramegers: (oaUInt4,oaUInt4)\n"
"    Calls: oaFloat getValue(oaUInt4 rowIndex,oaUInt4 colIndex) const\n"
"    Signature: getValue|simple-oaFloat|simple-oaUInt4,simple-oaUInt4,\n"
"    This function gets a return value contained in this table. The row and column indexes must be legal for the size of this table.\n"
"    rowIndex\n"
"    The row index location in this table\n"
"    colIndex\n"
"    The column index location in this table\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaUInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaUInt4_Convert,&p2)) {
        oaFloat result= (data.DataCall()->getValue(p1.Data(),p2.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColHeader_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setColHeader\n"
"  Paramegers: (oaUInt4,oaFloat)\n"
"    Calls: void setColHeader(oaUInt4 index,oaFloat value)\n"
"    Signature: setColHeader|void-void|simple-oaUInt4,simple-oaFloat,\n"
"    This function sets a value in the column header for this table.\n"
"    index\n"
"    The index location in the column header array. This must be valid for the current number of columns in the table.\n"
"    value\n"
"    The header value for this column\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        data.DataCall()->setColHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setColInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setColInterpolateType(oaInterpolateType type)\n"
"    Signature: setColInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type for the column header of this table.\n"
"    type\n"
"    The interpolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setColInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setColLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setColLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setColLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are below all column header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setColLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColName_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setColName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setColName(const oaString& name)\n"
"    Signature: setColName|void-void|cref-oaString,\n"
"    This function sets the name of the column header of this table\n"
"    name\n"
"    The column header name\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setColName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setColUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setColUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setColUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are above all column header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setColUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setDefaultValue_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setDefaultValue\n"
"  Paramegers: (oaFloat)\n"
"    Calls: void setDefaultValue(oaFloat value)\n"
"    Signature: setDefaultValue|void-void|simple-oaFloat,\n"
"    This function sets the default value of this table to the specified value.\n"
"    value\n"
"    The default value\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaFloat p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloat_Convert,&p1)) {
        data.DataCall()->setDefaultValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setNumCols_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setNumCols\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumCols(oaUInt4 numColsIn)\n"
"    Signature: setNumCols|void-void|simple-oaUInt4,\n"
"    This function sets the allocated number of columns in this table. The data in the table is retained where it fits within the new number of columns.\n"
"    numColsIn\n"
"    The number of columns to allocate for this table\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setNumCols(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumCols(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setNumRows_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setNumRows\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumRows(oaUInt4 numRowsIn)\n"
"    Signature: setNumRows|void-void|simple-oaUInt4,\n"
"    This function sets the allocated number of rows in this table. The data in the table is retained where it fits within the new number of rows.\n"
"    numRowsIn\n"
"    The possible number of rows this table can contain\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setNumRows(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumRows(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowHeader_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setRowHeader\n"
"  Paramegers: (oaUInt4,oaFloat)\n"
"    Calls: void setRowHeader(oaUInt4 index,oaFloat value)\n"
"    Signature: setRowHeader|void-void|simple-oaUInt4,simple-oaFloat,\n"
"    This function sets a value in the row header for this table.\n"
"    index\n"
"    The index location in the row header array. This must be valid for the current number of rows in the table.\n"
"    value\n"
"    The lookup key value to set\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        data.DataCall()->setRowHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setRowInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setRowInterpolateType(oaInterpolateType type)\n"
"    Signature: setRowInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type for the row header of this table.\n"
"    type\n"
"    The interpolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setRowInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setRowLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setRowLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setRowLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are below all row header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setRowLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowName_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setRowName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setRowName(const oaString& name)\n"
"    Signature: setRowName|void-void|cref-oaString,\n"
"    This function sets the name of the row header of this table.\n"
"    name\n"
"    The row header name\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setRowName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setRowUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setRowUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setRowUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are above all row header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setRowUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setValue_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: setValue\n"
"  Paramegers: (oaUInt4,oaUInt4,oaFloat)\n"
"    Calls: void setValue(oaUInt4 rowIndex,oaUInt4 colIndex,oaFloat value)\n"
"    Signature: setValue|void-void|simple-oaUInt4,simple-oaUInt4,simple-oaFloat,\n"
"    This function sets a return value in this table.\n"
"    rowIndex\n"
"    The row index location in this table. This index must be legal for this table.\n"
"    colIndex\n"
"    The column index location in this table. This index must be legal for this table.\n"
"    value\n"
"    The lookup value\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaUInt4 p2;
    PyParamoaFloat p3;
    if (PyArg_ParseTuple(args,"O&O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaUInt4_Convert,&p2,
          &PyoaFloat_Convert,&p3)) {
        data.DataCall()->setValue(p1.Data(),p2.Data(),p3.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_assign_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaFloat_oaFloat_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat data;
  int convert_status=Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoa2DLookupTbl_oaFloat_oaFloat_oaFloat p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oa2DLookupTbl_oaFloat_oaFloat_oaFloat_methodlist[] = {
    {"calcVMSize",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_calcVMSize,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_calcVMSize_doc},
    {"find",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_find,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_find_doc},
    {"getColHeader",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColHeader,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColHeader_doc},
    {"getColInterpolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColInterpolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColInterpolateType_doc},
    {"getColLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColLowerExtrapolateType_doc},
    {"getColName",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColName,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColName_doc},
    {"getColUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getColUpperExtrapolateType_doc},
    {"getDefaultValue",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getDefaultValue,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getDefaultValue_doc},
    {"getNumCols",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getNumCols,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getNumCols_doc},
    {"getNumRows",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getNumRows,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getNumRows_doc},
    {"getRowHeader",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowHeader,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowHeader_doc},
    {"getRowInterpolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowInterpolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowInterpolateType_doc},
    {"getRowLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowLowerExtrapolateType_doc},
    {"getRowName",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowName,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowName_doc},
    {"getRowUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getRowUpperExtrapolateType_doc},
    {"getValue",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getValue,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_getValue_doc},
    {"setColHeader",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColHeader,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColHeader_doc},
    {"setColInterpolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColInterpolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColInterpolateType_doc},
    {"setColLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColLowerExtrapolateType_doc},
    {"setColName",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColName,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColName_doc},
    {"setColUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setColUpperExtrapolateType_doc},
    {"setDefaultValue",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setDefaultValue,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setDefaultValue_doc},
    {"setNumCols",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setNumCols,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setNumCols_doc},
    {"setNumRows",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setNumRows,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setNumRows_doc},
    {"setRowHeader",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowHeader,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowHeader_doc},
    {"setRowInterpolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowInterpolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowInterpolateType_doc},
    {"setRowLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowLowerExtrapolateType_doc},
    {"setRowName",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowName,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowName_doc},
    {"setRowUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setRowUpperExtrapolateType_doc},
    {"setValue",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setValue,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_setValue_doc},
    {"assign",(PyCFunction)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_tp_assign,METH_VARARGS,oa2DLookupTbl_oaFloat_oaFloat_oaFloat_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaFloat_oaFloat_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaFloat_oaFloat\n"
"  The oa2DLookupTbl class is a template for a two-dimensional lookup table. The table has both header entries and return value entries. When a lookup is performed the key is compared with the header entries to find its location in that set. The lookup will then return the corresponding return value entry, or a value based on the nearest return value entries.\n"
"  The class is templatized for the type of both the row and column headers and the return value entries. At the time that a lookup is performed, the header entries are assumed to be in strictly ascending order. They may be out of order while the table is being created or modified.\n"
"  The handling of keys that are not exact header entries is determined by the interpolation and extrapolation types set in the table. Interpolation applies to keys that are within the range of the header entries, and extrapolation applies to keys that are outside of the values in the header. Row values and column values are always treated the same. See the classes oaExtrapolateType and oaInterpolateType for more details.\n"
"  The lookup classes ( oa1DLookupTbl and oa2DLookupTbl) are used by OpenAccess to represent values passed to oaValue subclasses -- see oaInt2DTblValue , oaFlt2DTblValue , and oaViaDef2DTblValue for examples of oaValue subclasses that use oa2DLookupTbls. The oaValue subclasses, in turn, are used to associate different values with constraints -- see oaValue() and its subclasses for more information. The oa2DLookupTbl utility class can be used by applications for other purposes as well.\n"
"  Here is an example of an oa2DLookupTbl<oaUInt4, oaUInt4, oaFloat>:\n"
"  Indexes\n"
"  _\n"
"  0\n"
"  1\n"
"  2\n"
"  _\n"
"  Headers\n"
"  20\n"
"  40\n"
"  60\n"
"  0\n"
"  100\n"
"  2.2\n"
"  3.3\n"
"  4.4\n"
"  1\n"
"  200\n"
"  12.2\n"
"  13.3\n"
"  14.4\n"
"  In this example, looking up with keys of 150 and 30 will return: 2.2 if InterpolateType is set to oacSnapDownInterpolateType 7.75 if InterpolateType is set to oacLinearInterpolateType 13.3 if InterpolateType is set to oacSnapUpInterpolateType\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oa2DLookupTbl_oaFloat_oaFloat_oaFloat()\n"
"    Signature: oa2DLookupTbl_oaFloat_oaFloat_oaFloat||\n"
"    This function constructs an empty oa2DLookupTbl instance to provide a two-dimensional lookup table. The table has a 0 allocated size at this point. oa2DLookupTbl::setNumCols and oa2DLookupTbl::setNumRows must be called before it can be used.\n"
"  Paramegers: (oa2DLookupTbl_oaFloat_oaFloat_oaFloat)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaFloat_oaFloat(const oa2DLookupTbl_oaFloat_oaFloat_oaFloat& tbl)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaFloat_oaFloat||cref-oa2DLookupTbl_oaFloat_oaFloat_oaFloat,\n"
"    This function constructs an oa2DLookupTbl instance and initializes the table to the same values that are in the given oa2DLookupTbl tbl .\n"
"    tbl\n"
"    The oa2DLookupTbl to copy\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaFloat_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaFloat_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaFloat_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaFloat_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaFloat_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaFloat_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaFloat_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaFloat_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaFloat_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaFloat_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaFloat_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn,oaExtrapolateType eColLowerTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaFloat_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaFloat_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn,oaExtrapolateType eColLowerTypeIn,oaExtrapolateType eColUpperTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaFloat_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oa2DLookupTbl_oaFloat_oaFloat_oaFloat)\n"
"    Calls: (const oa2DLookupTbl_oaFloat_oaFloat_oaFloat&)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaFloat_oaFloat||cref-oa2DLookupTbl_oaFloat_oaFloat_oaFloat,\n"
;

// ------------------------------------------------------------------
PyTypeObject Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oa2DLookupTbl_oaFloat_oaFloat_oaFloat",
    sizeof(Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloatObject),
    0,
    (destructor)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_tp_compare,	/* tp_compare */
    (reprfunc)oa2DLookupTbl_oaFloat_oaFloat_oaFloat_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oa2DLookupTbl_oaFloat_oaFloat_oaFloat_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oa2DLookupTbl_oaFloat_oaFloat_oaFloat_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oa2DLookupTbl_oaFloat_oaFloat_oaFloat_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Type)<0) {
      printf("** PyType_Ready failed for: oa2DLookupTbl_oaFloat_oaFloat_oaFloat\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oa2DLookupTbl_oaFloat_oaFloat_oaFloat",
           (PyObject*)(&Pyoa2DLookupTbl_oaFloat_oaFloat_oaFloat_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oa2DLookupTbl_oaFloat_oaFloat_oaFloat\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self = (Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oa2DLookupTbl_oaFloat_oaInt4_oaFloat();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oa2DLookupTbl_oaFloat_oaInt4_oaFloat)
    {
        PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert,&p1)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaInt4_oaFloat(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        PyParamoaExtrapolateType p10;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9,
              &PyoaExtrapolateType_Convert,&p10)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaFloat p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        PyParamoaExtrapolateType p10;
        PyParamoaExtrapolateType p11;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaFloat_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9,
              &PyoaExtrapolateType_Convert,&p10,
              &PyoaExtrapolateType_Convert,&p11)) {
            self->value =  new oa2DLookupTbl_oaFloat_oaInt4_oaFloat(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data(),p11.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Choices are:\n"
        "    ()\n"
        "    (oa2DLookupTbl_oaFloat_oaInt4_oaFloat)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_tp_dealloc(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_tp_repr(PyObject *ob)
{
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat value;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[58];
    sprintf(buffer,"<oa2DLookupTbl_oaFloat_oaInt4_oaFloat::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat v1;
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat v2;
    int convert_status1=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob1,&v1);
    int convert_status2=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(PyObject* ob,PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat* result)
{
    if (ob == NULL) return 1;
    if (Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Check(ob)) {
        result->SetData(  ((Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Fromoa2DLookupTbl_oaFloat_oaInt4_oaFloat(oa2DLookupTbl_oaFloat_oaInt4_oaFloat* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Type.tp_alloc(&Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Type,0);
        if (bself == NULL) return bself;
        Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self = (Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_calcVMSize_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: calcVMSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8 calcVMSize() const\n"
"    Signature: calcVMSize|simple-oaUInt8|\n"
"    BrowseData: 1\n"
"    This function returns the number of bytes this object uses in virtual memory.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_calcVMSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8 result= (data.DataCall()->calcVMSize());
        return PyoaUInt8_FromoaUInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_find_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: find\n"
"  Paramegers: (oaFloat,oaInt4)\n"
"    Calls: oaFloat find(oaFloat rowKey,oaInt4 colKey) const\n"
"    Signature: find|simple-oaFloat|simple-oaFloat,simple-oaInt4,\n"
"    This function returns a value based on the specified row and column keys. If the specified keys are not present in the table, the value is interpolated or extrapolated.\n"
"    rowKey\n"
"    The row value to find\n"
"    colKey\n"
"    The column value to find\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaFloat p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFloat_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        oaFloat result= (data.DataCall()->find(p1.Data(),p2.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColHeader_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getColHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaInt4 getColHeader(oaUInt4 index) const\n"
"    Signature: getColHeader|simple-oaInt4|simple-oaUInt4,\n"
"    This function returns a value from the column header for this table.\n"
"    index\n"
"    The index location in the column header. This index must be a legal index for the columns in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaInt4 result= (data.DataCall()->getColHeader(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getColInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getColInterpolateType() const\n"
"    Signature: getColInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type which is applied to keys that are between the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getColInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getColLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getColLowerExtrapolateType() const\n"
"    Signature: getColLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are below to the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getColLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColName_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getColName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getColName(oaString& name) const\n"
"    Signature: getColName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the column header of this table.\n"
"    name\n"
"    The returned column header name\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getColName() const\n"
"    Signature: getColName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the column header of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getColName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getColName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, function: getColName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getColUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getColUpperExtrapolateType() const\n"
"    Signature: getColUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are above to the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getColUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getDefaultValue_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getDefaultValue\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefaultValue() const\n"
"    Signature: getDefaultValue|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefaultValue());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getNumCols_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getNumCols\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumCols() const\n"
"    Signature: getNumCols|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of allocated columns in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getNumCols(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumCols());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getNumRows_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getNumRows\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumRows() const\n"
"    Signature: getNumRows|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of allocated rows in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getNumRows(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumRows());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowHeader_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getRowHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaFloat getRowHeader(oaUInt4 index) const\n"
"    Signature: getRowHeader|simple-oaFloat|simple-oaUInt4,\n"
"    This function returns a value from the row header for this table. The index must be a legal value for the rows of this table.\n"
"    index\n"
"    The index location in the row header array\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaFloat result= (data.DataCall()->getRowHeader(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getRowInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getRowInterpolateType() const\n"
"    Signature: getRowInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type which is applied to keys that are between the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getRowInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getRowLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getRowLowerExtrapolateType() const\n"
"    Signature: getRowLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are below to the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getRowLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowName_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getRowName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getRowName(oaString& name) const\n"
"    Signature: getRowName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the row header of this table.\n"
"    name\n"
"    The returned row header name\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getRowName() const\n"
"    Signature: getRowName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the row header of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getRowName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getRowName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, function: getRowName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getRowUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getRowUpperExtrapolateType() const\n"
"    Signature: getRowUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are above to the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getRowUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getValue_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: getValue\n"
"  Paramegers: (oaUInt4,oaUInt4)\n"
"    Calls: oaFloat getValue(oaUInt4 rowIndex,oaUInt4 colIndex) const\n"
"    Signature: getValue|simple-oaFloat|simple-oaUInt4,simple-oaUInt4,\n"
"    This function gets a return value contained in this table. The row and column indexes must be legal for the size of this table.\n"
"    rowIndex\n"
"    The row index location in this table\n"
"    colIndex\n"
"    The column index location in this table\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaUInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaUInt4_Convert,&p2)) {
        oaFloat result= (data.DataCall()->getValue(p1.Data(),p2.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColHeader_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setColHeader\n"
"  Paramegers: (oaUInt4,oaInt4)\n"
"    Calls: void setColHeader(oaUInt4 index,oaInt4 value)\n"
"    Signature: setColHeader|void-void|simple-oaUInt4,simple-oaInt4,\n"
"    This function sets a value in the column header for this table.\n"
"    index\n"
"    The index location in the column header array. This must be valid for the current number of columns in the table.\n"
"    value\n"
"    The header value for this column\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        data.DataCall()->setColHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setColInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setColInterpolateType(oaInterpolateType type)\n"
"    Signature: setColInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type for the column header of this table.\n"
"    type\n"
"    The interpolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setColInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setColLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setColLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setColLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are below all column header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setColLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColName_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setColName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setColName(const oaString& name)\n"
"    Signature: setColName|void-void|cref-oaString,\n"
"    This function sets the name of the column header of this table\n"
"    name\n"
"    The column header name\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setColName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setColUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setColUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setColUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are above all column header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setColUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setDefaultValue_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setDefaultValue\n"
"  Paramegers: (oaFloat)\n"
"    Calls: void setDefaultValue(oaFloat value)\n"
"    Signature: setDefaultValue|void-void|simple-oaFloat,\n"
"    This function sets the default value of this table to the specified value.\n"
"    value\n"
"    The default value\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaFloat p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFloat_Convert,&p1)) {
        data.DataCall()->setDefaultValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setNumCols_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setNumCols\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumCols(oaUInt4 numColsIn)\n"
"    Signature: setNumCols|void-void|simple-oaUInt4,\n"
"    This function sets the allocated number of columns in this table. The data in the table is retained where it fits within the new number of columns.\n"
"    numColsIn\n"
"    The number of columns to allocate for this table\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setNumCols(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumCols(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setNumRows_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setNumRows\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumRows(oaUInt4 numRowsIn)\n"
"    Signature: setNumRows|void-void|simple-oaUInt4,\n"
"    This function sets the allocated number of rows in this table. The data in the table is retained where it fits within the new number of rows.\n"
"    numRowsIn\n"
"    The possible number of rows this table can contain\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setNumRows(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumRows(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowHeader_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setRowHeader\n"
"  Paramegers: (oaUInt4,oaFloat)\n"
"    Calls: void setRowHeader(oaUInt4 index,oaFloat value)\n"
"    Signature: setRowHeader|void-void|simple-oaUInt4,simple-oaFloat,\n"
"    This function sets a value in the row header for this table.\n"
"    index\n"
"    The index location in the row header array. This must be valid for the current number of rows in the table.\n"
"    value\n"
"    The lookup key value to set\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        data.DataCall()->setRowHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setRowInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setRowInterpolateType(oaInterpolateType type)\n"
"    Signature: setRowInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type for the row header of this table.\n"
"    type\n"
"    The interpolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setRowInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setRowLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setRowLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setRowLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are below all row header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setRowLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowName_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setRowName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setRowName(const oaString& name)\n"
"    Signature: setRowName|void-void|cref-oaString,\n"
"    This function sets the name of the row header of this table.\n"
"    name\n"
"    The row header name\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setRowName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setRowUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setRowUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setRowUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are above all row header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setRowUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setValue_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: setValue\n"
"  Paramegers: (oaUInt4,oaUInt4,oaFloat)\n"
"    Calls: void setValue(oaUInt4 rowIndex,oaUInt4 colIndex,oaFloat value)\n"
"    Signature: setValue|void-void|simple-oaUInt4,simple-oaUInt4,simple-oaFloat,\n"
"    This function sets a return value in this table.\n"
"    rowIndex\n"
"    The row index location in this table. This index must be legal for this table.\n"
"    colIndex\n"
"    The column index location in this table. This index must be legal for this table.\n"
"    value\n"
"    The lookup value\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
    int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject* self=(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaUInt4 p2;
    PyParamoaFloat p3;
    if (PyArg_ParseTuple(args,"O&O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaUInt4_Convert,&p2,
          &PyoaFloat_Convert,&p3)) {
        data.DataCall()->setValue(p1.Data(),p2.Data(),p3.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_assign_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oa2DLookupTbl_oaFloat_oaInt4_oaFloat_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat data;
  int convert_status=Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoa2DLookupTbl_oaFloat_oaInt4_oaFloat p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oa2DLookupTbl_oaFloat_oaInt4_oaFloat_methodlist[] = {
    {"calcVMSize",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_calcVMSize,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_calcVMSize_doc},
    {"find",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_find,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_find_doc},
    {"getColHeader",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColHeader,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColHeader_doc},
    {"getColInterpolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColInterpolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColInterpolateType_doc},
    {"getColLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColLowerExtrapolateType_doc},
    {"getColName",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColName,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColName_doc},
    {"getColUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getColUpperExtrapolateType_doc},
    {"getDefaultValue",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getDefaultValue,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getDefaultValue_doc},
    {"getNumCols",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getNumCols,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getNumCols_doc},
    {"getNumRows",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getNumRows,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getNumRows_doc},
    {"getRowHeader",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowHeader,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowHeader_doc},
    {"getRowInterpolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowInterpolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowInterpolateType_doc},
    {"getRowLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowLowerExtrapolateType_doc},
    {"getRowName",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowName,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowName_doc},
    {"getRowUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getRowUpperExtrapolateType_doc},
    {"getValue",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getValue,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_getValue_doc},
    {"setColHeader",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColHeader,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColHeader_doc},
    {"setColInterpolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColInterpolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColInterpolateType_doc},
    {"setColLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColLowerExtrapolateType_doc},
    {"setColName",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColName,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColName_doc},
    {"setColUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setColUpperExtrapolateType_doc},
    {"setDefaultValue",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setDefaultValue,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setDefaultValue_doc},
    {"setNumCols",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setNumCols,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setNumCols_doc},
    {"setNumRows",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setNumRows,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setNumRows_doc},
    {"setRowHeader",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowHeader,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowHeader_doc},
    {"setRowInterpolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowInterpolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowInterpolateType_doc},
    {"setRowLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowLowerExtrapolateType_doc},
    {"setRowName",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowName,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowName_doc},
    {"setRowUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setRowUpperExtrapolateType_doc},
    {"setValue",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setValue,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_setValue_doc},
    {"assign",(PyCFunction)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_tp_assign,METH_VARARGS,oa2DLookupTbl_oaFloat_oaInt4_oaFloat_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaFloat_oaInt4_oaFloat_doc[] = 
"Class: oa2DLookupTbl_oaFloat_oaInt4_oaFloat\n"
"  The oa2DLookupTbl class is a template for a two-dimensional lookup table. The table has both header entries and return value entries. When a lookup is performed the key is compared with the header entries to find its location in that set. The lookup will then return the corresponding return value entry, or a value based on the nearest return value entries.\n"
"  The class is templatized for the type of both the row and column headers and the return value entries. At the time that a lookup is performed, the header entries are assumed to be in strictly ascending order. They may be out of order while the table is being created or modified.\n"
"  The handling of keys that are not exact header entries is determined by the interpolation and extrapolation types set in the table. Interpolation applies to keys that are within the range of the header entries, and extrapolation applies to keys that are outside of the values in the header. Row values and column values are always treated the same. See the classes oaExtrapolateType and oaInterpolateType for more details.\n"
"  The lookup classes ( oa1DLookupTbl and oa2DLookupTbl) are used by OpenAccess to represent values passed to oaValue subclasses -- see oaInt2DTblValue , oaFlt2DTblValue , and oaViaDef2DTblValue for examples of oaValue subclasses that use oa2DLookupTbls. The oaValue subclasses, in turn, are used to associate different values with constraints -- see oaValue() and its subclasses for more information. The oa2DLookupTbl utility class can be used by applications for other purposes as well.\n"
"  Here is an example of an oa2DLookupTbl<oaUInt4, oaUInt4, oaFloat>:\n"
"  Indexes\n"
"  _\n"
"  0\n"
"  1\n"
"  2\n"
"  _\n"
"  Headers\n"
"  20\n"
"  40\n"
"  60\n"
"  0\n"
"  100\n"
"  2.2\n"
"  3.3\n"
"  4.4\n"
"  1\n"
"  200\n"
"  12.2\n"
"  13.3\n"
"  14.4\n"
"  In this example, looking up with keys of 150 and 30 will return: 2.2 if InterpolateType is set to oacSnapDownInterpolateType 7.75 if InterpolateType is set to oacLinearInterpolateType 13.3 if InterpolateType is set to oacSnapUpInterpolateType\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oa2DLookupTbl_oaFloat_oaInt4_oaFloat()\n"
"    Signature: oa2DLookupTbl_oaFloat_oaInt4_oaFloat||\n"
"    This function constructs an empty oa2DLookupTbl instance to provide a two-dimensional lookup table. The table has a 0 allocated size at this point. oa2DLookupTbl::setNumCols and oa2DLookupTbl::setNumRows must be called before it can be used.\n"
"  Paramegers: (oa2DLookupTbl_oaFloat_oaInt4_oaFloat)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaInt4_oaFloat(const oa2DLookupTbl_oaFloat_oaInt4_oaFloat& tbl)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaInt4_oaFloat||cref-oa2DLookupTbl_oaFloat_oaInt4_oaFloat,\n"
"    This function constructs an oa2DLookupTbl instance and initializes the table to the same values that are in the given oa2DLookupTbl tbl .\n"
"    tbl\n"
"    The oa2DLookupTbl to copy\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaInt4_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaInt4_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaInt4_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaInt4_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaInt4_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaInt4_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaInt4_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaInt4_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaInt4_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaInt4_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaInt4_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn,oaExtrapolateType eColLowerTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaInt4_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaFloat,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaFloat_oaInt4_oaFloat(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaFloat defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn,oaExtrapolateType eColLowerTypeIn,oaExtrapolateType eColUpperTypeIn)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaInt4_oaFloat||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaFloat,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oa2DLookupTbl_oaFloat_oaInt4_oaFloat)\n"
"    Calls: (const oa2DLookupTbl_oaFloat_oaInt4_oaFloat&)\n"
"    Signature: oa2DLookupTbl_oaFloat_oaInt4_oaFloat||cref-oa2DLookupTbl_oaFloat_oaInt4_oaFloat,\n"
;

// ------------------------------------------------------------------
PyTypeObject Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oa2DLookupTbl_oaFloat_oaInt4_oaFloat",
    sizeof(Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloatObject),
    0,
    (destructor)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_tp_compare,	/* tp_compare */
    (reprfunc)oa2DLookupTbl_oaFloat_oaInt4_oaFloat_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oa2DLookupTbl_oaFloat_oaInt4_oaFloat_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oa2DLookupTbl_oaFloat_oaInt4_oaFloat_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oa2DLookupTbl_oaFloat_oaInt4_oaFloat_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Type)<0) {
      printf("** PyType_Ready failed for: oa2DLookupTbl_oaFloat_oaInt4_oaFloat\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oa2DLookupTbl_oaFloat_oaInt4_oaFloat",
           (PyObject*)(&Pyoa2DLookupTbl_oaFloat_oaInt4_oaFloat_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oa2DLookupTbl_oaFloat_oaInt4_oaFloat\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self = (Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaInt4();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oa2DLookupTbl_oaInt4_oaInt4_oaInt4)
    {
        PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert,&p1)) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaInt4(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaInt4)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaInt4 p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaInt4_Convert,&p5)) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaInt4 p5;
        PyParamoaInterpolateType p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaInt4_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6)) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaInt4 p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaInt4_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7)) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaInt4 p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaInt4_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8)) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaInt4 p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaInt4_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9)) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaInt4 p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        PyParamoaExtrapolateType p10;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaInt4_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9,
              &PyoaExtrapolateType_Convert,&p10)) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaInt4 p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        PyParamoaExtrapolateType p10;
        PyParamoaExtrapolateType p11;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaInt4_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9,
              &PyoaExtrapolateType_Convert,&p10,
              &PyoaExtrapolateType_Convert,&p11)) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaInt4(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data(),p11.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Choices are:\n"
        "    ()\n"
        "    (oa2DLookupTbl_oaInt4_oaInt4_oaInt4)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaInt4)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_tp_dealloc(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_tp_repr(PyObject *ob)
{
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 value;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[56];
    sprintf(buffer,"<oa2DLookupTbl_oaInt4_oaInt4_oaInt4::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 v1;
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 v2;
    int convert_status1=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob1,&v1);
    int convert_status2=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(PyObject* ob,PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4* result)
{
    if (ob == NULL) return 1;
    if (Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Check(ob)) {
        result->SetData(  ((Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4 Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Fromoa2DLookupTbl_oaInt4_oaInt4_oaInt4(oa2DLookupTbl_oaInt4_oaInt4_oaInt4* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Type.tp_alloc(&Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Type,0);
        if (bself == NULL) return bself;
        Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self = (Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_calcVMSize_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: calcVMSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8 calcVMSize() const\n"
"    Signature: calcVMSize|simple-oaUInt8|\n"
"    BrowseData: 1\n"
"    This function returns the number of bytes this object uses in virtual memory.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_calcVMSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8 result= (data.DataCall()->calcVMSize());
        return PyoaUInt8_FromoaUInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_find_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: find\n"
"  Paramegers: (oaInt4,oaInt4)\n"
"    Calls: oaInt4 find(oaInt4 rowKey,oaInt4 colKey) const\n"
"    Signature: find|simple-oaInt4|simple-oaInt4,simple-oaInt4,\n"
"    This function returns a value based on the specified row and column keys. If the specified keys are not present in the table, the value is interpolated or extrapolated.\n"
"    rowKey\n"
"    The row value to find\n"
"    colKey\n"
"    The column value to find\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaInt4 p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInt4_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        oaInt4 result= (data.DataCall()->find(p1.Data(),p2.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColHeader_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getColHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaInt4 getColHeader(oaUInt4 index) const\n"
"    Signature: getColHeader|simple-oaInt4|simple-oaUInt4,\n"
"    This function returns a value from the column header for this table.\n"
"    index\n"
"    The index location in the column header. This index must be a legal index for the columns in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaInt4 result= (data.DataCall()->getColHeader(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getColInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getColInterpolateType() const\n"
"    Signature: getColInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type which is applied to keys that are between the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getColInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getColLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getColLowerExtrapolateType() const\n"
"    Signature: getColLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are below to the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getColLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColName_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getColName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getColName(oaString& name) const\n"
"    Signature: getColName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the column header of this table.\n"
"    name\n"
"    The returned column header name\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getColName() const\n"
"    Signature: getColName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the column header of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getColName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getColName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, function: getColName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getColUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getColUpperExtrapolateType() const\n"
"    Signature: getColUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are above to the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getColUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getDefaultValue_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getDefaultValue\n"
"  Paramegers: ()\n"
"    Calls: oaInt4 getDefaultValue() const\n"
"    Signature: getDefaultValue|simple-oaInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInt4 result= (data.DataCall()->getDefaultValue());
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getNumCols_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getNumCols\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumCols() const\n"
"    Signature: getNumCols|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of allocated columns in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getNumCols(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumCols());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getNumRows_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getNumRows\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumRows() const\n"
"    Signature: getNumRows|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of allocated rows in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getNumRows(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumRows());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowHeader_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getRowHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaInt4 getRowHeader(oaUInt4 index) const\n"
"    Signature: getRowHeader|simple-oaInt4|simple-oaUInt4,\n"
"    This function returns a value from the row header for this table. The index must be a legal value for the rows of this table.\n"
"    index\n"
"    The index location in the row header array\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaInt4 result= (data.DataCall()->getRowHeader(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getRowInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getRowInterpolateType() const\n"
"    Signature: getRowInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type which is applied to keys that are between the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getRowInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getRowLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getRowLowerExtrapolateType() const\n"
"    Signature: getRowLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are below to the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getRowLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowName_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getRowName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getRowName(oaString& name) const\n"
"    Signature: getRowName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the row header of this table.\n"
"    name\n"
"    The returned row header name\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getRowName() const\n"
"    Signature: getRowName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the row header of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getRowName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getRowName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, function: getRowName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getRowUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getRowUpperExtrapolateType() const\n"
"    Signature: getRowUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are above to the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getRowUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getValue_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: getValue\n"
"  Paramegers: (oaUInt4,oaUInt4)\n"
"    Calls: oaInt4 getValue(oaUInt4 rowIndex,oaUInt4 colIndex) const\n"
"    Signature: getValue|simple-oaInt4|simple-oaUInt4,simple-oaUInt4,\n"
"    This function gets a return value contained in this table. The row and column indexes must be legal for the size of this table.\n"
"    rowIndex\n"
"    The row index location in this table\n"
"    colIndex\n"
"    The column index location in this table\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    PyParamoaUInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaUInt4_Convert,&p2)) {
        oaInt4 result= (data.DataCall()->getValue(p1.Data(),p2.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColHeader_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setColHeader\n"
"  Paramegers: (oaUInt4,oaInt4)\n"
"    Calls: void setColHeader(oaUInt4 index,oaInt4 value)\n"
"    Signature: setColHeader|void-void|simple-oaUInt4,simple-oaInt4,\n"
"    This function sets a value in the column header for this table.\n"
"    index\n"
"    The index location in the column header array. This must be valid for the current number of columns in the table.\n"
"    value\n"
"    The header value for this column\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        data.DataCall()->setColHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setColInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setColInterpolateType(oaInterpolateType type)\n"
"    Signature: setColInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type for the column header of this table.\n"
"    type\n"
"    The interpolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setColInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setColLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setColLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setColLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are below all column header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setColLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColName_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setColName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setColName(const oaString& name)\n"
"    Signature: setColName|void-void|cref-oaString,\n"
"    This function sets the name of the column header of this table\n"
"    name\n"
"    The column header name\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setColName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setColUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setColUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setColUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are above all column header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setColUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setDefaultValue_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setDefaultValue\n"
"  Paramegers: (oaInt4)\n"
"    Calls: void setDefaultValue(oaInt4 value)\n"
"    Signature: setDefaultValue|void-void|simple-oaInt4,\n"
"    This function sets the default value of this table to the specified value.\n"
"    value\n"
"    The default value\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInt4_Convert,&p1)) {
        data.DataCall()->setDefaultValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setNumCols_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setNumCols\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumCols(oaUInt4 numColsIn)\n"
"    Signature: setNumCols|void-void|simple-oaUInt4,\n"
"    This function sets the allocated number of columns in this table. The data in the table is retained where it fits within the new number of columns.\n"
"    numColsIn\n"
"    The number of columns to allocate for this table\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setNumCols(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumCols(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setNumRows_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setNumRows\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumRows(oaUInt4 numRowsIn)\n"
"    Signature: setNumRows|void-void|simple-oaUInt4,\n"
"    This function sets the allocated number of rows in this table. The data in the table is retained where it fits within the new number of rows.\n"
"    numRowsIn\n"
"    The possible number of rows this table can contain\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setNumRows(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumRows(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowHeader_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setRowHeader\n"
"  Paramegers: (oaUInt4,oaInt4)\n"
"    Calls: void setRowHeader(oaUInt4 index,oaInt4 value)\n"
"    Signature: setRowHeader|void-void|simple-oaUInt4,simple-oaInt4,\n"
"    This function sets a value in the row header for this table.\n"
"    index\n"
"    The index location in the row header array. This must be valid for the current number of rows in the table.\n"
"    value\n"
"    The lookup key value to set\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        data.DataCall()->setRowHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setRowInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setRowInterpolateType(oaInterpolateType type)\n"
"    Signature: setRowInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type for the row header of this table.\n"
"    type\n"
"    The interpolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setRowInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setRowLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setRowLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setRowLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are below all row header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setRowLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowName_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setRowName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setRowName(const oaString& name)\n"
"    Signature: setRowName|void-void|cref-oaString,\n"
"    This function sets the name of the row header of this table.\n"
"    name\n"
"    The row header name\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setRowName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setRowUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setRowUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setRowUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are above all row header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setRowUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setValue_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: setValue\n"
"  Paramegers: (oaUInt4,oaUInt4,oaInt4)\n"
"    Calls: void setValue(oaUInt4 rowIndex,oaUInt4 colIndex,oaInt4 value)\n"
"    Signature: setValue|void-void|simple-oaUInt4,simple-oaUInt4,simple-oaInt4,\n"
"    This function sets a return value in this table.\n"
"    rowIndex\n"
"    The row index location in this table. This index must be legal for this table.\n"
"    colIndex\n"
"    The column index location in this table. This index must be legal for this table.\n"
"    value\n"
"    The lookup value\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object*)ob;

    PyParamoaUInt4 p1;
    PyParamoaUInt4 p2;
    PyParamoaInt4 p3;
    if (PyArg_ParseTuple(args,"O&O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaUInt4_Convert,&p2,
          &PyoaInt4_Convert,&p3)) {
        data.DataCall()->setValue(p1.Data(),p2.Data(),p3.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_assign_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaInt4_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 data;
  int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaInt4 p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oa2DLookupTbl_oaInt4_oaInt4_oaInt4_methodlist[] = {
    {"calcVMSize",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_calcVMSize,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_calcVMSize_doc},
    {"find",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_find,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_find_doc},
    {"getColHeader",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColHeader,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColHeader_doc},
    {"getColInterpolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColInterpolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColInterpolateType_doc},
    {"getColLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColLowerExtrapolateType_doc},
    {"getColName",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColName,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColName_doc},
    {"getColUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getColUpperExtrapolateType_doc},
    {"getDefaultValue",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getDefaultValue,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getDefaultValue_doc},
    {"getNumCols",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getNumCols,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getNumCols_doc},
    {"getNumRows",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getNumRows,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getNumRows_doc},
    {"getRowHeader",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowHeader,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowHeader_doc},
    {"getRowInterpolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowInterpolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowInterpolateType_doc},
    {"getRowLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowLowerExtrapolateType_doc},
    {"getRowName",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowName,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowName_doc},
    {"getRowUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getRowUpperExtrapolateType_doc},
    {"getValue",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getValue,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_getValue_doc},
    {"setColHeader",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColHeader,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColHeader_doc},
    {"setColInterpolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColInterpolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColInterpolateType_doc},
    {"setColLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColLowerExtrapolateType_doc},
    {"setColName",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColName,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColName_doc},
    {"setColUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setColUpperExtrapolateType_doc},
    {"setDefaultValue",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setDefaultValue,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setDefaultValue_doc},
    {"setNumCols",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setNumCols,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setNumCols_doc},
    {"setNumRows",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setNumRows,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setNumRows_doc},
    {"setRowHeader",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowHeader,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowHeader_doc},
    {"setRowInterpolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowInterpolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowInterpolateType_doc},
    {"setRowLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowLowerExtrapolateType_doc},
    {"setRowName",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowName,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowName_doc},
    {"setRowUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setRowUpperExtrapolateType_doc},
    {"setValue",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setValue,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_setValue_doc},
    {"assign",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_tp_assign,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaInt4_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaInt4_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaInt4\n"
"  The oa2DLookupTbl class is a template for a two-dimensional lookup table. The table has both header entries and return value entries. When a lookup is performed the key is compared with the header entries to find its location in that set. The lookup will then return the corresponding return value entry, or a value based on the nearest return value entries.\n"
"  The class is templatized for the type of both the row and column headers and the return value entries. At the time that a lookup is performed, the header entries are assumed to be in strictly ascending order. They may be out of order while the table is being created or modified.\n"
"  The handling of keys that are not exact header entries is determined by the interpolation and extrapolation types set in the table. Interpolation applies to keys that are within the range of the header entries, and extrapolation applies to keys that are outside of the values in the header. Row values and column values are always treated the same. See the classes oaExtrapolateType and oaInterpolateType for more details.\n"
"  The lookup classes ( oa1DLookupTbl and oa2DLookupTbl) are used by OpenAccess to represent values passed to oaValue subclasses -- see oaInt2DTblValue , oaFlt2DTblValue , and oaViaDef2DTblValue for examples of oaValue subclasses that use oa2DLookupTbls. The oaValue subclasses, in turn, are used to associate different values with constraints -- see oaValue() and its subclasses for more information. The oa2DLookupTbl utility class can be used by applications for other purposes as well.\n"
"  Here is an example of an oa2DLookupTbl<oaUInt4, oaUInt4, oaFloat>:\n"
"  Indexes\n"
"  _\n"
"  0\n"
"  1\n"
"  2\n"
"  _\n"
"  Headers\n"
"  20\n"
"  40\n"
"  60\n"
"  0\n"
"  100\n"
"  2.2\n"
"  3.3\n"
"  4.4\n"
"  1\n"
"  200\n"
"  12.2\n"
"  13.3\n"
"  14.4\n"
"  In this example, looking up with keys of 150 and 30 will return: 2.2 if InterpolateType is set to oacSnapDownInterpolateType 7.75 if InterpolateType is set to oacLinearInterpolateType 13.3 if InterpolateType is set to oacSnapUpInterpolateType\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaInt4()\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaInt4||\n"
"    This function constructs an empty oa2DLookupTbl instance to provide a two-dimensional lookup table. The table has a 0 allocated size at this point. oa2DLookupTbl::setNumCols and oa2DLookupTbl::setNumRows must be called before it can be used.\n"
"  Paramegers: (oa2DLookupTbl_oaInt4_oaInt4_oaInt4)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaInt4(const oa2DLookupTbl_oaInt4_oaInt4_oaInt4& tbl)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaInt4||cref-oa2DLookupTbl_oaInt4_oaInt4_oaInt4,\n"
"    This function constructs an oa2DLookupTbl instance and initializes the table to the same values that are in the given oa2DLookupTbl tbl .\n"
"    tbl\n"
"    The oa2DLookupTbl to copy\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaInt4)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaInt4(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaInt4 defaultValue)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaInt4||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaInt4(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaInt4 defaultValue,oaInterpolateType iColTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaInt4||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaInt4(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaInt4 defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaInt4||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaInt4(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaInt4 defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaInt4||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaInt4(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaInt4 defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaInt4||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaInt4(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaInt4 defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn,oaExtrapolateType eColLowerTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaInt4||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaInt4,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaInt4(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaInt4 defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn,oaExtrapolateType eColLowerTypeIn,oaExtrapolateType eColUpperTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaInt4||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,simple-oaInt4,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oa2DLookupTbl_oaInt4_oaInt4_oaInt4)\n"
"    Calls: (const oa2DLookupTbl_oaInt4_oaInt4_oaInt4&)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaInt4||cref-oa2DLookupTbl_oaInt4_oaInt4_oaInt4,\n"
;

// ------------------------------------------------------------------
PyTypeObject Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oa2DLookupTbl_oaInt4_oaInt4_oaInt4",
    sizeof(Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4Object),
    0,
    (destructor)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_tp_compare,	/* tp_compare */
    (reprfunc)oa2DLookupTbl_oaInt4_oaInt4_oaInt4_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oa2DLookupTbl_oaInt4_oaInt4_oaInt4_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oa2DLookupTbl_oaInt4_oaInt4_oaInt4_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oa2DLookupTbl_oaInt4_oaInt4_oaInt4_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Type)<0) {
      printf("** PyType_Ready failed for: oa2DLookupTbl_oaInt4_oaInt4_oaInt4\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oa2DLookupTbl_oaInt4_oaInt4_oaInt4",
           (PyObject*)(&Pyoa2DLookupTbl_oaInt4_oaInt4_oaInt4_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oa2DLookupTbl_oaInt4_oaInt4_oaInt4\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self = (Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue)
    {
        PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue p1;
        if (PyArg_ParseTuple(args,"O&",
              &Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert,&p1)) {
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaViaDefArrayValue p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaViaDefArrayValue_Convert,&p5)) {
            if (!PyValidateDbObject(p5.Data(),5)) return NULL;
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaViaDefArrayValue p5;
        PyParamoaInterpolateType p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaViaDefArrayValue_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6)) {
            if (!PyValidateDbObject(p5.Data(),5)) return NULL;
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaViaDefArrayValue p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaViaDefArrayValue_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7)) {
            if (!PyValidateDbObject(p5.Data(),5)) return NULL;
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaViaDefArrayValue p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaViaDefArrayValue_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8)) {
            if (!PyValidateDbObject(p5.Data(),5)) return NULL;
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaViaDefArrayValue p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaViaDefArrayValue_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9)) {
            if (!PyValidateDbObject(p5.Data(),5)) return NULL;
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaViaDefArrayValue p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        PyParamoaExtrapolateType p10;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaViaDefArrayValue_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9,
              &PyoaExtrapolateType_Convert,&p10)) {
            if (!PyValidateDbObject(p5.Data(),5)) return NULL;
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)
    {
        PyParamoaUInt4 p1;
        PyParamoaUInt4 p2;
        PyParamoaString p3;
        PyParamoaString p4;
        PyParamoaViaDefArrayValue p5;
        PyParamoaInterpolateType p6;
        PyParamoaInterpolateType p7;
        PyParamoaExtrapolateType p8;
        PyParamoaExtrapolateType p9;
        PyParamoaExtrapolateType p10;
        PyParamoaExtrapolateType p11;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaUInt4_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaViaDefArrayValue_Convert,&p5,
              &PyoaInterpolateType_Convert,&p6,
              &PyoaInterpolateType_Convert,&p7,
              &PyoaExtrapolateType_Convert,&p8,
              &PyoaExtrapolateType_Convert,&p9,
              &PyoaExtrapolateType_Convert,&p10,
              &PyoaExtrapolateType_Convert,&p11)) {
            if (!PyValidateDbObject(p5.Data(),5)) return NULL;
            self->value =  new oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data(),p11.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Choices are:\n"
        "    ()\n"
        "    (oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
        "    (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_tp_dealloc(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_tp_repr(PyObject *ob)
{
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue value;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue v1;
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue v2;
    int convert_status1=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob1,&v1);
    int convert_status2=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(PyObject* ob,PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue* result)
{
    if (ob == NULL) return 1;
    if (Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Check(ob)) {
        result->SetData(  ((Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Fromoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Type.tp_alloc(&Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Type,0);
        if (bself == NULL) return bself;
        Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self = (Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_calcVMSize_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: calcVMSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8 calcVMSize() const\n"
"    Signature: calcVMSize|simple-oaUInt8|\n"
"    BrowseData: 1\n"
"    This function returns the number of bytes this object uses in virtual memory.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_calcVMSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8 result= (data.DataCall()->calcVMSize());
        return PyoaUInt8_FromoaUInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColHeader_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getColHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaInt4 getColHeader(oaUInt4 index) const\n"
"    Signature: getColHeader|simple-oaInt4|simple-oaUInt4,\n"
"    This function returns a value from the column header for this table.\n"
"    index\n"
"    The index location in the column header. This index must be a legal index for the columns in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaInt4 result= (data.DataCall()->getColHeader(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getColInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getColInterpolateType() const\n"
"    Signature: getColInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type which is applied to keys that are between the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getColInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getColLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getColLowerExtrapolateType() const\n"
"    Signature: getColLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are below to the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getColLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColName_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getColName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getColName(oaString& name) const\n"
"    Signature: getColName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the column header of this table.\n"
"    name\n"
"    The returned column header name\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getColName() const\n"
"    Signature: getColName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the column header of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getColName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getColName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, function: getColName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getColUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getColUpperExtrapolateType() const\n"
"    Signature: getColUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are above to the column header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getColUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getDefaultValue_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getDefaultValue\n"
"  Paramegers: ()\n"
"    Calls: oaViaDefArrayValue* getDefaultValue() const\n"
"    Signature: getDefaultValue|ptr-oaViaDefArrayValue|\n"
"    BrowseData: 1\n"
"    This function returns the default value of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaViaDefArrayValuep result= (data.DataCall()->getDefaultValue());
        return PyoaViaDefArrayValue_FromoaViaDefArrayValue(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getNumCols_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getNumCols\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumCols() const\n"
"    Signature: getNumCols|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of allocated columns in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getNumCols(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumCols());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getNumRows_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getNumRows\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumRows() const\n"
"    Signature: getNumRows|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of allocated rows in this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getNumRows(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumRows());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowHeader_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getRowHeader\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaInt4 getRowHeader(oaUInt4 index) const\n"
"    Signature: getRowHeader|simple-oaInt4|simple-oaUInt4,\n"
"    This function returns a value from the row header for this table. The index must be a legal value for the rows of this table.\n"
"    index\n"
"    The index location in the row header array\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaInt4 result= (data.DataCall()->getRowHeader(p1.Data()));
        return PyoaInt4_FromoaInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getRowInterpolateType\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateType getRowInterpolateType() const\n"
"    Signature: getRowInterpolateType|simple-oaInterpolateType|\n"
"    BrowseData: 1\n"
"    This function returns the interpolation type which is applied to keys that are between the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateType* result= new oaInterpolateType(data.DataCall()->getRowInterpolateType());
        return PyoaInterpolateType_FromoaInterpolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getRowLowerExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getRowLowerExtrapolateType() const\n"
"    Signature: getRowLowerExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are below to the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getRowLowerExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowName_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getRowName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getRowName(oaString& name) const\n"
"    Signature: getRowName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the row header of this table.\n"
"    name\n"
"    The returned row header name\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getRowName() const\n"
"    Signature: getRowName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the row header of this table.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->getRowName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaString result= (data.DataCall()->getRowName());
            return PyoaString_FromoaString(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, function: getRowName, Choices are:\n"
        "    (oaString)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getRowUpperExtrapolateType\n"
"  Paramegers: ()\n"
"    Calls: oaExtrapolateType getRowUpperExtrapolateType() const\n"
"    Signature: getRowUpperExtrapolateType|simple-oaExtrapolateType|\n"
"    BrowseData: 1\n"
"    This function returns the extrapolation type which is applied to keys that are above to the row header values.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaExtrapolateType* result= new oaExtrapolateType(data.DataCall()->getRowUpperExtrapolateType());
        return PyoaExtrapolateType_FromoaExtrapolateType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getValue_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: getValue\n"
"  Paramegers: (oaUInt4,oaUInt4)\n"
"    Calls: oaViaDefArrayValue* getValue(oaUInt4 rowIndex,oaUInt4 colIndex) const\n"
"    Signature: getValue|ptr-oaViaDefArrayValue|simple-oaUInt4,simple-oaUInt4,\n"
"    This function gets a return value contained in this table. The row and column indexes must be legal for the size of this table.\n"
"    rowIndex\n"
"    The row index location in this table\n"
"    colIndex\n"
"    The column index location in this table\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaUInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaUInt4_Convert,&p2)) {
        oaViaDefArrayValuep result= (data.DataCall()->getValue(p1.Data(),p2.Data()));
        return PyoaViaDefArrayValue_FromoaViaDefArrayValue(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColHeader_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setColHeader\n"
"  Paramegers: (oaUInt4,oaInt4)\n"
"    Calls: void setColHeader(oaUInt4 index,oaInt4 value)\n"
"    Signature: setColHeader|void-void|simple-oaUInt4,simple-oaInt4,\n"
"    This function sets a value in the column header for this table.\n"
"    index\n"
"    The index location in the column header array. This must be valid for the current number of columns in the table.\n"
"    value\n"
"    The header value for this column\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        data.DataCall()->setColHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setColInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setColInterpolateType(oaInterpolateType type)\n"
"    Signature: setColInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type for the column header of this table.\n"
"    type\n"
"    The interpolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setColInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setColLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setColLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setColLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are below all column header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setColLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColName_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setColName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setColName(const oaString& name)\n"
"    Signature: setColName|void-void|cref-oaString,\n"
"    This function sets the name of the column header of this table\n"
"    name\n"
"    The column header name\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setColName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setColUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setColUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setColUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are above all column header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setColUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setDefaultValue_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setDefaultValue\n"
"  Paramegers: (oaViaDefArrayValue)\n"
"    Calls: void setDefaultValue(oaViaDefArrayValue* value)\n"
"    Signature: setDefaultValue|void-void|ptr-oaViaDefArrayValue,\n"
"    This function sets the default value of this table to the specified value.\n"
"    value\n"
"    The default value\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setDefaultValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaViaDefArrayValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaDefArrayValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->setDefaultValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setNumCols_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setNumCols\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumCols(oaUInt4 numColsIn)\n"
"    Signature: setNumCols|void-void|simple-oaUInt4,\n"
"    This function sets the allocated number of columns in this table. The data in the table is retained where it fits within the new number of columns.\n"
"    numColsIn\n"
"    The number of columns to allocate for this table\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setNumCols(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumCols(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setNumRows_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setNumRows\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumRows(oaUInt4 numRowsIn)\n"
"    Signature: setNumRows|void-void|simple-oaUInt4,\n"
"    This function sets the allocated number of rows in this table. The data in the table is retained where it fits within the new number of rows.\n"
"    numRowsIn\n"
"    The possible number of rows this table can contain\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setNumRows(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumRows(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowHeader_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setRowHeader\n"
"  Paramegers: (oaUInt4,oaInt4)\n"
"    Calls: void setRowHeader(oaUInt4 index,oaInt4 value)\n"
"    Signature: setRowHeader|void-void|simple-oaUInt4,simple-oaInt4,\n"
"    This function sets a value in the row header for this table.\n"
"    index\n"
"    The index location in the row header array. This must be valid for the current number of rows in the table.\n"
"    value\n"
"    The lookup key value to set\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaInt4 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaInt4_Convert,&p2)) {
        data.DataCall()->setRowHeader(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowInterpolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setRowInterpolateType\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: void setRowInterpolateType(oaInterpolateType type)\n"
"    Signature: setRowInterpolateType|void-void|simple-oaInterpolateType,\n"
"    This function sets the interpolation type for the row header of this table.\n"
"    type\n"
"    The interpolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowInterpolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.DataCall()->setRowInterpolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowLowerExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setRowLowerExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setRowLowerExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setRowLowerExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are below all row header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowLowerExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setRowLowerExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowName_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setRowName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setRowName(const oaString& name)\n"
"    Signature: setRowName|void-void|cref-oaString,\n"
"    This function sets the name of the row header of this table.\n"
"    name\n"
"    The row header name\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setRowName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowUpperExtrapolateType_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setRowUpperExtrapolateType\n"
"  Paramegers: (oaExtrapolateType)\n"
"    Calls: void setRowUpperExtrapolateType(oaExtrapolateType type)\n"
"    Signature: setRowUpperExtrapolateType|void-void|simple-oaExtrapolateType,\n"
"    This function sets the extrapolation type for the keys that are above all row header values.\n"
"    type\n"
"    The extrapolate type\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowUpperExtrapolateType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaExtrapolateType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaExtrapolateType_Convert,&p1)) {
        data.DataCall()->setRowUpperExtrapolateType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setValue_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: setValue\n"
"  Paramegers: (oaUInt4,oaUInt4,oaViaDefArrayValue)\n"
"    Calls: void setValue(oaUInt4 rowIndex,oaUInt4 colIndex,oaViaDefArrayValue* value)\n"
"    Signature: setValue|void-void|simple-oaUInt4,simple-oaUInt4,ptr-oaViaDefArrayValue,\n"
"    This function sets a return value in this table.\n"
"    rowIndex\n"
"    The row index location in this table. This index must be legal for this table.\n"
"    colIndex\n"
"    The column index location in this table. This index must be legal for this table.\n"
"    value\n"
"    The lookup value\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
    int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject* self=(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject*)ob;

    PyParamoaUInt4 p1;
    PyParamoaUInt4 p2;
    PyParamoaViaDefArrayValue p3;
    if (PyArg_ParseTuple(args,"O&O&O&",
          &PyoaUInt4_Convert,&p1,
          &PyoaUInt4_Convert,&p2,
          &PyoaViaDefArrayValue_Convert,&p3)) {
        if (!PyValidateDbObject(p3.Data(),3)) return NULL;
        data.DataCall()->setValue(p1.Data(),p2.Data(),p3.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_assign_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue data;
  int convert_status=Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_methodlist[] = {
    {"calcVMSize",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_calcVMSize,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_calcVMSize_doc},
    {"getColHeader",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColHeader,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColHeader_doc},
    {"getColInterpolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColInterpolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColInterpolateType_doc},
    {"getColLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColLowerExtrapolateType_doc},
    {"getColName",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColName,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColName_doc},
    {"getColUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getColUpperExtrapolateType_doc},
    {"getDefaultValue",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getDefaultValue,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getDefaultValue_doc},
    {"getNumCols",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getNumCols,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getNumCols_doc},
    {"getNumRows",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getNumRows,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getNumRows_doc},
    {"getRowHeader",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowHeader,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowHeader_doc},
    {"getRowInterpolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowInterpolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowInterpolateType_doc},
    {"getRowLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowLowerExtrapolateType_doc},
    {"getRowName",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowName,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowName_doc},
    {"getRowUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getRowUpperExtrapolateType_doc},
    {"getValue",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getValue,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_getValue_doc},
    {"setColHeader",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColHeader,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColHeader_doc},
    {"setColInterpolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColInterpolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColInterpolateType_doc},
    {"setColLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColLowerExtrapolateType_doc},
    {"setColName",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColName,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColName_doc},
    {"setColUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setColUpperExtrapolateType_doc},
    {"setDefaultValue",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setDefaultValue,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setDefaultValue_doc},
    {"setNumCols",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setNumCols,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setNumCols_doc},
    {"setNumRows",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setNumRows,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setNumRows_doc},
    {"setRowHeader",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowHeader,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowHeader_doc},
    {"setRowInterpolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowInterpolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowInterpolateType_doc},
    {"setRowLowerExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowLowerExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowLowerExtrapolateType_doc},
    {"setRowName",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowName,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowName_doc},
    {"setRowUpperExtrapolateType",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowUpperExtrapolateType,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setRowUpperExtrapolateType_doc},
    {"setValue",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setValue,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_setValue_doc},
    {"assign",(PyCFunction)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_tp_assign,METH_VARARGS,oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_doc[] = 
"Class: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue\n"
"  The oa2DLookupTbl class is a template for a two-dimensional lookup table. The table has both header entries and return value entries. When a lookup is performed the key is compared with the header entries to find its location in that set. The lookup will then return the corresponding return value entry, or a value based on the nearest return value entries.\n"
"  The class is templatized for the type of both the row and column headers and the return value entries. At the time that a lookup is performed, the header entries are assumed to be in strictly ascending order. They may be out of order while the table is being created or modified.\n"
"  The handling of keys that are not exact header entries is determined by the interpolation and extrapolation types set in the table. Interpolation applies to keys that are within the range of the header entries, and extrapolation applies to keys that are outside of the values in the header. Row values and column values are always treated the same. See the classes oaExtrapolateType and oaInterpolateType for more details.\n"
"  The lookup classes ( oa1DLookupTbl and oa2DLookupTbl) are used by OpenAccess to represent values passed to oaValue subclasses -- see oaInt2DTblValue , oaFlt2DTblValue , and oaViaDef2DTblValue for examples of oaValue subclasses that use oa2DLookupTbls. The oaValue subclasses, in turn, are used to associate different values with constraints -- see oaValue() and its subclasses for more information. The oa2DLookupTbl utility class can be used by applications for other purposes as well.\n"
"  Here is an example of an oa2DLookupTbl<oaUInt4, oaUInt4, oaFloat>:\n"
"  Indexes\n"
"  _\n"
"  0\n"
"  1\n"
"  2\n"
"  _\n"
"  Headers\n"
"  20\n"
"  40\n"
"  60\n"
"  0\n"
"  100\n"
"  2.2\n"
"  3.3\n"
"  4.4\n"
"  1\n"
"  200\n"
"  12.2\n"
"  13.3\n"
"  14.4\n"
"  In this example, looking up with keys of 150 and 30 will return: 2.2 if InterpolateType is set to oacSnapDownInterpolateType 7.75 if InterpolateType is set to oacLinearInterpolateType 13.3 if InterpolateType is set to oacSnapUpInterpolateType\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue()\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue||\n"
"    This function constructs an empty oa2DLookupTbl instance to provide a two-dimensional lookup table. The table has a 0 allocated size at this point. oa2DLookupTbl::setNumCols and oa2DLookupTbl::setNumRows must be called before it can be used.\n"
"  Paramegers: (oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(const oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue& tbl)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue||cref-oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue,\n"
"    This function constructs an oa2DLookupTbl instance and initializes the table to the same values that are in the given oa2DLookupTbl tbl .\n"
"    tbl\n"
"    The oa2DLookupTbl to copy\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaViaDefArrayValue* defaultValue)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,ptr-oaViaDefArrayValue,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaViaDefArrayValue* defaultValue,oaInterpolateType iColTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,ptr-oaViaDefArrayValue,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaViaDefArrayValue* defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,ptr-oaViaDefArrayValue,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaViaDefArrayValue* defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,ptr-oaViaDefArrayValue,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaViaDefArrayValue* defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,ptr-oaViaDefArrayValue,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaViaDefArrayValue* defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn,oaExtrapolateType eColLowerTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,ptr-oaViaDefArrayValue,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oaUInt4,oaUInt4,oaString,oaString,oaViaDefArrayValue,oaInterpolateType,oaInterpolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType,oaExtrapolateType)\n"
"    Calls: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue(oaUInt4 numRowsIn,oaUInt4 numColsIn,const oaString& rowNameIn,const oaString& colNameIn,oaViaDefArrayValue* defaultValue,oaInterpolateType iColTypeIn,oaInterpolateType iRowTypeIn,oaExtrapolateType eRowLowerTypeIn,oaExtrapolateType eRowUpperTypeIn,oaExtrapolateType eColLowerTypeIn,oaExtrapolateType eColUpperTypeIn)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue||simple-oaUInt4,simple-oaUInt4,cref-oaString,cref-oaString,ptr-oaViaDefArrayValue,simple-oaInterpolateType,simple-oaInterpolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,simple-oaExtrapolateType,\n"
"    This function constructs an oa2DLookupTbl instance using the specified number of rows and columns to create a two-dimensional lookup table.\n"
"    numRowsIn\n"
"    The number of rows to allocate in the table\n"
"    numColsIn\n"
"    The number of columns to allocate in the table\n"
"    rowNameIn\n"
"    The name of the row header\n"
"    colNameIn\n"
"    The name of the column header\n"
"    defaultValue\n"
"    The default value\n"
"    iColTypeIn\n"
"    The interpolation to apply for keys that are between the column header values\n"
"    iRowTypeIn\n"
"    The interpolation to apply for keys that are between the row header values\n"
"    eRowLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all row header values\n"
"    eRowUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all row header values\n"
"    eColLowerTypeIn\n"
"    The extrapolation to apply for keys that are below all column header values\n"
"    eColUpperTypeIn\n"
"    The extrapolation to apply for keys that are above all column header values\n"
"  Paramegers: (oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue)\n"
"    Calls: (const oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue&)\n"
"    Signature: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue||cref-oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue,\n"
;

// ------------------------------------------------------------------
PyTypeObject Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue",
    sizeof(Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValueObject),
    0,
    (destructor)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_tp_compare,	/* tp_compare */
    (reprfunc)oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Type)<0) {
      printf("** PyType_Ready failed for: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue",
           (PyObject*)(&Pyoa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oa2DLookupTbl_oaInt4_oaInt4_oaViaDefArrayValue\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAlignmentType
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAlignmentType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAlignmentType_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaAlignmentTypeObject* self = (PyoaAlignmentTypeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaAlignmentTypeEnum)
    {
        PyParamoaAlignmentTypeEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaAlignmentTypeEnum_Convert,&p1)) {
            self->value =  new oaAlignmentType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaAlignmentType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaAlignmentType)
    {
        PyParamoaAlignmentType p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaAlignmentType_Convert,&p1)) {
            self->value= new oaAlignmentType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAlignmentType, Choices are:\n"
        "    (oaAlignmentTypeEnum)\n"
        "    (oaString)\n"
        "    (oaAlignmentType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAlignmentType_tp_dealloc(PyoaAlignmentTypeObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaAlignmentType_tp_repr(PyObject *ob)
{
    PyParamoaAlignmentType value;
    int convert_status=PyoaAlignmentType_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[37];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaAlignmentType::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaAlignmentType_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAlignmentType v1;
    PyParamoaAlignmentType v2;
    int convert_status1=PyoaAlignmentType_Convert(ob1,&v1);
    int convert_status2=PyoaAlignmentType_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaAlignmentType_Convert(PyObject* ob,PyParamoaAlignmentType* result)
{
    if (ob == NULL) return 1;
    if (PyoaAlignmentType_Check(ob)) {
        result->SetData(  ((PyoaAlignmentTypeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAlignmentType Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaAlignmentType_FromoaAlignmentType(oaAlignmentType* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaAlignmentType_Type.tp_alloc(&PyoaAlignmentType_Type,0);
        if (bself == NULL) return bself;
        PyoaAlignmentTypeObject* self = (PyoaAlignmentTypeObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAlignmentType_getName_doc[] = 
"Class: oaAlignmentType, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the string name that corresponds to an oaAlignmentTypeEnum value.\n"
"    Todo\n"
"    Check description of member function.\n"
;

static PyObject*
oaAlignmentType_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAlignmentType data;
    int convert_status=PyoaAlignmentType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAlignmentTypeObject* self=(PyoaAlignmentTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAlignmentType_oaAlignmentTypeEnum_doc[] = 
"Class: oaAlignmentType, Function: oaAlignmentTypeEnum\n"
"  Paramegers: ()\n"
"    Calls: oaAlignmentTypeEnum oaAlignmentTypeEnum() const\n"
"    Signature: operator oaAlignmentTypeEnum|simple-oaAlignmentTypeEnum|\n"
"    BrowseData: 1\n"
"    This function returns the enum value of the enum wrapper class object.\n"
"    Todo\n"
"    Add description of member function.\n"
;

static PyObject*
oaAlignmentType_oaAlignmentTypeEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAlignmentType data;
    int convert_status=PyoaAlignmentType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAlignmentTypeObject* self=(PyoaAlignmentTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAlignmentTypeEnum result= (data.DataCall()->operator oaAlignmentTypeEnum());
        return PyoaAlignmentTypeEnum_FromoaAlignmentTypeEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaAlignmentType_assign_doc[] = 
"Class: oaAlignmentType, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaAlignmentType_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaAlignmentType data;
  int convert_status=PyoaAlignmentType_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaAlignmentType p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaAlignmentType_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaAlignmentType_methodlist[] = {
    {"getName",(PyCFunction)oaAlignmentType_getName,METH_VARARGS,oaAlignmentType_getName_doc},
    {"oaAlignmentTypeEnum",(PyCFunction)oaAlignmentType_oaAlignmentTypeEnum,METH_VARARGS,oaAlignmentType_oaAlignmentTypeEnum_doc},
    {"assign",(PyCFunction)oaAlignmentType_tp_assign,METH_VARARGS,oaAlignmentType_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAlignmentType_doc[] = 
"Class: oaAlignmentType\n"
"  oaAlignmentTypeEnum\n"
"  The oaAlignmentType class is an enum wrapper class for oaAlignmentTypeEnum values.\n"
"  See Enum Wrappers in the Programmers Guide for a discussion of enum wrappers.\n"
"  Todo\n"
"  Check detailed description of class.\n"
"Constructors:\n"
"  Paramegers: (oaAlignmentTypeEnum)\n"
"    Calls: oaAlignmentType(oaAlignmentTypeEnum typeIn)\n"
"    Signature: oaAlignmentType||simple-oaAlignmentTypeEnum,\n"
"    This is a constructor for the oaAlignmentType wrapper class that takes an enum value as input.\n"
"    typeIn\n"
"    The type of alignment, which is represented by an oaAlignmentTypeEnum.\n"
"    Todo\n"
"    Complete description of member function. Add description of each parameter.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaAlignmentType(const oaString& name)\n"
"    Signature: oaAlignmentType||cref-oaString,\n"
"    This is a constructor for the oaAlignmentType wrapper class, which takes a string value of an oaAlignmentTypeEnum.\n"
"    name\n"
"    The string value of an oaAlignmnetTypeEnum.\n"
"    oacInvalidAlignmentTypeName\n"
"    Todo\n"
"    Complete description of member function. Add description of each parameter.\n"
"  Paramegers: (oaAlignmentType)\n"
"    Calls: (const oaAlignmentType&)\n"
"    Signature: oaAlignmentType||cref-oaAlignmentType,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaAlignmentType_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAlignmentType",
    sizeof(PyoaAlignmentTypeObject),
    0,
    (destructor)oaAlignmentType_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaAlignmentType_tp_compare,	/* tp_compare */
    (reprfunc)oaAlignmentType_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAlignmentType_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaAlignmentType_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaAlignmentType_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaAlignmentType_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAlignmentType_Type)<0) {
      printf("** PyType_Ready failed for: oaAlignmentType\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaAlignmentType",
           (PyObject*)(&PyoaAlignmentType_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAlignmentType\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAlignmentTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaAlignmentTypeEnum_Convert(PyObject* ob,PyParamoaAlignmentTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacInsideAlignmentType")==0) { result->SetData(oacInsideAlignmentType); return 1;}
        if (strcasecmp(str,"oacOutsideAlignmentType")==0) { result->SetData(oacOutsideAlignmentType); return 1;}
        if (strcasecmp(str,"oacInsideOutsideAlignmentType")==0) { result->SetData(oacInsideOutsideAlignmentType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaAlignmentTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAlignmentTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaAlignmentTypeEnum_FromoaAlignmentTypeEnum(oaAlignmentTypeEnum ob)
{
    if (ob==oacInsideAlignmentType) return PyString_FromString("oacInsideAlignmentType");
    if (ob==oacOutsideAlignmentType) return PyString_FromString("oacOutsideAlignmentType");
    if (ob==oacInsideOutsideAlignmentType) return PyString_FromString("oacInsideOutsideAlignmentType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaAlignmentTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaAlignmentTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaAlignmentTypeEnum_FromoaAlignmentTypeEnum(oaAlignmentTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaAlignmentTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaAlignmentTypeEnum_doc[] =
"Type convert function for enum: oaAlignmentTypeEnum";
                               
static PyMethodDef PyoaAlignmentTypeEnum_method =
  {"oaAlignmentTypeEnum",(PyCFunction)PyoaAlignmentTypeEnum_TypeFunction,METH_VARARGS,oaAlignmentTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaAlignmentTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacInsideAlignmentType");
    PyDict_SetItemString(mod_dict,"oacInsideAlignmentType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOutsideAlignmentType");
    PyDict_SetItemString(mod_dict,"oacOutsideAlignmentType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInsideOutsideAlignmentType");
    PyDict_SetItemString(mod_dict,"oacInsideOutsideAlignmentType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaAlignmentTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaAlignmentTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaAlignmentTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAnalysisLib
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAnalysisLib_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAnalysisLib_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaAnalysisLibObject* self = (PyoaAnalysisLibObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaAnalysisLib)
    {
        PyParamoaAnalysisLib p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaAnalysisLib_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAnalysisLib, Choices are:\n"
        "    (oaAnalysisLib)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAnalysisLib_tp_dealloc(PyoaAnalysisLibObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaAnalysisLib_tp_repr(PyObject *ob)
{
    PyParamoaAnalysisLib value;
    int convert_status=PyoaAnalysisLib_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[35];
    sprintf(buffer,"<oaAnalysisLib::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaAnalysisLib_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAnalysisLib v1;
    PyParamoaAnalysisLib v2;
    int convert_status1=PyoaAnalysisLib_Convert(ob1,&v1);
    int convert_status2=PyoaAnalysisLib_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaAnalysisLib_Convert(PyObject* ob,PyParamoaAnalysisLib* result)
{
    if (ob == NULL) return 1;
    if (PyoaAnalysisLib_Check(ob)) {
        result->SetData( (oaAnalysisLib**) ((PyoaAnalysisLibObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAnalysisLib Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaAnalysisLib_FromoaAnalysisLib(oaAnalysisLib** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaAnalysisLib* data=*value;
        PyObject* bself = PyoaAnalysisLib_Type.tp_alloc(&PyoaAnalysisLib_Type,0);
        if (bself == NULL) return bself;
        PyoaAnalysisLibObject* self = (PyoaAnalysisLibObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaAnalysisLib_FromoaAnalysisLib(oaAnalysisLib* data)
{
    if (data) {
       PyObject* bself = PyoaAnalysisLib_Type.tp_alloc(&PyoaAnalysisLib_Type,0);
       if (bself == NULL) return bself;
       PyoaAnalysisLibObject* self = (PyoaAnalysisLibObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAnalysisLib_destroy_doc[] = 
"Class: oaAnalysisLib, Function: destroy\n"
"  Paramegers: ()\n"
"    Calls: void destroy()\n"
"    Signature: destroy|void-void|\n"
"    BrowseData: 0\n"
"    This function destroys this oaAnalysisLib object, removing it from the technology database.\n"
;

static PyObject*
oaAnalysisLib_destroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->destroy();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_getCellName_doc[] = 
"Class: oaAnalysisLib, Function: getCellName\n"
"  Paramegers: (oaScalarName)\n"
"    Calls: void getCellName(oaScalarName& cellName) const\n"
"    Signature: getCellName|void-void|ref-oaScalarName,\n"
"    BrowseData: 0,oaScalarName\n"
"    This function gets the cellName of this oaAnalysisLib object. An empty name is returned if the cellName of this oaAnalysisLib object is not set.\n"
;

static PyObject*
oaAnalysisLib_getCellName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScalarName p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScalarName_Convert,&p1)) {
        data.DataCall()->getCellName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_getFileName_doc[] = 
"Class: oaAnalysisLib, Function: getFileName\n"
"  Paramegers: (oaScalarName)\n"
"    Calls: void getFileName(oaScalarName& fileName) const\n"
"    Signature: getFileName|void-void|ref-oaScalarName,\n"
"    BrowseData: 0,oaScalarName\n"
"    This function gets the fileName of this oaAnalysisLib object.\n"
;

static PyObject*
oaAnalysisLib_getFileName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScalarName p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScalarName_Convert,&p1)) {
        data.DataCall()->getFileName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_getFormat_doc[] = 
"Class: oaAnalysisLib, Function: getFormat\n"
"  Paramegers: (oaString)\n"
"    Calls: void getFormat(oaString& format) const\n"
"    Signature: getFormat|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function gets the format of this analysisLib object.\n"
"    format\n"
"    The format of this analysisLib object.\n"
;

static PyObject*
oaAnalysisLib_getFormat(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getFormat(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_getName_doc[] = 
"Class: oaAnalysisLib, Function: getName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getName(oaString& name) const\n"
"    Signature: getName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function gets the name of this oaAnalysisLib object.\n"
;

static PyObject*
oaAnalysisLib_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_getOpPoints_doc[] = 
"Class: oaAnalysisLib, Function: getOpPoints\n"
"  Paramegers: ()\n"
"    Calls: oaCollection_oaOpPoint_oaAnalysisLib getOpPoints() const\n"
"    Signature: getOpPoints|simple-oaCollection_oaOpPoint_oaAnalysisLib|\n"
"    BrowseData: 1\n"
"    This function returns a collection of operating points in this oaAnalysisLib object.\n"
;

static PyObject*
oaAnalysisLib_getOpPoints(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaCollection_oaOpPoint_oaAnalysisLib* result= new oaCollection_oaOpPoint_oaAnalysisLib(data.DataCall()->getOpPoints());
        return PyoaCollection_oaOpPoint_oaAnalysisLib_FromoaCollection_oaOpPoint_oaAnalysisLib(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_getOpPointsIter_doc[] = 
"Class: oaAnalysisLib, Function: getOpPointsIter\n"
"  Paramegers: ()\n"
"    Calls: oaIter_oaOpPoint getOpPointsIter() const\n"
"    Signature: getOpPointsIter|simple-oaIter_oaOpPoint|\n"
"    BrowseData: 1\n"
"    This function returns an Iterator over the following collection: This function returns a collection of operating points in this oaAnalysisLib object.\n"
;

static PyObject*
oaAnalysisLib_getOpPointsIter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaIter_oaOpPoint* result= new oaIter_oaOpPoint(data.DataCall()->getOpPoints());
        return PyoaIter_oaOpPoint_FromoaIter_oaOpPoint(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_getViewName_doc[] = 
"Class: oaAnalysisLib, Function: getViewName\n"
"  Paramegers: (oaScalarName)\n"
"    Calls: void getViewName(oaScalarName& viewName) const\n"
"    Signature: getViewName|void-void|ref-oaScalarName,\n"
"    BrowseData: 0,oaScalarName\n"
"    This function gets the viewName of this oaAnalysisLib object. An empty name is returned if the viewName of this oaAnalysisLib object is not set.\n"
;

static PyObject*
oaAnalysisLib_getViewName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScalarName p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScalarName_Convert,&p1)) {
        data.DataCall()->getViewName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_setCellName_doc[] = 
"Class: oaAnalysisLib, Function: setCellName\n"
"  Paramegers: (oaScalarName)\n"
"    Calls: void setCellName(const oaScalarName& cellName)\n"
"    Signature: setCellName|void-void|cref-oaScalarName,\n"
"    This function sets the cellName of this oaAnalysisLib object to the specified value.\n"
;

static PyObject*
oaAnalysisLib_setCellName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScalarName p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScalarName_Convert,&p1)) {
        data.DataCall()->setCellName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_setFileName_doc[] = 
"Class: oaAnalysisLib, Function: setFileName\n"
"  Paramegers: (oaScalarName)\n"
"    Calls: void setFileName(const oaScalarName& fileName)\n"
"    Signature: setFileName|void-void|cref-oaScalarName,\n"
"    This function sets the fileName of this oaAnalysisLib object to the specified value.\n"
;

static PyObject*
oaAnalysisLib_setFileName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScalarName p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScalarName_Convert,&p1)) {
        data.DataCall()->setFileName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_setFormat_doc[] = 
"Class: oaAnalysisLib, Function: setFormat\n"
"  Paramegers: (oaString)\n"
"    Calls: void setFormat(const oaString& format)\n"
"    Signature: setFormat|void-void|cref-oaString,\n"
"    This function sets the format of this oaAnalysisLib object to the specified value.\n"
;

static PyObject*
oaAnalysisLib_setFormat(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setFormat(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_setViewName_doc[] = 
"Class: oaAnalysisLib, Function: setViewName\n"
"  Paramegers: (oaScalarName)\n"
"    Calls: void setViewName(const oaScalarName& viewName)\n"
"    Signature: setViewName|void-void|cref-oaScalarName,\n"
"    This function sets the viewName of this oaAnalysisLib object to the specified value.\n"
;

static PyObject*
oaAnalysisLib_setViewName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisLibObject* self=(PyoaAnalysisLibObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScalarName p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScalarName_Convert,&p1)) {
        data.DataCall()->setViewName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_isNull_doc[] =
"Class: oaAnalysisLib, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaAnalysisLib_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaAnalysisLib data;
    int convert_status=PyoaAnalysisLib_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaAnalysisLib_assign_doc[] = 
"Class: oaAnalysisLib, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaAnalysisLib_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaAnalysisLib data;
  int convert_status=PyoaAnalysisLib_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaAnalysisLib p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaAnalysisLib_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaAnalysisLib_methodlist[] = {
    {"destroy",(PyCFunction)oaAnalysisLib_destroy,METH_VARARGS,oaAnalysisLib_destroy_doc},
    {"getCellName",(PyCFunction)oaAnalysisLib_getCellName,METH_VARARGS,oaAnalysisLib_getCellName_doc},
    {"getFileName",(PyCFunction)oaAnalysisLib_getFileName,METH_VARARGS,oaAnalysisLib_getFileName_doc},
    {"getFormat",(PyCFunction)oaAnalysisLib_getFormat,METH_VARARGS,oaAnalysisLib_getFormat_doc},
    {"getName",(PyCFunction)oaAnalysisLib_getName,METH_VARARGS,oaAnalysisLib_getName_doc},
    {"getOpPoints",(PyCFunction)oaAnalysisLib_getOpPoints,METH_VARARGS,oaAnalysisLib_getOpPoints_doc},
    {"getOpPointsIter",(PyCFunction)oaAnalysisLib_getOpPointsIter,METH_VARARGS,oaAnalysisLib_getOpPointsIter_doc},
    {"getViewName",(PyCFunction)oaAnalysisLib_getViewName,METH_VARARGS,oaAnalysisLib_getViewName_doc},
    {"setCellName",(PyCFunction)oaAnalysisLib_setCellName,METH_VARARGS,oaAnalysisLib_setCellName_doc},
    {"setFileName",(PyCFunction)oaAnalysisLib_setFileName,METH_VARARGS,oaAnalysisLib_setFileName_doc},
    {"setFormat",(PyCFunction)oaAnalysisLib_setFormat,METH_VARARGS,oaAnalysisLib_setFormat_doc},
    {"setViewName",(PyCFunction)oaAnalysisLib_setViewName,METH_VARARGS,oaAnalysisLib_setViewName_doc},
    {"isNull",(PyCFunction)oaAnalysisLib_tp_isNull,METH_VARARGS,oaAnalysisLib_isNull_doc},
    {"assign",(PyCFunction)oaAnalysisLib_tp_assign,METH_VARARGS,oaAnalysisLib_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAnalysisLib_doc[] = 
"Class: oaAnalysisLib\n"
"  The oaAnalysisLib class defines a relationship between an analysis library (which is external to OpenAccess) and a set of oaOpPoint objects corresponding to operating points defined in that analysis library.\n"
"  The oaAnalysisLib class can be observed by deriving from\n"
"Constructors:\n"
"  Paramegers: (oaAnalysisLib)\n"
"    Calls: (const oaAnalysisLib&)\n"
"    Signature: oaAnalysisLib||cref-oaAnalysisLib,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaAnalysisLib_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAnalysisLib",
    sizeof(PyoaAnalysisLibObject),
    0,
    (destructor)oaAnalysisLib_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaAnalysisLib_tp_compare,	/* tp_compare */
    (reprfunc)oaAnalysisLib_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAnalysisLib_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaAnalysisLib_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaTechObject_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaAnalysisLib_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAnalysisLib_static_create_doc[] = 
"Class: oaAnalysisLib, Function: create\n"
"  Paramegers: (oaTech,oaString,oaString,oaScalarName)\n"
"    Calls: oaAnalysisLib* create(oaTech* tech,const oaString& name,const oaString& format,const oaScalarName* fileName)\n"
"    Signature: create|ptr-oaAnalysisLib|ptr-oaTech,cref-oaString,cref-oaString,cptr-oaScalarName,cptr-oaScalarName,cptr-oaScalarName,\n"
"    This function creates an oaAnalysisLib object with the specified name , format , fileName , and optional cellName and viewName .\n"
"    oacAnalysisLibNameExists\n"
"  Paramegers: (oaTech,oaString,oaString,oaScalarName,oaScalarName)\n"
"    Calls: oaAnalysisLib* create(oaTech* tech,const oaString& name,const oaString& format,const oaScalarName* fileName,const oaScalarName* cellName)\n"
"    Signature: create|ptr-oaAnalysisLib|ptr-oaTech,cref-oaString,cref-oaString,cptr-oaScalarName,cptr-oaScalarName,cptr-oaScalarName,\n"
"    This function creates an oaAnalysisLib object with the specified name , format , fileName , and optional cellName and viewName .\n"
"    oacAnalysisLibNameExists\n"
"  Paramegers: (oaTech,oaString,oaString,oaScalarName,oaScalarName,oaScalarName)\n"
"    Calls: oaAnalysisLib* create(oaTech* tech,const oaString& name,const oaString& format,const oaScalarName* fileName,const oaScalarName* cellName,const oaScalarName* viewName)\n"
"    Signature: create|ptr-oaAnalysisLib|ptr-oaTech,cref-oaString,cref-oaString,cptr-oaScalarName,cptr-oaScalarName,cptr-oaScalarName,\n"
"    This function creates an oaAnalysisLib object with the specified name , format , fileName , and optional cellName and viewName .\n"
"    oacAnalysisLibNameExists\n"
;

static PyObject*
oaAnalysisLib_static_create(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaTech,oaString,oaString,oaScalarName)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        PyParamoaString p3;
        PyParamoaScalarName p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaScalarName_ConvertAof,&p4)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaAnalysisLibp result= (oaAnalysisLib::create(p1.Data(),p2.Data(),p3.Data(),p4.DataAof()));
            return PyoaAnalysisLib_FromoaAnalysisLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaTech,oaString,oaString,oaScalarName,oaScalarName)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        PyParamoaString p3;
        PyParamoaScalarName p4;
        PyParamoaScalarName p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaScalarName_ConvertAof,&p4,
              &PyoaScalarName_ConvertAof,&p5)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaAnalysisLibp result= (oaAnalysisLib::create(p1.Data(),p2.Data(),p3.Data(),p4.DataAof(),p5.DataAof()));
            return PyoaAnalysisLib_FromoaAnalysisLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaTech,oaString,oaString,oaScalarName,oaScalarName,oaScalarName)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        PyParamoaString p3;
        PyParamoaScalarName p4;
        PyParamoaScalarName p5;
        PyParamoaScalarName p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaString_Convert,&p3,
              &PyoaScalarName_ConvertAof,&p4,
              &PyoaScalarName_ConvertAof,&p5,
              &PyoaScalarName_ConvertAof,&p6)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaAnalysisLibp result= (oaAnalysisLib::create(p1.Data(),p2.Data(),p3.Data(),p4.DataAof(),p5.DataAof(),p6.DataAof()));
            return PyoaAnalysisLib_FromoaAnalysisLib(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaAnalysisLib, function: create, Choices are:\n"
        "    (oaTech,oaString,oaString,oaScalarName)\n"
        "    (oaTech,oaString,oaString,oaScalarName,oaScalarName)\n"
        "    (oaTech,oaString,oaString,oaScalarName,oaScalarName,oaScalarName)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisLib_static_find_doc[] = 
"Class: oaAnalysisLib, Function: find\n"
"  Paramegers: (oaTech,oaString)\n"
"    Calls: oaAnalysisLib* find(const oaTech* tech,const oaString& name)\n"
"    Signature: find|ptr-oaAnalysisLib|cptr-oaTech,cref-oaString,\n"
"    This function searches the specified technology database for an oaAnalysisLib object with the specified name . If the specified technology database references other technology databases, those are searched as well and the first matching analysis library is returned. To find an analysis library in the current technology database only, refer to the find function that accepts the local argument.\n"
"    If found, a pointer to the oaAnalysisLib object is returned. Otherwise, NULL is returned.\n"
"    Refer to Incremental Technology Databases in the Using Technology Databases section of the Programmers Guide for more information about referenced tech databases.\n"
"    tech\n"
"    Technology database from which to start the search for the analysis library\n"
"    name\n"
"    Name of the analysis library to search for\n"
"  Paramegers: (oaTech,oaString,oaBoolean)\n"
"    Calls: oaAnalysisLib* find(const oaTech* tech,const oaString& name,oaBoolean local)\n"
"    Signature: find|ptr-oaAnalysisLib|cptr-oaTech,cref-oaString,simple-oaBoolean,\n"
"    oaAnalysisLib::find2\n"
"    This function searches for an analysisLib with the specified name. The local argument specifies whether (if true) to look only in the specified technology database or (if false) to look in the specified technology database and all of its referenced databases. If found, a pointer to the analysisLib object is returned, otherwise NULL is returned.\n"
"    Refer to Incremental Technology Databases in the Using Technology Databases section of the Programmers Guide for more information about referenced tech databases.\n"
"    tech\n"
"    Technology database from which to start the search for the analysis library\n"
"    name\n"
"    Name of the analysis library to search for\n"
"    local\n"
"    Specifies whether (if true) to look only in the specified technology database or (if false) to look in the specified technology database and all of its referenced databases.\n"
;

static PyObject*
oaAnalysisLib_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaTech,oaString)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaAnalysisLibp result= (oaAnalysisLib::find(p1.Data(),p2.Data()));
            return PyoaAnalysisLib_FromoaAnalysisLib(result);
        }
    }
    PyErr_Clear();
    // Case: (oaTech,oaString,oaBoolean)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaAnalysisLibp result= (oaAnalysisLib::find(p1.Data(),p2.Data(),p3.Data()));
            return PyoaAnalysisLib_FromoaAnalysisLib(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaAnalysisLib, function: find, Choices are:\n"
        "    (oaTech,oaString)\n"
        "    (oaTech,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaAnalysisLib_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaAnalysisLib_static_create,METH_VARARGS,oaAnalysisLib_static_create_doc},
    {"static_find",(PyCFunction)oaAnalysisLib_static_find,METH_VARARGS,oaAnalysisLib_static_find_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaAnalysisLib_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAnalysisLib_Type)<0) {
      printf("** PyType_Ready failed for: oaAnalysisLib\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaAnalysisLib",
           (PyObject*)(&PyoaAnalysisLib_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAnalysisLib\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaAnalysisLib_Type.tp_dict;
    for(method=oaAnalysisLib_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAnalysisLibModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaAnalysisLibModTypeEnum_Convert(PyObject* ob,PyParamoaAnalysisLibModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacSetTypeAnalysisLibModType")==0) { result->SetData(oacSetTypeAnalysisLibModType); return 1;}
        if (strcasecmp(str,"oacSetFileNameAnalysisLibModType")==0) { result->SetData(oacSetFileNameAnalysisLibModType); return 1;}
        if (strcasecmp(str,"oacSetCellNameAnalysisLibModType")==0) { result->SetData(oacSetCellNameAnalysisLibModType); return 1;}
        if (strcasecmp(str,"oacSetViewNameAnalysisLibModType")==0) { result->SetData(oacSetViewNameAnalysisLibModType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaAnalysisLibModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAnalysisLibModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaAnalysisLibModTypeEnum_FromoaAnalysisLibModTypeEnum(oaAnalysisLibModTypeEnum ob)
{
    if (ob==oacSetTypeAnalysisLibModType) return PyString_FromString("oacSetTypeAnalysisLibModType");
    if (ob==oacSetFileNameAnalysisLibModType) return PyString_FromString("oacSetFileNameAnalysisLibModType");
    if (ob==oacSetCellNameAnalysisLibModType) return PyString_FromString("oacSetCellNameAnalysisLibModType");
    if (ob==oacSetViewNameAnalysisLibModType) return PyString_FromString("oacSetViewNameAnalysisLibModType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaAnalysisLibModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaAnalysisLibModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaAnalysisLibModTypeEnum_FromoaAnalysisLibModTypeEnum(oaAnalysisLibModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaAnalysisLibModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaAnalysisLibModTypeEnum_doc[] =
"Type convert function for enum: oaAnalysisLibModTypeEnum";
                               
static PyMethodDef PyoaAnalysisLibModTypeEnum_method =
  {"oaAnalysisLibModTypeEnum",(PyCFunction)PyoaAnalysisLibModTypeEnum_TypeFunction,METH_VARARGS,oaAnalysisLibModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaAnalysisLibModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacSetTypeAnalysisLibModType");
    PyDict_SetItemString(mod_dict,"oacSetTypeAnalysisLibModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetFileNameAnalysisLibModType");
    PyDict_SetItemString(mod_dict,"oacSetFileNameAnalysisLibModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetCellNameAnalysisLibModType");
    PyDict_SetItemString(mod_dict,"oacSetCellNameAnalysisLibModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetViewNameAnalysisLibModType");
    PyDict_SetItemString(mod_dict,"oacSetViewNameAnalysisLibModType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaAnalysisLibModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaAnalysisLibModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaAnalysisLibModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAnalysisOpPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAnalysisOpPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAnalysisOpPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaAnalysisOpPointObject* self = (PyoaAnalysisOpPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaAnalysisOpPoint)
    {
        PyParamoaAnalysisOpPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaAnalysisOpPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAnalysisOpPoint, Choices are:\n"
        "    (oaAnalysisOpPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAnalysisOpPoint_tp_dealloc(PyoaAnalysisOpPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaAnalysisOpPoint_tp_repr(PyObject *ob)
{
    PyParamoaAnalysisOpPoint value;
    int convert_status=PyoaAnalysisOpPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[39];
    sprintf(buffer,"<oaAnalysisOpPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaAnalysisOpPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAnalysisOpPoint v1;
    PyParamoaAnalysisOpPoint v2;
    int convert_status1=PyoaAnalysisOpPoint_Convert(ob1,&v1);
    int convert_status2=PyoaAnalysisOpPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaAnalysisOpPoint_Convert(PyObject* ob,PyParamoaAnalysisOpPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaAnalysisOpPoint_Check(ob)) {
        result->SetData( (oaAnalysisOpPoint**) ((PyoaAnalysisOpPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAnalysisOpPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaAnalysisOpPoint_FromoaAnalysisOpPoint(oaAnalysisOpPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaAnalysisOpPoint* data=*value;
        PyObject* bself = PyoaAnalysisOpPoint_Type.tp_alloc(&PyoaAnalysisOpPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaAnalysisOpPointObject* self = (PyoaAnalysisOpPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaAnalysisOpPoint_FromoaAnalysisOpPoint(oaAnalysisOpPoint* data)
{
    if (data) {
       PyObject* bself = PyoaAnalysisOpPoint_Type.tp_alloc(&PyoaAnalysisOpPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaAnalysisOpPointObject* self = (PyoaAnalysisOpPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAnalysisOpPoint_destroy_doc[] = 
"Class: oaAnalysisOpPoint, Function: destroy\n"
"  Paramegers: ()\n"
"    Calls: void destroy()\n"
"    Signature: destroy|void-void|\n"
"    BrowseData: 0\n"
"    This function deletes this analysisOpPoint.\n"
;

static PyObject*
oaAnalysisOpPoint_destroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisOpPoint data;
    int convert_status=PyoaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisOpPointObject* self=(PyoaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->destroy();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisOpPoint_getAnalysisLibName_doc[] = 
"Class: oaAnalysisOpPoint, Function: getAnalysisLibName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getAnalysisLibName(oaString& name) const\n"
"    Signature: getAnalysisLibName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the oaAnalysisLib associated with this analysisOpPoint.\n"
"    name\n"
"    returned name of the oaAnalysisLib associated with this oaAnalysisOpPoint\n"
;

static PyObject*
oaAnalysisOpPoint_getAnalysisLibName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisOpPoint data;
    int convert_status=PyoaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisOpPointObject* self=(PyoaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getAnalysisLibName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisOpPoint_getHeader_doc[] = 
"Class: oaAnalysisOpPoint, Function: getHeader\n"
"  Paramegers: ()\n"
"    Calls: oaOpPointHeader* getHeader() const\n"
"    Signature: getHeader|ptr-oaOpPointHeader|\n"
"    BrowseData: 1\n"
"    This function returns the opPointHeader associated with this analysisOpPoint.\n"
;

static PyObject*
oaAnalysisOpPoint_getHeader(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisOpPoint data;
    int convert_status=PyoaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisOpPointObject* self=(PyoaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaOpPointHeaderp result= (data.DataCall()->getHeader());
        return PyoaOpPointHeader_FromoaOpPointHeader(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisOpPoint_getOpPoint_doc[] = 
"Class: oaAnalysisOpPoint, Function: getOpPoint\n"
"  Paramegers: ()\n"
"    Calls: oaOpPoint* getOpPoint() const\n"
"    Signature: getOpPoint|ptr-oaOpPoint|\n"
"    BrowseData: 1\n"
"    This function attempts to return the opPoint associated with this analysisOpPoint. If the analysisOpPoint is bound, a pointer to the opPoint is returned. Otherwise, NULL is returned.\n"
;

static PyObject*
oaAnalysisOpPoint_getOpPoint(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisOpPoint data;
    int convert_status=PyoaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisOpPointObject* self=(PyoaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaOpPointp result= (data.DataCall()->getOpPoint());
        return PyoaOpPoint_FromoaOpPoint(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisOpPoint_getOpPointName_doc[] = 
"Class: oaAnalysisOpPoint, Function: getOpPointName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getOpPointName(oaString& name) const\n"
"    Signature: getOpPointName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the opPoint associated with this analysisOpPoint.\n"
"    name\n"
"    returned name of the opPoint associated with this oaAnalysisOpPoint\n"
;

static PyObject*
oaAnalysisOpPoint_getOpPointName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisOpPoint data;
    int convert_status=PyoaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisOpPointObject* self=(PyoaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getOpPointName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisOpPoint_isBound_doc[] = 
"Class: oaAnalysisOpPoint, Function: isBound\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isBound() const\n"
"    Signature: isBound|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean indicating whether or not this analysisOpPoint is bound.\n"
;

static PyObject*
oaAnalysisOpPoint_isBound(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisOpPoint data;
    int convert_status=PyoaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisOpPointObject* self=(PyoaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isBound());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisOpPoint_isNull_doc[] =
"Class: oaAnalysisOpPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaAnalysisOpPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaAnalysisOpPoint data;
    int convert_status=PyoaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaAnalysisOpPoint_assign_doc[] = 
"Class: oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaAnalysisOpPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaAnalysisOpPoint data;
  int convert_status=PyoaAnalysisOpPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaAnalysisOpPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaAnalysisOpPoint_methodlist[] = {
    {"destroy",(PyCFunction)oaAnalysisOpPoint_destroy,METH_VARARGS,oaAnalysisOpPoint_destroy_doc},
    {"getAnalysisLibName",(PyCFunction)oaAnalysisOpPoint_getAnalysisLibName,METH_VARARGS,oaAnalysisOpPoint_getAnalysisLibName_doc},
    {"getHeader",(PyCFunction)oaAnalysisOpPoint_getHeader,METH_VARARGS,oaAnalysisOpPoint_getHeader_doc},
    {"getOpPoint",(PyCFunction)oaAnalysisOpPoint_getOpPoint,METH_VARARGS,oaAnalysisOpPoint_getOpPoint_doc},
    {"getOpPointName",(PyCFunction)oaAnalysisOpPoint_getOpPointName,METH_VARARGS,oaAnalysisOpPoint_getOpPointName_doc},
    {"isBound",(PyCFunction)oaAnalysisOpPoint_isBound,METH_VARARGS,oaAnalysisOpPoint_isBound_doc},
    {"isNull",(PyCFunction)oaAnalysisOpPoint_tp_isNull,METH_VARARGS,oaAnalysisOpPoint_isNull_doc},
    {"assign",(PyCFunction)oaAnalysisOpPoint_tp_assign,METH_VARARGS,oaAnalysisOpPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAnalysisOpPoint_doc[] = 
"Class: oaAnalysisOpPoint\n"
"  The oaAnalysisOpPoint class implements an object within an oaDesign that corresponds to a oaOpPoint object within an oaTech .\n"
"  The oaAnalysisOpPoint class can be observed by deriving from\n"
"Constructors:\n"
"  Paramegers: (oaAnalysisOpPoint)\n"
"    Calls: (const oaAnalysisOpPoint&)\n"
"    Signature: oaAnalysisOpPoint||cref-oaAnalysisOpPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaAnalysisOpPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAnalysisOpPoint",
    sizeof(PyoaAnalysisOpPointObject),
    0,
    (destructor)oaAnalysisOpPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaAnalysisOpPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaAnalysisOpPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAnalysisOpPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaAnalysisOpPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaDesignObject_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaAnalysisOpPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAnalysisOpPoint_static_create_doc[] = 
"Class: oaAnalysisOpPoint, Function: create\n"
"  Paramegers: (oaAnalysisPoint,oaOpPoint)\n"
"    Calls: oaAnalysisOpPoint* create(oaAnalysisPoint* analysisPoint,oaOpPoint* opPoint)\n"
"    Signature: create|ptr-oaAnalysisOpPoint|ptr-oaAnalysisPoint,ptr-oaOpPoint,\n"
"    This function creates a new analysisOpPoint in the same design as analysisPoint to represent a reference to the opPoint operating point.\n"
"    An exception is thrown if the analysisPoint references an opPoint from a technology database that is not included in the graph of referenced technology databases for the technology database currently bound to the design containing the analysisPoint.\n"
"    analysisPoint\n"
"    The analysis point that is to reference the specified operating point\n"
"    opPoint\n"
"    The operating point to be referenced by the specified analysis point\n"
"    oacAnalysisOpPtOpPointNotInSameTech\n"
;

static PyObject*
oaAnalysisOpPoint_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisPoint p1;
    PyParamoaOpPoint p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaOpPoint_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        oaAnalysisOpPointp result= (oaAnalysisOpPoint::create(p1.Data(),p2.Data()));
        return PyoaAnalysisOpPoint_FromoaAnalysisOpPoint(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaAnalysisOpPoint_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaAnalysisOpPoint_static_create,METH_VARARGS,oaAnalysisOpPoint_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaAnalysisOpPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAnalysisOpPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaAnalysisOpPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaAnalysisOpPoint",
           (PyObject*)(&PyoaAnalysisOpPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAnalysisOpPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaAnalysisOpPoint_Type.tp_dict;
    for(method=oaAnalysisOpPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAnalysisOpPointModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaAnalysisOpPointModTypeEnum_Convert(PyObject* ob,PyParamoaAnalysisOpPointModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaAnalysisOpPointModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAnalysisOpPointModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaAnalysisOpPointModTypeEnum_FromoaAnalysisOpPointModTypeEnum(oaAnalysisOpPointModTypeEnum ob)
{

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaAnalysisOpPointModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaAnalysisOpPointModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaAnalysisOpPointModTypeEnum_FromoaAnalysisOpPointModTypeEnum(oaAnalysisOpPointModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaAnalysisOpPointModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaAnalysisOpPointModTypeEnum_doc[] =
"Type convert function for enum: oaAnalysisOpPointModTypeEnum";
                               
static PyMethodDef PyoaAnalysisOpPointModTypeEnum_method =
  {"oaAnalysisOpPointModTypeEnum",(PyCFunction)PyoaAnalysisOpPointModTypeEnum_TypeFunction,METH_VARARGS,oaAnalysisOpPointModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaAnalysisOpPointModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaAnalysisOpPointModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaAnalysisOpPointModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaAnalysisOpPointModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAnalysisPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAnalysisPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAnalysisPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaAnalysisPointObject* self = (PyoaAnalysisPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaAnalysisPoint)
    {
        PyParamoaAnalysisPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaAnalysisPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAnalysisPoint, Choices are:\n"
        "    (oaAnalysisPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAnalysisPoint_tp_dealloc(PyoaAnalysisPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaAnalysisPoint_tp_repr(PyObject *ob)
{
    PyParamoaAnalysisPoint value;
    int convert_status=PyoaAnalysisPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[37];
    sprintf(buffer,"<oaAnalysisPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaAnalysisPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAnalysisPoint v1;
    PyParamoaAnalysisPoint v2;
    int convert_status1=PyoaAnalysisPoint_Convert(ob1,&v1);
    int convert_status2=PyoaAnalysisPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaAnalysisPoint_Convert(PyObject* ob,PyParamoaAnalysisPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaAnalysisPoint_Check(ob)) {
        result->SetData( (oaAnalysisPoint**) ((PyoaAnalysisPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAnalysisPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaAnalysisPoint_FromoaAnalysisPoint(oaAnalysisPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaAnalysisPoint* data=*value;
        PyObject* bself = PyoaAnalysisPoint_Type.tp_alloc(&PyoaAnalysisPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaAnalysisPointObject* self = (PyoaAnalysisPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaAnalysisPoint_FromoaAnalysisPoint(oaAnalysisPoint* data)
{
    if (data) {
       PyObject* bself = PyoaAnalysisPoint_Type.tp_alloc(&PyoaAnalysisPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaAnalysisPointObject* self = (PyoaAnalysisPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAnalysisPoint_destroy_doc[] = 
"Class: oaAnalysisPoint, Function: destroy\n"
"  Paramegers: ()\n"
"    Calls: void destroy()\n"
"    Signature: destroy|void-void|\n"
"    BrowseData: 0\n"
"    This function deletes this analysis point.\n"
;

static PyObject*
oaAnalysisPoint_destroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisPoint data;
    int convert_status=PyoaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisPointObject* self=(PyoaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->destroy();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisPoint_getAnalysisOpPoints_doc[] = 
"Class: oaAnalysisPoint, Function: getAnalysisOpPoints\n"
"  Paramegers: ()\n"
"    Calls: oaCollection_oaAnalysisOpPoint_oaAnalysisPoint getAnalysisOpPoints() const\n"
"    Signature: getAnalysisOpPoints|simple-oaCollection_oaAnalysisOpPoint_oaAnalysisPoint|\n"
"    BrowseData: 1\n"
"    This function returns the collection of oaAnalysisOpPoints associated with this oaAnalysisPoint.\n"
;

static PyObject*
oaAnalysisPoint_getAnalysisOpPoints(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisPoint data;
    int convert_status=PyoaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisPointObject* self=(PyoaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaCollection_oaAnalysisOpPoint_oaAnalysisPoint* result= new oaCollection_oaAnalysisOpPoint_oaAnalysisPoint(data.DataCall()->getAnalysisOpPoints());
        return PyoaCollection_oaAnalysisOpPoint_oaAnalysisPoint_FromoaCollection_oaAnalysisOpPoint_oaAnalysisPoint(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisPoint_getAnalysisOpPointsIter_doc[] = 
"Class: oaAnalysisPoint, Function: getAnalysisOpPointsIter\n"
"  Paramegers: ()\n"
"    Calls: oaIter_oaAnalysisOpPoint getAnalysisOpPointsIter() const\n"
"    Signature: getAnalysisOpPointsIter|simple-oaIter_oaAnalysisOpPoint|\n"
"    BrowseData: 1\n"
"    This function returns an Iterator over the following collection: This function returns the collection of oaAnalysisOpPoints associated with this oaAnalysisPoint.\n"
;

static PyObject*
oaAnalysisPoint_getAnalysisOpPointsIter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisPoint data;
    int convert_status=PyoaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisPointObject* self=(PyoaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaIter_oaAnalysisOpPoint* result= new oaIter_oaAnalysisOpPoint(data.DataCall()->getAnalysisOpPoints());
        return PyoaIter_oaAnalysisOpPoint_FromoaIter_oaAnalysisOpPoint(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisPoint_getName_doc[] = 
"Class: oaAnalysisPoint, Function: getName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getName(oaString& name) const\n"
"    Signature: getName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function gets the name of this analysis point.\n"
"    name\n"
"    returned name of this analysis point\n"
;

static PyObject*
oaAnalysisPoint_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisPoint data;
    int convert_status=PyoaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisPointObject* self=(PyoaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisPoint_setName_doc[] = 
"Class: oaAnalysisPoint, Function: setName\n"
"  Paramegers: (oaString)\n"
"    Calls: void setName(const oaString& name)\n"
"    Signature: setName|void-void|cref-oaString,\n"
"    This function sets the name of this analysis point.\n"
"    name\n"
"    input name to set on this analysis point\n"
"    oacAnalysisPointNameExists\n"
;

static PyObject*
oaAnalysisPoint_setName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisPoint data;
    int convert_status=PyoaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAnalysisPointObject* self=(PyoaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisPoint_isNull_doc[] =
"Class: oaAnalysisPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaAnalysisPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaAnalysisPoint data;
    int convert_status=PyoaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaAnalysisPoint_assign_doc[] = 
"Class: oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaAnalysisPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaAnalysisPoint data;
  int convert_status=PyoaAnalysisPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaAnalysisPoint_methodlist[] = {
    {"destroy",(PyCFunction)oaAnalysisPoint_destroy,METH_VARARGS,oaAnalysisPoint_destroy_doc},
    {"getAnalysisOpPoints",(PyCFunction)oaAnalysisPoint_getAnalysisOpPoints,METH_VARARGS,oaAnalysisPoint_getAnalysisOpPoints_doc},
    {"getAnalysisOpPointsIter",(PyCFunction)oaAnalysisPoint_getAnalysisOpPointsIter,METH_VARARGS,oaAnalysisPoint_getAnalysisOpPointsIter_doc},
    {"getName",(PyCFunction)oaAnalysisPoint_getName,METH_VARARGS,oaAnalysisPoint_getName_doc},
    {"setName",(PyCFunction)oaAnalysisPoint_setName,METH_VARARGS,oaAnalysisPoint_setName_doc},
    {"isNull",(PyCFunction)oaAnalysisPoint_tp_isNull,METH_VARARGS,oaAnalysisPoint_isNull_doc},
    {"assign",(PyCFunction)oaAnalysisPoint_tp_assign,METH_VARARGS,oaAnalysisPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAnalysisPoint_doc[] = 
"Class: oaAnalysisPoint\n"
"  The oaAnalysisPoint class represents a set of oaAnalysisOpPoints. Each oaAnalysisOpPoint corresponds to a oaOpPoint used for analysis of some of the instances in the design. Collectively, these oaOpPoints allow a consistent analysis (such as best-case or worst-case) across the whole design.\n"
"  The oaAnalysisPoint class can be observed by deriving from\n"
"Constructors:\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: (const oaAnalysisPoint&)\n"
"    Signature: oaAnalysisPoint||cref-oaAnalysisPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaAnalysisPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAnalysisPoint",
    sizeof(PyoaAnalysisPointObject),
    0,
    (destructor)oaAnalysisPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaAnalysisPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaAnalysisPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAnalysisPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaAnalysisPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaDesignObject_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaAnalysisPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAnalysisPoint_static_create_doc[] = 
"Class: oaAnalysisPoint, Function: create\n"
"  Paramegers: (oaDesign,oaString)\n"
"    Calls: oaAnalysisPoint* create(oaDesign* design,const oaString& name)\n"
"    Signature: create|ptr-oaAnalysisPoint|ptr-oaDesign,cref-oaString,\n"
"    This function creates a new analysisPoint in the specified design with the specified name . The name can be the name of the tool that owns this analysis point.\n"
"    design\n"
"    pointer to design in which to create this oaAnalysisPoint object\n"
"    name\n"
"    name of the analysis point\n"
"    oacAnalysisPointNameExists\n"
;

static PyObject*
oaAnalysisPoint_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDesign p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaAnalysisPointp result= (oaAnalysisPoint::create(p1.Data(),p2.Data()));
        return PyoaAnalysisPoint_FromoaAnalysisPoint(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisPoint_static_find_doc[] = 
"Class: oaAnalysisPoint, Function: find\n"
"  Paramegers: (oaDesign,oaString)\n"
"    Calls: oaAnalysisPoint* find(const oaDesign* design,const oaString& name)\n"
"    Signature: find|ptr-oaAnalysisPoint|cptr-oaDesign,cref-oaString,\n"
"    This function searches in the specified design for an analysis point with the specified name . If the analysis point is found, it is returned. NULL is returned if the analysis point cannot be found.\n"
"    design\n"
"    pointer to design in which to search\n"
"    name\n"
"    name of analysis point to find\n"
;

static PyObject*
oaAnalysisPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaDesign p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaAnalysisPointp result= (oaAnalysisPoint::find(p1.Data(),p2.Data()));
        return PyoaAnalysisPoint_FromoaAnalysisPoint(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaAnalysisPoint_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaAnalysisPoint_static_create,METH_VARARGS,oaAnalysisPoint_static_create_doc},
    {"static_find",(PyCFunction)oaAnalysisPoint_static_find,METH_VARARGS,oaAnalysisPoint_static_find_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaAnalysisPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAnalysisPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaAnalysisPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaAnalysisPoint",
           (PyObject*)(&PyoaAnalysisPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAnalysisPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaAnalysisPoint_Type.tp_dict;
    for(method=oaAnalysisPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


// ==================================================================
// Array for class: oaAnalysisPoint
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAnalysisPoint_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAnalysisPoint_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaAnalysisPoint_ArrayObject* self = (PyoaAnalysisPoint_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaAnalysisPoint_Array) */
    {
        PyParamoaAnalysisPoint_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaAnalysisPoint_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAnalysisPoint_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaAnalysisPoint_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAnalysisPoint_Array_dealloc(PyObject* gself)
{
    PyoaAnalysisPoint_ArrayObject* self = (PyoaAnalysisPoint_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaAnalysisPoint_Array_str(PyObject *ob)
{
    PyParamoaAnalysisPoint_Array value;
    int convert_status=PyoaAnalysisPoint_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaAnalysisPoint_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaAnalysisPoint_Array_repr(PyObject *ob)
{
    PyParamoaAnalysisPoint_Array value;
    int convert_status=PyoaAnalysisPoint_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaAnalysisPoint_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaAnalysisPoint_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAnalysisPoint_Array p1;
    PyParamoaAnalysisPoint_Array p2;
    int s1=PyoaAnalysisPoint_Array_Convert(ob1,&p1);
    int s2=PyoaAnalysisPoint_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaAnalysisPoint_Array_CreateList(p1);
    PyObject* l2=PyoaAnalysisPoint_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaAnalysisPoint_Array_Convert(PyObject* ob,PyParamoaAnalysisPoint_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaAnalysisPoint_Array_Check(ob)) {
    PyoaAnalysisPoint_ArrayObject* self = (PyoaAnalysisPoint_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaAnalysisPoint data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaAnalysisPoint_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaAnalysisPoint data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaAnalysisPoint_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaAnalysisPoint_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaAnalysisPoint_Array_FromoaAnalysisPoint_Array(const oaAnalysisPoint_Array& value)
{
  PyObject* gself = PyoaAnalysisPoint_Array_Type.tp_alloc(&PyoaAnalysisPoint_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaAnalysisPoint_ArrayObject* self = (PyoaAnalysisPoint_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaAnalysisPoint_Array_FromoaAnalysisPoint_Array(PyTypeoaAnalysisPoint* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaAnalysisPoint_Array_Type.tp_alloc(&PyoaAnalysisPoint_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaAnalysisPoint_ArrayObject* self = (PyoaAnalysisPoint_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaAnalysisPoint_Array_CreateList(PyParamoaAnalysisPoint_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaAnalysisPoint_FromoaAnalysisPoint(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaAnalysisPoint_Array_assign_doc[] = 
"Class: oaAnalysisPoint_Array, Function: assign\n"
"  Paramegers: (oaAnalysisPoint_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaAnalysisPoint_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaAnalysisPoint_ArrayObject* self=(PyoaAnalysisPoint_ArrayObject*)ob;
  try {
    PyParamoaAnalysisPoint_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaAnalysisPoint_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaAnalysisPoint_Array_list_doc[] = 
"Class: oaAnalysisPoint_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaAnalysisPoint_Array_list(PyObject* ob, PyObject *args)
{
  PyoaAnalysisPoint_ArrayObject* self=(PyoaAnalysisPoint_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaAnalysisPoint_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaAnalysisPoint_Array_methodlist[] = {
    {"assign",(PyCFunction)oaAnalysisPoint_Array_assign,METH_VARARGS,oaAnalysisPoint_Array_assign_doc},
    {"list",(PyCFunction)oaAnalysisPoint_Array_list,METH_VARARGS,oaAnalysisPoint_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaAnalysisPoint_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaAnalysisPoint_ArrayObject* self=(PyoaAnalysisPoint_ArrayObject*)ob;
  try {
    PyParamoaAnalysisPoint_Array data;
    int convert_status=PyoaAnalysisPoint_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaAnalysisPoint_FromoaAnalysisPoint(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaAnalysisPoint_Array_index_get_length(PyObject* ob)
{
    PyParamoaAnalysisPoint_Array data;
    int convert_status=PyoaAnalysisPoint_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaAnalysisPoint_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaAnalysisPoint_Array data;
    PyParamoaAnalysisPoint dataitem;
    int convert_status=PyoaAnalysisPoint_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaAnalysisPoint_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaAnalysisPoint_Array_doc[] =
"Class: oaAnalysisPoint_Array\n"
"  The oaAnalysisPoint_Array utility class provides an array of oaAnalysisPoint.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaAnalysisPoint_Array()\n"
"    Signature: oaAnalysisPoint_Array||\n"
"    This is the default constructor for the oaAnalysisPoint_Array class. This constructor creates an empty oaAnalysisPoint_Array.\n"
"  Paramegers: (oaAnalysisPoint_Array)\n"
"    Calls: (const oaAnalysisPoint_Array&)\n"
"    Signature: oaAnalysisPoint_Array||cref-oaAnalysisPoint_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaAnalysisPoint_Array_as_sequence = {
    (Pyoa_inquiry)oaAnalysisPoint_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaAnalysisPoint_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaAnalysisPoint_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaAnalysisPoint_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAnalysisPoint_Array",
    sizeof(PyoaAnalysisPoint_ArrayObject),
    0,
    oaAnalysisPoint_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaAnalysisPoint_Array_compare,    /* tp_compare */
    oaAnalysisPoint_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaAnalysisPoint_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaAnalysisPoint_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAnalysisPoint_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaAnalysisPoint_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaAnalysisPoint_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaAnalysisPoint_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAnalysisPoint_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaAnalysisPoint_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaAnalysisPoint_Array",
           (PyObject*)(&PyoaAnalysisPoint_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAnalysisPoint_Array\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAnalysisPointArray
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAnalysisPointArray_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAnalysisPointArray_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaAnalysisPointArrayObject* self = (PyoaAnalysisPointArrayObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value = (oaArrayBase_oaAnalysisPoint*)  new oaAnalysisPointArray();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            self->value = (oaArrayBase_oaAnalysisPoint*)  new oaAnalysisPointArray(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaAnalysisPointArray)
    {
        PyParamoaAnalysisPointArray p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaAnalysisPointArray_Convert,&p1)) {
            self->value=(oaArrayBase_oaAnalysisPoint*)  new oaAnalysisPointArray(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAnalysisPointArray, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaAnalysisPointArray)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAnalysisPointArray_tp_dealloc(PyoaAnalysisPointArrayObject* self)
{
    if (!self->borrow) {
        delete (oaAnalysisPointArray*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaAnalysisPointArray_tp_repr(PyObject *ob)
{
    PyParamoaAnalysisPointArray value;
    int convert_status=PyoaAnalysisPointArray_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaAnalysisPointArray::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaAnalysisPointArray_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAnalysisPointArray v1;
    PyParamoaAnalysisPointArray v2;
    int convert_status1=PyoaAnalysisPointArray_Convert(ob1,&v1);
    int convert_status2=PyoaAnalysisPointArray_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaAnalysisPointArray_Convert(PyObject* ob,PyParamoaAnalysisPointArray* result)
{
    if (ob == NULL) return 1;
    if (PyoaAnalysisPointArray_Check(ob)) {
        result->SetData( (oaAnalysisPointArray*) ((PyoaAnalysisPointArrayObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAnalysisPointArray Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaAnalysisPointArray_FromoaAnalysisPointArray(oaAnalysisPointArray* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaAnalysisPointArray_Type.tp_alloc(&PyoaAnalysisPointArray_Type,0);
        if (bself == NULL) return bself;
        PyoaAnalysisPointArrayObject* self = (PyoaAnalysisPointArrayObject*)bself;
        self->value = (oaArrayBase_oaAnalysisPoint*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAnalysisPointArray_doc[] = 
"Class: oaAnalysisPointArray\n"
"  The oaAnalysisPointArray class implements a utility array class used to pass an array of oaAnalysisPoint class pointers to oaParasiticNetwork::create() .\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaAnalysisPointArray()\n"
"    Signature: oaAnalysisPointArray||simple-oaUInt4,\n"
"    This function constructs an oaAnalysisPointArray object, allocating storage for sizeIn oaAnalysisPoint elements.\n"
"    sizeIn\n"
"    number of values for which to allocate storage; the default number is 0.\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaAnalysisPointArray(oaUInt4 sizeIn)\n"
"    Signature: oaAnalysisPointArray||simple-oaUInt4,\n"
"    This function constructs an oaAnalysisPointArray object, allocating storage for sizeIn oaAnalysisPoint elements.\n"
"    sizeIn\n"
"    number of values for which to allocate storage; the default number is 0.\n"
"  Paramegers: (oaAnalysisPointArray)\n"
"    Calls: (const oaAnalysisPointArray&)\n"
"    Signature: oaAnalysisPointArray||cref-oaAnalysisPointArray,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaAnalysisPointArray_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAnalysisPointArray",
    sizeof(PyoaAnalysisPointArrayObject),
    0,
    (destructor)oaAnalysisPointArray_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaAnalysisPointArray_tp_compare,	/* tp_compare */
    (reprfunc)oaAnalysisPointArray_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAnalysisPointArray_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    0,					/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaArray_oaAnalysisPoint_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaAnalysisPointArray_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaAnalysisPointArray_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAnalysisPointArray_Type)<0) {
      printf("** PyType_Ready failed for: oaAnalysisPointArray\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaAnalysisPointArray",
           (PyObject*)(&PyoaAnalysisPointArray_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAnalysisPointArray\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAnalysisPointModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaAnalysisPointModTypeEnum_Convert(PyObject* ob,PyParamoaAnalysisPointModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacSetNameAnalysisPointModType")==0) { result->SetData(oacSetNameAnalysisPointModType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaAnalysisPointModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAnalysisPointModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaAnalysisPointModTypeEnum_FromoaAnalysisPointModTypeEnum(oaAnalysisPointModTypeEnum ob)
{
    if (ob==oacSetNameAnalysisPointModType) return PyString_FromString("oacSetNameAnalysisPointModType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaAnalysisPointModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaAnalysisPointModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaAnalysisPointModTypeEnum_FromoaAnalysisPointModTypeEnum(oaAnalysisPointModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaAnalysisPointModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaAnalysisPointModTypeEnum_doc[] =
"Type convert function for enum: oaAnalysisPointModTypeEnum";
                               
static PyMethodDef PyoaAnalysisPointModTypeEnum_method =
  {"oaAnalysisPointModTypeEnum",(PyCFunction)PyoaAnalysisPointModTypeEnum_TypeFunction,METH_VARARGS,oaAnalysisPointModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaAnalysisPointModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacSetNameAnalysisPointModType");
    PyDict_SetItemString(mod_dict,"oacSetNameAnalysisPointModType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaAnalysisPointModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaAnalysisPointModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaAnalysisPointModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAntennaArea
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAntennaArea_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAntennaArea_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaAntennaAreaObject* self = (PyoaAntennaAreaObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oaAntennaArea();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt8)
    {
        PyParamoaUInt8 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt8_Convert,&p1)) {
            self->value =  new oaAntennaArea(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt8,oaLayerNum)
    {
        PyParamoaUInt8 p1;
        PyParamoaLayerNum p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt8_Convert,&p1,
              &PyoaLayerNum_Convert,&p2)) {
            self->value =  new oaAntennaArea(p1.Data(),p2.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaAntennaArea)
    {
        PyParamoaAntennaArea p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaAntennaArea_Convert,&p1)) {
            self->value= new oaAntennaArea(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAntennaArea, Choices are:\n"
        "    ()\n"
        "    (oaUInt8)\n"
        "    (oaUInt8,oaLayerNum)\n"
        "    (oaAntennaArea)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAntennaArea_tp_dealloc(PyoaAntennaAreaObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaAntennaArea_tp_repr(PyObject *ob)
{
    PyParamoaAntennaArea value;
    int convert_status=PyoaAntennaArea_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[35];
    sprintf(buffer,"<oaAntennaArea::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaAntennaArea_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAntennaArea v1;
    PyParamoaAntennaArea v2;
    int convert_status1=PyoaAntennaArea_Convert(ob1,&v1);
    int convert_status2=PyoaAntennaArea_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    if (v1.Data()==v2.Data()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaAntennaArea_Convert(PyObject* ob,PyParamoaAntennaArea* result)
{
    if (ob == NULL) return 1;
    if (PyoaAntennaArea_Check(ob)) {
        result->SetData(  ((PyoaAntennaAreaObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAntennaArea Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaAntennaArea_FromoaAntennaArea(oaAntennaArea* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaAntennaArea_Type.tp_alloc(&PyoaAntennaArea_Type,0);
        if (bself == NULL) return bself;
        PyoaAntennaAreaObject* self = (PyoaAntennaAreaObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaAntennaArea_FromoaAntennaArea(const oaAntennaArea& data)
{
    PyObject* bself = PyoaAntennaArea_Type.tp_alloc(&PyoaAntennaArea_Type,0);
    if (bself == NULL) return bself;
    PyoaAntennaAreaObject* self = (PyoaAntennaAreaObject*)bself;
    self->value =  new oaAntennaArea(data);
    self->borrow = 0;
    self->locks = NULL;
    return bself;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAntennaArea_area_doc[] = 
"Class: oaAntennaArea, Function: area\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8& area()\n"
"    Signature: area|ref-oaUInt8|\n"
"    BrowseData: 1\n"
"    This non-const version of the area() function, which returns a reference to the area value, allows users to set the area value on this oaAntennaArea object.\n"
;

static PyObject*
oaAntennaArea_area(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaArea data;
    int convert_status=PyoaAntennaArea_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaAreaObject* self=(PyoaAntennaAreaObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8* result=&(data.DataCall()->area());
        return PyoaUInt8_FromoaUInt8(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaArea_layerNum_doc[] = 
"Class: oaAntennaArea, Function: layerNum\n"
"  Paramegers: ()\n"
"    Calls: oaLayerNum& layerNum()\n"
"    Signature: layerNum|ref-oaLayerNum|\n"
"    BrowseData: 1\n"
"    This non-const version of the layerNum() function, which returns a reference to its oaLayerNum, allows users to set the oaLayerNum on this oaAntennaArea object.\n"
;

static PyObject*
oaAntennaArea_layerNum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaArea data;
    int convert_status=PyoaAntennaArea_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaAreaObject* self=(PyoaAntennaAreaObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaLayerNum* result=&(data.DataCall()->layerNum());
        return PyoaLayerNum_FromoaLayerNum(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaAntennaArea_assign_doc[] = 
"Class: oaAntennaArea, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaAntennaArea_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaAntennaArea data;
  int convert_status=PyoaAntennaArea_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaAntennaArea p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaAntennaArea_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaAntennaArea_methodlist[] = {
    {"area",(PyCFunction)oaAntennaArea_area,METH_VARARGS,oaAntennaArea_area_doc},
    {"layerNum",(PyCFunction)oaAntennaArea_layerNum,METH_VARARGS,oaAntennaArea_layerNum_doc},
    {"assign",(PyCFunction)oaAntennaArea_tp_assign,METH_VARARGS,oaAntennaArea_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAntennaArea_doc[] = 
"Class: oaAntennaArea\n"
"  The oaAntennaArea class implements an object for holding antennaArea data. This data includes an area value in square database units and an optional layer number. If the layer number is oacNullIndex, the area is interpreted as applying to all layers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaArea()\n"
"    Signature: oaAntennaArea||simple-oaUInt8,simple-oaLayerNum,\n"
"    This is the constructor for an oaAntennaArea object.\n"
"    areaIn\n"
"    optional area value; the default value is 0.\n"
"    layerNumIn\n"
"    optional layer number; the default is oacAnyLayerNum , which signifies that the area applies to all layers\n"
"  Paramegers: (oaUInt8)\n"
"    Calls: oaAntennaArea(oaUInt8 areaIn)\n"
"    Signature: oaAntennaArea||simple-oaUInt8,simple-oaLayerNum,\n"
"    This is the constructor for an oaAntennaArea object.\n"
"    areaIn\n"
"    optional area value; the default value is 0.\n"
"    layerNumIn\n"
"    optional layer number; the default is oacAnyLayerNum , which signifies that the area applies to all layers\n"
"  Paramegers: (oaUInt8,oaLayerNum)\n"
"    Calls: oaAntennaArea(oaUInt8 areaIn,oaLayerNum layerNumIn)\n"
"    Signature: oaAntennaArea||simple-oaUInt8,simple-oaLayerNum,\n"
"    This is the constructor for an oaAntennaArea object.\n"
"    areaIn\n"
"    optional area value; the default value is 0.\n"
"    layerNumIn\n"
"    optional layer number; the default is oacAnyLayerNum , which signifies that the area applies to all layers\n"
"  Paramegers: (oaAntennaArea)\n"
"    Calls: (const oaAntennaArea&)\n"
"    Signature: oaAntennaArea||cref-oaAntennaArea,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaAntennaArea_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAntennaArea",
    sizeof(PyoaAntennaAreaObject),
    0,
    (destructor)oaAntennaArea_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaAntennaArea_tp_compare,	/* tp_compare */
    (reprfunc)oaAntennaArea_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAntennaArea_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaAntennaArea_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaAntennaArea_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaAntennaArea_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAntennaArea_Type)<0) {
      printf("** PyType_Ready failed for: oaAntennaArea\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaAntennaArea",
           (PyObject*)(&PyoaAntennaArea_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAntennaArea\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaAntennaArea
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAntennaArea_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAntennaArea_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaAntennaArea_ArrayObject* self = (PyoaAntennaArea_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaAntennaArea_Array) */
    {
        PyParamoaAntennaArea_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaAntennaArea_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAntennaArea_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaAntennaArea_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAntennaArea_Array_dealloc(PyObject* gself)
{
    PyoaAntennaArea_ArrayObject* self = (PyoaAntennaArea_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaAntennaArea_Array_str(PyObject *ob)
{
    PyParamoaAntennaArea_Array value;
    int convert_status=PyoaAntennaArea_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaAntennaArea_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaAntennaArea_Array_repr(PyObject *ob)
{
    PyParamoaAntennaArea_Array value;
    int convert_status=PyoaAntennaArea_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaAntennaArea_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaAntennaArea_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAntennaArea_Array p1;
    PyParamoaAntennaArea_Array p2;
    int s1=PyoaAntennaArea_Array_Convert(ob1,&p1);
    int s2=PyoaAntennaArea_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaAntennaArea_Array_CreateList(p1);
    PyObject* l2=PyoaAntennaArea_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaAntennaArea_Array_Convert(PyObject* ob,PyParamoaAntennaArea_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaAntennaArea_Array_Check(ob)) {
    PyoaAntennaArea_ArrayObject* self = (PyoaAntennaArea_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaAntennaArea data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaAntennaArea_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaAntennaArea data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaAntennaArea_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaAntennaArea_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaAntennaArea_Array_FromoaAntennaArea_Array(const oaAntennaArea_Array& value)
{
  PyObject* gself = PyoaAntennaArea_Array_Type.tp_alloc(&PyoaAntennaArea_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaAntennaArea_ArrayObject* self = (PyoaAntennaArea_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaAntennaArea_Array_FromoaAntennaArea_Array(PyTypeoaAntennaArea* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaAntennaArea_Array_Type.tp_alloc(&PyoaAntennaArea_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaAntennaArea_ArrayObject* self = (PyoaAntennaArea_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaAntennaArea_Array_CreateList(PyParamoaAntennaArea_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaAntennaArea_FromoaAntennaArea(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaAntennaArea_Array_assign_doc[] = 
"Class: oaAntennaArea_Array, Function: assign\n"
"  Paramegers: (oaAntennaArea_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaAntennaArea_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaAntennaArea_ArrayObject* self=(PyoaAntennaArea_ArrayObject*)ob;
  try {
    PyParamoaAntennaArea_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaAntennaArea_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaAntennaArea_Array_list_doc[] = 
"Class: oaAntennaArea_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaAntennaArea_Array_list(PyObject* ob, PyObject *args)
{
  PyoaAntennaArea_ArrayObject* self=(PyoaAntennaArea_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaAntennaArea_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaAntennaArea_Array_methodlist[] = {
    {"assign",(PyCFunction)oaAntennaArea_Array_assign,METH_VARARGS,oaAntennaArea_Array_assign_doc},
    {"list",(PyCFunction)oaAntennaArea_Array_list,METH_VARARGS,oaAntennaArea_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaAntennaArea_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaAntennaArea_ArrayObject* self=(PyoaAntennaArea_ArrayObject*)ob;
  try {
    PyParamoaAntennaArea_Array data;
    int convert_status=PyoaAntennaArea_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaAntennaArea_FromoaAntennaArea(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaAntennaArea_Array_index_get_length(PyObject* ob)
{
    PyParamoaAntennaArea_Array data;
    int convert_status=PyoaAntennaArea_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaAntennaArea_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaAntennaArea_Array data;
    PyParamoaAntennaArea dataitem;
    int convert_status=PyoaAntennaArea_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaAntennaArea_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaAntennaArea_Array_doc[] =
"Class: oaAntennaArea_Array\n"
"  The oaAntennaArea_Array utility class provides an array of oaAntennaArea.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaArea_Array()\n"
"    Signature: oaAntennaArea_Array||\n"
"    This is the default constructor for the oaAntennaArea_Array class. This constructor creates an empty oaAntennaArea_Array.\n"
"  Paramegers: (oaAntennaArea_Array)\n"
"    Calls: (const oaAntennaArea_Array&)\n"
"    Signature: oaAntennaArea_Array||cref-oaAntennaArea_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaAntennaArea_Array_as_sequence = {
    (Pyoa_inquiry)oaAntennaArea_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaAntennaArea_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaAntennaArea_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaAntennaArea_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAntennaArea_Array",
    sizeof(PyoaAntennaArea_ArrayObject),
    0,
    oaAntennaArea_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaAntennaArea_Array_compare,    /* tp_compare */
    oaAntennaArea_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaAntennaArea_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaAntennaArea_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAntennaArea_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaAntennaArea_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaAntennaArea_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaAntennaArea_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAntennaArea_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaAntennaArea_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaAntennaArea_Array",
           (PyObject*)(&PyoaAntennaArea_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAntennaArea_Array\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAntennaAreaArray
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAntennaAreaArray_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAntennaAreaArray_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaAntennaAreaArrayObject* self = (PyoaAntennaAreaArrayObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value = (oaArrayBase_oaAntennaArea*)  new oaAntennaAreaArray();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            self->value = (oaArrayBase_oaAntennaArea*)  new oaAntennaAreaArray(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaAntennaAreaArray)
    {
        PyParamoaAntennaAreaArray p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaAntennaAreaArray_Convert,&p1)) {
            self->value = (oaArrayBase_oaAntennaArea*)  new oaAntennaAreaArray(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAntennaAreaArray, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaAntennaAreaArray)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAntennaAreaArray_tp_dealloc(PyoaAntennaAreaArrayObject* self)
{
    if (!self->borrow) {
        delete (oaAntennaAreaArray*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaAntennaAreaArray_tp_repr(PyObject *ob)
{
    PyParamoaAntennaAreaArray value;
    int convert_status=PyoaAntennaAreaArray_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaAntennaAreaArray::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaAntennaAreaArray_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAntennaAreaArray v1;
    PyParamoaAntennaAreaArray v2;
    int convert_status1=PyoaAntennaAreaArray_Convert(ob1,&v1);
    int convert_status2=PyoaAntennaAreaArray_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaAntennaAreaArray_Convert(PyObject* ob,PyParamoaAntennaAreaArray* result)
{
    if (ob == NULL) return 1;
    if (PyoaAntennaAreaArray_Check(ob)) {
        result->SetData( (oaAntennaAreaArray*) ((PyoaAntennaAreaArrayObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAntennaAreaArray Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaAntennaAreaArray_FromoaAntennaAreaArray(oaAntennaAreaArray* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaAntennaAreaArray_Type.tp_alloc(&PyoaAntennaAreaArray_Type,0);
        if (bself == NULL) return bself;
        PyoaAntennaAreaArrayObject* self = (PyoaAntennaAreaArrayObject*)bself;
        self->value = (oaArrayBase_oaAntennaArea*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAntennaAreaArray_compress_doc[] = 
"Class: oaAntennaAreaArray, Function: compress\n"
"  Paramegers: ()\n"
"    Calls: void compress()\n"
"    Signature: compress|void-void|\n"
"    BrowseData: 0\n"
"    This function removes duplicate area values that have specified for the same layer in this antennaAreaArray. The compression keeps the latest area value in the array for any given layer. The size of the array is not changed.\n"
;

static PyObject*
oaAntennaAreaArray_compress(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaAreaArray data;
    int convert_status=PyoaAntennaAreaArray_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaAreaArrayObject* self=(PyoaAntennaAreaArrayObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->compress();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaAreaArray_sort_doc[] = 
"Class: oaAntennaAreaArray, Function: sort\n"
"  Paramegers: ()\n"
"    Calls: void sort()\n"
"    Signature: sort|void-void|\n"
"    BrowseData: 0\n"
"    This function sorts the data in this oaAntennaAreaArray object so the layer number values are ascending. Any oaAntennaArea values with no layer number specified (such as those where the value is oacNullIndex) appear first in the array.\n"
;

static PyObject*
oaAntennaAreaArray_sort(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaAreaArray data;
    int convert_status=PyoaAntennaAreaArray_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaAreaArrayObject* self=(PyoaAntennaAreaArrayObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->sort();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaAntennaAreaArray_assign_doc[] = 
"Class: oaAntennaAreaArray, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaAntennaAreaArray_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaAntennaAreaArray data;
  int convert_status=PyoaAntennaAreaArray_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaAntennaAreaArray p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaAntennaAreaArray_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaAntennaAreaArray_methodlist[] = {
    {"compress",(PyCFunction)oaAntennaAreaArray_compress,METH_VARARGS,oaAntennaAreaArray_compress_doc},
    {"sort",(PyCFunction)oaAntennaAreaArray_sort,METH_VARARGS,oaAntennaAreaArray_sort_doc},
    {"assign",(PyCFunction)oaAntennaAreaArray_tp_assign,METH_VARARGS,oaAntennaAreaArray_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAntennaAreaArray_doc[] = 
"Class: oaAntennaAreaArray\n"
"  The oaAntennaAreaArray class implements an array of oaAntennaArea values. The allocated size of the oaAntennaAreaArray can be different from the number of values actually stored. This is useful when the oaAntennaAreaArray is used repeatedly since it reduces the need to reallocate the array.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaAreaArray()\n"
"    Signature: oaAntennaAreaArray||simple-oaUInt4,\n"
"    This function constructs an oaAntennaAreaArray object, allocating storage for sizeIn oaAntennaArea elements.\n"
"    sizeIn\n"
"    number of values for which to allocate storage; the default number is 0.\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaAntennaAreaArray(oaUInt4 sizeIn)\n"
"    Signature: oaAntennaAreaArray||simple-oaUInt4,\n"
"    This function constructs an oaAntennaAreaArray object, allocating storage for sizeIn oaAntennaArea elements.\n"
"    sizeIn\n"
"    number of values for which to allocate storage; the default number is 0.\n"
"  Paramegers: (oaAntennaAreaArray)\n"
"    Calls: oaAntennaAreaArray(const oaAntennaAreaArray& aIn)\n"
"    Signature: oaAntennaAreaArray||cref-oaAntennaAreaArray,\n"
"    This is the oaAntennaAreaArray copy constructor, which creates a copy of the specified aIn oaAntennaAreaArray.\n"
"    aIn\n"
"    oaAntennaAreaArray to copy\n"
"  Paramegers: (oaAntennaAreaArray)\n"
"    Calls: (const oaAntennaAreaArray&)\n"
"    Signature: oaAntennaAreaArray||cref-oaAntennaAreaArray,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaAntennaAreaArray_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAntennaAreaArray",
    sizeof(PyoaAntennaAreaArrayObject),
    0,
    (destructor)oaAntennaAreaArray_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaAntennaAreaArray_tp_compare,	/* tp_compare */
    (reprfunc)oaAntennaAreaArray_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAntennaAreaArray_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaAntennaAreaArray_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaArray_oaAntennaArea_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaAntennaAreaArray_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaAntennaAreaArray_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAntennaAreaArray_Type)<0) {
      printf("** PyType_Ready failed for: oaAntennaAreaArray\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaAntennaAreaArray",
           (PyObject*)(&PyoaAntennaAreaArray_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAntennaAreaArray\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAntennaData
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAntennaData_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAntennaData_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaAntennaDataObject* self = (PyoaAntennaDataObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oaAntennaData();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaAntennaModel)
    {
        PyParamoaAntennaModel p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaAntennaModel_Convert,&p1)) {
            self->value =  new oaAntennaData(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaAntennaData)
    {
        PyParamoaAntennaData p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaAntennaData_Convert,&p1)) {
            self->value =  new oaAntennaData(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAntennaData, Choices are:\n"
        "    ()\n"
        "    (oaAntennaModel)\n"
        "    (oaAntennaData)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAntennaData_tp_dealloc(PyoaAntennaDataObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaAntennaData_tp_repr(PyObject *ob)
{
    PyParamoaAntennaData value;
    int convert_status=PyoaAntennaData_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[35];
    sprintf(buffer,"<oaAntennaData::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaAntennaData_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAntennaData v1;
    PyParamoaAntennaData v2;
    int convert_status1=PyoaAntennaData_Convert(ob1,&v1);
    int convert_status2=PyoaAntennaData_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaAntennaData_Convert(PyObject* ob,PyParamoaAntennaData* result)
{
    if (ob == NULL) return 1;
    if (PyoaAntennaData_Check(ob)) {
        result->SetData(  ((PyoaAntennaDataObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAntennaData Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaAntennaData_FromoaAntennaData(oaAntennaData* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaAntennaData_Type.tp_alloc(&PyoaAntennaData_Type,0);
        if (bself == NULL) return bself;
        PyoaAntennaDataObject* self = (PyoaAntennaDataObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAntennaData_diff_doc[] = 
"Class: oaAntennaData, Function: diff\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaAreaArray& diff()\n"
"    Signature: diff|ref-oaAntennaAreaArray|\n"
"    BrowseData: 1\n"
"    This non-const version of the diff() function, which returns a reference to its oaAntennaAreaArray of diffusion values, allows users to set the oaAntennaAreaArray of diffusion values on this oaAntennaData object.\n"
;

static PyObject*
oaAntennaData_diff(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaData data;
    int convert_status=PyoaAntennaData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaDataObject* self=(PyoaAntennaDataObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAntennaAreaArray* result=&(data.DataCall()->diff());
        return PyoaAntennaAreaArray_FromoaAntennaAreaArray(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaData_gate_doc[] = 
"Class: oaAntennaData, Function: gate\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaAreaArray& gate()\n"
"    Signature: gate|ref-oaAntennaAreaArray|\n"
"    BrowseData: 1\n"
"    This non-const version of the gate() function, which returns a reference to its oaAntennaAreaArray of gate values, allows users to set the oaAntennaAreaArray of gate values on this oaAntennaData object.\n"
;

static PyObject*
oaAntennaData_gate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaData data;
    int convert_status=PyoaAntennaData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaDataObject* self=(PyoaAntennaDataObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAntennaAreaArray* result=&(data.DataCall()->gate());
        return PyoaAntennaAreaArray_FromoaAntennaAreaArray(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaData_getModel_doc[] = 
"Class: oaAntennaData, Function: getModel\n"
"  Paramegers: ()\n"
"    Calls: const oaAntennaModel& getModel() const\n"
"    Signature: getModel|cref-oaAntennaModel|\n"
"    BrowseData: 1\n"
"    This function gets the oaAntennaModel of this oaAntennaData object by returning a const reference to its oaAntennaModel .\n"
;

static PyObject*
oaAntennaData_getModel(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaData data;
    int convert_status=PyoaAntennaData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaDataObject* self=(PyoaAntennaDataObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAntennaModel* result= new oaAntennaModel(data.DataCall()->getModel());
        return PyoaAntennaModel_FromoaAntennaModel(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaData_maxCAR_doc[] = 
"Class: oaAntennaData, Function: maxCAR\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaAreaArray& maxCAR()\n"
"    Signature: maxCAR|ref-oaAntennaAreaArray|\n"
"    BrowseData: 1\n"
"    This non-const version of the maxCAR() function, which returns a reference to its oaAntennaAreaArray of maximum cumulative area ratio (maxCAR) values, allows users to set the oaAntennaAreaArray of maxCAR values on this oaAntennaData object.\n"
;

static PyObject*
oaAntennaData_maxCAR(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaData data;
    int convert_status=PyoaAntennaData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaDataObject* self=(PyoaAntennaDataObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAntennaAreaArray* result=&(data.DataCall()->maxCAR());
        return PyoaAntennaAreaArray_FromoaAntennaAreaArray(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaData_maxCutCAR_doc[] = 
"Class: oaAntennaData, Function: maxCutCAR\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaAreaArray& maxCutCAR()\n"
"    Signature: maxCutCAR|ref-oaAntennaAreaArray|\n"
"    BrowseData: 1\n"
"    This non-const version of the maxCutCAR() function, which returns a reference to its oaAntennaAreaArray of maximum cut cumulative area ratio (maxCutCAR) values, allows users to set the oaAntennaAreaArray of maxCutCAR values on this oaAntennaData object.\n"
;

static PyObject*
oaAntennaData_maxCutCAR(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaData data;
    int convert_status=PyoaAntennaData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaDataObject* self=(PyoaAntennaDataObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAntennaAreaArray* result=&(data.DataCall()->maxCutCAR());
        return PyoaAntennaAreaArray_FromoaAntennaAreaArray(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaData_maxSideCAR_doc[] = 
"Class: oaAntennaData, Function: maxSideCAR\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaAreaArray& maxSideCAR()\n"
"    Signature: maxSideCAR|ref-oaAntennaAreaArray|\n"
"    BrowseData: 1\n"
"    This non-const version of the maxSideCAR() function, which returns a reference to its oaAntennaAreaArray of maximum side cumulative area ratio (maxSideCAR) values, allows users to set the oaAntennaAreaArray of maxSideCAR values on this oaAntennaData object.\n"
;

static PyObject*
oaAntennaData_maxSideCAR(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaData data;
    int convert_status=PyoaAntennaData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaDataObject* self=(PyoaAntennaDataObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAntennaAreaArray* result=&(data.DataCall()->maxSideCAR());
        return PyoaAntennaAreaArray_FromoaAntennaAreaArray(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaData_partialCut_doc[] = 
"Class: oaAntennaData, Function: partialCut\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaAreaArray& partialCut()\n"
"    Signature: partialCut|ref-oaAntennaAreaArray|\n"
"    BrowseData: 1\n"
"    This non-const version of the partialCut() function, which returns a reference to its oaAntennaAreaArray of partial cut values, allows users to set the oaAntennaAreaArray of partial cut values on this oaAntennaData object.\n"
;

static PyObject*
oaAntennaData_partialCut(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaData data;
    int convert_status=PyoaAntennaData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaDataObject* self=(PyoaAntennaDataObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAntennaAreaArray* result=&(data.DataCall()->partialCut());
        return PyoaAntennaAreaArray_FromoaAntennaAreaArray(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaData_partialMetal_doc[] = 
"Class: oaAntennaData, Function: partialMetal\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaAreaArray& partialMetal()\n"
"    Signature: partialMetal|ref-oaAntennaAreaArray|\n"
"    BrowseData: 1\n"
"    This non-const version of the partialMetal() function, which returns a reference to its oaAntennaAreaArray of partial metal values, allows users to set the oaAntennaAreaArray of partial metal values on this oaAntennaData object.\n"
;

static PyObject*
oaAntennaData_partialMetal(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaData data;
    int convert_status=PyoaAntennaData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaDataObject* self=(PyoaAntennaDataObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAntennaAreaArray* result=&(data.DataCall()->partialMetal());
        return PyoaAntennaAreaArray_FromoaAntennaAreaArray(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaData_partialMetalSide_doc[] = 
"Class: oaAntennaData, Function: partialMetalSide\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaAreaArray& partialMetalSide()\n"
"    Signature: partialMetalSide|ref-oaAntennaAreaArray|\n"
"    BrowseData: 1\n"
"    This non-const version of the partialMetalSide() function, which returns a reference to its oaAntennaAreaArray of partial metal side values, allows users to set the oaAntennaAreaArray of partial metal side values on this oaAntennaData object.\n"
;

static PyObject*
oaAntennaData_partialMetalSide(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaData data;
    int convert_status=PyoaAntennaData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaDataObject* self=(PyoaAntennaDataObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAntennaAreaArray* result=&(data.DataCall()->partialMetalSide());
        return PyoaAntennaAreaArray_FromoaAntennaAreaArray(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaData_setModel_doc[] = 
"Class: oaAntennaData, Function: setModel\n"
"  Paramegers: (oaAntennaModel)\n"
"    Calls: void setModel(const oaAntennaModel& modelIn)\n"
"    Signature: setModel|void-void|cref-oaAntennaModel,\n"
"    This function sets the antennaModel for this oaAntennaData object.\n"
"    modelIn\n"
"    oaAntennaModel to set on this oaAntennaData object\n"
;

static PyObject*
oaAntennaData_setModel(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaData data;
    int convert_status=PyoaAntennaData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaDataObject* self=(PyoaAntennaDataObject*)ob;

    PyParamoaAntennaModel p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAntennaModel_Convert,&p1)) {
        data.DataCall()->setModel(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaAntennaData_assign_doc[] = 
"Class: oaAntennaData, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaAntennaData_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaAntennaData data;
  int convert_status=PyoaAntennaData_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaAntennaData p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaAntennaData_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaAntennaData_methodlist[] = {
    {"diff",(PyCFunction)oaAntennaData_diff,METH_VARARGS,oaAntennaData_diff_doc},
    {"gate",(PyCFunction)oaAntennaData_gate,METH_VARARGS,oaAntennaData_gate_doc},
    {"getModel",(PyCFunction)oaAntennaData_getModel,METH_VARARGS,oaAntennaData_getModel_doc},
    {"maxCAR",(PyCFunction)oaAntennaData_maxCAR,METH_VARARGS,oaAntennaData_maxCAR_doc},
    {"maxCutCAR",(PyCFunction)oaAntennaData_maxCutCAR,METH_VARARGS,oaAntennaData_maxCutCAR_doc},
    {"maxSideCAR",(PyCFunction)oaAntennaData_maxSideCAR,METH_VARARGS,oaAntennaData_maxSideCAR_doc},
    {"partialCut",(PyCFunction)oaAntennaData_partialCut,METH_VARARGS,oaAntennaData_partialCut_doc},
    {"partialMetal",(PyCFunction)oaAntennaData_partialMetal,METH_VARARGS,oaAntennaData_partialMetal_doc},
    {"partialMetalSide",(PyCFunction)oaAntennaData_partialMetalSide,METH_VARARGS,oaAntennaData_partialMetalSide_doc},
    {"setModel",(PyCFunction)oaAntennaData_setModel,METH_VARARGS,oaAntennaData_setModel_doc},
    {"assign",(PyCFunction)oaAntennaData_tp_assign,METH_VARARGS,oaAntennaData_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAntennaData_doc[] = 
"Class: oaAntennaData\n"
"  The oaAntennaData class implements on object for holding antenna data for a particular antennaModel.\n"
"  The oaAntennaData class implements an object for holding oaAntennaData for a particular antenna process model.\n"
"  Antenna data consists of a set of oaAntennaAreaArrays for gate area, diffusion area, partial metal area, partial metal side area, partial cut area, maximum cumulative area ratio (CAR), maximum side CAR, and maximum cut CAR.\n"
"  Antenna data can be associated with terminals in the database (refer to oaTerm ). The antenna data associated with a terminal is the partial results for a given wire that can be used to determine if it is following the antenna rules specified in the technology data (see oaAntennaRule).\n"
"  The antenna data on terminals are passed up the hierarchy as wires are constructed hierarchically, so the routing on the next level of hierarchy can be adjusted if the wire is violating the antenna rule.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaData()\n"
"    Signature: oaAntennaData||cref-oaAntennaModel,\n"
"    This function constructs an oaAntennaData object, initializing it with the specified modelIn antennaModel.\n"
"    modelIn\n"
"    an optional oaAntennaModel wrapper object for an enumerated process model value; if not specified, a default oacDefaultAntennaModel value is used.\n"
"  Paramegers: (oaAntennaModel)\n"
"    Calls: oaAntennaData(const oaAntennaModel& processIn)\n"
"    Signature: oaAntennaData||cref-oaAntennaModel,\n"
"    This function constructs an oaAntennaData object, initializing it with the specified modelIn antennaModel.\n"
"    modelIn\n"
"    an optional oaAntennaModel wrapper object for an enumerated process model value; if not specified, a default oacDefaultAntennaModel value is used.\n"
"  Paramegers: (oaAntennaData)\n"
"    Calls: oaAntennaData(const oaAntennaData& dataIn)\n"
"    Signature: oaAntennaData||cref-oaAntennaData,\n"
"    This is the copy constructor for an oaAntennaData object. It constructs a a copy of the specified dataIn oaAntennaData object.\n"
"    dataIn\n"
"    the oaAntennaData object to copy\n"
"  Paramegers: (oaAntennaData)\n"
"    Calls: (const oaAntennaData&)\n"
"    Signature: oaAntennaData||cref-oaAntennaData,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaAntennaData_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAntennaData",
    sizeof(PyoaAntennaDataObject),
    0,
    (destructor)oaAntennaData_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaAntennaData_tp_compare,	/* tp_compare */
    (reprfunc)oaAntennaData_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAntennaData_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaAntennaData_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaAntennaData_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaAntennaData_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAntennaData_Type)<0) {
      printf("** PyType_Ready failed for: oaAntennaData\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaAntennaData",
           (PyObject*)(&PyoaAntennaData_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAntennaData\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaAntennaModel
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaAntennaModel_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaAntennaModel_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaAntennaModelObject* self = (PyoaAntennaModelObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaAntennaModelEnum)
    {
        PyParamoaAntennaModelEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaAntennaModelEnum_Convert,&p1)) {
            self->value =  new oaAntennaModel(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaAntennaModel(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaAntennaModel)
    {
        PyParamoaAntennaModel p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaAntennaModel_Convert,&p1)) {
            self->value= new oaAntennaModel(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaAntennaModel, Choices are:\n"
        "    (oaAntennaModelEnum)\n"
        "    (oaString)\n"
        "    (oaAntennaModel)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaAntennaModel_tp_dealloc(PyoaAntennaModelObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaAntennaModel_tp_repr(PyObject *ob)
{
    PyParamoaAntennaModel value;
    int convert_status=PyoaAntennaModel_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[36];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaAntennaModel::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaAntennaModel_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaAntennaModel v1;
    PyParamoaAntennaModel v2;
    int convert_status1=PyoaAntennaModel_Convert(ob1,&v1);
    int convert_status2=PyoaAntennaModel_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaAntennaModel_Convert(PyObject* ob,PyParamoaAntennaModel* result)
{
    if (ob == NULL) return 1;
    if (PyoaAntennaModel_Check(ob)) {
        result->SetData(  ((PyoaAntennaModelObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaAntennaModel Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaAntennaModel_FromoaAntennaModel(oaAntennaModel* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaAntennaModel_Type.tp_alloc(&PyoaAntennaModel_Type,0);
        if (bself == NULL) return bself;
        PyoaAntennaModelObject* self = (PyoaAntennaModelObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAntennaModel_getName_doc[] = 
"Class: oaAntennaModel, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaAntennaModelEnum object.\n"
;

static PyObject*
oaAntennaModel_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaModel data;
    int convert_status=PyoaAntennaModel_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaModelObject* self=(PyoaAntennaModelObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaAntennaModel_oaAntennaModelEnum_doc[] = 
"Class: oaAntennaModel, Function: oaAntennaModelEnum\n"
"  Paramegers: ()\n"
"    Calls: oaAntennaModelEnum oaAntennaModelEnum() const\n"
"    Signature: operator oaAntennaModelEnum|simple-oaAntennaModelEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaAntennaModel object into the corresponding #oaAntennaModelEnum value.\n"
;

static PyObject*
oaAntennaModel_oaAntennaModelEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAntennaModel data;
    int convert_status=PyoaAntennaModel_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaAntennaModelObject* self=(PyoaAntennaModelObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaAntennaModelEnum result= (data.DataCall()->operator oaAntennaModelEnum());
        return PyoaAntennaModelEnum_FromoaAntennaModelEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaAntennaModel_assign_doc[] = 
"Class: oaAntennaModel, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaAntennaModel_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaAntennaModel data;
  int convert_status=PyoaAntennaModel_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaAntennaModel p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaAntennaModel_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaAntennaModel_methodlist[] = {
    {"getName",(PyCFunction)oaAntennaModel_getName,METH_VARARGS,oaAntennaModel_getName_doc},
    {"oaAntennaModelEnum",(PyCFunction)oaAntennaModel_oaAntennaModelEnum,METH_VARARGS,oaAntennaModel_oaAntennaModelEnum_doc},
    {"assign",(PyCFunction)oaAntennaModel_tp_assign,METH_VARARGS,oaAntennaModel_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaAntennaModel_doc[] = 
"Class: oaAntennaModel\n"
"  The oaAntennaModel class is an enum wrapper class that identifies which antenna model is being referenced by an oaAntennaData object associated with a terminal. Some technologies have more than one antenna model that reflect different process options for that technology.\n"
"  See Enum Wrappers in the Programmers Guide for a discussion of enum wrappers.\n"
"  oaAntennaModelEnum\n"
"Constructors:\n"
"  Paramegers: (oaAntennaModelEnum)\n"
"    Calls: oaAntennaModel(oaAntennaModelEnum valueIn)\n"
"    Signature: oaAntennaModel||simple-oaAntennaModelEnum,\n"
"    This function constructs an instance of an oaAntennaModel class using the specified #oaAntennaModelEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaAntennaModel(const oaString& name)\n"
"    Signature: oaAntennaModel||cref-oaString,\n"
"    This function constructs an instance of an oaAntennaModel class using the #oaAntennaModelEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaAntennaModelEnum.\n"
"    oacInvalidAntennaModelName\n"
"  Paramegers: (oaAntennaModel)\n"
"    Calls: (const oaAntennaModel&)\n"
"    Signature: oaAntennaModel||cref-oaAntennaModel,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaAntennaModel_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaAntennaModel",
    sizeof(PyoaAntennaModelObject),
    0,
    (destructor)oaAntennaModel_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaAntennaModel_tp_compare,	/* tp_compare */
    (reprfunc)oaAntennaModel_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaAntennaModel_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaAntennaModel_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaAntennaModel_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaAntennaModel_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaAntennaModel_Type)<0) {
      printf("** PyType_Ready failed for: oaAntennaModel\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaAntennaModel",
           (PyObject*)(&PyoaAntennaModel_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaAntennaModel\n");
       return -1;
    }
    return 0;
}

